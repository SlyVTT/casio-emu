
../calc-emu-test/build-cg/myaddin:     file format elf32-sh


Disassembly of section .text:

00300000 <start>:
	return gint_exitcode;
}

GSECTION(".text.entry")
int start(int isappli, int optnum)
{
  300000:	2f 86       	mov.l	r8,@-r15
  300002:	2f e6       	mov.l	r14,@-r15
  300004:	4f 22       	sts.l	pr,@-r15
  300006:	7f f4       	add	#-12,r15
  300008:	6e f3       	mov	r15,r14
  30000a:	61 e3       	mov	r14,r1
  30000c:	71 cc       	add	#-52,r1
  30000e:	11 4e       	mov.l	r4,@(56,r1)
  300010:	61 e3       	mov	r14,r1
  300012:	71 cc       	add	#-52,r1
  300014:	11 5d       	mov.l	r5,@(52,r1)
	int rc;
	while(1) {
		rc = start2(isappli, optnum);
  300016:	68 e3       	mov	r14,r8
  300018:	78 cc       	add	#-52,r8
  30001a:	62 e3       	mov	r14,r2
  30001c:	72 cc       	add	#-52,r2
  30001e:	61 e3       	mov	r14,r1
  300020:	71 cc       	add	#-52,r1
  300022:	55 2d       	mov.l	@(52,r2),r5
  300024:	54 1e       	mov.l	@(56,r1),r4
  300026:	d1 0d       	mov.l	30005c <start+0x5c>,r1	! 300e84 <start2>
  300028:	41 0b       	jsr	@r1
  30002a:	00 09       	nop	
  30002c:	61 03       	mov	r0,r1
  30002e:	18 1f       	mov.l	r1,@(60,r8)
		if(!gint_restart) break;
  300030:	d1 0b       	mov.l	300060 <start+0x60>,r1	! 8101400 <gint_restart>
  300032:	61 12       	mov.l	@r1,r1
  300034:	21 18       	tst	r1,r1
  300036:	89 04       	bt	300042 <start+0x42>
		gint_osmenu_native();
  300038:	d1 0a       	mov.l	300064 <start+0x64>,r1	! 302870 <gint_osmenu_native>
  30003a:	41 0b       	jsr	@r1
  30003c:	00 09       	nop	
		rc = start2(isappli, optnum);
  30003e:	af ea       	bra	300016 <start+0x16>
  300040:	00 09       	nop	
		if(!gint_restart) break;
  300042:	00 09       	nop	
	}
	return rc;
  300044:	61 e3       	mov	r14,r1
  300046:	71 cc       	add	#-52,r1
  300048:	51 1f       	mov.l	@(60,r1),r1
}
  30004a:	60 13       	mov	r1,r0
  30004c:	7e 0c       	add	#12,r14
  30004e:	6f e3       	mov	r14,r15
  300050:	4f 26       	lds.l	@r15+,pr
  300052:	6e f6       	mov.l	@r15+,r14
  300054:	68 f6       	mov.l	@r15+,r8
  300056:	00 0b       	rts	
  300058:	00 09       	nop	
  30005a:	00 09       	nop	
  30005c:	00 30       	.word 0x0030
  30005e:	0e 84       	mov.b	r8,@(r0,r14)
  300060:	08 10       	.word 0x0810
  300062:	14 00       	mov.l	r0,@(0,r4)
  300064:	00 30       	.word 0x0030
  300066:	28 70       	mov.b	r7,@r8

00300068 <bctors>:
  300068:	00 30       	.word 0x0030
  30006a:	b0 8c       	bsr	300186 <GINT_CALL_SET_function+0x16>
  30006c:	00 30       	.word 0x0030
  30006e:	cc cc       	tst.b	#204,@(r0,gbr)

00300070 <bdtors>:
  300070:	4f 22       	sts.l	pr,@-r15
  300072:	4f 13       	stc.l	gbr,@-r15
  300074:	4f 02       	sts.l	mach,@-r15
  300076:	4f 12       	sts.l	macl,@-r15
  300078:	2f 86       	mov.l	r8,@-r15
  30007a:	2f 96       	mov.l	r9,@-r15
  30007c:	d0 18       	mov.l	3000e0 <.gint>,r0	! 81017d0 <gint>
  30007e:	60 02       	mov.l	@r0,r0
  300080:	c8 01       	tst	#1,r0
  300082:	d8 18       	mov.l	3000e4 <.expevt_sh4>,r8	! ff000024
  300084:	89 00       	bt	300088 <catch>
  300086:	d8 18       	mov.l	3000e8 <.expevt_sh3>,r8	! ffffffd4

00300088 <catch>:
  300088:	d0 18       	mov.l	3000ec <.catcher>,r0	! 81015bc <gint_exc_catcher>
  30008a:	60 02       	mov.l	@r0,r0
  30008c:	20 08       	tst	r0,r0
  30008e:	89 0a       	bt	3000a6 <panic>
  300090:	09 02       	stc	sr,r9
  300092:	d1 18       	mov.l	3000f4 <.SR_set_IMASK>,r1	! f0
  300094:	21 9b       	or	r9,r1
  300096:	d2 18       	mov.l	3000f8 <.SR_clear_BL>,r2	! efffffff
  300098:	21 29       	and	r2,r1
  30009a:	41 0e       	ldc	r1,sr
  30009c:	40 0b       	jsr	@r0
  30009e:	64 82       	mov.l	@r8,r4
  3000a0:	49 0e       	ldc	r9,sr
  3000a2:	20 08       	tst	r0,r0
  3000a4:	89 0d       	bt	3000c2 <end>

003000a6 <panic>:
  3000a6:	64 82       	mov.l	@r8,r4
  3000a8:	44 ce       	ldc	r4,r4_bank
  3000aa:	69 f6       	mov.l	@r15+,r9
  3000ac:	68 f6       	mov.l	@r15+,r8
  3000ae:	4f 16       	lds.l	@r15+,macl
  3000b0:	4f 06       	lds.l	@r15+,mach
  3000b2:	4f 17       	ldc.l	@r15+,gbr
  3000b4:	4f 26       	lds.l	@r15+,pr
  3000b6:	00 32       	stc	ssr,r0
  3000b8:	40 0e       	ldc	r0,sr
  3000ba:	d0 0d       	mov.l	3000f0 <.panic>,r0	! 81016ac <gint_exc_panic>
  3000bc:	60 02       	mov.l	@r0,r0
  3000be:	40 2b       	jmp	@r0
  3000c0:	00 09       	nop	

003000c2 <end>:
  3000c2:	69 f6       	mov.l	@r15+,r9
  3000c4:	68 f6       	mov.l	@r15+,r8
  3000c6:	4f 16       	lds.l	@r15+,macl
  3000c8:	4f 06       	lds.l	@r15+,mach
  3000ca:	4f 17       	ldc.l	@r15+,gbr
  3000cc:	4f 26       	lds.l	@r15+,pr
  3000ce:	00 2b       	rte	
  3000d0:	00 09       	nop	
  3000d2:	00 09       	nop	
  3000d4:	00 09       	nop	
  3000d6:	00 09       	nop	
  3000d8:	00 09       	nop	
  3000da:	00 09       	nop	
  3000dc:	00 09       	nop	
  3000de:	00 09       	nop	

003000e0 <.gint>:
  3000e0:	08 10       	.word 0x0810
  3000e2:	17 d0       	mov.l	r13,@(0,r7)

003000e4 <.expevt_sh4>:
  3000e4:	ff 00       	.word 0xff00
  3000e6:	00 24       	mov.b	r2,@(r0,r0)

003000e8 <.expevt_sh3>:
  3000e8:	ff ff       	.word 0xffff
  3000ea:	ff d4       	.word 0xffd4

003000ec <.catcher>:
  3000ec:	08 10       	.word 0x0810
  3000ee:	15 bc       	mov.l	r11,@(48,r5)

003000f0 <.panic>:
  3000f0:	08 10       	.word 0x0810
  3000f2:	16 ac       	mov.l	r10,@(48,r6)

003000f4 <.SR_set_IMASK>:
  3000f4:	00 00       	.word 0x0000
  3000f6:	00 f0       	.word 0x00f0

003000f8 <.SR_clear_BL>:
  3000f8:	ef ff       	mov	#-1,r15
  3000fa:	ff ff       	.word 0xffff
  3000fc:	00 09       	nop	
  3000fe:	00 09       	nop	

00300100 <gint_tlbh>:
  300100:	4f 22       	sts.l	pr,@-r15
  300102:	4f 13       	stc.l	gbr,@-r15
  300104:	4f 02       	sts.l	mach,@-r15
  300106:	4f 12       	sts.l	macl,@-r15
  300108:	d0 11       	mov.l	300150 <.gint>,r0	! 81017d0 <gint>
  30010a:	60 02       	mov.l	@r0,r0
  30010c:	c8 01       	tst	#1,r0
  30010e:	d0 11       	mov.l	300154 <.tea_sh4>,r0	! ff00000c
  300110:	89 00       	bt	300114 <test_tea>
  300112:	d0 11       	mov.l	300158 <.tea_sh3>,r0	! fffffffc

00300114 <test_tea>:
  300114:	60 02       	mov.l	@r0,r0
  300116:	d1 12       	mov.l	300160 <.max_mapped_rom>,r1	! 30f600
  300118:	30 13       	cmp/ge	r1,r0
  30011a:	89 0c       	bt	300136 <panic>
  30011c:	d1 0f       	mov.l	30015c <.min_mapped_rom>,r1	! 300000 <start>
  30011e:	30 13       	cmp/ge	r1,r0
  300120:	8b 09       	bf	300136 <panic>

00300122 <map>:
  300122:	e0 0c       	mov	#12,r0
  300124:	d2 0f       	mov.l	300164 <.syscall>,r2	! 80020070
  300126:	42 0b       	jsr	@r2
  300128:	00 09       	nop	
  30012a:	4f 16       	lds.l	@r15+,macl
  30012c:	4f 06       	lds.l	@r15+,mach
  30012e:	4f 17       	ldc.l	@r15+,gbr
  300130:	4f 26       	lds.l	@r15+,pr
  300132:	00 2b       	rte	
  300134:	00 09       	nop	

00300136 <panic>:
  300136:	4f 16       	lds.l	@r15+,macl
  300138:	4f 06       	lds.l	@r15+,mach
  30013a:	4f 17       	ldc.l	@r15+,gbr
  30013c:	4f 26       	lds.l	@r15+,pr
  30013e:	00 22       	stc	vbr,r0
  300140:	e1 01       	mov	#1,r1
  300142:	41 18       	shll8	r1
  300144:	30 1c       	add	r1,r0
  300146:	40 2b       	jmp	@r0
  300148:	00 09       	nop	
  30014a:	00 09       	nop	
  30014c:	00 09       	nop	
  30014e:	00 09       	nop	

00300150 <.gint>:
  300150:	08 10       	.word 0x0810
  300152:	17 d0       	mov.l	r13,@(0,r7)

00300154 <.tea_sh4>:
  300154:	ff 00       	.word 0xff00
  300156:	00 0c       	mov.b	@(r0,r0),r0

00300158 <.tea_sh3>:
  300158:	ff ff       	.word 0xffff
  30015a:	ff fc       	.word 0xfffc

0030015c <.min_mapped_rom>:
  30015c:	00 30       	.word 0x0030
	...

00300160 <.max_mapped_rom>:
  300160:	00 30       	.word 0x0030
  300162:	f6 00       	movs.w	@-r2,0x0

00300164 <.syscall>:
  300164:	80 02       	mov.b	r0,@(2,r0)
  300166:	00 70       	.word 0x0070
  300168:	00 09       	nop	
  30016a:	00 09       	nop	
  30016c:	00 09       	nop	
  30016e:	00 09       	nop	

00300170 <GINT_CALL_SET_function>:
//---

/* GINT_CALL_SET(): Callback that sets an integer to 1
   This is defined as a function to make sure the pointer is to an int. */
static int GINT_CALL_SET_function(int volatile *pointer)
{
  300170:	2f e6       	mov.l	r14,@-r15
  300172:	7f fc       	add	#-4,r15
  300174:	6e f3       	mov	r15,r14
  300176:	61 e3       	mov	r14,r1
  300178:	71 c4       	add	#-60,r1
  30017a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30017c:	61 e3       	mov	r14,r1
  30017e:	71 c4       	add	#-60,r1
  300180:	51 1f       	mov.l	@(60,r1),r1
  300182:	e2 01       	mov	#1,r2
  300184:	21 22       	mov.l	r2,@r1
	return 0;
  300186:	e1 00       	mov	#0,r1
}
  300188:	60 13       	mov	r1,r0
  30018a:	7e 04       	add	#4,r14
  30018c:	6f e3       	mov	r14,r15
  30018e:	6e f6       	mov.l	@r15+,r14
  300190:	00 0b       	rts	
  300192:	00 09       	nop	

00300194 <GINT_CALL_INC_function>:
	return GINT_CALL(GINT_CALL_SET_function, pointer);
}

/* GINT_CALL_INC(): Callback that increments an integer */
static int GINT_CALL_INC_function(int volatile *pointer)
{
  300194:	2f e6       	mov.l	r14,@-r15
  300196:	7f fc       	add	#-4,r15
  300198:	6e f3       	mov	r15,r14
  30019a:	61 e3       	mov	r14,r1
  30019c:	71 c4       	add	#-60,r1
  30019e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3001a0:	61 e3       	mov	r14,r1
  3001a2:	71 c4       	add	#-60,r1
  3001a4:	51 1f       	mov.l	@(60,r1),r1
  3001a6:	61 12       	mov.l	@r1,r1
  3001a8:	62 13       	mov	r1,r2
  3001aa:	72 01       	add	#1,r2
  3001ac:	61 e3       	mov	r14,r1
  3001ae:	71 c4       	add	#-60,r1
  3001b0:	51 1f       	mov.l	@(60,r1),r1
  3001b2:	21 22       	mov.l	r2,@r1
	return 0;
  3001b4:	e1 00       	mov	#0,r1
}
  3001b6:	60 13       	mov	r1,r0
  3001b8:	7e 04       	add	#4,r14
  3001ba:	6f e3       	mov	r14,r15
  3001bc:	6e f6       	mov.l	@r15+,r14
  3001be:	00 0b       	rts	
  3001c0:	00 09       	nop	

003001c2 <GINT_CALL_SET_STOP_function>:
	return GINT_CALL(GINT_CALL_INC_function, pointer);
}

/* GINT_CALL_SET_STOP(): Same as GINT_CALL_SET(), but returns TIMER_STOP */
static int GINT_CALL_SET_STOP_function(int volatile *pointer)
{
  3001c2:	2f e6       	mov.l	r14,@-r15
  3001c4:	7f fc       	add	#-4,r15
  3001c6:	6e f3       	mov	r15,r14
  3001c8:	61 e3       	mov	r14,r1
  3001ca:	71 c4       	add	#-60,r1
  3001cc:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3001ce:	61 e3       	mov	r14,r1
  3001d0:	71 c4       	add	#-60,r1
  3001d2:	51 1f       	mov.l	@(60,r1),r1
  3001d4:	e2 01       	mov	#1,r2
  3001d6:	21 22       	mov.l	r2,@r1
	return 1;
  3001d8:	e1 01       	mov	#1,r1
}
  3001da:	60 13       	mov	r1,r0
  3001dc:	7e 04       	add	#4,r14
  3001de:	6f e3       	mov	r14,r15
  3001e0:	6e f6       	mov.l	@r15+,r14
  3001e2:	00 0b       	rts	
  3001e4:	00 09       	nop	

003001e6 <GINT_CALL_INC_STOP_function>:
	return GINT_CALL(GINT_CALL_SET_STOP_function, pointer);
}

/* GINT_CALL_INC(): Callback that increments an integer */
static int GINT_CALL_INC_STOP_function(int volatile *pointer)
{
  3001e6:	2f e6       	mov.l	r14,@-r15
  3001e8:	7f fc       	add	#-4,r15
  3001ea:	6e f3       	mov	r15,r14
  3001ec:	61 e3       	mov	r14,r1
  3001ee:	71 c4       	add	#-60,r1
  3001f0:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3001f2:	61 e3       	mov	r14,r1
  3001f4:	71 c4       	add	#-60,r1
  3001f6:	51 1f       	mov.l	@(60,r1),r1
  3001f8:	61 12       	mov.l	@r1,r1
  3001fa:	62 13       	mov	r1,r2
  3001fc:	72 01       	add	#1,r2
  3001fe:	61 e3       	mov	r14,r1
  300200:	71 c4       	add	#-60,r1
  300202:	51 1f       	mov.l	@(60,r1),r1
  300204:	21 22       	mov.l	r2,@r1
	return 1;
  300206:	e1 01       	mov	#1,r1
}
  300208:	60 13       	mov	r1,r0
  30020a:	7e 04       	add	#4,r14
  30020c:	6f e3       	mov	r14,r15
  30020e:	6e f6       	mov.l	@r15+,r14
  300210:	00 0b       	rts	
  300212:	00 09       	nop	

00300214 <clear>:
void (*printNum)(int) = (void (*)(int)) 0xffffff00;
void (*printPtr)(void*) = (void (*)(void*)) 0xfffffd00;

void (*updateDisplay)(color_t*) = (void (*)(color_t*)) 0xfffffc00;

void clear(color_t color) {
  300214:	2f e6       	mov.l	r14,@-r15
  300216:	4f 22       	sts.l	pr,@-r15
  300218:	7f fc       	add	#-4,r15
  30021a:	6e f3       	mov	r15,r14
  30021c:	62 43       	mov	r4,r2
  30021e:	61 e3       	mov	r14,r1
  300220:	71 e4       	add	#-28,r1
  300222:	60 23       	mov	r2,r0
  300224:	81 1e       	mov.w	r0,@(28,r1)
	// printPtr(gint_vram);
	// print("memset start");
	memset(gint_vram, color, 396 * 224 * sizeof(color_t));
  300226:	d1 0a       	mov.l	300250 <clear+0x3c>,r1	! 810143c <gint_vram>
  300228:	62 12       	mov.l	@r1,r2
  30022a:	61 e3       	mov	r14,r1
  30022c:	71 e4       	add	#-28,r1
  30022e:	85 1e       	mov.w	@(28,r1),r0
  300230:	61 03       	mov	r0,r1
  300232:	61 1d       	extu.w	r1,r1
  300234:	d3 07       	mov.l	300254 <clear+0x40>,r3	! 2b500
  300236:	66 33       	mov	r3,r6
  300238:	65 13       	mov	r1,r5
  30023a:	64 23       	mov	r2,r4
  30023c:	d1 06       	mov.l	300258 <clear+0x44>,r1	! 30af00 <memset>
  30023e:	41 0b       	jsr	@r1
  300240:	00 09       	nop	
	// print("memset end");
}
  300242:	00 09       	nop	
  300244:	7e 04       	add	#4,r14
  300246:	6f e3       	mov	r14,r15
  300248:	4f 26       	lds.l	@r15+,pr
  30024a:	6e f6       	mov.l	@r15+,r14
  30024c:	00 0b       	rts	
  30024e:	00 09       	nop	
  300250:	08 10       	.word 0x0810
  300252:	14 3c       	mov.l	r3,@(48,r4)
  300254:	00 02       	stc	sr,r0
  300256:	b5 00       	bsr	300c5a <GINT_CALL_INC_function+0x2a>
  300258:	00 30       	.word 0x0030
  30025a:	af 00       	bra	30005e <start+0x5e>

0030025c <callback_tick>:

static int callback_tick(void) {
  30025c:	2f e6       	mov.l	r14,@-r15
  30025e:	4f 22       	sts.l	pr,@-r15
  300260:	6e f3       	mov	r15,r14
	print("tick_etmu");
  300262:	d1 06       	mov.l	30027c <callback_tick+0x20>,r1	! 8101670 <print>
  300264:	61 12       	mov.l	@r1,r1
  300266:	d2 06       	mov.l	300280 <callback_tick+0x24>,r2	! 30d0f0 <gint_drivers_end>
  300268:	64 23       	mov	r2,r4
  30026a:	41 0b       	jsr	@r1
  30026c:	00 09       	nop	
	return TIMER_CONTINUE;
  30026e:	e1 00       	mov	#0,r1
}
  300270:	60 13       	mov	r1,r0
  300272:	6f e3       	mov	r14,r15
  300274:	4f 26       	lds.l	@r15+,pr
  300276:	6e f6       	mov.l	@r15+,r14
  300278:	00 0b       	rts	
  30027a:	00 09       	nop	
  30027c:	08 10       	.word 0x0810
  30027e:	16 70       	mov.l	r7,@(0,r6)
  300280:	00 30       	.word 0x0030
  300282:	d0 f0       	mov.l	300644 <custom_r61524_win_get+0x198>,r0	! 8101680 <intf>

00300284 <callback_tick2>:

static int callback_tick2(void) {
  300284:	2f e6       	mov.l	r14,@-r15
  300286:	4f 22       	sts.l	pr,@-r15
  300288:	6e f3       	mov	r15,r14
	print("tick_tmu");
  30028a:	d1 06       	mov.l	3002a4 <callback_tick2+0x20>,r1	! 8101670 <print>
  30028c:	61 12       	mov.l	@r1,r1
  30028e:	d2 06       	mov.l	3002a8 <callback_tick2+0x24>,r2	! 30d0fc
  300290:	64 23       	mov	r2,r4
  300292:	41 0b       	jsr	@r1
  300294:	00 09       	nop	
	return TIMER_CONTINUE;
  300296:	e1 00       	mov	#0,r1
}
  300298:	60 13       	mov	r1,r0
  30029a:	6f e3       	mov	r14,r15
  30029c:	4f 26       	lds.l	@r15+,pr
  30029e:	6e f6       	mov.l	@r15+,r14
  3002a0:	00 0b       	rts	
  3002a2:	00 09       	nop	
  3002a4:	08 10       	.word 0x0810
  3002a6:	16 70       	mov.l	r7,@(0,r6)
  3002a8:	00 30       	.word 0x0030
  3002aa:	d0 fc       	mov.l	30069c <custom_r61524_win_set+0x54>,r0	! 61126110

003002ac <main>:

// Make sure it is aligned to 32 bytes
// char src[32] __attribute__((aligned(32))) = {0};
// char dst[32] __attribute__((aligned(32))) = {0};

int main(void) {
  3002ac:	2f 86       	mov.l	r8,@-r15
  3002ae:	2f a6       	mov.l	r10,@-r15
  3002b0:	2f b6       	mov.l	r11,@-r15
  3002b2:	2f e6       	mov.l	r14,@-r15
  3002b4:	4f 22       	sts.l	pr,@-r15
  3002b6:	7f ec       	add	#-20,r15
  3002b8:	6e f3       	mov	r15,r14
	
	// /* dma_memcpy(): Fast 32-aligned memcpy */
	// void *dma_memcpy(void * __restrict dst, const void * __restrict src,
	// 	size_t size)

	char *src = malloc(32 + 32);
  3002ba:	68 e3       	mov	r14,r8
  3002bc:	78 d4       	add	#-44,r8
  3002be:	e4 40       	mov	#64,r4
  3002c0:	d1 30       	mov.l	300384 <main+0xd8>,r1	! 30af64 <malloc>
  3002c2:	41 0b       	jsr	@r1
  3002c4:	00 09       	nop	
  3002c6:	61 03       	mov	r0,r1
  3002c8:	18 1e       	mov.l	r1,@(56,r8)
	// Align it by rounding up to the nearest 32 bytes
	src = (char*) (((uint32_t) src + 31) & ~31);
  3002ca:	61 e3       	mov	r14,r1
  3002cc:	71 d4       	add	#-44,r1
  3002ce:	51 1e       	mov.l	@(56,r1),r1
  3002d0:	62 13       	mov	r1,r2
  3002d2:	72 1f       	add	#31,r2
  3002d4:	e1 e0       	mov	#-32,r1
  3002d6:	22 19       	and	r1,r2
  3002d8:	61 e3       	mov	r14,r1
  3002da:	71 d4       	add	#-44,r1
  3002dc:	11 2e       	mov.l	r2,@(56,r1)

	char *dst = malloc(32 + 32);
  3002de:	68 e3       	mov	r14,r8
  3002e0:	78 d4       	add	#-44,r8
  3002e2:	e4 40       	mov	#64,r4
  3002e4:	d1 27       	mov.l	300384 <main+0xd8>,r1	! 30af64 <malloc>
  3002e6:	41 0b       	jsr	@r1
  3002e8:	00 09       	nop	
  3002ea:	61 03       	mov	r0,r1
  3002ec:	18 1d       	mov.l	r1,@(52,r8)
	// Align it by rounding up to the nearest 32 bytes
	dst = (char*) (((uint32_t) dst + 31) & ~31);
  3002ee:	61 e3       	mov	r14,r1
  3002f0:	71 d4       	add	#-44,r1
  3002f2:	51 1d       	mov.l	@(52,r1),r1
  3002f4:	62 13       	mov	r1,r2
  3002f6:	72 1f       	add	#31,r2
  3002f8:	e1 e0       	mov	#-32,r1
  3002fa:	22 19       	and	r1,r2
  3002fc:	61 e3       	mov	r14,r1
  3002fe:	71 d4       	add	#-44,r1
  300300:	11 2d       	mov.l	r2,@(52,r1)

	// Test the dma_memcpy function
	for (int i = 0; i < 32; i++) {
  300302:	61 e3       	mov	r14,r1
  300304:	71 d4       	add	#-44,r1
  300306:	e2 00       	mov	#0,r2
  300308:	11 2f       	mov.l	r2,@(60,r1)
  30030a:	a0 13       	bra	300334 <main+0x88>
  30030c:	00 09       	nop	
		src[i] = i;
  30030e:	61 e3       	mov	r14,r1
  300310:	71 d4       	add	#-44,r1
  300312:	51 1f       	mov.l	@(60,r1),r1
  300314:	62 e3       	mov	r14,r2
  300316:	72 d4       	add	#-44,r2
  300318:	52 2e       	mov.l	@(56,r2),r2
  30031a:	31 2c       	add	r2,r1
  30031c:	62 e3       	mov	r14,r2
  30031e:	72 d4       	add	#-44,r2
  300320:	52 2f       	mov.l	@(60,r2),r2
  300322:	62 2e       	exts.b	r2,r2
  300324:	21 20       	mov.b	r2,@r1
	for (int i = 0; i < 32; i++) {
  300326:	61 e3       	mov	r14,r1
  300328:	71 d4       	add	#-44,r1
  30032a:	62 e3       	mov	r14,r2
  30032c:	72 d4       	add	#-44,r2
  30032e:	52 2f       	mov.l	@(60,r2),r2
  300330:	72 01       	add	#1,r2
  300332:	11 2f       	mov.l	r2,@(60,r1)
  300334:	61 e3       	mov	r14,r1
  300336:	71 d4       	add	#-44,r1
  300338:	52 1f       	mov.l	@(60,r1),r2
  30033a:	e1 1f       	mov	#31,r1
  30033c:	32 17       	cmp/gt	r1,r2
  30033e:	8b e6       	bf	30030e <main+0x62>
	// if(t >= 0) timer_start(t);

	// int t2 = timer_configure(TIMER_TMU, 1000000, GINT_CALL(callback_tick2));
	// if(t2 >= 0) timer_start(t2);

	int b = 1;
  300340:	61 e3       	mov	r14,r1
  300342:	71 d4       	add	#-44,r1
  300344:	e2 01       	mov	#1,r2
  300346:	11 2c       	mov.l	r2,@(48,r1)
	int a = __builtin_clzll(b);
  300348:	61 e3       	mov	r14,r1
  30034a:	71 d4       	add	#-44,r1
  30034c:	51 1c       	mov.l	@(48,r1),r1
  30034e:	6b 13       	mov	r1,r11
  300350:	e2 00       	mov	#0,r2
  300352:	32 17       	cmp/gt	r1,r2
  300354:	31 1a       	subc	r1,r1
  300356:	6a 13       	mov	r1,r10
  300358:	68 e3       	mov	r14,r8
  30035a:	78 d4       	add	#-44,r8
  30035c:	d1 0a       	mov.l	300388 <main+0xdc>,r1	! 300b98 <__clzdi2>
  30035e:	64 a3       	mov	r10,r4
  300360:	65 b3       	mov	r11,r5
  300362:	41 0b       	jsr	@r1
  300364:	00 09       	nop	
  300366:	61 03       	mov	r0,r1
  300368:	18 1b       	mov.l	r1,@(44,r8)
	// dtext(1, 1, C_BLACK, "Sample fxSDK add-in.");
	// // dprint(int x, int y, int fg, const char *format, ...)
	// dprint(1, 17, C_BLACK, "dprint: %d", 123);
	// dtext(1, 33, C_BLACK, "Image rendering:");
	extern bopti_image_t img_example;
	dimage(1, 49, &img_example);
  30036a:	d1 08       	mov.l	30038c <main+0xe0>,r1	! 30d108 <img_example>
  30036c:	66 13       	mov	r1,r6
  30036e:	e5 31       	mov	#49,r5
  300370:	e4 01       	mov	#1,r4
  300372:	d1 07       	mov.l	300390 <main+0xe4>,r1	! 301084 <dimage>
  300374:	41 0b       	jsr	@r1
  300376:	00 09       	nop	
	dupdate();
  300378:	d1 06       	mov.l	300394 <main+0xe8>,r1	! 301364 <_WEAK_dupdate>
  30037a:	41 0b       	jsr	@r1
  30037c:	00 09       	nop	
	// 	clear(C_WHITE);
	// 	drect(i, 0, i + 50, 50, C_BLACK);
	// 	dupdate();
	// }

	while (1) {}
  30037e:	af fe       	bra	30037e <main+0xd2>
  300380:	00 09       	nop	
  300382:	00 09       	nop	
  300384:	00 30       	.word 0x0030
  300386:	af 64       	bra	300252 <clear+0x3e>
  300388:	00 30       	.word 0x0030
  30038a:	0b 98       	.word 0x0b98
  30038c:	00 30       	.word 0x0030
  30038e:	d1 08       	mov.l	3003b0 <custom_r61524_get+0x18>,r1	! 71e86023
  300390:	00 30       	.word 0x0030
  300392:	10 84       	mov.l	r8,@(16,r0)
  300394:	00 30       	.word 0x0030
  300396:	13 64       	mov.l	r6,@(16,r3)

00300398 <custom_r61524_get>:
{
	*intf = data;
}

uint16_t custom_r61524_get(int ID)
{
  300398:	2f e6       	mov.l	r14,@-r15
  30039a:	7f f8       	add	#-8,r15
  30039c:	6e f3       	mov	r15,r14
  30039e:	61 e3       	mov	r14,r1
  3003a0:	71 c8       	add	#-56,r1
  3003a2:	11 4e       	mov.l	r4,@(56,r1)
	select(ID);
  3003a4:	61 e3       	mov	r14,r1
  3003a6:	71 c8       	add	#-56,r1
  3003a8:	51 1e       	mov.l	@(56,r1),r1
  3003aa:	61 1d       	extu.w	r1,r1
  3003ac:	62 13       	mov	r1,r2
  3003ae:	61 e3       	mov	r14,r1
  3003b0:	71 e8       	add	#-24,r1
  3003b2:	60 23       	mov	r2,r0
  3003b4:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  3003b6:	d1 14       	mov.l	300408 <custom_r61524_get+0x70>,r1	! 8101684 <PRDR>
  3003b8:	61 12       	mov.l	@r1,r1
  3003ba:	61 10       	mov.b	@r1,r1
  3003bc:	63 1c       	extu.b	r1,r3
  3003be:	d1 12       	mov.l	300408 <custom_r61524_get+0x70>,r1	! 8101684 <PRDR>
  3003c0:	61 12       	mov.l	@r1,r1
  3003c2:	e2 ef       	mov	#-17,r2
  3003c4:	22 39       	and	r3,r2
  3003c6:	62 2c       	extu.b	r2,r2
  3003c8:	21 20       	mov.b	r2,@r1
  3003ca:	00 ab       	synco	
	*intf = reg;
  3003cc:	d1 0f       	mov.l	30040c <custom_r61524_get+0x74>,r1	! 8101680 <intf>
  3003ce:	61 12       	mov.l	@r1,r1
  3003d0:	62 e3       	mov	r14,r2
  3003d2:	72 e8       	add	#-24,r2
  3003d4:	85 2f       	mov.w	@(30,r2),r0
  3003d6:	62 03       	mov	r0,r2
  3003d8:	21 21       	mov.w	r2,@r1
  3003da:	00 ab       	synco	
	*PRDR |= 0x10;
  3003dc:	d1 0a       	mov.l	300408 <custom_r61524_get+0x70>,r1	! 8101684 <PRDR>
  3003de:	61 12       	mov.l	@r1,r1
  3003e0:	61 10       	mov.b	@r1,r1
  3003e2:	62 1c       	extu.b	r1,r2
  3003e4:	d1 08       	mov.l	300408 <custom_r61524_get+0x70>,r1	! 8101684 <PRDR>
  3003e6:	61 12       	mov.l	@r1,r1
  3003e8:	e3 10       	mov	#16,r3
  3003ea:	22 3b       	or	r3,r2
  3003ec:	62 2c       	extu.b	r2,r2
  3003ee:	21 20       	mov.b	r2,@r1
  3003f0:	00 ab       	synco	
}
  3003f2:	00 09       	nop	
	return *intf;
  3003f4:	d1 05       	mov.l	30040c <custom_r61524_get+0x74>,r1	! 8101680 <intf>
  3003f6:	61 12       	mov.l	@r1,r1
  3003f8:	61 11       	mov.w	@r1,r1
  3003fa:	61 1d       	extu.w	r1,r1
	return read();
}
  3003fc:	60 13       	mov	r1,r0
  3003fe:	7e 08       	add	#8,r14
  300400:	6f e3       	mov	r14,r15
  300402:	6e f6       	mov.l	@r15+,r14
  300404:	00 0b       	rts	
  300406:	00 09       	nop	
  300408:	08 10       	.word 0x0810
  30040a:	16 84       	mov.l	r8,@(16,r6)
  30040c:	08 10       	.word 0x0810
  30040e:	16 80       	mov.l	r8,@(0,r6)

00300410 <custom_r61524_set>:

void custom_r61524_set(int ID, uint16_t value)
{
  300410:	2f e6       	mov.l	r14,@-r15
  300412:	7f f4       	add	#-12,r15
  300414:	6e f3       	mov	r15,r14
  300416:	61 e3       	mov	r14,r1
  300418:	71 cc       	add	#-52,r1
  30041a:	11 4e       	mov.l	r4,@(56,r1)
  30041c:	62 53       	mov	r5,r2
  30041e:	61 e3       	mov	r14,r1
  300420:	71 ec       	add	#-20,r1
  300422:	60 23       	mov	r2,r0
  300424:	81 1a       	mov.w	r0,@(20,r1)
	select(ID);
  300426:	61 e3       	mov	r14,r1
  300428:	71 cc       	add	#-52,r1
  30042a:	51 1e       	mov.l	@(56,r1),r1
  30042c:	61 1d       	extu.w	r1,r1
  30042e:	62 13       	mov	r1,r2
  300430:	61 e3       	mov	r14,r1
  300432:	71 ec       	add	#-20,r1
  300434:	60 23       	mov	r2,r0
  300436:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  300438:	d1 1a       	mov.l	3004a4 <custom_r61524_set+0x94>,r1	! 8101684 <PRDR>
  30043a:	61 12       	mov.l	@r1,r1
  30043c:	61 10       	mov.b	@r1,r1
  30043e:	63 1c       	extu.b	r1,r3
  300440:	d1 18       	mov.l	3004a4 <custom_r61524_set+0x94>,r1	! 8101684 <PRDR>
  300442:	61 12       	mov.l	@r1,r1
  300444:	e2 ef       	mov	#-17,r2
  300446:	22 39       	and	r3,r2
  300448:	62 2c       	extu.b	r2,r2
  30044a:	21 20       	mov.b	r2,@r1
  30044c:	00 ab       	synco	
	*intf = reg;
  30044e:	d1 16       	mov.l	3004a8 <custom_r61524_set+0x98>,r1	! 8101680 <intf>
  300450:	61 12       	mov.l	@r1,r1
  300452:	62 e3       	mov	r14,r2
  300454:	72 ec       	add	#-20,r2
  300456:	85 2e       	mov.w	@(28,r2),r0
  300458:	62 03       	mov	r0,r2
  30045a:	21 21       	mov.w	r2,@r1
  30045c:	00 ab       	synco	
	*PRDR |= 0x10;
  30045e:	d1 11       	mov.l	3004a4 <custom_r61524_set+0x94>,r1	! 8101684 <PRDR>
  300460:	61 12       	mov.l	@r1,r1
  300462:	61 10       	mov.b	@r1,r1
  300464:	62 1c       	extu.b	r1,r2
  300466:	d1 0f       	mov.l	3004a4 <custom_r61524_set+0x94>,r1	! 8101684 <PRDR>
  300468:	61 12       	mov.l	@r1,r1
  30046a:	e3 10       	mov	#16,r3
  30046c:	22 3b       	or	r3,r2
  30046e:	62 2c       	extu.b	r2,r2
  300470:	21 20       	mov.b	r2,@r1
  300472:	00 ab       	synco	
}
  300474:	00 09       	nop	
	write(value);
  300476:	61 e3       	mov	r14,r1
  300478:	71 ec       	add	#-20,r1
  30047a:	85 1a       	mov.w	@(20,r1),r0
  30047c:	61 03       	mov	r0,r1
  30047e:	62 1d       	extu.w	r1,r2
  300480:	61 e3       	mov	r14,r1
  300482:	71 ec       	add	#-20,r1
  300484:	60 23       	mov	r2,r0
  300486:	81 1f       	mov.w	r0,@(30,r1)
	*intf = data;
  300488:	d1 07       	mov.l	3004a8 <custom_r61524_set+0x98>,r1	! 8101680 <intf>
  30048a:	61 12       	mov.l	@r1,r1
  30048c:	62 e3       	mov	r14,r2
  30048e:	72 ec       	add	#-20,r2
  300490:	85 2f       	mov.w	@(30,r2),r0
  300492:	62 03       	mov	r0,r2
  300494:	21 21       	mov.w	r2,@r1
}
  300496:	00 09       	nop	
}
  300498:	00 09       	nop	
  30049a:	7e 0c       	add	#12,r14
  30049c:	6f e3       	mov	r14,r15
  30049e:	6e f6       	mov.l	@r15+,r14
  3004a0:	00 0b       	rts	
  3004a2:	00 09       	nop	
  3004a4:	08 10       	.word 0x0810
  3004a6:	16 84       	mov.l	r8,@(16,r6)
  3004a8:	08 10       	.word 0x0810
  3004aa:	16 80       	mov.l	r8,@(0,r6)

003004ac <custom_r61524_win_get>:
//---
//	Window management
//---

void custom_r61524_win_get(uint16_t *HSA, uint16_t *HEA, uint16_t *VSA, uint16_t *VEA)
{
  3004ac:	2f e6       	mov.l	r14,@-r15
  3004ae:	7f e8       	add	#-24,r15
  3004b0:	6e f3       	mov	r15,r14
  3004b2:	61 e3       	mov	r14,r1
  3004b4:	71 d8       	add	#-40,r1
  3004b6:	11 4d       	mov.l	r4,@(52,r1)
  3004b8:	61 e3       	mov	r14,r1
  3004ba:	71 d8       	add	#-40,r1
  3004bc:	11 5c       	mov.l	r5,@(48,r1)
  3004be:	61 e3       	mov	r14,r1
  3004c0:	71 d8       	add	#-40,r1
  3004c2:	11 6b       	mov.l	r6,@(44,r1)
  3004c4:	61 e3       	mov	r14,r1
  3004c6:	71 d8       	add	#-40,r1
  3004c8:	11 7a       	mov.l	r7,@(40,r1)
  3004ca:	61 e3       	mov	r14,r1
  3004cc:	71 f8       	add	#-8,r1
  3004ce:	92 b2       	mov.w	300636 <custom_r61524_win_get+0x18a>,r2	! 210
  3004d0:	60 23       	mov	r2,r0
  3004d2:	81 1c       	mov.w	r0,@(24,r1)
	*PRDR &= ~0x10;
  3004d4:	d1 5a       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3004d6:	61 12       	mov.l	@r1,r1
  3004d8:	61 10       	mov.b	@r1,r1
  3004da:	63 1c       	extu.b	r1,r3
  3004dc:	d1 58       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3004de:	61 12       	mov.l	@r1,r1
  3004e0:	e2 ef       	mov	#-17,r2
  3004e2:	22 39       	and	r3,r2
  3004e4:	62 2c       	extu.b	r2,r2
  3004e6:	21 20       	mov.b	r2,@r1
  3004e8:	00 ab       	synco	
	*intf = reg;
  3004ea:	d1 56       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  3004ec:	61 12       	mov.l	@r1,r1
  3004ee:	62 e3       	mov	r14,r2
  3004f0:	72 f8       	add	#-8,r2
  3004f2:	85 2c       	mov.w	@(24,r2),r0
  3004f4:	62 03       	mov	r0,r2
  3004f6:	21 21       	mov.w	r2,@r1
  3004f8:	00 ab       	synco	
	*PRDR |= 0x10;
  3004fa:	d1 51       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3004fc:	61 12       	mov.l	@r1,r1
  3004fe:	61 10       	mov.b	@r1,r1
  300500:	62 1c       	extu.b	r1,r2
  300502:	d1 4f       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  300504:	61 12       	mov.l	@r1,r1
  300506:	e3 10       	mov	#16,r3
  300508:	22 3b       	or	r3,r2
  30050a:	62 2c       	extu.b	r2,r2
  30050c:	21 20       	mov.b	r2,@r1
  30050e:	00 ab       	synco	
}
  300510:	00 09       	nop	
	return *intf;
  300512:	d1 4c       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  300514:	61 12       	mov.l	@r1,r1
  300516:	61 11       	mov.w	@r1,r1
  300518:	62 1d       	extu.w	r1,r2
	select(horizontal_ram_start);
	*HSA = read();
  30051a:	61 e3       	mov	r14,r1
  30051c:	71 d8       	add	#-40,r1
  30051e:	51 1d       	mov.l	@(52,r1),r1
  300520:	21 21       	mov.w	r2,@r1
  300522:	61 e3       	mov	r14,r1
  300524:	71 f8       	add	#-8,r1
  300526:	92 87       	mov.w	300638 <custom_r61524_win_get+0x18c>,r2	! 211
  300528:	60 23       	mov	r2,r0
  30052a:	81 1d       	mov.w	r0,@(26,r1)
	*PRDR &= ~0x10;
  30052c:	d1 44       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  30052e:	61 12       	mov.l	@r1,r1
  300530:	61 10       	mov.b	@r1,r1
  300532:	63 1c       	extu.b	r1,r3
  300534:	d1 42       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  300536:	61 12       	mov.l	@r1,r1
  300538:	e2 ef       	mov	#-17,r2
  30053a:	22 39       	and	r3,r2
  30053c:	62 2c       	extu.b	r2,r2
  30053e:	21 20       	mov.b	r2,@r1
  300540:	00 ab       	synco	
	*intf = reg;
  300542:	d1 40       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  300544:	61 12       	mov.l	@r1,r1
  300546:	62 e3       	mov	r14,r2
  300548:	72 f8       	add	#-8,r2
  30054a:	85 2d       	mov.w	@(26,r2),r0
  30054c:	62 03       	mov	r0,r2
  30054e:	21 21       	mov.w	r2,@r1
  300550:	00 ab       	synco	
	*PRDR |= 0x10;
  300552:	d1 3b       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  300554:	61 12       	mov.l	@r1,r1
  300556:	61 10       	mov.b	@r1,r1
  300558:	62 1c       	extu.b	r1,r2
  30055a:	d1 39       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  30055c:	61 12       	mov.l	@r1,r1
  30055e:	e3 10       	mov	#16,r3
  300560:	22 3b       	or	r3,r2
  300562:	62 2c       	extu.b	r2,r2
  300564:	21 20       	mov.b	r2,@r1
  300566:	00 ab       	synco	
}
  300568:	00 09       	nop	
	return *intf;
  30056a:	d1 36       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  30056c:	61 12       	mov.l	@r1,r1
  30056e:	61 11       	mov.w	@r1,r1
  300570:	62 1d       	extu.w	r1,r2
	select(horizontal_ram_end);
	*HEA = read();
  300572:	61 e3       	mov	r14,r1
  300574:	71 d8       	add	#-40,r1
  300576:	51 1c       	mov.l	@(48,r1),r1
  300578:	21 21       	mov.w	r2,@r1
  30057a:	61 e3       	mov	r14,r1
  30057c:	71 f8       	add	#-8,r1
  30057e:	92 5c       	mov.w	30063a <custom_r61524_win_get+0x18e>,r2	! 212
  300580:	60 23       	mov	r2,r0
  300582:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  300584:	d1 2e       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  300586:	61 12       	mov.l	@r1,r1
  300588:	61 10       	mov.b	@r1,r1
  30058a:	63 1c       	extu.b	r1,r3
  30058c:	d1 2c       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  30058e:	61 12       	mov.l	@r1,r1
  300590:	e2 ef       	mov	#-17,r2
  300592:	22 39       	and	r3,r2
  300594:	62 2c       	extu.b	r2,r2
  300596:	21 20       	mov.b	r2,@r1
  300598:	00 ab       	synco	
	*intf = reg;
  30059a:	d1 2a       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  30059c:	61 12       	mov.l	@r1,r1
  30059e:	62 e3       	mov	r14,r2
  3005a0:	72 f8       	add	#-8,r2
  3005a2:	85 2e       	mov.w	@(28,r2),r0
  3005a4:	62 03       	mov	r0,r2
  3005a6:	21 21       	mov.w	r2,@r1
  3005a8:	00 ab       	synco	
	*PRDR |= 0x10;
  3005aa:	d1 25       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3005ac:	61 12       	mov.l	@r1,r1
  3005ae:	61 10       	mov.b	@r1,r1
  3005b0:	62 1c       	extu.b	r1,r2
  3005b2:	d1 23       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3005b4:	61 12       	mov.l	@r1,r1
  3005b6:	e3 10       	mov	#16,r3
  3005b8:	22 3b       	or	r3,r2
  3005ba:	62 2c       	extu.b	r2,r2
  3005bc:	21 20       	mov.b	r2,@r1
  3005be:	00 ab       	synco	
}
  3005c0:	00 09       	nop	
	return *intf;
  3005c2:	d1 20       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  3005c4:	61 12       	mov.l	@r1,r1
  3005c6:	61 11       	mov.w	@r1,r1
  3005c8:	62 1d       	extu.w	r1,r2

	select(vertical_ram_start);
	*VSA = read();
  3005ca:	61 e3       	mov	r14,r1
  3005cc:	71 d8       	add	#-40,r1
  3005ce:	51 1b       	mov.l	@(44,r1),r1
  3005d0:	21 21       	mov.w	r2,@r1
  3005d2:	61 e3       	mov	r14,r1
  3005d4:	71 f8       	add	#-8,r1
  3005d6:	92 31       	mov.w	30063c <custom_r61524_win_get+0x190>,r2	! 213
  3005d8:	60 23       	mov	r2,r0
  3005da:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  3005dc:	d1 18       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3005de:	61 12       	mov.l	@r1,r1
  3005e0:	61 10       	mov.b	@r1,r1
  3005e2:	63 1c       	extu.b	r1,r3
  3005e4:	d1 16       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  3005e6:	61 12       	mov.l	@r1,r1
  3005e8:	e2 ef       	mov	#-17,r2
  3005ea:	22 39       	and	r3,r2
  3005ec:	62 2c       	extu.b	r2,r2
  3005ee:	21 20       	mov.b	r2,@r1
  3005f0:	00 ab       	synco	
	*intf = reg;
  3005f2:	d1 14       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  3005f4:	61 12       	mov.l	@r1,r1
  3005f6:	62 e3       	mov	r14,r2
  3005f8:	72 f8       	add	#-8,r2
  3005fa:	85 2f       	mov.w	@(30,r2),r0
  3005fc:	62 03       	mov	r0,r2
  3005fe:	21 21       	mov.w	r2,@r1
  300600:	00 ab       	synco	
	*PRDR |= 0x10;
  300602:	d1 0f       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  300604:	61 12       	mov.l	@r1,r1
  300606:	61 10       	mov.b	@r1,r1
  300608:	62 1c       	extu.b	r1,r2
  30060a:	d1 0d       	mov.l	300640 <custom_r61524_win_get+0x194>,r1	! 8101684 <PRDR>
  30060c:	61 12       	mov.l	@r1,r1
  30060e:	e3 10       	mov	#16,r3
  300610:	22 3b       	or	r3,r2
  300612:	62 2c       	extu.b	r2,r2
  300614:	21 20       	mov.b	r2,@r1
  300616:	00 ab       	synco	
}
  300618:	00 09       	nop	
	return *intf;
  30061a:	d1 0a       	mov.l	300644 <custom_r61524_win_get+0x198>,r1	! 8101680 <intf>
  30061c:	61 12       	mov.l	@r1,r1
  30061e:	61 11       	mov.w	@r1,r1
  300620:	62 1d       	extu.w	r1,r2
	select(vertical_ram_end);
	*VEA = read();
  300622:	61 e3       	mov	r14,r1
  300624:	71 d8       	add	#-40,r1
  300626:	51 1a       	mov.l	@(40,r1),r1
  300628:	21 21       	mov.w	r2,@r1
}
  30062a:	00 09       	nop	
  30062c:	7e 18       	add	#24,r14
  30062e:	6f e3       	mov	r14,r15
  300630:	6e f6       	mov.l	@r15+,r14
  300632:	00 0b       	rts	
  300634:	00 09       	nop	
  300636:	02 10       	.word 0x0210
  300638:	02 11       	.word 0x0211
  30063a:	02 12       	stc	gbr,r2
  30063c:	02 13       	.word 0x0213
  30063e:	00 09       	nop	
  300640:	08 10       	.word 0x0810
  300642:	16 84       	mov.l	r8,@(16,r6)
  300644:	08 10       	.word 0x0810
  300646:	16 80       	mov.l	r8,@(0,r6)

00300648 <custom_r61524_win_set>:

void custom_r61524_win_set(uint16_t HSA, uint16_t HEA, uint16_t VSA, uint16_t VEA)
{
  300648:	2f e6       	mov.l	r14,@-r15
  30064a:	7f e0       	add	#-32,r15
  30064c:	6e f3       	mov	r15,r14
  30064e:	62 43       	mov	r4,r2
  300650:	63 73       	mov	r7,r3
  300652:	61 e3       	mov	r14,r1
  300654:	60 23       	mov	r2,r0
  300656:	81 16       	mov.w	r0,@(12,r1)
  300658:	61 e3       	mov	r14,r1
  30065a:	62 53       	mov	r5,r2
  30065c:	60 23       	mov	r2,r0
  30065e:	81 14       	mov.w	r0,@(8,r1)
  300660:	61 e3       	mov	r14,r1
  300662:	62 63       	mov	r6,r2
  300664:	60 23       	mov	r2,r0
  300666:	81 12       	mov.w	r0,@(4,r1)
  300668:	61 e3       	mov	r14,r1
  30066a:	62 33       	mov	r3,r2
  30066c:	21 21       	mov.w	r2,@r1
  30066e:	61 e3       	mov	r14,r1
  300670:	92 c2       	mov.w	3007f8 <custom_r61524_win_set+0x1b0>,r2	! 210
  300672:	60 23       	mov	r2,r0
  300674:	81 18       	mov.w	r0,@(16,r1)
	*PRDR &= ~0x10;
  300676:	d1 62       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300678:	61 12       	mov.l	@r1,r1
  30067a:	61 10       	mov.b	@r1,r1
  30067c:	63 1c       	extu.b	r1,r3
  30067e:	d1 60       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300680:	61 12       	mov.l	@r1,r1
  300682:	e2 ef       	mov	#-17,r2
  300684:	22 39       	and	r3,r2
  300686:	62 2c       	extu.b	r2,r2
  300688:	21 20       	mov.b	r2,@r1
  30068a:	00 ab       	synco	
	*intf = reg;
  30068c:	d1 5d       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  30068e:	61 12       	mov.l	@r1,r1
  300690:	62 e3       	mov	r14,r2
  300692:	85 28       	mov.w	@(16,r2),r0
  300694:	62 03       	mov	r0,r2
  300696:	21 21       	mov.w	r2,@r1
  300698:	00 ab       	synco	
	*PRDR |= 0x10;
  30069a:	d1 59       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  30069c:	61 12       	mov.l	@r1,r1
  30069e:	61 10       	mov.b	@r1,r1
  3006a0:	62 1c       	extu.b	r1,r2
  3006a2:	d1 57       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3006a4:	61 12       	mov.l	@r1,r1
  3006a6:	e3 10       	mov	#16,r3
  3006a8:	22 3b       	or	r3,r2
  3006aa:	62 2c       	extu.b	r2,r2
  3006ac:	21 20       	mov.b	r2,@r1
  3006ae:	00 ab       	synco	
}
  3006b0:	00 09       	nop	
	select(horizontal_ram_start);
	write(HSA);
  3006b2:	61 e3       	mov	r14,r1
  3006b4:	85 16       	mov.w	@(12,r1),r0
  3006b6:	61 03       	mov	r0,r1
  3006b8:	62 1d       	extu.w	r1,r2
  3006ba:	61 e3       	mov	r14,r1
  3006bc:	60 23       	mov	r2,r0
  3006be:	81 19       	mov.w	r0,@(18,r1)
	*intf = data;
  3006c0:	d1 50       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  3006c2:	61 12       	mov.l	@r1,r1
  3006c4:	62 e3       	mov	r14,r2
  3006c6:	85 29       	mov.w	@(18,r2),r0
  3006c8:	62 03       	mov	r0,r2
  3006ca:	21 21       	mov.w	r2,@r1
}
  3006cc:	00 09       	nop	
  3006ce:	61 e3       	mov	r14,r1
  3006d0:	92 93       	mov.w	3007fa <custom_r61524_win_set+0x1b2>,r2	! 211
  3006d2:	60 23       	mov	r2,r0
  3006d4:	81 1a       	mov.w	r0,@(20,r1)
	*PRDR &= ~0x10;
  3006d6:	d1 4a       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3006d8:	61 12       	mov.l	@r1,r1
  3006da:	61 10       	mov.b	@r1,r1
  3006dc:	63 1c       	extu.b	r1,r3
  3006de:	d1 48       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3006e0:	61 12       	mov.l	@r1,r1
  3006e2:	e2 ef       	mov	#-17,r2
  3006e4:	22 39       	and	r3,r2
  3006e6:	62 2c       	extu.b	r2,r2
  3006e8:	21 20       	mov.b	r2,@r1
  3006ea:	00 ab       	synco	
	*intf = reg;
  3006ec:	d1 45       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  3006ee:	61 12       	mov.l	@r1,r1
  3006f0:	62 e3       	mov	r14,r2
  3006f2:	85 2a       	mov.w	@(20,r2),r0
  3006f4:	62 03       	mov	r0,r2
  3006f6:	21 21       	mov.w	r2,@r1
  3006f8:	00 ab       	synco	
	*PRDR |= 0x10;
  3006fa:	d1 41       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3006fc:	61 12       	mov.l	@r1,r1
  3006fe:	61 10       	mov.b	@r1,r1
  300700:	62 1c       	extu.b	r1,r2
  300702:	d1 3f       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300704:	61 12       	mov.l	@r1,r1
  300706:	e3 10       	mov	#16,r3
  300708:	22 3b       	or	r3,r2
  30070a:	62 2c       	extu.b	r2,r2
  30070c:	21 20       	mov.b	r2,@r1
  30070e:	00 ab       	synco	
}
  300710:	00 09       	nop	
	select(horizontal_ram_end);
	write(HEA);
  300712:	61 e3       	mov	r14,r1
  300714:	85 14       	mov.w	@(8,r1),r0
  300716:	61 03       	mov	r0,r1
  300718:	62 1d       	extu.w	r1,r2
  30071a:	61 e3       	mov	r14,r1
  30071c:	60 23       	mov	r2,r0
  30071e:	81 1b       	mov.w	r0,@(22,r1)
	*intf = data;
  300720:	d1 38       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  300722:	61 12       	mov.l	@r1,r1
  300724:	62 e3       	mov	r14,r2
  300726:	85 2b       	mov.w	@(22,r2),r0
  300728:	62 03       	mov	r0,r2
  30072a:	21 21       	mov.w	r2,@r1
}
  30072c:	00 09       	nop	
  30072e:	61 e3       	mov	r14,r1
  300730:	92 64       	mov.w	3007fc <custom_r61524_win_set+0x1b4>,r2	! 212
  300732:	60 23       	mov	r2,r0
  300734:	81 1c       	mov.w	r0,@(24,r1)
	*PRDR &= ~0x10;
  300736:	d1 32       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300738:	61 12       	mov.l	@r1,r1
  30073a:	61 10       	mov.b	@r1,r1
  30073c:	63 1c       	extu.b	r1,r3
  30073e:	d1 30       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300740:	61 12       	mov.l	@r1,r1
  300742:	e2 ef       	mov	#-17,r2
  300744:	22 39       	and	r3,r2
  300746:	62 2c       	extu.b	r2,r2
  300748:	21 20       	mov.b	r2,@r1
  30074a:	00 ab       	synco	
	*intf = reg;
  30074c:	d1 2d       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  30074e:	61 12       	mov.l	@r1,r1
  300750:	62 e3       	mov	r14,r2
  300752:	85 2c       	mov.w	@(24,r2),r0
  300754:	62 03       	mov	r0,r2
  300756:	21 21       	mov.w	r2,@r1
  300758:	00 ab       	synco	
	*PRDR |= 0x10;
  30075a:	d1 29       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  30075c:	61 12       	mov.l	@r1,r1
  30075e:	61 10       	mov.b	@r1,r1
  300760:	62 1c       	extu.b	r1,r2
  300762:	d1 27       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300764:	61 12       	mov.l	@r1,r1
  300766:	e3 10       	mov	#16,r3
  300768:	22 3b       	or	r3,r2
  30076a:	62 2c       	extu.b	r2,r2
  30076c:	21 20       	mov.b	r2,@r1
  30076e:	00 ab       	synco	
}
  300770:	00 09       	nop	

	select(vertical_ram_start);
	write(VSA);
  300772:	61 e3       	mov	r14,r1
  300774:	85 12       	mov.w	@(4,r1),r0
  300776:	61 03       	mov	r0,r1
  300778:	62 1d       	extu.w	r1,r2
  30077a:	61 e3       	mov	r14,r1
  30077c:	60 23       	mov	r2,r0
  30077e:	81 1d       	mov.w	r0,@(26,r1)
	*intf = data;
  300780:	d1 20       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  300782:	61 12       	mov.l	@r1,r1
  300784:	62 e3       	mov	r14,r2
  300786:	85 2d       	mov.w	@(26,r2),r0
  300788:	62 03       	mov	r0,r2
  30078a:	21 21       	mov.w	r2,@r1
}
  30078c:	00 09       	nop	
  30078e:	61 e3       	mov	r14,r1
  300790:	92 35       	mov.w	3007fe <custom_r61524_win_set+0x1b6>,r2	! 213
  300792:	60 23       	mov	r2,r0
  300794:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  300796:	d1 1a       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  300798:	61 12       	mov.l	@r1,r1
  30079a:	61 10       	mov.b	@r1,r1
  30079c:	63 1c       	extu.b	r1,r3
  30079e:	d1 18       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3007a0:	61 12       	mov.l	@r1,r1
  3007a2:	e2 ef       	mov	#-17,r2
  3007a4:	22 39       	and	r3,r2
  3007a6:	62 2c       	extu.b	r2,r2
  3007a8:	21 20       	mov.b	r2,@r1
  3007aa:	00 ab       	synco	
	*intf = reg;
  3007ac:	d1 15       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  3007ae:	61 12       	mov.l	@r1,r1
  3007b0:	62 e3       	mov	r14,r2
  3007b2:	85 2e       	mov.w	@(28,r2),r0
  3007b4:	62 03       	mov	r0,r2
  3007b6:	21 21       	mov.w	r2,@r1
  3007b8:	00 ab       	synco	
	*PRDR |= 0x10;
  3007ba:	d1 11       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3007bc:	61 12       	mov.l	@r1,r1
  3007be:	61 10       	mov.b	@r1,r1
  3007c0:	62 1c       	extu.b	r1,r2
  3007c2:	d1 0f       	mov.l	300800 <custom_r61524_win_set+0x1b8>,r1	! 8101684 <PRDR>
  3007c4:	61 12       	mov.l	@r1,r1
  3007c6:	e3 10       	mov	#16,r3
  3007c8:	22 3b       	or	r3,r2
  3007ca:	62 2c       	extu.b	r2,r2
  3007cc:	21 20       	mov.b	r2,@r1
  3007ce:	00 ab       	synco	
}
  3007d0:	00 09       	nop	
	select(vertical_ram_end);
	write(VEA);
  3007d2:	61 e3       	mov	r14,r1
  3007d4:	61 11       	mov.w	@r1,r1
  3007d6:	62 1d       	extu.w	r1,r2
  3007d8:	61 e3       	mov	r14,r1
  3007da:	60 23       	mov	r2,r0
  3007dc:	81 1f       	mov.w	r0,@(30,r1)
	*intf = data;
  3007de:	d1 09       	mov.l	300804 <custom_r61524_win_set+0x1bc>,r1	! 8101680 <intf>
  3007e0:	61 12       	mov.l	@r1,r1
  3007e2:	62 e3       	mov	r14,r2
  3007e4:	85 2f       	mov.w	@(30,r2),r0
  3007e6:	62 03       	mov	r0,r2
  3007e8:	21 21       	mov.w	r2,@r1
}
  3007ea:	00 09       	nop	
}
  3007ec:	00 09       	nop	
  3007ee:	7e 20       	add	#32,r14
  3007f0:	6f e3       	mov	r14,r15
  3007f2:	6e f6       	mov.l	@r15+,r14
  3007f4:	00 0b       	rts	
  3007f6:	00 09       	nop	
  3007f8:	02 10       	.word 0x0210
  3007fa:	02 11       	.word 0x0211
  3007fc:	02 12       	stc	gbr,r2
  3007fe:	02 13       	.word 0x0213
  300800:	08 10       	.word 0x0810
  300802:	16 84       	mov.l	r8,@(16,r6)
  300804:	08 10       	.word 0x0810
  300806:	16 80       	mov.l	r8,@(0,r6)

00300808 <custom_r61524_start_frame>:
//---

/* TODO: r61524: update, backlight, brightness, gamma */

void custom_r61524_start_frame(int xmin, int xmax, int ymin, int ymax)
{
  300808:	2f e6       	mov.l	r14,@-r15
  30080a:	4f 22       	sts.l	pr,@-r15
  30080c:	7f e4       	add	#-28,r15
  30080e:	6e f3       	mov	r15,r14
  300810:	61 e3       	mov	r14,r1
  300812:	71 dc       	add	#-36,r1
  300814:	11 4c       	mov.l	r4,@(48,r1)
  300816:	61 e3       	mov	r14,r1
  300818:	71 dc       	add	#-36,r1
  30081a:	11 5b       	mov.l	r5,@(44,r1)
  30081c:	61 e3       	mov	r14,r1
  30081e:	71 dc       	add	#-36,r1
  300820:	11 6a       	mov.l	r6,@(40,r1)
  300822:	61 e3       	mov	r14,r1
  300824:	71 dc       	add	#-36,r1
  300826:	11 79       	mov.l	r7,@(36,r1)
	/* Move the window to the desired region, then select address 0 */
	custom_r61524_win_set(395-xmax, 395-xmin, ymin, ymax);
  300828:	61 e3       	mov	r14,r1
  30082a:	71 dc       	add	#-36,r1
  30082c:	51 1b       	mov.l	@(44,r1),r1
  30082e:	62 1d       	extu.w	r1,r2
  300830:	91 a6       	mov.w	300980 <custom_r61524_start_frame+0x178>,r1	! 18b
  300832:	31 28       	sub	r2,r1
  300834:	61 1d       	extu.w	r1,r1
  300836:	63 13       	mov	r1,r3
  300838:	61 e3       	mov	r14,r1
  30083a:	71 dc       	add	#-36,r1
  30083c:	51 1c       	mov.l	@(48,r1),r1
  30083e:	62 1d       	extu.w	r1,r2
  300840:	91 9e       	mov.w	300980 <custom_r61524_start_frame+0x178>,r1	! 18b
  300842:	31 28       	sub	r2,r1
  300844:	61 1d       	extu.w	r1,r1
  300846:	62 13       	mov	r1,r2
  300848:	61 e3       	mov	r14,r1
  30084a:	71 dc       	add	#-36,r1
  30084c:	51 1a       	mov.l	@(40,r1),r1
  30084e:	61 1d       	extu.w	r1,r1
  300850:	66 13       	mov	r1,r6
  300852:	61 e3       	mov	r14,r1
  300854:	71 dc       	add	#-36,r1
  300856:	51 19       	mov.l	@(36,r1),r1
  300858:	61 1d       	extu.w	r1,r1
  30085a:	67 13       	mov	r1,r7
  30085c:	65 23       	mov	r2,r5
  30085e:	64 33       	mov	r3,r4
  300860:	d1 49       	mov.l	300988 <custom_r61524_start_frame+0x180>,r1	! 300648 <custom_r61524_win_set>
  300862:	41 0b       	jsr	@r1
  300864:	00 09       	nop	
  300866:	61 e3       	mov	r14,r1
  300868:	71 fc       	add	#-4,r1
  30086a:	92 8a       	mov.w	300982 <custom_r61524_start_frame+0x17a>,r2	! 200
  30086c:	60 23       	mov	r2,r0
  30086e:	81 1b       	mov.w	r0,@(22,r1)
	*PRDR &= ~0x10;
  300870:	d1 46       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  300872:	61 12       	mov.l	@r1,r1
  300874:	61 10       	mov.b	@r1,r1
  300876:	63 1c       	extu.b	r1,r3
  300878:	d1 44       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  30087a:	61 12       	mov.l	@r1,r1
  30087c:	e2 ef       	mov	#-17,r2
  30087e:	22 39       	and	r3,r2
  300880:	62 2c       	extu.b	r2,r2
  300882:	21 20       	mov.b	r2,@r1
  300884:	00 ab       	synco	
	*intf = reg;
  300886:	d1 42       	mov.l	300990 <custom_r61524_start_frame+0x188>,r1	! 8101680 <intf>
  300888:	61 12       	mov.l	@r1,r1
  30088a:	62 e3       	mov	r14,r2
  30088c:	72 fc       	add	#-4,r2
  30088e:	85 2b       	mov.w	@(22,r2),r0
  300890:	62 03       	mov	r0,r2
  300892:	21 21       	mov.w	r2,@r1
  300894:	00 ab       	synco	
	*PRDR |= 0x10;
  300896:	d1 3d       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  300898:	61 12       	mov.l	@r1,r1
  30089a:	61 10       	mov.b	@r1,r1
  30089c:	62 1c       	extu.b	r1,r2
  30089e:	d1 3b       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  3008a0:	61 12       	mov.l	@r1,r1
  3008a2:	e3 10       	mov	#16,r3
  3008a4:	22 3b       	or	r3,r2
  3008a6:	62 2c       	extu.b	r2,r2
  3008a8:	21 20       	mov.b	r2,@r1
  3008aa:	00 ab       	synco	
}
  3008ac:	00 09       	nop	
  3008ae:	61 e3       	mov	r14,r1
  3008b0:	71 fc       	add	#-4,r1
  3008b2:	e2 00       	mov	#0,r2
  3008b4:	60 23       	mov	r2,r0
  3008b6:	81 1c       	mov.w	r0,@(24,r1)
	*intf = data;
  3008b8:	d1 35       	mov.l	300990 <custom_r61524_start_frame+0x188>,r1	! 8101680 <intf>
  3008ba:	61 12       	mov.l	@r1,r1
  3008bc:	62 e3       	mov	r14,r2
  3008be:	72 fc       	add	#-4,r2
  3008c0:	85 2c       	mov.w	@(24,r2),r0
  3008c2:	62 03       	mov	r0,r2
  3008c4:	21 21       	mov.w	r2,@r1
}
  3008c6:	00 09       	nop	
  3008c8:	61 e3       	mov	r14,r1
  3008ca:	71 fc       	add	#-4,r1
  3008cc:	92 5a       	mov.w	300984 <custom_r61524_start_frame+0x17c>,r2	! 201
  3008ce:	60 23       	mov	r2,r0
  3008d0:	81 1d       	mov.w	r0,@(26,r1)
	*PRDR &= ~0x10;
  3008d2:	d1 2e       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  3008d4:	61 12       	mov.l	@r1,r1
  3008d6:	61 10       	mov.b	@r1,r1
  3008d8:	63 1c       	extu.b	r1,r3
  3008da:	d1 2c       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  3008dc:	61 12       	mov.l	@r1,r1
  3008de:	e2 ef       	mov	#-17,r2
  3008e0:	22 39       	and	r3,r2
  3008e2:	62 2c       	extu.b	r2,r2
  3008e4:	21 20       	mov.b	r2,@r1
  3008e6:	00 ab       	synco	
	*intf = reg;
  3008e8:	d1 29       	mov.l	300990 <custom_r61524_start_frame+0x188>,r1	! 8101680 <intf>
  3008ea:	61 12       	mov.l	@r1,r1
  3008ec:	62 e3       	mov	r14,r2
  3008ee:	72 fc       	add	#-4,r2
  3008f0:	85 2d       	mov.w	@(26,r2),r0
  3008f2:	62 03       	mov	r0,r2
  3008f4:	21 21       	mov.w	r2,@r1
  3008f6:	00 ab       	synco	
	*PRDR |= 0x10;
  3008f8:	d1 24       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  3008fa:	61 12       	mov.l	@r1,r1
  3008fc:	61 10       	mov.b	@r1,r1
  3008fe:	62 1c       	extu.b	r1,r2
  300900:	d1 22       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  300902:	61 12       	mov.l	@r1,r1
  300904:	e3 10       	mov	#16,r3
  300906:	22 3b       	or	r3,r2
  300908:	62 2c       	extu.b	r2,r2
  30090a:	21 20       	mov.b	r2,@r1
  30090c:	00 ab       	synco	
}
  30090e:	00 09       	nop	
  300910:	61 e3       	mov	r14,r1
  300912:	71 fc       	add	#-4,r1
  300914:	e2 00       	mov	#0,r2
  300916:	60 23       	mov	r2,r0
  300918:	81 1e       	mov.w	r0,@(28,r1)
	*intf = data;
  30091a:	d1 1d       	mov.l	300990 <custom_r61524_start_frame+0x188>,r1	! 8101680 <intf>
  30091c:	61 12       	mov.l	@r1,r1
  30091e:	62 e3       	mov	r14,r2
  300920:	72 fc       	add	#-4,r2
  300922:	85 2e       	mov.w	@(28,r2),r0
  300924:	62 03       	mov	r0,r2
  300926:	21 21       	mov.w	r2,@r1
}
  300928:	00 09       	nop	
  30092a:	61 e3       	mov	r14,r1
  30092c:	71 fc       	add	#-4,r1
  30092e:	92 2a       	mov.w	300986 <custom_r61524_start_frame+0x17e>,r2	! 202
  300930:	60 23       	mov	r2,r0
  300932:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  300934:	d1 15       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  300936:	61 12       	mov.l	@r1,r1
  300938:	61 10       	mov.b	@r1,r1
  30093a:	63 1c       	extu.b	r1,r3
  30093c:	d1 13       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  30093e:	61 12       	mov.l	@r1,r1
  300940:	e2 ef       	mov	#-17,r2
  300942:	22 39       	and	r3,r2
  300944:	62 2c       	extu.b	r2,r2
  300946:	21 20       	mov.b	r2,@r1
  300948:	00 ab       	synco	
	*intf = reg;
  30094a:	d1 11       	mov.l	300990 <custom_r61524_start_frame+0x188>,r1	! 8101680 <intf>
  30094c:	61 12       	mov.l	@r1,r1
  30094e:	62 e3       	mov	r14,r2
  300950:	72 fc       	add	#-4,r2
  300952:	85 2f       	mov.w	@(30,r2),r0
  300954:	62 03       	mov	r0,r2
  300956:	21 21       	mov.w	r2,@r1
  300958:	00 ab       	synco	
	*PRDR |= 0x10;
  30095a:	d1 0c       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  30095c:	61 12       	mov.l	@r1,r1
  30095e:	61 10       	mov.b	@r1,r1
  300960:	62 1c       	extu.b	r1,r2
  300962:	d1 0a       	mov.l	30098c <custom_r61524_start_frame+0x184>,r1	! 8101684 <PRDR>
  300964:	61 12       	mov.l	@r1,r1
  300966:	e3 10       	mov	#16,r3
  300968:	22 3b       	or	r3,r2
  30096a:	62 2c       	extu.b	r2,r2
  30096c:	21 20       	mov.b	r2,@r1
  30096e:	00 ab       	synco	
}
  300970:	00 09       	nop	
	select(ram_address_vertical);
	write(0);

	/* Bind address 0xb4000000 to the data write command */
	select(write_data);
}
  300972:	00 09       	nop	
  300974:	7e 1c       	add	#28,r14
  300976:	6f e3       	mov	r14,r15
  300978:	4f 26       	lds.l	@r15+,pr
  30097a:	6e f6       	mov.l	@r15+,r14
  30097c:	00 0b       	rts	
  30097e:	00 09       	nop	
  300980:	01 8b       	.word 0x018b
  300982:	02 00       	.word 0x0200
  300984:	02 01       	.word 0x0201
  300986:	02 02       	stc	sr,r2
  300988:	00 30       	.word 0x0030
  30098a:	06 48       	.word 0x0648
  30098c:	08 10       	.word 0x0810
  30098e:	16 84       	mov.l	r8,@(16,r6)
  300990:	08 10       	.word 0x0810
  300992:	16 80       	mov.l	r8,@(0,r6)

00300994 <custom_r61524_display>:

void custom_r61524_display(uint16_t *vram, int start, int height, int method)
{
  300994:	2f e6       	mov.l	r14,@-r15
  300996:	4f 22       	sts.l	pr,@-r15
  300998:	7f e8       	add	#-24,r15
  30099a:	6e f3       	mov	r15,r14
  30099c:	61 e3       	mov	r14,r1
  30099e:	71 d8       	add	#-40,r1
  3009a0:	11 4d       	mov.l	r4,@(52,r1)
  3009a2:	61 e3       	mov	r14,r1
  3009a4:	71 d8       	add	#-40,r1
  3009a6:	11 5c       	mov.l	r5,@(48,r1)
  3009a8:	61 e3       	mov	r14,r1
  3009aa:	71 d8       	add	#-40,r1
  3009ac:	11 6b       	mov.l	r6,@(44,r1)
  3009ae:	61 e3       	mov	r14,r1
  3009b0:	71 d8       	add	#-40,r1
  3009b2:	11 7a       	mov.l	r7,@(40,r1)
	/* Wait for any transfer to finish before using the screen, otherwise
	   the DMA might write data *while* we're sending commands! */
	// dma_transfer_wait(0);

	custom_r61524_start_frame(0, 395, start, start + height - 1);
  3009b4:	62 e3       	mov	r14,r2
  3009b6:	72 d8       	add	#-40,r2
  3009b8:	61 e3       	mov	r14,r1
  3009ba:	71 d8       	add	#-40,r1
  3009bc:	52 2c       	mov.l	@(48,r2),r2
  3009be:	51 1b       	mov.l	@(44,r1),r1
  3009c0:	31 2c       	add	r2,r1
  3009c2:	63 13       	mov	r1,r3
  3009c4:	73 ff       	add	#-1,r3
  3009c6:	61 e3       	mov	r14,r1
  3009c8:	71 d8       	add	#-40,r1
  3009ca:	92 44       	mov.w	300a56 <custom_r61524_display+0xc2>,r2	! 18b
  3009cc:	67 33       	mov	r3,r7
  3009ce:	56 1c       	mov.l	@(48,r1),r6
  3009d0:	65 23       	mov	r2,r5
  3009d2:	e4 00       	mov	#0,r4
  3009d4:	d1 21       	mov.l	300a5c <custom_r61524_display+0xc8>,r1	! 300808 <custom_r61524_start_frame>
  3009d6:	41 0b       	jsr	@r1
  3009d8:	00 09       	nop	

	// if(method == R61524_CPU)
	{
		for(int i = 0; i < 396 * height; i++)
  3009da:	61 e3       	mov	r14,r1
  3009dc:	71 d8       	add	#-40,r1
  3009de:	e2 00       	mov	#0,r2
  3009e0:	11 2f       	mov.l	r2,@(60,r1)
  3009e2:	a0 25       	bra	300a30 <custom_r61524_display+0x9c>
  3009e4:	00 09       	nop	
			write(vram[i + 396 * start]);
  3009e6:	61 e3       	mov	r14,r1
  3009e8:	71 d8       	add	#-40,r1
  3009ea:	52 1c       	mov.l	@(48,r1),r2
  3009ec:	91 34       	mov.w	300a58 <custom_r61524_display+0xc4>,r1	! 18c
  3009ee:	02 17       	mul.l	r1,r2
  3009f0:	02 1a       	sts	macl,r2
  3009f2:	61 e3       	mov	r14,r1
  3009f4:	71 d8       	add	#-40,r1
  3009f6:	51 1f       	mov.l	@(60,r1),r1
  3009f8:	31 2c       	add	r2,r1
  3009fa:	31 1c       	add	r1,r1
  3009fc:	62 e3       	mov	r14,r2
  3009fe:	72 d8       	add	#-40,r2
  300a00:	52 2d       	mov.l	@(52,r2),r2
  300a02:	31 2c       	add	r2,r1
  300a04:	61 11       	mov.w	@r1,r1
  300a06:	61 1d       	extu.w	r1,r1
  300a08:	62 13       	mov	r1,r2
  300a0a:	61 e3       	mov	r14,r1
  300a0c:	71 f8       	add	#-8,r1
  300a0e:	60 23       	mov	r2,r0
  300a10:	81 1d       	mov.w	r0,@(26,r1)
	*intf = data;
  300a12:	d1 13       	mov.l	300a60 <custom_r61524_display+0xcc>,r1	! 8101680 <intf>
  300a14:	61 12       	mov.l	@r1,r1
  300a16:	62 e3       	mov	r14,r2
  300a18:	72 f8       	add	#-8,r2
  300a1a:	85 2d       	mov.w	@(26,r2),r0
  300a1c:	62 03       	mov	r0,r2
  300a1e:	21 21       	mov.w	r2,@r1
}
  300a20:	00 09       	nop	
		for(int i = 0; i < 396 * height; i++)
  300a22:	61 e3       	mov	r14,r1
  300a24:	71 d8       	add	#-40,r1
  300a26:	62 e3       	mov	r14,r2
  300a28:	72 d8       	add	#-40,r2
  300a2a:	52 2f       	mov.l	@(60,r2),r2
  300a2c:	72 01       	add	#1,r2
  300a2e:	11 2f       	mov.l	r2,@(60,r1)
  300a30:	61 e3       	mov	r14,r1
  300a32:	71 d8       	add	#-40,r1
  300a34:	52 1b       	mov.l	@(44,r1),r2
  300a36:	91 0f       	mov.w	300a58 <custom_r61524_display+0xc4>,r1	! 18c
  300a38:	02 17       	mul.l	r1,r2
  300a3a:	02 1a       	sts	macl,r2
  300a3c:	61 e3       	mov	r14,r1
  300a3e:	71 d8       	add	#-40,r1
  300a40:	51 1f       	mov.l	@(60,r1),r1
  300a42:	31 23       	cmp/ge	r2,r1
  300a44:	8b cf       	bf	3009e6 <custom_r61524_display+0x52>
		return;
  300a46:	00 09       	nop	
  300a48:	00 09       	nop	
	// else {
	// 	/* Transfer atomically */
	// 	dma_transfer_atomic(0, DMA_32B, blocks, src, DMA_INC, dst,
	// 		DMA_FIXED);
	// }
}
  300a4a:	7e 18       	add	#24,r14
  300a4c:	6f e3       	mov	r14,r15
  300a4e:	4f 26       	lds.l	@r15+,pr
  300a50:	6e f6       	mov.l	@r15+,r14
  300a52:	00 0b       	rts	
  300a54:	00 09       	nop	
  300a56:	01 8b       	.word 0x018b
  300a58:	01 8c       	mov.b	@(r0,r8),r1
  300a5a:	00 09       	nop	
  300a5c:	00 30       	.word 0x0030
  300a5e:	08 08       	.word 0x0808
  300a60:	08 10       	.word 0x0810
  300a62:	16 80       	mov.l	r8,@(0,r6)

00300a64 <custom_r61524_display_rect>:

void custom_r61524_display_rect(uint16_t *vram, int xmin, int xmax, int ymin,
	int ymax)
{
  300a64:	2f e6       	mov.l	r14,@-r15
  300a66:	4f 22       	sts.l	pr,@-r15
  300a68:	7f e4       	add	#-28,r15
  300a6a:	6e f3       	mov	r15,r14
  300a6c:	61 e3       	mov	r14,r1
  300a6e:	71 dc       	add	#-36,r1
  300a70:	11 4c       	mov.l	r4,@(48,r1)
  300a72:	61 e3       	mov	r14,r1
  300a74:	71 dc       	add	#-36,r1
  300a76:	11 5b       	mov.l	r5,@(44,r1)
  300a78:	61 e3       	mov	r14,r1
  300a7a:	71 dc       	add	#-36,r1
  300a7c:	11 6a       	mov.l	r6,@(40,r1)
  300a7e:	61 e3       	mov	r14,r1
  300a80:	71 dc       	add	#-36,r1
  300a82:	11 79       	mov.l	r7,@(36,r1)
	// dma_transfer_wait(0);
	custom_r61524_start_frame(xmin, xmax, ymin, ymax);
  300a84:	63 e3       	mov	r14,r3
  300a86:	73 dc       	add	#-36,r3
  300a88:	62 e3       	mov	r14,r2
  300a8a:	72 dc       	add	#-36,r2
  300a8c:	61 e3       	mov	r14,r1
  300a8e:	71 dc       	add	#-36,r1
  300a90:	57 e9       	mov.l	@(36,r14),r7
  300a92:	56 39       	mov.l	@(36,r3),r6
  300a94:	55 2a       	mov.l	@(40,r2),r5
  300a96:	54 1b       	mov.l	@(44,r1),r4
  300a98:	d1 37       	mov.l	300b78 <custom_r61524_display_rect+0x114>,r1	! 300808 <custom_r61524_start_frame>
  300a9a:	41 0b       	jsr	@r1
  300a9c:	00 09       	nop	

	vram += 396 * ymin + xmin;
  300a9e:	61 e3       	mov	r14,r1
  300aa0:	71 dc       	add	#-36,r1
  300aa2:	52 19       	mov.l	@(36,r1),r2
  300aa4:	91 65       	mov.w	300b72 <custom_r61524_display_rect+0x10e>,r1	! 18c
  300aa6:	02 17       	mul.l	r1,r2
  300aa8:	02 1a       	sts	macl,r2
  300aaa:	61 e3       	mov	r14,r1
  300aac:	71 dc       	add	#-36,r1
  300aae:	51 1b       	mov.l	@(44,r1),r1
  300ab0:	31 2c       	add	r2,r1
  300ab2:	62 13       	mov	r1,r2
  300ab4:	32 2c       	add	r2,r2
  300ab6:	61 e3       	mov	r14,r1
  300ab8:	71 dc       	add	#-36,r1
  300aba:	63 e3       	mov	r14,r3
  300abc:	73 dc       	add	#-36,r3
  300abe:	53 3c       	mov.l	@(48,r3),r3
  300ac0:	32 3c       	add	r3,r2
  300ac2:	11 2c       	mov.l	r2,@(48,r1)

	for(int y = 0; y < ymax - ymin + 1; y++) {
  300ac4:	61 e3       	mov	r14,r1
  300ac6:	71 dc       	add	#-36,r1
  300ac8:	e2 00       	mov	#0,r2
  300aca:	11 2f       	mov.l	r2,@(60,r1)
  300acc:	a0 3f       	bra	300b4e <custom_r61524_display_rect+0xea>
  300ace:	00 09       	nop	
		for(int x = 0; x < xmax - xmin + 1; x++)
  300ad0:	61 e3       	mov	r14,r1
  300ad2:	71 dc       	add	#-36,r1
  300ad4:	e2 00       	mov	#0,r2
  300ad6:	11 2e       	mov.l	r2,@(56,r1)
  300ad8:	a0 1e       	bra	300b18 <custom_r61524_display_rect+0xb4>
  300ada:	00 09       	nop	
			write(vram[x]);
  300adc:	61 e3       	mov	r14,r1
  300ade:	71 dc       	add	#-36,r1
  300ae0:	51 1e       	mov.l	@(56,r1),r1
  300ae2:	31 1c       	add	r1,r1
  300ae4:	62 e3       	mov	r14,r2
  300ae6:	72 dc       	add	#-36,r2
  300ae8:	52 2c       	mov.l	@(48,r2),r2
  300aea:	31 2c       	add	r2,r1
  300aec:	61 11       	mov.w	@r1,r1
  300aee:	61 1d       	extu.w	r1,r1
  300af0:	62 13       	mov	r1,r2
  300af2:	61 e3       	mov	r14,r1
  300af4:	71 fc       	add	#-4,r1
  300af6:	60 23       	mov	r2,r0
  300af8:	81 1b       	mov.w	r0,@(22,r1)
	*intf = data;
  300afa:	d1 20       	mov.l	300b7c <custom_r61524_display_rect+0x118>,r1	! 8101680 <intf>
  300afc:	61 12       	mov.l	@r1,r1
  300afe:	62 e3       	mov	r14,r2
  300b00:	72 fc       	add	#-4,r2
  300b02:	85 2b       	mov.w	@(22,r2),r0
  300b04:	62 03       	mov	r0,r2
  300b06:	21 21       	mov.w	r2,@r1
}
  300b08:	00 09       	nop	
		for(int x = 0; x < xmax - xmin + 1; x++)
  300b0a:	61 e3       	mov	r14,r1
  300b0c:	71 dc       	add	#-36,r1
  300b0e:	62 e3       	mov	r14,r2
  300b10:	72 dc       	add	#-36,r2
  300b12:	52 2e       	mov.l	@(56,r2),r2
  300b14:	72 01       	add	#1,r2
  300b16:	11 2e       	mov.l	r2,@(56,r1)
  300b18:	61 e3       	mov	r14,r1
  300b1a:	71 dc       	add	#-36,r1
  300b1c:	62 e3       	mov	r14,r2
  300b1e:	72 dc       	add	#-36,r2
  300b20:	51 1a       	mov.l	@(40,r1),r1
  300b22:	52 2b       	mov.l	@(44,r2),r2
  300b24:	31 28       	sub	r2,r1
  300b26:	62 e3       	mov	r14,r2
  300b28:	72 dc       	add	#-36,r2
  300b2a:	52 2e       	mov.l	@(56,r2),r2
  300b2c:	32 17       	cmp/gt	r1,r2
  300b2e:	8b d5       	bf	300adc <custom_r61524_display_rect+0x78>
		vram += 396;
  300b30:	61 e3       	mov	r14,r1
  300b32:	71 dc       	add	#-36,r1
  300b34:	62 e3       	mov	r14,r2
  300b36:	72 dc       	add	#-36,r2
  300b38:	52 2c       	mov.l	@(48,r2),r2
  300b3a:	93 1b       	mov.w	300b74 <custom_r61524_display_rect+0x110>,r3	! 318
  300b3c:	32 3c       	add	r3,r2
  300b3e:	11 2c       	mov.l	r2,@(48,r1)
	for(int y = 0; y < ymax - ymin + 1; y++) {
  300b40:	61 e3       	mov	r14,r1
  300b42:	71 dc       	add	#-36,r1
  300b44:	62 e3       	mov	r14,r2
  300b46:	72 dc       	add	#-36,r2
  300b48:	52 2f       	mov.l	@(60,r2),r2
  300b4a:	72 01       	add	#1,r2
  300b4c:	11 2f       	mov.l	r2,@(60,r1)
  300b4e:	62 e3       	mov	r14,r2
  300b50:	72 dc       	add	#-36,r2
  300b52:	51 e9       	mov.l	@(36,r14),r1
  300b54:	52 29       	mov.l	@(36,r2),r2
  300b56:	31 28       	sub	r2,r1
  300b58:	62 e3       	mov	r14,r2
  300b5a:	72 dc       	add	#-36,r2
  300b5c:	52 2f       	mov.l	@(60,r2),r2
  300b5e:	32 17       	cmp/gt	r1,r2
  300b60:	8b b6       	bf	300ad0 <custom_r61524_display_rect+0x6c>
	}
}
  300b62:	00 09       	nop	
  300b64:	00 09       	nop	
  300b66:	7e 1c       	add	#28,r14
  300b68:	6f e3       	mov	r14,r15
  300b6a:	4f 26       	lds.l	@r15+,pr
  300b6c:	6e f6       	mov.l	@r15+,r14
  300b6e:	00 0b       	rts	
  300b70:	00 09       	nop	
  300b72:	01 8c       	mov.b	@(r0,r8),r1
  300b74:	03 18       	.word 0x0318
  300b76:	00 09       	nop	
  300b78:	00 30       	.word 0x0030
  300b7a:	08 08       	.word 0x0808
  300b7c:	08 10       	.word 0x0810
  300b7e:	16 80       	mov.l	r8,@(0,r6)

00300b80 <test>:
  300b80:	4f 22       	sts.l	pr,@-r15
  300b82:	e0 7b       	mov	#123,r0
  300b84:	e1 7b       	mov	#123,r1
  300b86:	60 08       	swap.b	r0,r0
  300b88:	c8 80       	tst	#128,r0
  300b8a:	89 00       	bt	300b8e <jump>
  300b8c:	e1 00       	mov	#0,r1

00300b8e <jump>:
  300b8e:	60 1f       	exts.w	r1,r0
  300b90:	4f 26       	lds.l	@r15+,pr
  300b92:	00 0b       	rts	
  300b94:	00 09       	nop	
  300b96:	00 09       	nop	

00300b98 <__clzdi2>:
{
  const DWunion uu = {.ll = x};
  UWtype word;
  Wtype ret, add;

  if (uu.s.high)
  300b98:	24 48       	tst	r4,r4
  300b9a:	8d 15       	bt.s	300bc8 <__clzdi2+0x30>
  300b9c:	60 53       	mov	r5,r0
    word = uu.s.high, add = 0;
  else
    word = uu.s.low, add = W_TYPE_SIZE;

  count_leading_zeros (ret, word);
  300b9e:	d1 18       	mov.l	300c00 <__clzdi2+0x68>,r1	! ffff
    word = uu.s.high, add = 0;
  300ba0:	60 43       	mov	r4,r0
  count_leading_zeros (ret, word);
  300ba2:	30 16       	cmp/hi	r1,r0
  300ba4:	8d 14       	bt.s	300bd0 <__clzdi2+0x38>
  300ba6:	e3 00       	mov	#0,r3
  300ba8:	91 29       	mov.w	300bfe <__clzdi2+0x66>,r1	! ff
  300baa:	30 16       	cmp/hi	r1,r0
  300bac:	01 29       	movt	r1
  300bae:	41 08       	shll2	r1
  300bb0:	31 1c       	add	r1,r1
  300bb2:	61 1b       	neg	r1,r1
  300bb4:	40 1d       	shld	r1,r0
  300bb6:	62 13       	mov	r1,r2
  300bb8:	d1 12       	mov.l	300c04 <__clzdi2+0x6c>,r1	! 30e8dc <__clz_tab>
  300bba:	72 20       	add	#32,r2
  300bbc:	01 1c       	mov.b	@(r0,r1),r1
  300bbe:	60 23       	mov	r2,r0
  300bc0:	61 1c       	extu.b	r1,r1
  300bc2:	30 18       	sub	r1,r0
  return ret + add;
}
  300bc4:	00 0b       	rts	
  300bc6:	30 3c       	add	r3,r0
  count_leading_zeros (ret, word);
  300bc8:	d1 0d       	mov.l	300c00 <__clzdi2+0x68>,r1	! ffff
  300bca:	30 16       	cmp/hi	r1,r0
  300bcc:	8f ec       	bf.s	300ba8 <__clzdi2+0x10>
  300bce:	e3 20       	mov	#32,r3
  300bd0:	d1 0d       	mov.l	300c08 <__clzdi2+0x70>,r1	! ffffff
  300bd2:	30 16       	cmp/hi	r1,r0
  300bd4:	8d 0a       	bt.s	300bec <__clzdi2+0x54>
  300bd6:	e1 e8       	mov	#-24,r1
  300bd8:	e1 f0       	mov	#-16,r1
  300bda:	40 1d       	shld	r1,r0
  300bdc:	d1 09       	mov.l	300c04 <__clzdi2+0x6c>,r1	! 30e8dc <__clz_tab>
  300bde:	e2 10       	mov	#16,r2
  300be0:	01 1c       	mov.b	@(r0,r1),r1
  300be2:	60 23       	mov	r2,r0
  300be4:	61 1c       	extu.b	r1,r1
  300be6:	30 18       	sub	r1,r0
}
  300be8:	00 0b       	rts	
  300bea:	30 3c       	add	r3,r0
  count_leading_zeros (ret, word);
  300bec:	40 1d       	shld	r1,r0
  300bee:	d1 05       	mov.l	300c04 <__clzdi2+0x6c>,r1	! 30e8dc <__clz_tab>
  300bf0:	e2 08       	mov	#8,r2
  300bf2:	01 1c       	mov.b	@(r0,r1),r1
  300bf4:	60 23       	mov	r2,r0
  300bf6:	61 1c       	extu.b	r1,r1
  300bf8:	30 18       	sub	r1,r0
}
  300bfa:	00 0b       	rts	
  300bfc:	30 3c       	add	r3,r0
  300bfe:	00 ff       	mac.l	@r15+,@r0+
  300c00:	00 00       	.word 0x0000
  300c02:	ff ff       	.word 0xffff
  300c04:	00 30       	.word 0x0030
  300c06:	e8 dc       	mov	#-36,r8
  300c08:	00 ff       	mac.l	@r15+,@r0+
  300c0a:	ff ff       	.word 0xffff

00300c0c <GINT_CALL_SET_function>:
//---

/* GINT_CALL_SET(): Callback that sets an integer to 1
   This is defined as a function to make sure the pointer is to an int. */
static int GINT_CALL_SET_function(int volatile *pointer)
{
  300c0c:	2f e6       	mov.l	r14,@-r15
  300c0e:	7f fc       	add	#-4,r15
  300c10:	6e f3       	mov	r15,r14
  300c12:	61 e3       	mov	r14,r1
  300c14:	71 c4       	add	#-60,r1
  300c16:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  300c18:	61 e3       	mov	r14,r1
  300c1a:	71 c4       	add	#-60,r1
  300c1c:	51 1f       	mov.l	@(60,r1),r1
  300c1e:	e2 01       	mov	#1,r2
  300c20:	21 22       	mov.l	r2,@r1
	return 0;
  300c22:	e1 00       	mov	#0,r1
}
  300c24:	60 13       	mov	r1,r0
  300c26:	7e 04       	add	#4,r14
  300c28:	6f e3       	mov	r14,r15
  300c2a:	6e f6       	mov.l	@r15+,r14
  300c2c:	00 0b       	rts	
  300c2e:	00 09       	nop	

00300c30 <GINT_CALL_INC_function>:
	return GINT_CALL(GINT_CALL_SET_function, pointer);
}

/* GINT_CALL_INC(): Callback that increments an integer */
static int GINT_CALL_INC_function(int volatile *pointer)
{
  300c30:	2f e6       	mov.l	r14,@-r15
  300c32:	7f fc       	add	#-4,r15
  300c34:	6e f3       	mov	r15,r14
  300c36:	61 e3       	mov	r14,r1
  300c38:	71 c4       	add	#-60,r1
  300c3a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  300c3c:	61 e3       	mov	r14,r1
  300c3e:	71 c4       	add	#-60,r1
  300c40:	51 1f       	mov.l	@(60,r1),r1
  300c42:	61 12       	mov.l	@r1,r1
  300c44:	62 13       	mov	r1,r2
  300c46:	72 01       	add	#1,r2
  300c48:	61 e3       	mov	r14,r1
  300c4a:	71 c4       	add	#-60,r1
  300c4c:	51 1f       	mov.l	@(60,r1),r1
  300c4e:	21 22       	mov.l	r2,@r1
	return 0;
  300c50:	e1 00       	mov	#0,r1
}
  300c52:	60 13       	mov	r1,r0
  300c54:	7e 04       	add	#4,r14
  300c56:	6f e3       	mov	r14,r15
  300c58:	6e f6       	mov.l	@r15+,r14
  300c5a:	00 0b       	rts	
  300c5c:	00 09       	nop	

00300c5e <GINT_CALL_SET_STOP_function>:
	return GINT_CALL(GINT_CALL_INC_function, pointer);
}

/* GINT_CALL_SET_STOP(): Same as GINT_CALL_SET(), but returns TIMER_STOP */
static int GINT_CALL_SET_STOP_function(int volatile *pointer)
{
  300c5e:	2f e6       	mov.l	r14,@-r15
  300c60:	7f fc       	add	#-4,r15
  300c62:	6e f3       	mov	r15,r14
  300c64:	61 e3       	mov	r14,r1
  300c66:	71 c4       	add	#-60,r1
  300c68:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  300c6a:	61 e3       	mov	r14,r1
  300c6c:	71 c4       	add	#-60,r1
  300c6e:	51 1f       	mov.l	@(60,r1),r1
  300c70:	e2 01       	mov	#1,r2
  300c72:	21 22       	mov.l	r2,@r1
	return 1;
  300c74:	e1 01       	mov	#1,r1
}
  300c76:	60 13       	mov	r1,r0
  300c78:	7e 04       	add	#4,r14
  300c7a:	6f e3       	mov	r14,r15
  300c7c:	6e f6       	mov.l	@r15+,r14
  300c7e:	00 0b       	rts	
  300c80:	00 09       	nop	

00300c82 <GINT_CALL_INC_STOP_function>:
	return GINT_CALL(GINT_CALL_SET_STOP_function, pointer);
}

/* GINT_CALL_INC(): Callback that increments an integer */
static int GINT_CALL_INC_STOP_function(int volatile *pointer)
{
  300c82:	2f e6       	mov.l	r14,@-r15
  300c84:	7f fc       	add	#-4,r15
  300c86:	6e f3       	mov	r15,r14
  300c88:	61 e3       	mov	r14,r1
  300c8a:	71 c4       	add	#-60,r1
  300c8c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  300c8e:	61 e3       	mov	r14,r1
  300c90:	71 c4       	add	#-60,r1
  300c92:	51 1f       	mov.l	@(60,r1),r1
  300c94:	61 12       	mov.l	@r1,r1
  300c96:	62 13       	mov	r1,r2
  300c98:	72 01       	add	#1,r2
  300c9a:	61 e3       	mov	r14,r1
  300c9c:	71 c4       	add	#-60,r1
  300c9e:	51 1f       	mov.l	@(60,r1),r1
  300ca0:	21 22       	mov.l	r2,@r1
	return 1;
  300ca2:	e1 01       	mov	#1,r1
}
  300ca4:	60 13       	mov	r1,r0
  300ca6:	7e 04       	add	#4,r14
  300ca8:	6f e3       	mov	r14,r15
  300caa:	6e f6       	mov.l	@r15+,r14
  300cac:	00 0b       	rts	
  300cae:	00 09       	nop	

00300cb0 <gint_setrestart>:
{
  300cb0:	2f e6       	mov.l	r14,@-r15
  300cb2:	7f fc       	add	#-4,r15
  300cb4:	6e f3       	mov	r15,r14
  300cb6:	61 e3       	mov	r14,r1
  300cb8:	71 c4       	add	#-60,r1
  300cba:	11 4f       	mov.l	r4,@(60,r1)
	gint_restart = restart;
  300cbc:	d1 05       	mov.l	300cd4 <gint_setrestart+0x24>,r1	! 8101400 <gint_restart>
  300cbe:	62 e3       	mov	r14,r2
  300cc0:	72 c4       	add	#-60,r2
  300cc2:	52 2f       	mov.l	@(60,r2),r2
  300cc4:	21 22       	mov.l	r2,@r1
}
  300cc6:	00 09       	nop	
  300cc8:	7e 04       	add	#4,r14
  300cca:	6f e3       	mov	r14,r15
  300ccc:	6e f6       	mov.l	@r15+,r14
  300cce:	00 0b       	rts	
  300cd0:	00 09       	nop	
  300cd2:	00 09       	nop	
  300cd4:	08 10       	.word 0x0810
  300cd6:	14 00       	mov.l	r0,@(0,r4)

00300cd8 <regcpy>:
{
  300cd8:	2f e6       	mov.l	r14,@-r15
  300cda:	7f f4       	add	#-12,r15
  300cdc:	6e f3       	mov	r15,r14
  300cde:	61 e3       	mov	r14,r1
  300ce0:	71 cc       	add	#-52,r1
  300ce2:	11 4f       	mov.l	r4,@(60,r1)
  300ce4:	61 e3       	mov	r14,r1
  300ce6:	71 cc       	add	#-52,r1
  300ce8:	11 5e       	mov.l	r5,@(56,r1)
  300cea:	61 e3       	mov	r14,r1
  300cec:	71 cc       	add	#-52,r1
  300cee:	11 6d       	mov.l	r6,@(52,r1)
	while(s > 0)
  300cf0:	a0 4f       	bra	300d92 <regcpy+0xba>
  300cf2:	00 09       	nop	
		*r++ = *l++;
  300cf4:	61 e3       	mov	r14,r1
  300cf6:	71 cc       	add	#-52,r1
  300cf8:	52 1f       	mov.l	@(60,r1),r2
  300cfa:	61 e3       	mov	r14,r1
  300cfc:	71 cc       	add	#-52,r1
  300cfe:	63 23       	mov	r2,r3
  300d00:	73 04       	add	#4,r3
  300d02:	11 3f       	mov.l	r3,@(60,r1)
  300d04:	61 e3       	mov	r14,r1
  300d06:	71 cc       	add	#-52,r1
  300d08:	51 1d       	mov.l	@(52,r1),r1
  300d0a:	63 e3       	mov	r14,r3
  300d0c:	73 cc       	add	#-52,r3
  300d0e:	67 13       	mov	r1,r7
  300d10:	77 04       	add	#4,r7
  300d12:	13 7d       	mov.l	r7,@(52,r3)
  300d14:	62 22       	mov.l	@r2,r2
  300d16:	21 22       	mov.l	r2,@r1
		*r++ = *l++;
  300d18:	61 e3       	mov	r14,r1
  300d1a:	71 cc       	add	#-52,r1
  300d1c:	52 1f       	mov.l	@(60,r1),r2
  300d1e:	61 e3       	mov	r14,r1
  300d20:	71 cc       	add	#-52,r1
  300d22:	63 23       	mov	r2,r3
  300d24:	73 04       	add	#4,r3
  300d26:	11 3f       	mov.l	r3,@(60,r1)
  300d28:	61 e3       	mov	r14,r1
  300d2a:	71 cc       	add	#-52,r1
  300d2c:	51 1d       	mov.l	@(52,r1),r1
  300d2e:	63 e3       	mov	r14,r3
  300d30:	73 cc       	add	#-52,r3
  300d32:	67 13       	mov	r1,r7
  300d34:	77 04       	add	#4,r7
  300d36:	13 7d       	mov.l	r7,@(52,r3)
  300d38:	62 22       	mov.l	@r2,r2
  300d3a:	21 22       	mov.l	r2,@r1
		*r++ = *l++;
  300d3c:	61 e3       	mov	r14,r1
  300d3e:	71 cc       	add	#-52,r1
  300d40:	52 1f       	mov.l	@(60,r1),r2
  300d42:	61 e3       	mov	r14,r1
  300d44:	71 cc       	add	#-52,r1
  300d46:	63 23       	mov	r2,r3
  300d48:	73 04       	add	#4,r3
  300d4a:	11 3f       	mov.l	r3,@(60,r1)
  300d4c:	61 e3       	mov	r14,r1
  300d4e:	71 cc       	add	#-52,r1
  300d50:	51 1d       	mov.l	@(52,r1),r1
  300d52:	63 e3       	mov	r14,r3
  300d54:	73 cc       	add	#-52,r3
  300d56:	67 13       	mov	r1,r7
  300d58:	77 04       	add	#4,r7
  300d5a:	13 7d       	mov.l	r7,@(52,r3)
  300d5c:	62 22       	mov.l	@r2,r2
  300d5e:	21 22       	mov.l	r2,@r1
		*r++ = *l++;
  300d60:	61 e3       	mov	r14,r1
  300d62:	71 cc       	add	#-52,r1
  300d64:	52 1f       	mov.l	@(60,r1),r2
  300d66:	61 e3       	mov	r14,r1
  300d68:	71 cc       	add	#-52,r1
  300d6a:	63 23       	mov	r2,r3
  300d6c:	73 04       	add	#4,r3
  300d6e:	11 3f       	mov.l	r3,@(60,r1)
  300d70:	61 e3       	mov	r14,r1
  300d72:	71 cc       	add	#-52,r1
  300d74:	51 1d       	mov.l	@(52,r1),r1
  300d76:	63 e3       	mov	r14,r3
  300d78:	73 cc       	add	#-52,r3
  300d7a:	67 13       	mov	r1,r7
  300d7c:	77 04       	add	#4,r7
  300d7e:	13 7d       	mov.l	r7,@(52,r3)
  300d80:	62 22       	mov.l	@r2,r2
  300d82:	21 22       	mov.l	r2,@r1
		s -= 16;
  300d84:	61 e3       	mov	r14,r1
  300d86:	71 cc       	add	#-52,r1
  300d88:	62 e3       	mov	r14,r2
  300d8a:	72 cc       	add	#-52,r2
  300d8c:	52 2e       	mov.l	@(56,r2),r2
  300d8e:	72 f0       	add	#-16,r2
  300d90:	11 2e       	mov.l	r2,@(56,r1)
	while(s > 0)
  300d92:	61 e3       	mov	r14,r1
  300d94:	71 cc       	add	#-52,r1
  300d96:	51 1e       	mov.l	@(56,r1),r1
  300d98:	41 15       	cmp/pl	r1
  300d9a:	89 ab       	bt	300cf4 <regcpy+0x1c>
}
  300d9c:	00 09       	nop	
  300d9e:	00 09       	nop	
  300da0:	7e 0c       	add	#12,r14
  300da2:	6f e3       	mov	r14,r15
  300da4:	6e f6       	mov.l	@r15+,r14
  300da6:	00 0b       	rts	
  300da8:	00 09       	nop	

00300daa <regclr>:
{
  300daa:	2f e6       	mov.l	r14,@-r15
  300dac:	7f f8       	add	#-8,r15
  300dae:	6e f3       	mov	r15,r14
  300db0:	61 e3       	mov	r14,r1
  300db2:	71 c8       	add	#-56,r1
  300db4:	11 4f       	mov.l	r4,@(60,r1)
  300db6:	61 e3       	mov	r14,r1
  300db8:	71 c8       	add	#-56,r1
  300dba:	11 5e       	mov.l	r5,@(56,r1)
	while(s > 0)
  300dbc:	a0 2f       	bra	300e1e <regclr+0x74>
  300dbe:	00 09       	nop	
		*r++ = 0;
  300dc0:	61 e3       	mov	r14,r1
  300dc2:	71 c8       	add	#-56,r1
  300dc4:	51 1f       	mov.l	@(60,r1),r1
  300dc6:	62 e3       	mov	r14,r2
  300dc8:	72 c8       	add	#-56,r2
  300dca:	63 13       	mov	r1,r3
  300dcc:	73 04       	add	#4,r3
  300dce:	12 3f       	mov.l	r3,@(60,r2)
  300dd0:	e2 00       	mov	#0,r2
  300dd2:	21 22       	mov.l	r2,@r1
		*r++ = 0;
  300dd4:	61 e3       	mov	r14,r1
  300dd6:	71 c8       	add	#-56,r1
  300dd8:	51 1f       	mov.l	@(60,r1),r1
  300dda:	62 e3       	mov	r14,r2
  300ddc:	72 c8       	add	#-56,r2
  300dde:	63 13       	mov	r1,r3
  300de0:	73 04       	add	#4,r3
  300de2:	12 3f       	mov.l	r3,@(60,r2)
  300de4:	e2 00       	mov	#0,r2
  300de6:	21 22       	mov.l	r2,@r1
		*r++ = 0;
  300de8:	61 e3       	mov	r14,r1
  300dea:	71 c8       	add	#-56,r1
  300dec:	51 1f       	mov.l	@(60,r1),r1
  300dee:	62 e3       	mov	r14,r2
  300df0:	72 c8       	add	#-56,r2
  300df2:	63 13       	mov	r1,r3
  300df4:	73 04       	add	#4,r3
  300df6:	12 3f       	mov.l	r3,@(60,r2)
  300df8:	e2 00       	mov	#0,r2
  300dfa:	21 22       	mov.l	r2,@r1
		*r++ = 0;
  300dfc:	61 e3       	mov	r14,r1
  300dfe:	71 c8       	add	#-56,r1
  300e00:	51 1f       	mov.l	@(60,r1),r1
  300e02:	62 e3       	mov	r14,r2
  300e04:	72 c8       	add	#-56,r2
  300e06:	63 13       	mov	r1,r3
  300e08:	73 04       	add	#4,r3
  300e0a:	12 3f       	mov.l	r3,@(60,r2)
  300e0c:	e2 00       	mov	#0,r2
  300e0e:	21 22       	mov.l	r2,@r1
		s -= 16;
  300e10:	61 e3       	mov	r14,r1
  300e12:	71 c8       	add	#-56,r1
  300e14:	62 e3       	mov	r14,r2
  300e16:	72 c8       	add	#-56,r2
  300e18:	52 2e       	mov.l	@(56,r2),r2
  300e1a:	72 f0       	add	#-16,r2
  300e1c:	11 2e       	mov.l	r2,@(56,r1)
	while(s > 0)
  300e1e:	61 e3       	mov	r14,r1
  300e20:	71 c8       	add	#-56,r1
  300e22:	51 1e       	mov.l	@(56,r1),r1
  300e24:	41 15       	cmp/pl	r1
  300e26:	89 cb       	bt	300dc0 <regclr+0x16>
}
  300e28:	00 09       	nop	
  300e2a:	00 09       	nop	
  300e2c:	7e 08       	add	#8,r14
  300e2e:	6f e3       	mov	r14,r15
  300e30:	6e f6       	mov.l	@r15+,r14
  300e32:	00 0b       	rts	
  300e34:	00 09       	nop	

00300e36 <callarray>:
{
  300e36:	2f e6       	mov.l	r14,@-r15
  300e38:	4f 22       	sts.l	pr,@-r15
  300e3a:	7f f8       	add	#-8,r15
  300e3c:	6e f3       	mov	r15,r14
  300e3e:	61 e3       	mov	r14,r1
  300e40:	71 c8       	add	#-56,r1
  300e42:	11 4f       	mov.l	r4,@(60,r1)
  300e44:	61 e3       	mov	r14,r1
  300e46:	71 c8       	add	#-56,r1
  300e48:	11 5e       	mov.l	r5,@(56,r1)
	while(f < l) (*(*f++))();
  300e4a:	a0 0b       	bra	300e64 <callarray+0x2e>
  300e4c:	00 09       	nop	
  300e4e:	61 e3       	mov	r14,r1
  300e50:	71 c8       	add	#-56,r1
  300e52:	51 1f       	mov.l	@(60,r1),r1
  300e54:	62 e3       	mov	r14,r2
  300e56:	72 c8       	add	#-56,r2
  300e58:	63 13       	mov	r1,r3
  300e5a:	73 04       	add	#4,r3
  300e5c:	12 3f       	mov.l	r3,@(60,r2)
  300e5e:	61 12       	mov.l	@r1,r1
  300e60:	41 0b       	jsr	@r1
  300e62:	00 09       	nop	
  300e64:	62 e3       	mov	r14,r2
  300e66:	72 c8       	add	#-56,r2
  300e68:	61 e3       	mov	r14,r1
  300e6a:	71 c8       	add	#-56,r1
  300e6c:	52 2f       	mov.l	@(60,r2),r2
  300e6e:	51 1e       	mov.l	@(56,r1),r1
  300e70:	32 12       	cmp/hs	r1,r2
  300e72:	8b ec       	bf	300e4e <callarray+0x18>
}
  300e74:	00 09       	nop	
  300e76:	00 09       	nop	
  300e78:	7e 08       	add	#8,r14
  300e7a:	6f e3       	mov	r14,r15
  300e7c:	4f 26       	lds.l	@r15+,pr
  300e7e:	6e f6       	mov.l	@r15+,r14
  300e80:	00 0b       	rts	
  300e82:	00 09       	nop	

00300e84 <start2>:
{
  300e84:	2f e6       	mov.l	r14,@-r15
  300e86:	4f 22       	sts.l	pr,@-r15
  300e88:	7f f8       	add	#-8,r15
  300e8a:	6e f3       	mov	r15,r14
  300e8c:	61 e3       	mov	r14,r1
  300e8e:	71 c8       	add	#-56,r1
  300e90:	11 4f       	mov.l	r4,@(60,r1)
  300e92:	61 e3       	mov	r14,r1
  300e94:	71 c8       	add	#-56,r1
  300e96:	11 5e       	mov.l	r5,@(56,r1)
	hw_detect();
  300e98:	d1 2b       	mov.l	300f48 <start2+0xc4>,r1	! 302264 <hw_detect>
  300e9a:	41 0b       	jsr	@r1
  300e9c:	00 09       	nop	
	regcpy(&ldata,  &sdata,  &rdata);
  300e9e:	d2 2b       	mov.l	300f4c <start2+0xc8>,r2	! 160 <sdata>
  300ea0:	d3 2b       	mov.l	300f50 <start2+0xcc>,r3	! 8101670 <print>
  300ea2:	d1 2c       	mov.l	300f54 <start2+0xd0>,r1	! 30f604 <ldata>
  300ea4:	66 33       	mov	r3,r6
  300ea6:	65 23       	mov	r2,r5
  300ea8:	64 13       	mov	r1,r4
  300eaa:	d1 2b       	mov.l	300f58 <start2+0xd4>,r1	! 300cd8 <regcpy>
  300eac:	41 0b       	jsr	@r1
  300eae:	00 09       	nop	
	regclr(&rbss, &sbss);
  300eb0:	d2 2a       	mov.l	300f5c <start2+0xd8>,r2	! 270 <sbss>
  300eb2:	d1 2b       	mov.l	300f60 <start2+0xdc>,r1	! 8101400 <gint_restart>
  300eb4:	65 23       	mov	r2,r5
  300eb6:	64 13       	mov	r1,r4
  300eb8:	d1 2a       	mov.l	300f64 <start2+0xe0>,r1	! 300daa <regclr>
  300eba:	41 0b       	jsr	@r1
  300ebc:	00 09       	nop	
		regcpy(&lilram, &silram, &rilram);
  300ebe:	d2 2a       	mov.l	300f68 <start2+0xe4>,r2	! 80 <silram>
  300ec0:	d3 2a       	mov.l	300f6c <start2+0xe8>,r3	! e5200000 <rilram>
  300ec2:	d1 2b       	mov.l	300f70 <start2+0xec>,r1	! 30f764 <lilram>
  300ec4:	66 33       	mov	r3,r6
  300ec6:	65 23       	mov	r2,r5
  300ec8:	64 13       	mov	r1,r4
  300eca:	d1 23       	mov.l	300f58 <start2+0xd4>,r1	! 300cd8 <regcpy>
  300ecc:	41 0b       	jsr	@r1
  300ece:	00 09       	nop	
		regcpy(&lxyram, &sxyram, &rxyram);
  300ed0:	d2 28       	mov.l	300f74 <start2+0xf0>,r2	! 0 <sxyram>
  300ed2:	d3 29       	mov.l	300f78 <start2+0xf4>,r3	! e500e000 <rxyram>
  300ed4:	d1 29       	mov.l	300f7c <start2+0xf8>,r1	! 30f7e4 <lxyram>
  300ed6:	66 33       	mov	r3,r6
  300ed8:	65 23       	mov	r2,r5
  300eda:	64 13       	mov	r1,r4
  300edc:	d1 1e       	mov.l	300f58 <start2+0xd4>,r1	! 300cd8 <regcpy>
  300ede:	41 0b       	jsr	@r1
  300ee0:	00 09       	nop	
	kinit();
  300ee2:	d1 27       	mov.l	300f80 <start2+0xfc>,r1	! 3023d4 <kinit>
  300ee4:	41 0b       	jsr	@r1
  300ee6:	00 09       	nop	
	if(!setjmp(gint_exitbuf)) {
  300ee8:	d1 26       	mov.l	300f84 <start2+0x100>,r1	! 8101404 <gint_exitbuf>
  300eea:	64 13       	mov	r1,r4
  300eec:	d1 26       	mov.l	300f88 <start2+0x104>,r1	! 30ad50 <setjmp>
  300eee:	41 0b       	jsr	@r1
  300ef0:	00 09       	nop	
  300ef2:	61 03       	mov	r0,r1
  300ef4:	21 18       	tst	r1,r1
  300ef6:	8b 14       	bf	300f22 <start2+0x9e>
		callarray(&bctors, &ectors);
  300ef8:	d2 24       	mov.l	300f8c <start2+0x108>,r2	! 300070 <bdtors>
  300efa:	d1 25       	mov.l	300f90 <start2+0x10c>,r1	! 300068 <bctors>
  300efc:	65 23       	mov	r2,r5
  300efe:	64 13       	mov	r1,r4
  300f00:	d1 24       	mov.l	300f94 <start2+0x110>,r1	! 300e36 <callarray>
  300f02:	41 0b       	jsr	@r1
  300f04:	00 09       	nop	
		exit(main(isappli, optnum));
  300f06:	62 e3       	mov	r14,r2
  300f08:	72 c8       	add	#-56,r2
  300f0a:	61 e3       	mov	r14,r1
  300f0c:	71 c8       	add	#-56,r1
  300f0e:	55 2e       	mov.l	@(56,r2),r5
  300f10:	54 1f       	mov.l	@(60,r1),r4
  300f12:	d1 21       	mov.l	300f98 <start2+0x114>,r1	! 3002ac <main>
  300f14:	41 0b       	jsr	@r1
  300f16:	00 09       	nop	
  300f18:	61 03       	mov	r0,r1
  300f1a:	64 13       	mov	r1,r4
  300f1c:	d1 1f       	mov.l	300f9c <start2+0x118>,r1	! 30ad1c <exit>
  300f1e:	41 0b       	jsr	@r1
  300f20:	00 09       	nop	
		callarray(&bdtors, &edtors);
  300f22:	d2 1f       	mov.l	300fa0 <start2+0x11c>,r2	! 300070 <bdtors>
  300f24:	d1 1f       	mov.l	300fa4 <start2+0x120>,r1	! 300070 <bdtors>
  300f26:	65 23       	mov	r2,r5
  300f28:	64 13       	mov	r1,r4
  300f2a:	d1 1a       	mov.l	300f94 <start2+0x110>,r1	! 300e36 <callarray>
  300f2c:	41 0b       	jsr	@r1
  300f2e:	00 09       	nop	
	kquit();
  300f30:	d1 1d       	mov.l	300fa8 <start2+0x124>,r1	! 302710 <kquit>
  300f32:	41 0b       	jsr	@r1
  300f34:	00 09       	nop	
	return gint_exitcode;
  300f36:	d1 1d       	mov.l	300fac <start2+0x128>,r1	! 8101438 <gint_exitcode>
  300f38:	61 12       	mov.l	@r1,r1
}
  300f3a:	60 13       	mov	r1,r0
  300f3c:	7e 08       	add	#8,r14
  300f3e:	6f e3       	mov	r14,r15
  300f40:	4f 26       	lds.l	@r15+,pr
  300f42:	6e f6       	mov.l	@r15+,r14
  300f44:	00 0b       	rts	
  300f46:	00 09       	nop	
  300f48:	00 30       	.word 0x0030
  300f4a:	22 64       	mov.b	r6,@-r2
  300f4c:	00 00       	.word 0x0000
  300f4e:	01 60       	.word 0x0160
  300f50:	08 10       	.word 0x0810
  300f52:	16 70       	mov.l	r7,@(0,r6)
  300f54:	00 30       	.word 0x0030
  300f56:	f6 04       	movs.w	@r2,0x0
  300f58:	00 30       	.word 0x0030
  300f5a:	0c d8       	.word 0x0cd8
  300f5c:	00 00       	.word 0x0000
  300f5e:	02 70       	.word 0x0270
  300f60:	08 10       	.word 0x0810
  300f62:	14 00       	mov.l	r0,@(0,r4)
  300f64:	00 30       	.word 0x0030
  300f66:	0d aa       	sts	y0,r13
  300f68:	00 00       	.word 0x0000
  300f6a:	00 80       	.word 0x0080
  300f6c:	e5 20       	mov	#32,r5
  300f6e:	00 00       	.word 0x0000
  300f70:	00 30       	.word 0x0030
  300f72:	f7 64       	movs.w	@r3,0x6
  300f74:	00 00       	.word 0x0000
  300f76:	00 00       	.word 0x0000
  300f78:	e5 00       	mov	#0,r5
  300f7a:	e0 00       	mov	#0,r0
  300f7c:	00 30       	.word 0x0030
  300f7e:	f7 e4       	movs.w	@r3,m1
  300f80:	00 30       	.word 0x0030
  300f82:	23 d4       	mov.b	r13,@-r3
  300f84:	08 10       	.word 0x0810
  300f86:	14 04       	mov.l	r0,@(16,r4)
  300f88:	00 30       	.word 0x0030
  300f8a:	ad 50       	bra	300a2e <custom_r61524_display+0x9a>
  300f8c:	00 30       	.word 0x0030
  300f8e:	00 70       	.word 0x0070
  300f90:	00 30       	.word 0x0030
  300f92:	00 68       	.word 0x0068
  300f94:	00 30       	.word 0x0030
  300f96:	0e 36       	mov.l	r3,@(r0,r14)
  300f98:	00 30       	.word 0x0030
  300f9a:	02 ac       	mov.b	@(r0,r10),r2
  300f9c:	00 30       	.word 0x0030
  300f9e:	ad 1c       	bra	3009da <custom_r61524_display+0x46>
  300fa0:	00 30       	.word 0x0030
  300fa2:	00 70       	.word 0x0070
  300fa4:	00 30       	.word 0x0030
  300fa6:	00 70       	.word 0x0070
  300fa8:	00 30       	.word 0x0030
  300faa:	27 10       	mov.b	r1,@r7
  300fac:	08 10       	.word 0x0810
  300fae:	14 38       	mov.l	r3,@(32,r4)

00300fb0 <_Exit>:

/* Standard _Exit, used by the fxlibc exit() to leave control */
void _Exit(int rc)
{
  300fb0:	2f e6       	mov.l	r14,@-r15
  300fb2:	4f 22       	sts.l	pr,@-r15
  300fb4:	7f fc       	add	#-4,r15
  300fb6:	6e f3       	mov	r15,r14
  300fb8:	61 e3       	mov	r14,r1
  300fba:	71 c4       	add	#-60,r1
  300fbc:	11 4f       	mov.l	r4,@(60,r1)
	gint_exitcode = rc;
  300fbe:	d1 05       	mov.l	300fd4 <_Exit+0x24>,r1	! 8101438 <gint_exitcode>
  300fc0:	62 e3       	mov	r14,r2
  300fc2:	72 c4       	add	#-60,r2
  300fc4:	52 2f       	mov.l	@(60,r2),r2
  300fc6:	21 22       	mov.l	r2,@r1
	longjmp(gint_exitbuf, 1);
  300fc8:	d1 03       	mov.l	300fd8 <_Exit+0x28>,r1	! 8101404 <gint_exitbuf>
  300fca:	e5 01       	mov	#1,r5
  300fcc:	64 13       	mov	r1,r4
  300fce:	d1 03       	mov.l	300fdc <_Exit+0x2c>,r1	! 30ad74 <longjmp>
  300fd0:	41 0b       	jsr	@r1
  300fd2:	00 09       	nop	
  300fd4:	08 10       	.word 0x0810
  300fd6:	14 38       	mov.l	r3,@(32,r4)
  300fd8:	08 10       	.word 0x0810
  300fda:	14 04       	mov.l	r0,@(16,r4)
  300fdc:	00 30       	.word 0x0030
  300fde:	ad 74       	bra	300aca <custom_r61524_display_rect+0x66>

00300fe0 <GINT_CALL_SET_function>:
{
  300fe0:	2f e6       	mov.l	r14,@-r15
  300fe2:	7f fc       	add	#-4,r15
  300fe4:	6e f3       	mov	r15,r14
  300fe6:	61 e3       	mov	r14,r1
  300fe8:	71 c4       	add	#-60,r1
  300fea:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  300fec:	61 e3       	mov	r14,r1
  300fee:	71 c4       	add	#-60,r1
  300ff0:	51 1f       	mov.l	@(60,r1),r1
  300ff2:	e2 01       	mov	#1,r2
  300ff4:	21 22       	mov.l	r2,@r1
	return 0;
  300ff6:	e1 00       	mov	#0,r1
}
  300ff8:	60 13       	mov	r1,r0
  300ffa:	7e 04       	add	#4,r14
  300ffc:	6f e3       	mov	r14,r15
  300ffe:	6e f6       	mov.l	@r15+,r14
  301000:	00 0b       	rts	
  301002:	00 09       	nop	

00301004 <GINT_CALL_INC_function>:
{
  301004:	2f e6       	mov.l	r14,@-r15
  301006:	7f fc       	add	#-4,r15
  301008:	6e f3       	mov	r15,r14
  30100a:	61 e3       	mov	r14,r1
  30100c:	71 c4       	add	#-60,r1
  30100e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301010:	61 e3       	mov	r14,r1
  301012:	71 c4       	add	#-60,r1
  301014:	51 1f       	mov.l	@(60,r1),r1
  301016:	61 12       	mov.l	@r1,r1
  301018:	62 13       	mov	r1,r2
  30101a:	72 01       	add	#1,r2
  30101c:	61 e3       	mov	r14,r1
  30101e:	71 c4       	add	#-60,r1
  301020:	51 1f       	mov.l	@(60,r1),r1
  301022:	21 22       	mov.l	r2,@r1
	return 0;
  301024:	e1 00       	mov	#0,r1
}
  301026:	60 13       	mov	r1,r0
  301028:	7e 04       	add	#4,r14
  30102a:	6f e3       	mov	r14,r15
  30102c:	6e f6       	mov.l	@r15+,r14
  30102e:	00 0b       	rts	
  301030:	00 09       	nop	

00301032 <GINT_CALL_SET_STOP_function>:
{
  301032:	2f e6       	mov.l	r14,@-r15
  301034:	7f fc       	add	#-4,r15
  301036:	6e f3       	mov	r15,r14
  301038:	61 e3       	mov	r14,r1
  30103a:	71 c4       	add	#-60,r1
  30103c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30103e:	61 e3       	mov	r14,r1
  301040:	71 c4       	add	#-60,r1
  301042:	51 1f       	mov.l	@(60,r1),r1
  301044:	e2 01       	mov	#1,r2
  301046:	21 22       	mov.l	r2,@r1
	return 1;
  301048:	e1 01       	mov	#1,r1
}
  30104a:	60 13       	mov	r1,r0
  30104c:	7e 04       	add	#4,r14
  30104e:	6f e3       	mov	r14,r15
  301050:	6e f6       	mov.l	@r15+,r14
  301052:	00 0b       	rts	
  301054:	00 09       	nop	

00301056 <GINT_CALL_INC_STOP_function>:
{
  301056:	2f e6       	mov.l	r14,@-r15
  301058:	7f fc       	add	#-4,r15
  30105a:	6e f3       	mov	r15,r14
  30105c:	61 e3       	mov	r14,r1
  30105e:	71 c4       	add	#-60,r1
  301060:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301062:	61 e3       	mov	r14,r1
  301064:	71 c4       	add	#-60,r1
  301066:	51 1f       	mov.l	@(60,r1),r1
  301068:	61 12       	mov.l	@r1,r1
  30106a:	62 13       	mov	r1,r2
  30106c:	72 01       	add	#1,r2
  30106e:	61 e3       	mov	r14,r1
  301070:	71 c4       	add	#-60,r1
  301072:	51 1f       	mov.l	@(60,r1),r1
  301074:	21 22       	mov.l	r2,@r1
	return 1;
  301076:	e1 01       	mov	#1,r1
}
  301078:	60 13       	mov	r1,r0
  30107a:	7e 04       	add	#4,r14
  30107c:	6f e3       	mov	r14,r15
  30107e:	6e f6       	mov.l	@r15+,r14
  301080:	00 0b       	rts	
  301082:	00 09       	nop	

00301084 <dimage>:
#include <gint/display.h>

/* dimage(): Render a full image */
void dimage(int x, int y, bopti_image_t const *img)
{
  301084:	2f e6       	mov.l	r14,@-r15
  301086:	4f 22       	sts.l	pr,@-r15
  301088:	7f e4       	add	#-28,r15
  30108a:	6e f3       	mov	r15,r14
  30108c:	61 e3       	mov	r14,r1
  30108e:	71 dc       	add	#-36,r1
  301090:	11 4f       	mov.l	r4,@(60,r1)
  301092:	61 e3       	mov	r14,r1
  301094:	71 dc       	add	#-36,r1
  301096:	11 5e       	mov.l	r5,@(56,r1)
  301098:	61 e3       	mov	r14,r1
  30109a:	71 dc       	add	#-36,r1
  30109c:	11 6d       	mov.l	r6,@(52,r1)
	dsubimage(x, y, img, 0, 0, img->width, img->height, DIMAGE_NONE);
  30109e:	61 e3       	mov	r14,r1
  3010a0:	71 dc       	add	#-36,r1
  3010a2:	51 1d       	mov.l	@(52,r1),r1
  3010a4:	85 12       	mov.w	@(4,r1),r0
  3010a6:	61 03       	mov	r0,r1
  3010a8:	61 1d       	extu.w	r1,r1
  3010aa:	66 13       	mov	r1,r6
  3010ac:	61 e3       	mov	r14,r1
  3010ae:	71 dc       	add	#-36,r1
  3010b0:	51 1d       	mov.l	@(52,r1),r1
  3010b2:	85 13       	mov.w	@(6,r1),r0
  3010b4:	61 03       	mov	r0,r1
  3010b6:	61 1d       	extu.w	r1,r1
  3010b8:	65 13       	mov	r1,r5
  3010ba:	63 e3       	mov	r14,r3
  3010bc:	73 dc       	add	#-36,r3
  3010be:	62 e3       	mov	r14,r2
  3010c0:	72 dc       	add	#-36,r2
  3010c2:	61 e3       	mov	r14,r1
  3010c4:	71 dc       	add	#-36,r1
  3010c6:	e7 00       	mov	#0,r7
  3010c8:	1f 73       	mov.l	r7,@(12,r15)
  3010ca:	1f 52       	mov.l	r5,@(8,r15)
  3010cc:	1f 61       	mov.l	r6,@(4,r15)
  3010ce:	e7 00       	mov	#0,r7
  3010d0:	2f 72       	mov.l	r7,@r15
  3010d2:	e7 00       	mov	#0,r7
  3010d4:	56 3d       	mov.l	@(52,r3),r6
  3010d6:	55 2e       	mov.l	@(56,r2),r5
  3010d8:	54 1f       	mov.l	@(60,r1),r4
  3010da:	d1 05       	mov.l	3010f0 <dimage+0x6c>,r1	! 301198 <dsubimage>
  3010dc:	41 0b       	jsr	@r1
  3010de:	00 09       	nop	
}
  3010e0:	00 09       	nop	
  3010e2:	7e 1c       	add	#28,r14
  3010e4:	6f e3       	mov	r14,r15
  3010e6:	4f 26       	lds.l	@r15+,pr
  3010e8:	6e f6       	mov.l	@r15+,r14
  3010ea:	00 0b       	rts	
  3010ec:	00 09       	nop	
  3010ee:	00 09       	nop	
  3010f0:	00 30       	.word 0x0030
  3010f2:	11 98       	mov.l	r9,@(32,r1)

003010f4 <GINT_CALL_SET_function>:
{
  3010f4:	2f e6       	mov.l	r14,@-r15
  3010f6:	7f fc       	add	#-4,r15
  3010f8:	6e f3       	mov	r15,r14
  3010fa:	61 e3       	mov	r14,r1
  3010fc:	71 c4       	add	#-60,r1
  3010fe:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301100:	61 e3       	mov	r14,r1
  301102:	71 c4       	add	#-60,r1
  301104:	51 1f       	mov.l	@(60,r1),r1
  301106:	e2 01       	mov	#1,r2
  301108:	21 22       	mov.l	r2,@r1
	return 0;
  30110a:	e1 00       	mov	#0,r1
}
  30110c:	60 13       	mov	r1,r0
  30110e:	7e 04       	add	#4,r14
  301110:	6f e3       	mov	r14,r15
  301112:	6e f6       	mov.l	@r15+,r14
  301114:	00 0b       	rts	
  301116:	00 09       	nop	

00301118 <GINT_CALL_INC_function>:
{
  301118:	2f e6       	mov.l	r14,@-r15
  30111a:	7f fc       	add	#-4,r15
  30111c:	6e f3       	mov	r15,r14
  30111e:	61 e3       	mov	r14,r1
  301120:	71 c4       	add	#-60,r1
  301122:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301124:	61 e3       	mov	r14,r1
  301126:	71 c4       	add	#-60,r1
  301128:	51 1f       	mov.l	@(60,r1),r1
  30112a:	61 12       	mov.l	@r1,r1
  30112c:	62 13       	mov	r1,r2
  30112e:	72 01       	add	#1,r2
  301130:	61 e3       	mov	r14,r1
  301132:	71 c4       	add	#-60,r1
  301134:	51 1f       	mov.l	@(60,r1),r1
  301136:	21 22       	mov.l	r2,@r1
	return 0;
  301138:	e1 00       	mov	#0,r1
}
  30113a:	60 13       	mov	r1,r0
  30113c:	7e 04       	add	#4,r14
  30113e:	6f e3       	mov	r14,r15
  301140:	6e f6       	mov.l	@r15+,r14
  301142:	00 0b       	rts	
  301144:	00 09       	nop	

00301146 <GINT_CALL_SET_STOP_function>:
{
  301146:	2f e6       	mov.l	r14,@-r15
  301148:	7f fc       	add	#-4,r15
  30114a:	6e f3       	mov	r15,r14
  30114c:	61 e3       	mov	r14,r1
  30114e:	71 c4       	add	#-60,r1
  301150:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301152:	61 e3       	mov	r14,r1
  301154:	71 c4       	add	#-60,r1
  301156:	51 1f       	mov.l	@(60,r1),r1
  301158:	e2 01       	mov	#1,r2
  30115a:	21 22       	mov.l	r2,@r1
	return 1;
  30115c:	e1 01       	mov	#1,r1
}
  30115e:	60 13       	mov	r1,r0
  301160:	7e 04       	add	#4,r14
  301162:	6f e3       	mov	r14,r15
  301164:	6e f6       	mov.l	@r15+,r14
  301166:	00 0b       	rts	
  301168:	00 09       	nop	

0030116a <GINT_CALL_INC_STOP_function>:
{
  30116a:	2f e6       	mov.l	r14,@-r15
  30116c:	7f fc       	add	#-4,r15
  30116e:	6e f3       	mov	r15,r14
  301170:	61 e3       	mov	r14,r1
  301172:	71 c4       	add	#-60,r1
  301174:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301176:	61 e3       	mov	r14,r1
  301178:	71 c4       	add	#-60,r1
  30117a:	51 1f       	mov.l	@(60,r1),r1
  30117c:	61 12       	mov.l	@r1,r1
  30117e:	62 13       	mov	r1,r2
  301180:	72 01       	add	#1,r2
  301182:	61 e3       	mov	r14,r1
  301184:	71 c4       	add	#-60,r1
  301186:	51 1f       	mov.l	@(60,r1),r1
  301188:	21 22       	mov.l	r2,@r1
	return 1;
  30118a:	e1 01       	mov	#1,r1
}
  30118c:	60 13       	mov	r1,r0
  30118e:	7e 04       	add	#4,r14
  301190:	6f e3       	mov	r14,r15
  301192:	6e f6       	mov.l	@r15+,r14
  301194:	00 0b       	rts	
  301196:	00 09       	nop	

00301198 <dsubimage>:
#include <gint/display.h>

/* dsubimage(): Render a section of an image */
void dsubimage(int x, int y, image_t const *img, int left, int top,
	int w, int h, int flags)
{
  301198:	2f e6       	mov.l	r14,@-r15
  30119a:	4f 22       	sts.l	pr,@-r15
  30119c:	7f e0       	add	#-32,r15
  30119e:	6e f3       	mov	r15,r14
  3011a0:	61 e3       	mov	r14,r1
  3011a2:	71 e0       	add	#-32,r1
  3011a4:	11 4f       	mov.l	r4,@(60,r1)
  3011a6:	61 e3       	mov	r14,r1
  3011a8:	71 e0       	add	#-32,r1
  3011aa:	11 5e       	mov.l	r5,@(56,r1)
  3011ac:	61 e3       	mov	r14,r1
  3011ae:	71 e0       	add	#-32,r1
  3011b0:	11 6d       	mov.l	r6,@(52,r1)
  3011b2:	61 e3       	mov	r14,r1
  3011b4:	71 e0       	add	#-32,r1
  3011b6:	11 7c       	mov.l	r7,@(48,r1)
	if(IMAGE_IS_RGB16(img->format))
  3011b8:	61 e3       	mov	r14,r1
  3011ba:	71 e0       	add	#-32,r1
  3011bc:	51 1d       	mov.l	@(52,r1),r1
  3011be:	61 10       	mov.b	@r1,r1
  3011c0:	61 1c       	extu.b	r1,r1
  3011c2:	21 18       	tst	r1,r1
  3011c4:	89 07       	bt	3011d6 <dsubimage+0x3e>
  3011c6:	61 e3       	mov	r14,r1
  3011c8:	71 e0       	add	#-32,r1
  3011ca:	51 1d       	mov.l	@(52,r1),r1
  3011cc:	61 10       	mov.b	@r1,r1
  3011ce:	62 1c       	extu.b	r1,r2
  3011d0:	e1 01       	mov	#1,r1
  3011d2:	32 10       	cmp/eq	r1,r2
  3011d4:	8b 18       	bf	301208 <dsubimage+0x70>
		return dsubimage_rgb16(x, y, img, left, top, w, h, flags);
  3011d6:	67 e3       	mov	r14,r7
  3011d8:	77 e0       	add	#-32,r7
  3011da:	63 e3       	mov	r14,r3
  3011dc:	73 e0       	add	#-32,r3
  3011de:	62 e3       	mov	r14,r2
  3011e0:	72 e0       	add	#-32,r2
  3011e2:	61 e3       	mov	r14,r1
  3011e4:	71 e0       	add	#-32,r1
  3011e6:	56 ed       	mov.l	@(52,r14),r6
  3011e8:	1f 63       	mov.l	r6,@(12,r15)
  3011ea:	56 ec       	mov.l	@(48,r14),r6
  3011ec:	1f 62       	mov.l	r6,@(8,r15)
  3011ee:	56 eb       	mov.l	@(44,r14),r6
  3011f0:	1f 61       	mov.l	r6,@(4,r15)
  3011f2:	56 ea       	mov.l	@(40,r14),r6
  3011f4:	2f 62       	mov.l	r6,@r15
  3011f6:	57 7c       	mov.l	@(48,r7),r7
  3011f8:	56 3d       	mov.l	@(52,r3),r6
  3011fa:	55 2e       	mov.l	@(56,r2),r5
  3011fc:	54 1f       	mov.l	@(60,r1),r4
  3011fe:	d1 2d       	mov.l	3012b4 <dsubimage+0x11c>,r1	! 301828 <dsubimage_rgb16>
  301200:	41 0b       	jsr	@r1
  301202:	00 09       	nop	
  301204:	a0 50       	bra	3012a8 <dsubimage+0x110>
  301206:	00 09       	nop	
	else if(IMAGE_IS_P8(img->format))
  301208:	61 e3       	mov	r14,r1
  30120a:	71 e0       	add	#-32,r1
  30120c:	51 1d       	mov.l	@(52,r1),r1
  30120e:	61 10       	mov.b	@r1,r1
  301210:	62 1c       	extu.b	r1,r2
  301212:	e1 04       	mov	#4,r1
  301214:	32 10       	cmp/eq	r1,r2
  301216:	89 07       	bt	301228 <dsubimage+0x90>
  301218:	61 e3       	mov	r14,r1
  30121a:	71 e0       	add	#-32,r1
  30121c:	51 1d       	mov.l	@(52,r1),r1
  30121e:	61 10       	mov.b	@r1,r1
  301220:	62 1c       	extu.b	r1,r2
  301222:	e1 05       	mov	#5,r1
  301224:	32 10       	cmp/eq	r1,r2
  301226:	8b 18       	bf	30125a <dsubimage+0xc2>
		return dsubimage_p8(x, y, img, left, top, w, h, flags);
  301228:	67 e3       	mov	r14,r7
  30122a:	77 e0       	add	#-32,r7
  30122c:	63 e3       	mov	r14,r3
  30122e:	73 e0       	add	#-32,r3
  301230:	62 e3       	mov	r14,r2
  301232:	72 e0       	add	#-32,r2
  301234:	61 e3       	mov	r14,r1
  301236:	71 e0       	add	#-32,r1
  301238:	56 ed       	mov.l	@(52,r14),r6
  30123a:	1f 63       	mov.l	r6,@(12,r15)
  30123c:	56 ec       	mov.l	@(48,r14),r6
  30123e:	1f 62       	mov.l	r6,@(8,r15)
  301240:	56 eb       	mov.l	@(44,r14),r6
  301242:	1f 61       	mov.l	r6,@(4,r15)
  301244:	56 ea       	mov.l	@(40,r14),r6
  301246:	2f 62       	mov.l	r6,@r15
  301248:	57 7c       	mov.l	@(48,r7),r7
  30124a:	56 3d       	mov.l	@(52,r3),r6
  30124c:	55 2e       	mov.l	@(56,r2),r5
  30124e:	54 1f       	mov.l	@(60,r1),r4
  301250:	d1 19       	mov.l	3012b8 <dsubimage+0x120>,r1	! 301bf0 <dsubimage_p8>
  301252:	41 0b       	jsr	@r1
  301254:	00 09       	nop	
  301256:	a0 27       	bra	3012a8 <dsubimage+0x110>
  301258:	00 09       	nop	
	else if(IMAGE_IS_P4(img->format))
  30125a:	61 e3       	mov	r14,r1
  30125c:	71 e0       	add	#-32,r1
  30125e:	51 1d       	mov.l	@(52,r1),r1
  301260:	61 10       	mov.b	@r1,r1
  301262:	62 1c       	extu.b	r1,r2
  301264:	e1 06       	mov	#6,r1
  301266:	32 10       	cmp/eq	r1,r2
  301268:	89 07       	bt	30127a <dsubimage+0xe2>
  30126a:	61 e3       	mov	r14,r1
  30126c:	71 e0       	add	#-32,r1
  30126e:	51 1d       	mov.l	@(52,r1),r1
  301270:	61 10       	mov.b	@r1,r1
  301272:	62 1c       	extu.b	r1,r2
  301274:	e1 03       	mov	#3,r1
  301276:	32 10       	cmp/eq	r1,r2
  301278:	8b 16       	bf	3012a8 <dsubimage+0x110>
		return dsubimage_p4(x, y, img, left, top, w, h, flags);
  30127a:	67 e3       	mov	r14,r7
  30127c:	77 e0       	add	#-32,r7
  30127e:	63 e3       	mov	r14,r3
  301280:	73 e0       	add	#-32,r3
  301282:	62 e3       	mov	r14,r2
  301284:	72 e0       	add	#-32,r2
  301286:	61 e3       	mov	r14,r1
  301288:	71 e0       	add	#-32,r1
  30128a:	56 ed       	mov.l	@(52,r14),r6
  30128c:	1f 63       	mov.l	r6,@(12,r15)
  30128e:	56 ec       	mov.l	@(48,r14),r6
  301290:	1f 62       	mov.l	r6,@(8,r15)
  301292:	56 eb       	mov.l	@(44,r14),r6
  301294:	1f 61       	mov.l	r6,@(4,r15)
  301296:	56 ea       	mov.l	@(40,r14),r6
  301298:	2f 62       	mov.l	r6,@r15
  30129a:	57 7c       	mov.l	@(48,r7),r7
  30129c:	56 3d       	mov.l	@(52,r3),r6
  30129e:	55 2e       	mov.l	@(56,r2),r5
  3012a0:	54 1f       	mov.l	@(60,r1),r4
  3012a2:	d1 06       	mov.l	3012bc <dsubimage+0x124>,r1	! 301fb8 <dsubimage_p4>
  3012a4:	41 0b       	jsr	@r1
  3012a6:	00 09       	nop	
}
  3012a8:	7e 20       	add	#32,r14
  3012aa:	6f e3       	mov	r14,r15
  3012ac:	4f 26       	lds.l	@r15+,pr
  3012ae:	6e f6       	mov.l	@r15+,r14
  3012b0:	00 0b       	rts	
  3012b2:	00 09       	nop	
  3012b4:	00 30       	.word 0x0030
  3012b6:	18 28       	mov.l	r2,@(32,r8)
  3012b8:	00 30       	.word 0x0030
  3012ba:	1b f0       	mov.l	r15,@(0,r11)
  3012bc:	00 30       	.word 0x0030
  3012be:	1f b8       	mov.l	r11,@(32,r15)

003012c0 <GINT_CALL_SET_function>:
{
  3012c0:	2f e6       	mov.l	r14,@-r15
  3012c2:	7f fc       	add	#-4,r15
  3012c4:	6e f3       	mov	r15,r14
  3012c6:	61 e3       	mov	r14,r1
  3012c8:	71 c4       	add	#-60,r1
  3012ca:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3012cc:	61 e3       	mov	r14,r1
  3012ce:	71 c4       	add	#-60,r1
  3012d0:	51 1f       	mov.l	@(60,r1),r1
  3012d2:	e2 01       	mov	#1,r2
  3012d4:	21 22       	mov.l	r2,@r1
	return 0;
  3012d6:	e1 00       	mov	#0,r1
}
  3012d8:	60 13       	mov	r1,r0
  3012da:	7e 04       	add	#4,r14
  3012dc:	6f e3       	mov	r14,r15
  3012de:	6e f6       	mov.l	@r15+,r14
  3012e0:	00 0b       	rts	
  3012e2:	00 09       	nop	

003012e4 <GINT_CALL_INC_function>:
{
  3012e4:	2f e6       	mov.l	r14,@-r15
  3012e6:	7f fc       	add	#-4,r15
  3012e8:	6e f3       	mov	r15,r14
  3012ea:	61 e3       	mov	r14,r1
  3012ec:	71 c4       	add	#-60,r1
  3012ee:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3012f0:	61 e3       	mov	r14,r1
  3012f2:	71 c4       	add	#-60,r1
  3012f4:	51 1f       	mov.l	@(60,r1),r1
  3012f6:	61 12       	mov.l	@r1,r1
  3012f8:	62 13       	mov	r1,r2
  3012fa:	72 01       	add	#1,r2
  3012fc:	61 e3       	mov	r14,r1
  3012fe:	71 c4       	add	#-60,r1
  301300:	51 1f       	mov.l	@(60,r1),r1
  301302:	21 22       	mov.l	r2,@r1
	return 0;
  301304:	e1 00       	mov	#0,r1
}
  301306:	60 13       	mov	r1,r0
  301308:	7e 04       	add	#4,r14
  30130a:	6f e3       	mov	r14,r15
  30130c:	6e f6       	mov.l	@r15+,r14
  30130e:	00 0b       	rts	
  301310:	00 09       	nop	

00301312 <GINT_CALL_SET_STOP_function>:
{
  301312:	2f e6       	mov.l	r14,@-r15
  301314:	7f fc       	add	#-4,r15
  301316:	6e f3       	mov	r15,r14
  301318:	61 e3       	mov	r14,r1
  30131a:	71 c4       	add	#-60,r1
  30131c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30131e:	61 e3       	mov	r14,r1
  301320:	71 c4       	add	#-60,r1
  301322:	51 1f       	mov.l	@(60,r1),r1
  301324:	e2 01       	mov	#1,r2
  301326:	21 22       	mov.l	r2,@r1
	return 1;
  301328:	e1 01       	mov	#1,r1
}
  30132a:	60 13       	mov	r1,r0
  30132c:	7e 04       	add	#4,r14
  30132e:	6f e3       	mov	r14,r15
  301330:	6e f6       	mov.l	@r15+,r14
  301332:	00 0b       	rts	
  301334:	00 09       	nop	

00301336 <GINT_CALL_INC_STOP_function>:
{
  301336:	2f e6       	mov.l	r14,@-r15
  301338:	7f fc       	add	#-4,r15
  30133a:	6e f3       	mov	r15,r14
  30133c:	61 e3       	mov	r14,r1
  30133e:	71 c4       	add	#-60,r1
  301340:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301342:	61 e3       	mov	r14,r1
  301344:	71 c4       	add	#-60,r1
  301346:	51 1f       	mov.l	@(60,r1),r1
  301348:	61 12       	mov.l	@r1,r1
  30134a:	62 13       	mov	r1,r2
  30134c:	72 01       	add	#1,r2
  30134e:	61 e3       	mov	r14,r1
  301350:	71 c4       	add	#-60,r1
  301352:	51 1f       	mov.l	@(60,r1),r1
  301354:	21 22       	mov.l	r2,@r1
	return 1;
  301356:	e1 01       	mov	#1,r1
}
  301358:	60 13       	mov	r1,r0
  30135a:	7e 04       	add	#4,r14
  30135c:	6f e3       	mov	r14,r15
  30135e:	6e f6       	mov.l	@r15+,r14
  301360:	00 0b       	rts	
  301362:	00 09       	nop	

00301364 <_WEAK_dupdate>:
#include <gint/drivers/r61524.h>
#include "render-cg.h"

/* dupdate(): Push the video RAM to the display driver */
void dupdate(void)
{
  301364:	2f e6       	mov.l	r14,@-r15
  301366:	4f 22       	sts.l	pr,@-r15
  301368:	7f c4       	add	#-60,r15
  30136a:	6e f3       	mov	r15,r14
	/* If triple buffering is enabled, don't wait for the DMA to finish */
	uint16_t *vram_1, *vram_2;
	dgetvram(&vram_1, &vram_2);
  30136c:	62 e3       	mov	r14,r2
  30136e:	72 14       	add	#20,r2
  301370:	61 e3       	mov	r14,r1
  301372:	71 18       	add	#24,r1
  301374:	65 23       	mov	r2,r5
  301376:	64 13       	mov	r1,r4
  301378:	d1 33       	mov.l	301448 <_WEAK_dupdate+0xe4>,r1	! 301680 <dgetvram>
  30137a:	41 0b       	jsr	@r1
  30137c:	00 09       	nop	
	int method = (vram_1 == vram_2) ? R61524_DMA_WAIT : R61524_DMA;
  30137e:	61 e3       	mov	r14,r1
  301380:	71 fc       	add	#-4,r1
  301382:	52 17       	mov.l	@(28,r1),r2
  301384:	61 e3       	mov	r14,r1
  301386:	71 fc       	add	#-4,r1
  301388:	51 16       	mov.l	@(24,r1),r1
  30138a:	32 10       	cmp/eq	r1,r2
  30138c:	01 29       	movt	r1
  30138e:	62 1c       	extu.b	r1,r2
  301390:	61 e3       	mov	r14,r1
  301392:	71 fc       	add	#-4,r1
  301394:	11 2f       	mov.l	r2,@(60,r1)

	r61524_display(gint_vram, 0, 224, method);
  301396:	d1 2d       	mov.l	30144c <_WEAK_dupdate+0xe8>,r1	! 810143c <gint_vram>
  301398:	62 12       	mov.l	@r1,r2
  30139a:	61 e3       	mov	r14,r1
  30139c:	71 fc       	add	#-4,r1
  30139e:	93 52       	mov.w	301446 <_WEAK_dupdate+0xe2>,r3	! e0
  3013a0:	57 1f       	mov.l	@(60,r1),r7
  3013a2:	66 33       	mov	r3,r6
  3013a4:	e5 00       	mov	#0,r5
  3013a6:	64 23       	mov	r2,r4
  3013a8:	d1 29       	mov.l	301450 <_WEAK_dupdate+0xec>,r1	! 306270 <r61524_display>
  3013aa:	41 0b       	jsr	@r1
  3013ac:	00 09       	nop	

	gint_call(dupdate_get_hook());
  3013ae:	61 e3       	mov	r14,r1
  3013b0:	71 1c       	add	#28,r1
  3013b2:	62 13       	mov	r1,r2
  3013b4:	d1 27       	mov.l	301454 <_WEAK_dupdate+0xf0>,r1	! 305998 <dupdate_get_hook>
  3013b6:	41 0b       	jsr	@r1
  3013b8:	00 09       	nop	
  3013ba:	62 e3       	mov	r14,r2
  3013bc:	61 e3       	mov	r14,r1
  3013be:	71 1c       	add	#28,r1
  3013c0:	63 12       	mov.l	@r1,r3
  3013c2:	22 32       	mov.l	r3,@r2
  3013c4:	71 04       	add	#4,r1
  3013c6:	63 12       	mov.l	@r1,r3
  3013c8:	12 31       	mov.l	r3,@(4,r2)
  3013ca:	71 04       	add	#4,r1
  3013cc:	63 12       	mov.l	@r1,r3
  3013ce:	12 32       	mov.l	r3,@(8,r2)
  3013d0:	71 04       	add	#4,r1
  3013d2:	63 12       	mov.l	@r1,r3
  3013d4:	12 33       	mov.l	r3,@(12,r2)
  3013d6:	71 04       	add	#4,r1
  3013d8:	63 12       	mov.l	@r1,r3
  3013da:	12 34       	mov.l	r3,@(16,r2)
  3013dc:	71 04       	add	#4,r1
	int (*f)(int r4, int r5, int r6, int r7) = cb.function;
  3013de:	61 e3       	mov	r14,r1
  3013e0:	62 12       	mov.l	@r1,r2
  3013e2:	61 e3       	mov	r14,r1
  3013e4:	71 fc       	add	#-4,r1
  3013e6:	11 2e       	mov.l	r2,@(56,r1)
        gint_call_arg_t *args = cb.args;
  3013e8:	61 e3       	mov	r14,r1
  3013ea:	71 fc       	add	#-4,r1
  3013ec:	62 e3       	mov	r14,r2
  3013ee:	72 04       	add	#4,r2
  3013f0:	11 2d       	mov.l	r2,@(52,r1)
	return f ? f(args[0].i, args[1].i, args[2].i, args[3].i) : -1;
  3013f2:	61 e3       	mov	r14,r1
  3013f4:	71 fc       	add	#-4,r1
  3013f6:	51 1e       	mov.l	@(56,r1),r1
  3013f8:	21 18       	tst	r1,r1
  3013fa:	89 19       	bt	301430 <_WEAK_dupdate+0xcc>
  3013fc:	61 e3       	mov	r14,r1
  3013fe:	71 fc       	add	#-4,r1
  301400:	51 1d       	mov.l	@(52,r1),r1
  301402:	62 12       	mov.l	@r1,r2
  301404:	61 e3       	mov	r14,r1
  301406:	71 fc       	add	#-4,r1
  301408:	51 1d       	mov.l	@(52,r1),r1
  30140a:	71 04       	add	#4,r1
  30140c:	63 12       	mov.l	@r1,r3
  30140e:	61 e3       	mov	r14,r1
  301410:	71 fc       	add	#-4,r1
  301412:	51 1d       	mov.l	@(52,r1),r1
  301414:	71 08       	add	#8,r1
  301416:	66 12       	mov.l	@r1,r6
  301418:	61 e3       	mov	r14,r1
  30141a:	71 fc       	add	#-4,r1
  30141c:	51 1d       	mov.l	@(52,r1),r1
  30141e:	71 0c       	add	#12,r1
  301420:	67 12       	mov.l	@r1,r7
  301422:	61 e3       	mov	r14,r1
  301424:	71 fc       	add	#-4,r1
  301426:	51 1e       	mov.l	@(56,r1),r1
  301428:	65 33       	mov	r3,r5
  30142a:	64 23       	mov	r2,r4
  30142c:	41 0b       	jsr	@r1
  30142e:	00 09       	nop	
  301430:	00 09       	nop	

	/* Switch buffers if triple buffering is enabled */
	dvram_switch();
  301432:	d1 09       	mov.l	301458 <_WEAK_dupdate+0xf4>,r1	! 3016d4 <dvram_switch>
  301434:	41 0b       	jsr	@r1
  301436:	00 09       	nop	
}
  301438:	00 09       	nop	
  30143a:	7e 3c       	add	#60,r14
  30143c:	6f e3       	mov	r14,r15
  30143e:	4f 26       	lds.l	@r15+,pr
  301440:	6e f6       	mov.l	@r15+,r14
  301442:	00 0b       	rts	
  301444:	00 09       	nop	
  301446:	00 e0       	.word 0x00e0
  301448:	00 30       	.word 0x0030
  30144a:	16 80       	mov.l	r8,@(0,r6)
  30144c:	08 10       	.word 0x0810
  30144e:	14 3c       	mov.l	r3,@(48,r4)
  301450:	00 30       	.word 0x0030
  301452:	62 70       	mov.b	@r7,r2
  301454:	00 30       	.word 0x0030
  301456:	59 98       	mov.l	@(32,r9),r9
  301458:	00 30       	.word 0x0030
  30145a:	16 d4       	mov.l	r13,@(16,r6)

0030145c <GINT_CALL_SET_function>:
{
  30145c:	2f e6       	mov.l	r14,@-r15
  30145e:	7f fc       	add	#-4,r15
  301460:	6e f3       	mov	r15,r14
  301462:	61 e3       	mov	r14,r1
  301464:	71 c4       	add	#-60,r1
  301466:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301468:	61 e3       	mov	r14,r1
  30146a:	71 c4       	add	#-60,r1
  30146c:	51 1f       	mov.l	@(60,r1),r1
  30146e:	e2 01       	mov	#1,r2
  301470:	21 22       	mov.l	r2,@r1
	return 0;
  301472:	e1 00       	mov	#0,r1
}
  301474:	60 13       	mov	r1,r0
  301476:	7e 04       	add	#4,r14
  301478:	6f e3       	mov	r14,r15
  30147a:	6e f6       	mov.l	@r15+,r14
  30147c:	00 0b       	rts	
  30147e:	00 09       	nop	

00301480 <GINT_CALL_INC_function>:
{
  301480:	2f e6       	mov.l	r14,@-r15
  301482:	7f fc       	add	#-4,r15
  301484:	6e f3       	mov	r15,r14
  301486:	61 e3       	mov	r14,r1
  301488:	71 c4       	add	#-60,r1
  30148a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30148c:	61 e3       	mov	r14,r1
  30148e:	71 c4       	add	#-60,r1
  301490:	51 1f       	mov.l	@(60,r1),r1
  301492:	61 12       	mov.l	@r1,r1
  301494:	62 13       	mov	r1,r2
  301496:	72 01       	add	#1,r2
  301498:	61 e3       	mov	r14,r1
  30149a:	71 c4       	add	#-60,r1
  30149c:	51 1f       	mov.l	@(60,r1),r1
  30149e:	21 22       	mov.l	r2,@r1
	return 0;
  3014a0:	e1 00       	mov	#0,r1
}
  3014a2:	60 13       	mov	r1,r0
  3014a4:	7e 04       	add	#4,r14
  3014a6:	6f e3       	mov	r14,r15
  3014a8:	6e f6       	mov.l	@r15+,r14
  3014aa:	00 0b       	rts	
  3014ac:	00 09       	nop	

003014ae <GINT_CALL_SET_STOP_function>:
{
  3014ae:	2f e6       	mov.l	r14,@-r15
  3014b0:	7f fc       	add	#-4,r15
  3014b2:	6e f3       	mov	r15,r14
  3014b4:	61 e3       	mov	r14,r1
  3014b6:	71 c4       	add	#-60,r1
  3014b8:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3014ba:	61 e3       	mov	r14,r1
  3014bc:	71 c4       	add	#-60,r1
  3014be:	51 1f       	mov.l	@(60,r1),r1
  3014c0:	e2 01       	mov	#1,r2
  3014c2:	21 22       	mov.l	r2,@r1
	return 1;
  3014c4:	e1 01       	mov	#1,r1
}
  3014c6:	60 13       	mov	r1,r0
  3014c8:	7e 04       	add	#4,r14
  3014ca:	6f e3       	mov	r14,r15
  3014cc:	6e f6       	mov.l	@r15+,r14
  3014ce:	00 0b       	rts	
  3014d0:	00 09       	nop	

003014d2 <GINT_CALL_INC_STOP_function>:
{
  3014d2:	2f e6       	mov.l	r14,@-r15
  3014d4:	7f fc       	add	#-4,r15
  3014d6:	6e f3       	mov	r15,r14
  3014d8:	61 e3       	mov	r14,r1
  3014da:	71 c4       	add	#-60,r1
  3014dc:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3014de:	61 e3       	mov	r14,r1
  3014e0:	71 c4       	add	#-60,r1
  3014e2:	51 1f       	mov.l	@(60,r1),r1
  3014e4:	61 12       	mov.l	@r1,r1
  3014e6:	62 13       	mov	r1,r2
  3014e8:	72 01       	add	#1,r2
  3014ea:	61 e3       	mov	r14,r1
  3014ec:	71 c4       	add	#-60,r1
  3014ee:	51 1f       	mov.l	@(60,r1),r1
  3014f0:	21 22       	mov.l	r2,@r1
	return 1;
  3014f2:	e1 01       	mov	#1,r1
}
  3014f4:	60 13       	mov	r1,r0
  3014f6:	7e 04       	add	#4,r14
  3014f8:	6f e3       	mov	r14,r15
  3014fa:	6e f6       	mov.l	@r15+,r14
  3014fc:	00 0b       	rts	
  3014fe:	00 09       	nop	

00301500 <dvram_init>:
static uint16_t *vram_1 = NULL, *vram_2 = NULL;
/* Current VRAM pointer, always equal to either vram_1 or vram_2. */
uint16_t *gint_vram = NULL;

bool dvram_init(void)
{
  301500:	2f e6       	mov.l	r14,@-r15
  301502:	4f 22       	sts.l	pr,@-r15
  301504:	7f f8       	add	#-8,r15
  301506:	6e f3       	mov	r15,r14
	int const MARGIN = 32;
  301508:	61 e3       	mov	r14,r1
  30150a:	71 c8       	add	#-56,r1
  30150c:	e2 20       	mov	#32,r2
  30150e:	11 2f       	mov.l	r2,@(60,r1)

	/* Leave MARGIN bytes on each side of the region; this enables some
	   important optimizations in the image renderer. We also add another
	   32 bytes so we can manually 32-align the region */
	uint32_t region = (uint32_t)kmalloc(DWIDTH*DHEIGHT*2 + MARGIN*2 + 32,
  301510:	61 e3       	mov	r14,r1
  301512:	71 c8       	add	#-56,r1
  301514:	51 1f       	mov.l	@(60,r1),r1
  301516:	d2 25       	mov.l	3015ac <dvram_init+0xac>,r2	! 15a90
  301518:	31 2c       	add	r2,r1
  30151a:	31 1c       	add	r1,r1
  30151c:	62 13       	mov	r1,r2
  30151e:	d1 24       	mov.l	3015b0 <dvram_init+0xb0>,r1	! 30e9dc
  301520:	65 13       	mov	r1,r5
  301522:	64 23       	mov	r2,r4
  301524:	d1 23       	mov.l	3015b4 <dvram_init+0xb4>,r1	! 304cbc <kmalloc>
  301526:	41 0b       	jsr	@r1
  301528:	00 09       	nop	
  30152a:	61 03       	mov	r0,r1
  30152c:	62 e3       	mov	r14,r2
  30152e:	72 c8       	add	#-56,r2
  301530:	12 1e       	mov.l	r1,@(56,r2)
		"_ostk"
#else
		NULL
#endif
	);
	if(region == 0)
  301532:	61 e3       	mov	r14,r1
  301534:	71 c8       	add	#-56,r1
  301536:	51 1e       	mov.l	@(56,r1),r1
  301538:	21 18       	tst	r1,r1
  30153a:	8b 02       	bf	301542 <dvram_init+0x42>
		return false;
  30153c:	e1 00       	mov	#0,r1
  30153e:	a0 2d       	bra	30159c <dvram_init+0x9c>
  301540:	00 09       	nop	

	/* 32-align the region */
	region = (region + 31) & -32;
  301542:	61 e3       	mov	r14,r1
  301544:	71 c8       	add	#-56,r1
  301546:	51 1e       	mov.l	@(56,r1),r1
  301548:	63 13       	mov	r1,r3
  30154a:	73 1f       	add	#31,r3
  30154c:	61 e3       	mov	r14,r1
  30154e:	71 c8       	add	#-56,r1
  301550:	e2 e0       	mov	#-32,r2
  301552:	22 39       	and	r3,r2
  301554:	11 2e       	mov.l	r2,@(56,r1)
	/* Skip a MARGIN */
	region += MARGIN;
  301556:	61 e3       	mov	r14,r1
  301558:	71 c8       	add	#-56,r1
  30155a:	52 1f       	mov.l	@(60,r1),r2
  30155c:	61 e3       	mov	r14,r1
  30155e:	71 c8       	add	#-56,r1
  301560:	63 e3       	mov	r14,r3
  301562:	73 c8       	add	#-56,r3
  301564:	53 3e       	mov.l	@(56,r3),r3
  301566:	32 3c       	add	r3,r2
  301568:	11 2e       	mov.l	r2,@(56,r1)
	/* Use an uncached address */
	region = (region & 0x1fffffff) | 0xa0000000;
  30156a:	61 e3       	mov	r14,r1
  30156c:	71 c8       	add	#-56,r1
  30156e:	52 1e       	mov.l	@(56,r1),r2
  301570:	d1 11       	mov.l	3015b8 <dvram_init+0xb8>,r1	! 1fffffff
  301572:	63 23       	mov	r2,r3
  301574:	23 19       	and	r1,r3
  301576:	61 e3       	mov	r14,r1
  301578:	71 c8       	add	#-56,r1
  30157a:	d2 10       	mov.l	3015bc <dvram_init+0xbc>,r2	! a0000000
  30157c:	22 3b       	or	r3,r2
  30157e:	11 2e       	mov.l	r2,@(56,r1)

	/* Don't enable triple buffering by default */
	vram_1 = (void *)region;
  301580:	61 e3       	mov	r14,r1
  301582:	71 c8       	add	#-56,r1
  301584:	52 1e       	mov.l	@(56,r1),r2
  301586:	d1 0e       	mov.l	3015c0 <dvram_init+0xc0>,r1	! 8101440 <vram_1>
  301588:	21 22       	mov.l	r2,@r1
	vram_2 = vram_1;
  30158a:	d1 0d       	mov.l	3015c0 <dvram_init+0xc0>,r1	! 8101440 <vram_1>
  30158c:	62 12       	mov.l	@r1,r2
  30158e:	d1 0d       	mov.l	3015c4 <dvram_init+0xc4>,r1	! 8101444 <vram_2>
  301590:	21 22       	mov.l	r2,@r1
	gint_vram = vram_1;
  301592:	d1 0b       	mov.l	3015c0 <dvram_init+0xc0>,r1	! 8101440 <vram_1>
  301594:	62 12       	mov.l	@r1,r2
  301596:	d1 0c       	mov.l	3015c8 <dvram_init+0xc8>,r1	! 810143c <gint_vram>
  301598:	21 22       	mov.l	r2,@r1
	return true;
  30159a:	e1 01       	mov	#1,r1
}
  30159c:	60 13       	mov	r1,r0
  30159e:	7e 08       	add	#8,r14
  3015a0:	6f e3       	mov	r14,r15
  3015a2:	4f 26       	lds.l	@r15+,pr
  3015a4:	6e f6       	mov.l	@r15+,r14
  3015a6:	00 0b       	rts	
  3015a8:	00 09       	nop	
  3015aa:	00 09       	nop	
  3015ac:	00 01       	.word 0x0001
  3015ae:	5a 90       	mov.l	@(0,r9),r10
  3015b0:	00 30       	.word 0x0030
  3015b2:	e9 dc       	mov	#-36,r9
  3015b4:	00 30       	.word 0x0030
  3015b6:	4c bc       	shad	r11,r12
  3015b8:	1f ff       	mov.l	r15,@(60,r15)
  3015ba:	ff ff       	.word 0xffff
  3015bc:	a0 00       	bra	3015c0 <dvram_init+0xc0>
  3015be:	00 00       	.word 0x0000
  3015c0:	08 10       	.word 0x0810
  3015c2:	14 40       	mov.l	r4,@(0,r4)
  3015c4:	08 10       	.word 0x0810
  3015c6:	14 44       	mov.l	r4,@(16,r4)
  3015c8:	08 10       	.word 0x0810
  3015ca:	14 3c       	mov.l	r3,@(48,r4)

003015cc <dsetvram>:

/* dsetvram(): Control video RAM address and triple buffering */
void dsetvram(uint16_t *new_vram_1, uint16_t *new_vram_2)
{
  3015cc:	2f e6       	mov.l	r14,@-r15
  3015ce:	7f f8       	add	#-8,r15
  3015d0:	6e f3       	mov	r15,r14
  3015d2:	61 e3       	mov	r14,r1
  3015d4:	71 c8       	add	#-56,r1
  3015d6:	11 4f       	mov.l	r4,@(60,r1)
  3015d8:	61 e3       	mov	r14,r1
  3015da:	71 c8       	add	#-56,r1
  3015dc:	11 5e       	mov.l	r5,@(56,r1)
	if(!new_vram_1 && !new_vram_2) return;
  3015de:	61 e3       	mov	r14,r1
  3015e0:	71 c8       	add	#-56,r1
  3015e2:	51 1f       	mov.l	@(60,r1),r1
  3015e4:	21 18       	tst	r1,r1
  3015e6:	8b 04       	bf	3015f2 <dsetvram+0x26>
  3015e8:	61 e3       	mov	r14,r1
  3015ea:	71 c8       	add	#-56,r1
  3015ec:	51 1e       	mov.l	@(56,r1),r1
  3015ee:	21 18       	tst	r1,r1
  3015f0:	89 39       	bt	301666 <dsetvram+0x9a>
	if(!new_vram_1) new_vram_1 = new_vram_2;
  3015f2:	61 e3       	mov	r14,r1
  3015f4:	71 c8       	add	#-56,r1
  3015f6:	51 1f       	mov.l	@(60,r1),r1
  3015f8:	21 18       	tst	r1,r1
  3015fa:	8b 05       	bf	301608 <dsetvram+0x3c>
  3015fc:	61 e3       	mov	r14,r1
  3015fe:	71 c8       	add	#-56,r1
  301600:	62 e3       	mov	r14,r2
  301602:	72 c8       	add	#-56,r2
  301604:	52 2e       	mov.l	@(56,r2),r2
  301606:	11 2f       	mov.l	r2,@(60,r1)
	if(!new_vram_2) new_vram_2 = new_vram_1;
  301608:	61 e3       	mov	r14,r1
  30160a:	71 c8       	add	#-56,r1
  30160c:	51 1e       	mov.l	@(56,r1),r1
  30160e:	21 18       	tst	r1,r1
  301610:	8b 05       	bf	30161e <dsetvram+0x52>
  301612:	61 e3       	mov	r14,r1
  301614:	71 c8       	add	#-56,r1
  301616:	62 e3       	mov	r14,r2
  301618:	72 c8       	add	#-56,r2
  30161a:	52 2f       	mov.l	@(60,r2),r2
  30161c:	11 2e       	mov.l	r2,@(56,r1)

	if(gint_vram == vram_1)
  30161e:	d1 15       	mov.l	301674 <dsetvram+0xa8>,r1	! 810143c <gint_vram>
  301620:	62 12       	mov.l	@r1,r2
  301622:	d1 15       	mov.l	301678 <dsetvram+0xac>,r1	! 8101440 <vram_1>
  301624:	61 12       	mov.l	@r1,r1
  301626:	32 10       	cmp/eq	r1,r2
  301628:	8b 06       	bf	301638 <dsetvram+0x6c>
		gint_vram = new_vram_1;
  30162a:	d1 12       	mov.l	301674 <dsetvram+0xa8>,r1	! 810143c <gint_vram>
  30162c:	62 e3       	mov	r14,r2
  30162e:	72 c8       	add	#-56,r2
  301630:	52 2f       	mov.l	@(60,r2),r2
  301632:	21 22       	mov.l	r2,@r1
  301634:	a0 0b       	bra	30164e <dsetvram+0x82>
  301636:	00 09       	nop	
	else if(gint_vram == vram_2)
  301638:	d1 0e       	mov.l	301674 <dsetvram+0xa8>,r1	! 810143c <gint_vram>
  30163a:	62 12       	mov.l	@r1,r2
  30163c:	d1 0f       	mov.l	30167c <dsetvram+0xb0>,r1	! 8101444 <vram_2>
  30163e:	61 12       	mov.l	@r1,r1
  301640:	32 10       	cmp/eq	r1,r2
  301642:	8b 04       	bf	30164e <dsetvram+0x82>
		gint_vram = new_vram_2;
  301644:	d1 0b       	mov.l	301674 <dsetvram+0xa8>,r1	! 810143c <gint_vram>
  301646:	62 e3       	mov	r14,r2
  301648:	72 c8       	add	#-56,r2
  30164a:	52 2e       	mov.l	@(56,r2),r2
  30164c:	21 22       	mov.l	r2,@r1

	vram_1 = new_vram_1;
  30164e:	d1 0a       	mov.l	301678 <dsetvram+0xac>,r1	! 8101440 <vram_1>
  301650:	62 e3       	mov	r14,r2
  301652:	72 c8       	add	#-56,r2
  301654:	52 2f       	mov.l	@(60,r2),r2
  301656:	21 22       	mov.l	r2,@r1
	vram_2 = new_vram_2;
  301658:	d1 08       	mov.l	30167c <dsetvram+0xb0>,r1	! 8101444 <vram_2>
  30165a:	62 e3       	mov	r14,r2
  30165c:	72 c8       	add	#-56,r2
  30165e:	52 2e       	mov.l	@(56,r2),r2
  301660:	21 22       	mov.l	r2,@r1
  301662:	a0 01       	bra	301668 <dsetvram+0x9c>
  301664:	00 09       	nop	
	if(!new_vram_1 && !new_vram_2) return;
  301666:	00 09       	nop	
}
  301668:	7e 08       	add	#8,r14
  30166a:	6f e3       	mov	r14,r15
  30166c:	6e f6       	mov.l	@r15+,r14
  30166e:	00 0b       	rts	
  301670:	00 09       	nop	
  301672:	00 09       	nop	
  301674:	08 10       	.word 0x0810
  301676:	14 3c       	mov.l	r3,@(48,r4)
  301678:	08 10       	.word 0x0810
  30167a:	14 40       	mov.l	r4,@(0,r4)
  30167c:	08 10       	.word 0x0810
  30167e:	14 44       	mov.l	r4,@(16,r4)

00301680 <dgetvram>:

/* dgetvram(): Get VRAM addresses */
void dgetvram(uint16_t **ptr_vram_1, uint16_t **ptr_vram_2)
{
  301680:	2f e6       	mov.l	r14,@-r15
  301682:	7f f8       	add	#-8,r15
  301684:	6e f3       	mov	r15,r14
  301686:	61 e3       	mov	r14,r1
  301688:	71 c8       	add	#-56,r1
  30168a:	11 4f       	mov.l	r4,@(60,r1)
  30168c:	61 e3       	mov	r14,r1
  30168e:	71 c8       	add	#-56,r1
  301690:	11 5e       	mov.l	r5,@(56,r1)
	if(ptr_vram_1) *ptr_vram_1 = vram_1;
  301692:	61 e3       	mov	r14,r1
  301694:	71 c8       	add	#-56,r1
  301696:	51 1f       	mov.l	@(60,r1),r1
  301698:	21 18       	tst	r1,r1
  30169a:	89 05       	bt	3016a8 <dgetvram+0x28>
  30169c:	d1 0b       	mov.l	3016cc <dgetvram+0x4c>,r1	! 8101440 <vram_1>
  30169e:	62 12       	mov.l	@r1,r2
  3016a0:	61 e3       	mov	r14,r1
  3016a2:	71 c8       	add	#-56,r1
  3016a4:	51 1f       	mov.l	@(60,r1),r1
  3016a6:	21 22       	mov.l	r2,@r1
	if(ptr_vram_2) *ptr_vram_2 = vram_2;
  3016a8:	61 e3       	mov	r14,r1
  3016aa:	71 c8       	add	#-56,r1
  3016ac:	51 1e       	mov.l	@(56,r1),r1
  3016ae:	21 18       	tst	r1,r1
  3016b0:	89 05       	bt	3016be <dgetvram+0x3e>
  3016b2:	d1 07       	mov.l	3016d0 <dgetvram+0x50>,r1	! 8101444 <vram_2>
  3016b4:	62 12       	mov.l	@r1,r2
  3016b6:	61 e3       	mov	r14,r1
  3016b8:	71 c8       	add	#-56,r1
  3016ba:	51 1e       	mov.l	@(56,r1),r1
  3016bc:	21 22       	mov.l	r2,@r1
}
  3016be:	00 09       	nop	
  3016c0:	7e 08       	add	#8,r14
  3016c2:	6f e3       	mov	r14,r15
  3016c4:	6e f6       	mov.l	@r15+,r14
  3016c6:	00 0b       	rts	
  3016c8:	00 09       	nop	
  3016ca:	00 09       	nop	
  3016cc:	08 10       	.word 0x0810
  3016ce:	14 40       	mov.l	r4,@(0,r4)
  3016d0:	08 10       	.word 0x0810
  3016d2:	14 44       	mov.l	r4,@(16,r4)

003016d4 <dvram_switch>:

/* dvram_switch(): Triple buffering switch
   This function is not part of the API; it is used only by dupdate(). */
void dvram_switch(void)
{
  3016d4:	2f e6       	mov.l	r14,@-r15
  3016d6:	6e f3       	mov	r15,r14
	gint_vram = (gint_vram == vram_1) ? vram_2 : vram_1;
  3016d8:	d1 09       	mov.l	301700 <dvram_switch+0x2c>,r1	! 810143c <gint_vram>
  3016da:	62 12       	mov.l	@r1,r2
  3016dc:	d1 09       	mov.l	301704 <dvram_switch+0x30>,r1	! 8101440 <vram_1>
  3016de:	61 12       	mov.l	@r1,r1
  3016e0:	32 10       	cmp/eq	r1,r2
  3016e2:	8b 03       	bf	3016ec <dvram_switch+0x18>
  3016e4:	d1 08       	mov.l	301708 <dvram_switch+0x34>,r1	! 8101444 <vram_2>
  3016e6:	61 12       	mov.l	@r1,r1
  3016e8:	a0 02       	bra	3016f0 <dvram_switch+0x1c>
  3016ea:	00 09       	nop	
  3016ec:	d1 05       	mov.l	301704 <dvram_switch+0x30>,r1	! 8101440 <vram_1>
  3016ee:	61 12       	mov.l	@r1,r1
  3016f0:	d2 03       	mov.l	301700 <dvram_switch+0x2c>,r2	! 810143c <gint_vram>
  3016f2:	22 12       	mov.l	r1,@r2
}
  3016f4:	00 09       	nop	
  3016f6:	6f e3       	mov	r14,r15
  3016f8:	6e f6       	mov.l	@r15+,r14
  3016fa:	00 0b       	rts	
  3016fc:	00 09       	nop	
  3016fe:	00 09       	nop	
  301700:	08 10       	.word 0x0810
  301702:	14 3c       	mov.l	r3,@(48,r4)
  301704:	08 10       	.word 0x0810
  301706:	14 40       	mov.l	r4,@(0,r4)
  301708:	08 10       	.word 0x0810
  30170a:	14 44       	mov.l	r4,@(16,r4)

0030170c <GINT_CALL_SET_function>:
{
  30170c:	2f e6       	mov.l	r14,@-r15
  30170e:	7f fc       	add	#-4,r15
  301710:	6e f3       	mov	r15,r14
  301712:	61 e3       	mov	r14,r1
  301714:	71 c4       	add	#-60,r1
  301716:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301718:	61 e3       	mov	r14,r1
  30171a:	71 c4       	add	#-60,r1
  30171c:	51 1f       	mov.l	@(60,r1),r1
  30171e:	e2 01       	mov	#1,r2
  301720:	21 22       	mov.l	r2,@r1
	return 0;
  301722:	e1 00       	mov	#0,r1
}
  301724:	60 13       	mov	r1,r0
  301726:	7e 04       	add	#4,r14
  301728:	6f e3       	mov	r14,r15
  30172a:	6e f6       	mov.l	@r15+,r14
  30172c:	00 0b       	rts	
  30172e:	00 09       	nop	

00301730 <GINT_CALL_INC_function>:
{
  301730:	2f e6       	mov.l	r14,@-r15
  301732:	7f fc       	add	#-4,r15
  301734:	6e f3       	mov	r15,r14
  301736:	61 e3       	mov	r14,r1
  301738:	71 c4       	add	#-60,r1
  30173a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30173c:	61 e3       	mov	r14,r1
  30173e:	71 c4       	add	#-60,r1
  301740:	51 1f       	mov.l	@(60,r1),r1
  301742:	61 12       	mov.l	@r1,r1
  301744:	62 13       	mov	r1,r2
  301746:	72 01       	add	#1,r2
  301748:	61 e3       	mov	r14,r1
  30174a:	71 c4       	add	#-60,r1
  30174c:	51 1f       	mov.l	@(60,r1),r1
  30174e:	21 22       	mov.l	r2,@r1
	return 0;
  301750:	e1 00       	mov	#0,r1
}
  301752:	60 13       	mov	r1,r0
  301754:	7e 04       	add	#4,r14
  301756:	6f e3       	mov	r14,r15
  301758:	6e f6       	mov.l	@r15+,r14
  30175a:	00 0b       	rts	
  30175c:	00 09       	nop	

0030175e <GINT_CALL_SET_STOP_function>:
{
  30175e:	2f e6       	mov.l	r14,@-r15
  301760:	7f fc       	add	#-4,r15
  301762:	6e f3       	mov	r15,r14
  301764:	61 e3       	mov	r14,r1
  301766:	71 c4       	add	#-60,r1
  301768:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30176a:	61 e3       	mov	r14,r1
  30176c:	71 c4       	add	#-60,r1
  30176e:	51 1f       	mov.l	@(60,r1),r1
  301770:	e2 01       	mov	#1,r2
  301772:	21 22       	mov.l	r2,@r1
	return 1;
  301774:	e1 01       	mov	#1,r1
}
  301776:	60 13       	mov	r1,r0
  301778:	7e 04       	add	#4,r14
  30177a:	6f e3       	mov	r14,r15
  30177c:	6e f6       	mov.l	@r15+,r14
  30177e:	00 0b       	rts	
  301780:	00 09       	nop	

00301782 <GINT_CALL_INC_STOP_function>:
{
  301782:	2f e6       	mov.l	r14,@-r15
  301784:	7f fc       	add	#-4,r15
  301786:	6e f3       	mov	r15,r14
  301788:	61 e3       	mov	r14,r1
  30178a:	71 c4       	add	#-60,r1
  30178c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30178e:	61 e3       	mov	r14,r1
  301790:	71 c4       	add	#-60,r1
  301792:	51 1f       	mov.l	@(60,r1),r1
  301794:	61 12       	mov.l	@r1,r1
  301796:	62 13       	mov	r1,r2
  301798:	72 01       	add	#1,r2
  30179a:	61 e3       	mov	r14,r1
  30179c:	71 c4       	add	#-60,r1
  30179e:	51 1f       	mov.l	@(60,r1),r1
  3017a0:	21 22       	mov.l	r2,@r1
	return 1;
  3017a2:	e1 01       	mov	#1,r1
}
  3017a4:	60 13       	mov	r1,r0
  3017a6:	7e 04       	add	#4,r14
  3017a8:	6f e3       	mov	r14,r15
  3017aa:	6e f6       	mov.l	@r15+,r14
  3017ac:	00 0b       	rts	
  3017ae:	00 09       	nop	

003017b0 <dimage_rgb16>:
#include <gint/image.h>
#include <gint/display.h>

void dimage_rgb16(int x, int y, image_t const *img, int eff)
{
  3017b0:	2f e6       	mov.l	r14,@-r15
  3017b2:	4f 22       	sts.l	pr,@-r15
  3017b4:	7f e0       	add	#-32,r15
  3017b6:	6e f3       	mov	r15,r14
  3017b8:	61 e3       	mov	r14,r1
  3017ba:	71 e0       	add	#-32,r1
  3017bc:	11 4f       	mov.l	r4,@(60,r1)
  3017be:	61 e3       	mov	r14,r1
  3017c0:	71 e0       	add	#-32,r1
  3017c2:	11 5e       	mov.l	r5,@(56,r1)
  3017c4:	61 e3       	mov	r14,r1
  3017c6:	71 e0       	add	#-32,r1
  3017c8:	11 6d       	mov.l	r6,@(52,r1)
  3017ca:	61 e3       	mov	r14,r1
  3017cc:	71 e0       	add	#-32,r1
  3017ce:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_rgb16(x, y, img, 0, 0, img->width, img->height, eff);
  3017d0:	61 e3       	mov	r14,r1
  3017d2:	71 e0       	add	#-32,r1
  3017d4:	51 1d       	mov.l	@(52,r1),r1
  3017d6:	85 12       	mov.w	@(4,r1),r0
  3017d8:	61 03       	mov	r0,r1
  3017da:	61 1d       	extu.w	r1,r1
  3017dc:	66 13       	mov	r1,r6
  3017de:	61 e3       	mov	r14,r1
  3017e0:	71 e0       	add	#-32,r1
  3017e2:	51 1d       	mov.l	@(52,r1),r1
  3017e4:	85 13       	mov.w	@(6,r1),r0
  3017e6:	61 03       	mov	r0,r1
  3017e8:	61 1d       	extu.w	r1,r1
  3017ea:	65 13       	mov	r1,r5
  3017ec:	63 e3       	mov	r14,r3
  3017ee:	73 e0       	add	#-32,r3
  3017f0:	62 e3       	mov	r14,r2
  3017f2:	72 e0       	add	#-32,r2
  3017f4:	61 e3       	mov	r14,r1
  3017f6:	71 e0       	add	#-32,r1
  3017f8:	67 e3       	mov	r14,r7
  3017fa:	77 e0       	add	#-32,r7
  3017fc:	57 7c       	mov.l	@(48,r7),r7
  3017fe:	1f 73       	mov.l	r7,@(12,r15)
  301800:	1f 52       	mov.l	r5,@(8,r15)
  301802:	1f 61       	mov.l	r6,@(4,r15)
  301804:	e7 00       	mov	#0,r7
  301806:	2f 72       	mov.l	r7,@r15
  301808:	e7 00       	mov	#0,r7
  30180a:	56 3d       	mov.l	@(52,r3),r6
  30180c:	55 2e       	mov.l	@(56,r2),r5
  30180e:	54 1f       	mov.l	@(60,r1),r4
  301810:	d1 04       	mov.l	301824 <dimage_rgb16+0x74>,r1	! 301828 <dsubimage_rgb16>
  301812:	41 0b       	jsr	@r1
  301814:	00 09       	nop	
}
  301816:	00 09       	nop	
  301818:	7e 20       	add	#32,r14
  30181a:	6f e3       	mov	r14,r15
  30181c:	4f 26       	lds.l	@r15+,pr
  30181e:	6e f6       	mov.l	@r15+,r14
  301820:	00 0b       	rts	
  301822:	00 09       	nop	
  301824:	00 30       	.word 0x0030
  301826:	18 28       	mov.l	r2,@(32,r8)

00301828 <dsubimage_rgb16>:

void dsubimage_rgb16(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff)
{
  301828:	2f e6       	mov.l	r14,@-r15
  30182a:	4f 22       	sts.l	pr,@-r15
  30182c:	7f a0       	add	#-96,r15
  30182e:	6e f3       	mov	r15,r14
  301830:	61 e3       	mov	r14,r1
  301832:	71 20       	add	#32,r1
  301834:	11 40       	mov.l	r4,@(0,r1)
  301836:	61 e3       	mov	r14,r1
  301838:	71 e0       	add	#-32,r1
  30183a:	11 5f       	mov.l	r5,@(60,r1)
  30183c:	61 e3       	mov	r14,r1
  30183e:	71 e0       	add	#-32,r1
  301840:	11 6e       	mov.l	r6,@(56,r1)
  301842:	61 e3       	mov	r14,r1
  301844:	71 e0       	add	#-32,r1
  301846:	11 7d       	mov.l	r7,@(52,r1)
	if(img->format == IMAGE_RGB565A)
  301848:	61 e3       	mov	r14,r1
  30184a:	71 e0       	add	#-32,r1
  30184c:	51 1e       	mov.l	@(56,r1),r1
  30184e:	61 10       	mov.b	@r1,r1
  301850:	62 1c       	extu.b	r1,r2
  301852:	e1 01       	mov	#1,r1
  301854:	32 10       	cmp/eq	r1,r2
  301856:	8b 2b       	bf	3018b0 <dsubimage_rgb16+0x88>
		return dsubimage_rgb16_clearbg(x, y, img, left, top, w, h, eff,
			image_alpha(img->format));
  301858:	61 e3       	mov	r14,r1
  30185a:	71 e0       	add	#-32,r1
  30185c:	51 1e       	mov.l	@(56,r1),r1
  30185e:	61 10       	mov.b	@r1,r1
  301860:	61 1c       	extu.b	r1,r1
		return dsubimage_rgb16_clearbg(x, y, img, left, top, w, h, eff,
  301862:	64 13       	mov	r1,r4
  301864:	d1 3c       	mov.l	301958 <dsubimage_rgb16+0x130>,r1	! 306610 <image_alpha>
  301866:	41 0b       	jsr	@r1
  301868:	00 09       	nop	
  30186a:	61 03       	mov	r0,r1
  30186c:	67 e3       	mov	r14,r7
  30186e:	77 e0       	add	#-32,r7
  301870:	66 e3       	mov	r14,r6
  301872:	76 e0       	add	#-32,r6
  301874:	63 e3       	mov	r14,r3
  301876:	73 e0       	add	#-32,r3
  301878:	62 e3       	mov	r14,r2
  30187a:	72 20       	add	#32,r2
  30187c:	1f 14       	mov.l	r1,@(16,r15)
  30187e:	65 e3       	mov	r14,r5
  301880:	75 40       	add	#64,r5
  301882:	51 5d       	mov.l	@(52,r5),r1
  301884:	1f 13       	mov.l	r1,@(12,r15)
  301886:	65 e3       	mov	r14,r5
  301888:	75 40       	add	#64,r5
  30188a:	51 5c       	mov.l	@(48,r5),r1
  30188c:	1f 12       	mov.l	r1,@(8,r15)
  30188e:	65 e3       	mov	r14,r5
  301890:	75 40       	add	#64,r5
  301892:	51 5b       	mov.l	@(44,r5),r1
  301894:	1f 11       	mov.l	r1,@(4,r15)
  301896:	65 e3       	mov	r14,r5
  301898:	75 40       	add	#64,r5
  30189a:	51 5a       	mov.l	@(40,r5),r1
  30189c:	2f 12       	mov.l	r1,@r15
  30189e:	57 7d       	mov.l	@(52,r7),r7
  3018a0:	56 6e       	mov.l	@(56,r6),r6
  3018a2:	55 3f       	mov.l	@(60,r3),r5
  3018a4:	54 20       	mov.l	@(0,r2),r4
  3018a6:	d1 2d       	mov.l	30195c <dsubimage_rgb16+0x134>,r1	! 3019ec <dsubimage_rgb16_clearbg>
  3018a8:	41 0b       	jsr	@r1
  3018aa:	00 09       	nop	
  3018ac:	a0 4d       	bra	30194a <dsubimage_rgb16+0x122>
  3018ae:	00 09       	nop	

	struct gint_image_box box = { x, y, w, h, left, top };
  3018b0:	61 e3       	mov	r14,r1
  3018b2:	71 48       	add	#72,r1
  3018b4:	62 e3       	mov	r14,r2
  3018b6:	72 20       	add	#32,r2
  3018b8:	52 20       	mov.l	@(0,r2),r2
  3018ba:	21 22       	mov.l	r2,@r1
  3018bc:	61 e3       	mov	r14,r1
  3018be:	71 48       	add	#72,r1
  3018c0:	62 e3       	mov	r14,r2
  3018c2:	72 e0       	add	#-32,r2
  3018c4:	52 2f       	mov.l	@(60,r2),r2
  3018c6:	11 21       	mov.l	r2,@(4,r1)
  3018c8:	61 e3       	mov	r14,r1
  3018ca:	71 48       	add	#72,r1
  3018cc:	63 e3       	mov	r14,r3
  3018ce:	73 40       	add	#64,r3
  3018d0:	52 3b       	mov.l	@(44,r3),r2
  3018d2:	11 22       	mov.l	r2,@(8,r1)
  3018d4:	61 e3       	mov	r14,r1
  3018d6:	71 48       	add	#72,r1
  3018d8:	65 e3       	mov	r14,r5
  3018da:	75 40       	add	#64,r5
  3018dc:	52 5c       	mov.l	@(48,r5),r2
  3018de:	11 23       	mov.l	r2,@(12,r1)
  3018e0:	61 e3       	mov	r14,r1
  3018e2:	71 48       	add	#72,r1
  3018e4:	62 e3       	mov	r14,r2
  3018e6:	72 e0       	add	#-32,r2
  3018e8:	52 2d       	mov.l	@(52,r2),r2
  3018ea:	11 24       	mov.l	r2,@(16,r1)
  3018ec:	61 e3       	mov	r14,r1
  3018ee:	71 48       	add	#72,r1
  3018f0:	63 e3       	mov	r14,r3
  3018f2:	73 40       	add	#64,r3
  3018f4:	52 3a       	mov.l	@(40,r3),r2
  3018f6:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, false, &cmd, &dwindow))
  3018f8:	61 e3       	mov	r14,r1
  3018fa:	71 e0       	add	#-32,r1
  3018fc:	63 e3       	mov	r14,r3
  3018fe:	73 48       	add	#72,r3
  301900:	d2 17       	mov.l	301960 <dsubimage_rgb16+0x138>,r2	! 8101690 <dwindow>
  301902:	1f 22       	mov.l	r2,@(8,r15)
  301904:	62 e3       	mov	r14,r2
  301906:	72 24       	add	#36,r2
  301908:	1f 21       	mov.l	r2,@(4,r15)
  30190a:	e2 00       	mov	#0,r2
  30190c:	2f 22       	mov.l	r2,@r15
  30190e:	e7 00       	mov	#0,r7
  301910:	65 e3       	mov	r14,r5
  301912:	75 40       	add	#64,r5
  301914:	56 5d       	mov.l	@(52,r5),r6
  301916:	55 1e       	mov.l	@(56,r1),r5
  301918:	64 33       	mov	r3,r4
  30191a:	d1 12       	mov.l	301964 <dsubimage_rgb16+0x13c>,r1	! 306a6a <gint_image_mkcmd>
  30191c:	41 0b       	jsr	@r1
  30191e:	00 09       	nop	
  301920:	61 03       	mov	r0,r1
  301922:	e2 01       	mov	#1,r2
  301924:	21 2a       	xor	r2,r1
  301926:	61 1c       	extu.b	r1,r1
  301928:	21 18       	tst	r1,r1
  30192a:	8b 0d       	bf	301948 <dsubimage_rgb16+0x120>
		return;
	cmd.loop = gint_image_rgb16_normal;
  30192c:	61 e3       	mov	r14,r1
  30192e:	71 24       	add	#36,r1
  301930:	d2 0d       	mov.l	301968 <dsubimage_rgb16+0x140>,r2	! 306e48 <gint_image_rgb16_normal>
  301932:	11 22       	mov.l	r2,@(8,r1)
	gint_image_rgb16_loop(DWIDTH, &cmd);
  301934:	62 e3       	mov	r14,r2
  301936:	72 24       	add	#36,r2
  301938:	91 0d       	mov.w	301956 <dsubimage_rgb16+0x12e>,r1	! 18c
  30193a:	65 23       	mov	r2,r5
  30193c:	64 13       	mov	r1,r4
  30193e:	d1 0b       	mov.l	30196c <dsubimage_rgb16+0x144>,r1	! 306e10 <gint_image_rgb16_loop>
  301940:	41 0b       	jsr	@r1
  301942:	00 09       	nop	
  301944:	a0 01       	bra	30194a <dsubimage_rgb16+0x122>
  301946:	00 09       	nop	
		return;
  301948:	00 09       	nop	
}
  30194a:	7e 60       	add	#96,r14
  30194c:	6f e3       	mov	r14,r15
  30194e:	4f 26       	lds.l	@r15+,pr
  301950:	6e f6       	mov.l	@r15+,r14
  301952:	00 0b       	rts	
  301954:	00 09       	nop	
  301956:	01 8c       	mov.b	@(r0,r8),r1
  301958:	00 30       	.word 0x0030
  30195a:	66 10       	mov.b	@r1,r6
  30195c:	00 30       	.word 0x0030
  30195e:	19 ec       	mov.l	r14,@(48,r9)
  301960:	08 10       	.word 0x0810
  301962:	16 90       	mov.l	r9,@(0,r6)
  301964:	00 30       	.word 0x0030
  301966:	6a 6a       	negc	r6,r10
  301968:	00 30       	.word 0x0030
  30196a:	6e 48       	swap.b	r4,r14
  30196c:	00 30       	.word 0x0030
  30196e:	6e 10       	mov.b	@r1,r14

00301970 <dimage_rgb16_clearbg>:

void dimage_rgb16_clearbg(int x, int y, image_t const *img, int eff,int bg)
{
  301970:	2f e6       	mov.l	r14,@-r15
  301972:	4f 22       	sts.l	pr,@-r15
  301974:	7f dc       	add	#-36,r15
  301976:	6e f3       	mov	r15,r14
  301978:	61 e3       	mov	r14,r1
  30197a:	71 e4       	add	#-28,r1
  30197c:	11 4f       	mov.l	r4,@(60,r1)
  30197e:	61 e3       	mov	r14,r1
  301980:	71 e4       	add	#-28,r1
  301982:	11 5e       	mov.l	r5,@(56,r1)
  301984:	61 e3       	mov	r14,r1
  301986:	71 e4       	add	#-28,r1
  301988:	11 6d       	mov.l	r6,@(52,r1)
  30198a:	61 e3       	mov	r14,r1
  30198c:	71 e4       	add	#-28,r1
  30198e:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_rgb16_clearbg(x, y, img, 0, 0, img->width, img->height, eff,
  301990:	61 e3       	mov	r14,r1
  301992:	71 e4       	add	#-28,r1
  301994:	51 1d       	mov.l	@(52,r1),r1
  301996:	85 12       	mov.w	@(4,r1),r0
  301998:	61 03       	mov	r0,r1
  30199a:	61 1d       	extu.w	r1,r1
  30199c:	66 13       	mov	r1,r6
  30199e:	61 e3       	mov	r14,r1
  3019a0:	71 e4       	add	#-28,r1
  3019a2:	51 1d       	mov.l	@(52,r1),r1
  3019a4:	85 13       	mov.w	@(6,r1),r0
  3019a6:	61 03       	mov	r0,r1
  3019a8:	61 1d       	extu.w	r1,r1
  3019aa:	65 13       	mov	r1,r5
  3019ac:	63 e3       	mov	r14,r3
  3019ae:	73 e4       	add	#-28,r3
  3019b0:	62 e3       	mov	r14,r2
  3019b2:	72 e4       	add	#-28,r2
  3019b4:	61 e3       	mov	r14,r1
  3019b6:	71 e4       	add	#-28,r1
  3019b8:	57 eb       	mov.l	@(44,r14),r7
  3019ba:	1f 74       	mov.l	r7,@(16,r15)
  3019bc:	67 e3       	mov	r14,r7
  3019be:	77 e4       	add	#-28,r7
  3019c0:	57 7c       	mov.l	@(48,r7),r7
  3019c2:	1f 73       	mov.l	r7,@(12,r15)
  3019c4:	1f 52       	mov.l	r5,@(8,r15)
  3019c6:	1f 61       	mov.l	r6,@(4,r15)
  3019c8:	e7 00       	mov	#0,r7
  3019ca:	2f 72       	mov.l	r7,@r15
  3019cc:	e7 00       	mov	#0,r7
  3019ce:	56 3d       	mov.l	@(52,r3),r6
  3019d0:	55 2e       	mov.l	@(56,r2),r5
  3019d2:	54 1f       	mov.l	@(60,r1),r4
  3019d4:	d1 04       	mov.l	3019e8 <dimage_rgb16_clearbg+0x78>,r1	! 3019ec <dsubimage_rgb16_clearbg>
  3019d6:	41 0b       	jsr	@r1
  3019d8:	00 09       	nop	
		bg);
}
  3019da:	00 09       	nop	
  3019dc:	7e 24       	add	#36,r14
  3019de:	6f e3       	mov	r14,r15
  3019e0:	4f 26       	lds.l	@r15+,pr
  3019e2:	6e f6       	mov.l	@r15+,r14
  3019e4:	00 0b       	rts	
  3019e6:	00 09       	nop	
  3019e8:	00 30       	.word 0x0030
  3019ea:	19 ec       	mov.l	r14,@(48,r9)

003019ec <dsubimage_rgb16_clearbg>:

void dsubimage_rgb16_clearbg(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff, int bg_color)
{
  3019ec:	2f e6       	mov.l	r14,@-r15
  3019ee:	4f 22       	sts.l	pr,@-r15
  3019f0:	7f a8       	add	#-88,r15
  3019f2:	6e f3       	mov	r15,r14
  3019f4:	61 e3       	mov	r14,r1
  3019f6:	71 18       	add	#24,r1
  3019f8:	11 40       	mov.l	r4,@(0,r1)
  3019fa:	61 e3       	mov	r14,r1
  3019fc:	71 d8       	add	#-40,r1
  3019fe:	11 5f       	mov.l	r5,@(60,r1)
  301a00:	61 e3       	mov	r14,r1
  301a02:	71 d8       	add	#-40,r1
  301a04:	11 6e       	mov.l	r6,@(56,r1)
  301a06:	61 e3       	mov	r14,r1
  301a08:	71 d8       	add	#-40,r1
  301a0a:	11 7d       	mov.l	r7,@(52,r1)
	struct gint_image_box box = { x, y, w, h, left, top };
  301a0c:	61 e3       	mov	r14,r1
  301a0e:	71 40       	add	#64,r1
  301a10:	62 e3       	mov	r14,r2
  301a12:	72 18       	add	#24,r2
  301a14:	52 20       	mov.l	@(0,r2),r2
  301a16:	21 22       	mov.l	r2,@r1
  301a18:	61 e3       	mov	r14,r1
  301a1a:	71 40       	add	#64,r1
  301a1c:	62 e3       	mov	r14,r2
  301a1e:	72 d8       	add	#-40,r2
  301a20:	52 2f       	mov.l	@(60,r2),r2
  301a22:	11 21       	mov.l	r2,@(4,r1)
  301a24:	61 e3       	mov	r14,r1
  301a26:	71 40       	add	#64,r1
  301a28:	60 e3       	mov	r14,r0
  301a2a:	70 40       	add	#64,r0
  301a2c:	52 09       	mov.l	@(36,r0),r2
  301a2e:	11 22       	mov.l	r2,@(8,r1)
  301a30:	61 e3       	mov	r14,r1
  301a32:	71 40       	add	#64,r1
  301a34:	63 e3       	mov	r14,r3
  301a36:	73 40       	add	#64,r3
  301a38:	52 3a       	mov.l	@(40,r3),r2
  301a3a:	11 23       	mov.l	r2,@(12,r1)
  301a3c:	61 e3       	mov	r14,r1
  301a3e:	71 40       	add	#64,r1
  301a40:	62 e3       	mov	r14,r2
  301a42:	72 d8       	add	#-40,r2
  301a44:	52 2d       	mov.l	@(52,r2),r2
  301a46:	11 24       	mov.l	r2,@(16,r1)
  301a48:	61 e3       	mov	r14,r1
  301a4a:	71 40       	add	#64,r1
  301a4c:	60 e3       	mov	r14,r0
  301a4e:	70 40       	add	#64,r0
  301a50:	52 08       	mov.l	@(32,r0),r2
  301a52:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, false, &cmd, &dwindow))
  301a54:	61 e3       	mov	r14,r1
  301a56:	71 d8       	add	#-40,r1
  301a58:	63 e3       	mov	r14,r3
  301a5a:	73 40       	add	#64,r3
  301a5c:	d2 19       	mov.l	301ac4 <dsubimage_rgb16_clearbg+0xd8>,r2	! 8101690 <dwindow>
  301a5e:	1f 22       	mov.l	r2,@(8,r15)
  301a60:	62 e3       	mov	r14,r2
  301a62:	72 1c       	add	#28,r2
  301a64:	1f 21       	mov.l	r2,@(4,r15)
  301a66:	e2 00       	mov	#0,r2
  301a68:	2f 22       	mov.l	r2,@r15
  301a6a:	e7 00       	mov	#0,r7
  301a6c:	62 e3       	mov	r14,r2
  301a6e:	72 40       	add	#64,r2
  301a70:	56 2b       	mov.l	@(44,r2),r6
  301a72:	55 1e       	mov.l	@(56,r1),r5
  301a74:	64 33       	mov	r3,r4
  301a76:	d1 14       	mov.l	301ac8 <dsubimage_rgb16_clearbg+0xdc>,r1	! 306a6a <gint_image_mkcmd>
  301a78:	41 0b       	jsr	@r1
  301a7a:	00 09       	nop	
  301a7c:	61 03       	mov	r0,r1
  301a7e:	e3 01       	mov	#1,r3
  301a80:	21 3a       	xor	r3,r1
  301a82:	61 1c       	extu.b	r1,r1
  301a84:	21 18       	tst	r1,r1
  301a86:	8b 15       	bf	301ab4 <dsubimage_rgb16_clearbg+0xc8>
		return;
	cmd.color_1 = bg_color;
  301a88:	60 e3       	mov	r14,r0
  301a8a:	70 40       	add	#64,r0
  301a8c:	51 0c       	mov.l	@(48,r0),r1
  301a8e:	62 1d       	extu.w	r1,r2
  301a90:	61 e3       	mov	r14,r1
  301a92:	71 1c       	add	#28,r1
  301a94:	60 23       	mov	r2,r0
  301a96:	81 1d       	mov.w	r0,@(26,r1)
	cmd.loop = gint_image_rgb16_clearbg;
  301a98:	61 e3       	mov	r14,r1
  301a9a:	71 1c       	add	#28,r1
  301a9c:	d2 0b       	mov.l	301acc <dsubimage_rgb16_clearbg+0xe0>,r2	! 307004 <gint_image_rgb16_clearbg>
  301a9e:	11 22       	mov.l	r2,@(8,r1)
	gint_image_rgb16_loop(DWIDTH, &cmd);
  301aa0:	62 e3       	mov	r14,r2
  301aa2:	72 1c       	add	#28,r2
  301aa4:	91 0d       	mov.w	301ac2 <dsubimage_rgb16_clearbg+0xd6>,r1	! 18c
  301aa6:	65 23       	mov	r2,r5
  301aa8:	64 13       	mov	r1,r4
  301aaa:	d1 09       	mov.l	301ad0 <dsubimage_rgb16_clearbg+0xe4>,r1	! 306e10 <gint_image_rgb16_loop>
  301aac:	41 0b       	jsr	@r1
  301aae:	00 09       	nop	
  301ab0:	a0 01       	bra	301ab6 <dsubimage_rgb16_clearbg+0xca>
  301ab2:	00 09       	nop	
		return;
  301ab4:	00 09       	nop	
}
  301ab6:	7e 58       	add	#88,r14
  301ab8:	6f e3       	mov	r14,r15
  301aba:	4f 26       	lds.l	@r15+,pr
  301abc:	6e f6       	mov.l	@r15+,r14
  301abe:	00 0b       	rts	
  301ac0:	00 09       	nop	
  301ac2:	01 8c       	mov.b	@(r0,r8),r1
  301ac4:	08 10       	.word 0x0810
  301ac6:	16 90       	mov.l	r9,@(0,r6)
  301ac8:	00 30       	.word 0x0030
  301aca:	6a 6a       	negc	r6,r10
  301acc:	00 30       	.word 0x0030
  301ace:	70 04       	add	#4,r0
  301ad0:	00 30       	.word 0x0030
  301ad2:	6e 10       	mov.b	@r1,r14

00301ad4 <GINT_CALL_SET_function>:
{
  301ad4:	2f e6       	mov.l	r14,@-r15
  301ad6:	7f fc       	add	#-4,r15
  301ad8:	6e f3       	mov	r15,r14
  301ada:	61 e3       	mov	r14,r1
  301adc:	71 c4       	add	#-60,r1
  301ade:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301ae0:	61 e3       	mov	r14,r1
  301ae2:	71 c4       	add	#-60,r1
  301ae4:	51 1f       	mov.l	@(60,r1),r1
  301ae6:	e2 01       	mov	#1,r2
  301ae8:	21 22       	mov.l	r2,@r1
	return 0;
  301aea:	e1 00       	mov	#0,r1
}
  301aec:	60 13       	mov	r1,r0
  301aee:	7e 04       	add	#4,r14
  301af0:	6f e3       	mov	r14,r15
  301af2:	6e f6       	mov.l	@r15+,r14
  301af4:	00 0b       	rts	
  301af6:	00 09       	nop	

00301af8 <GINT_CALL_INC_function>:
{
  301af8:	2f e6       	mov.l	r14,@-r15
  301afa:	7f fc       	add	#-4,r15
  301afc:	6e f3       	mov	r15,r14
  301afe:	61 e3       	mov	r14,r1
  301b00:	71 c4       	add	#-60,r1
  301b02:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301b04:	61 e3       	mov	r14,r1
  301b06:	71 c4       	add	#-60,r1
  301b08:	51 1f       	mov.l	@(60,r1),r1
  301b0a:	61 12       	mov.l	@r1,r1
  301b0c:	62 13       	mov	r1,r2
  301b0e:	72 01       	add	#1,r2
  301b10:	61 e3       	mov	r14,r1
  301b12:	71 c4       	add	#-60,r1
  301b14:	51 1f       	mov.l	@(60,r1),r1
  301b16:	21 22       	mov.l	r2,@r1
	return 0;
  301b18:	e1 00       	mov	#0,r1
}
  301b1a:	60 13       	mov	r1,r0
  301b1c:	7e 04       	add	#4,r14
  301b1e:	6f e3       	mov	r14,r15
  301b20:	6e f6       	mov.l	@r15+,r14
  301b22:	00 0b       	rts	
  301b24:	00 09       	nop	

00301b26 <GINT_CALL_SET_STOP_function>:
{
  301b26:	2f e6       	mov.l	r14,@-r15
  301b28:	7f fc       	add	#-4,r15
  301b2a:	6e f3       	mov	r15,r14
  301b2c:	61 e3       	mov	r14,r1
  301b2e:	71 c4       	add	#-60,r1
  301b30:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301b32:	61 e3       	mov	r14,r1
  301b34:	71 c4       	add	#-60,r1
  301b36:	51 1f       	mov.l	@(60,r1),r1
  301b38:	e2 01       	mov	#1,r2
  301b3a:	21 22       	mov.l	r2,@r1
	return 1;
  301b3c:	e1 01       	mov	#1,r1
}
  301b3e:	60 13       	mov	r1,r0
  301b40:	7e 04       	add	#4,r14
  301b42:	6f e3       	mov	r14,r15
  301b44:	6e f6       	mov.l	@r15+,r14
  301b46:	00 0b       	rts	
  301b48:	00 09       	nop	

00301b4a <GINT_CALL_INC_STOP_function>:
{
  301b4a:	2f e6       	mov.l	r14,@-r15
  301b4c:	7f fc       	add	#-4,r15
  301b4e:	6e f3       	mov	r15,r14
  301b50:	61 e3       	mov	r14,r1
  301b52:	71 c4       	add	#-60,r1
  301b54:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301b56:	61 e3       	mov	r14,r1
  301b58:	71 c4       	add	#-60,r1
  301b5a:	51 1f       	mov.l	@(60,r1),r1
  301b5c:	61 12       	mov.l	@r1,r1
  301b5e:	62 13       	mov	r1,r2
  301b60:	72 01       	add	#1,r2
  301b62:	61 e3       	mov	r14,r1
  301b64:	71 c4       	add	#-60,r1
  301b66:	51 1f       	mov.l	@(60,r1),r1
  301b68:	21 22       	mov.l	r2,@r1
	return 1;
  301b6a:	e1 01       	mov	#1,r1
}
  301b6c:	60 13       	mov	r1,r0
  301b6e:	7e 04       	add	#4,r14
  301b70:	6f e3       	mov	r14,r15
  301b72:	6e f6       	mov.l	@r15+,r14
  301b74:	00 0b       	rts	
  301b76:	00 09       	nop	

00301b78 <dimage_p8>:
#include <gint/image.h>
#include <gint/display.h>

void dimage_p8(int x, int y, image_t const *img, int eff)
{
  301b78:	2f e6       	mov.l	r14,@-r15
  301b7a:	4f 22       	sts.l	pr,@-r15
  301b7c:	7f e0       	add	#-32,r15
  301b7e:	6e f3       	mov	r15,r14
  301b80:	61 e3       	mov	r14,r1
  301b82:	71 e0       	add	#-32,r1
  301b84:	11 4f       	mov.l	r4,@(60,r1)
  301b86:	61 e3       	mov	r14,r1
  301b88:	71 e0       	add	#-32,r1
  301b8a:	11 5e       	mov.l	r5,@(56,r1)
  301b8c:	61 e3       	mov	r14,r1
  301b8e:	71 e0       	add	#-32,r1
  301b90:	11 6d       	mov.l	r6,@(52,r1)
  301b92:	61 e3       	mov	r14,r1
  301b94:	71 e0       	add	#-32,r1
  301b96:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_p8(x, y, img, 0, 0, img->width, img->height, eff);
  301b98:	61 e3       	mov	r14,r1
  301b9a:	71 e0       	add	#-32,r1
  301b9c:	51 1d       	mov.l	@(52,r1),r1
  301b9e:	85 12       	mov.w	@(4,r1),r0
  301ba0:	61 03       	mov	r0,r1
  301ba2:	61 1d       	extu.w	r1,r1
  301ba4:	66 13       	mov	r1,r6
  301ba6:	61 e3       	mov	r14,r1
  301ba8:	71 e0       	add	#-32,r1
  301baa:	51 1d       	mov.l	@(52,r1),r1
  301bac:	85 13       	mov.w	@(6,r1),r0
  301bae:	61 03       	mov	r0,r1
  301bb0:	61 1d       	extu.w	r1,r1
  301bb2:	65 13       	mov	r1,r5
  301bb4:	63 e3       	mov	r14,r3
  301bb6:	73 e0       	add	#-32,r3
  301bb8:	62 e3       	mov	r14,r2
  301bba:	72 e0       	add	#-32,r2
  301bbc:	61 e3       	mov	r14,r1
  301bbe:	71 e0       	add	#-32,r1
  301bc0:	67 e3       	mov	r14,r7
  301bc2:	77 e0       	add	#-32,r7
  301bc4:	57 7c       	mov.l	@(48,r7),r7
  301bc6:	1f 73       	mov.l	r7,@(12,r15)
  301bc8:	1f 52       	mov.l	r5,@(8,r15)
  301bca:	1f 61       	mov.l	r6,@(4,r15)
  301bcc:	e7 00       	mov	#0,r7
  301bce:	2f 72       	mov.l	r7,@r15
  301bd0:	e7 00       	mov	#0,r7
  301bd2:	56 3d       	mov.l	@(52,r3),r6
  301bd4:	55 2e       	mov.l	@(56,r2),r5
  301bd6:	54 1f       	mov.l	@(60,r1),r4
  301bd8:	d1 04       	mov.l	301bec <dimage_p8+0x74>,r1	! 301bf0 <dsubimage_p8>
  301bda:	41 0b       	jsr	@r1
  301bdc:	00 09       	nop	
}
  301bde:	00 09       	nop	
  301be0:	7e 20       	add	#32,r14
  301be2:	6f e3       	mov	r14,r15
  301be4:	4f 26       	lds.l	@r15+,pr
  301be6:	6e f6       	mov.l	@r15+,r14
  301be8:	00 0b       	rts	
  301bea:	00 09       	nop	
  301bec:	00 30       	.word 0x0030
  301bee:	1b f0       	mov.l	r15,@(0,r11)

00301bf0 <dsubimage_p8>:

void dsubimage_p8(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff)
{
  301bf0:	2f e6       	mov.l	r14,@-r15
  301bf2:	4f 22       	sts.l	pr,@-r15
  301bf4:	7f a0       	add	#-96,r15
  301bf6:	6e f3       	mov	r15,r14
  301bf8:	61 e3       	mov	r14,r1
  301bfa:	71 20       	add	#32,r1
  301bfc:	11 40       	mov.l	r4,@(0,r1)
  301bfe:	61 e3       	mov	r14,r1
  301c00:	71 e0       	add	#-32,r1
  301c02:	11 5f       	mov.l	r5,@(60,r1)
  301c04:	61 e3       	mov	r14,r1
  301c06:	71 e0       	add	#-32,r1
  301c08:	11 6e       	mov.l	r6,@(56,r1)
  301c0a:	61 e3       	mov	r14,r1
  301c0c:	71 e0       	add	#-32,r1
  301c0e:	11 7d       	mov.l	r7,@(52,r1)
	if(img->format == IMAGE_P8_RGB565A)
  301c10:	61 e3       	mov	r14,r1
  301c12:	71 e0       	add	#-32,r1
  301c14:	51 1e       	mov.l	@(56,r1),r1
  301c16:	61 10       	mov.b	@r1,r1
  301c18:	62 1c       	extu.b	r1,r2
  301c1a:	e1 05       	mov	#5,r1
  301c1c:	32 10       	cmp/eq	r1,r2
  301c1e:	8b 2b       	bf	301c78 <dsubimage_p8+0x88>
		return dsubimage_p8_clearbg(x, y, img, left, top, w, h, eff,
			image_alpha(img->format));
  301c20:	61 e3       	mov	r14,r1
  301c22:	71 e0       	add	#-32,r1
  301c24:	51 1e       	mov.l	@(56,r1),r1
  301c26:	61 10       	mov.b	@r1,r1
  301c28:	61 1c       	extu.b	r1,r1
		return dsubimage_p8_clearbg(x, y, img, left, top, w, h, eff,
  301c2a:	64 13       	mov	r1,r4
  301c2c:	d1 3c       	mov.l	301d20 <dsubimage_p8+0x130>,r1	! 306610 <image_alpha>
  301c2e:	41 0b       	jsr	@r1
  301c30:	00 09       	nop	
  301c32:	61 03       	mov	r0,r1
  301c34:	67 e3       	mov	r14,r7
  301c36:	77 e0       	add	#-32,r7
  301c38:	66 e3       	mov	r14,r6
  301c3a:	76 e0       	add	#-32,r6
  301c3c:	63 e3       	mov	r14,r3
  301c3e:	73 e0       	add	#-32,r3
  301c40:	62 e3       	mov	r14,r2
  301c42:	72 20       	add	#32,r2
  301c44:	1f 14       	mov.l	r1,@(16,r15)
  301c46:	65 e3       	mov	r14,r5
  301c48:	75 40       	add	#64,r5
  301c4a:	51 5d       	mov.l	@(52,r5),r1
  301c4c:	1f 13       	mov.l	r1,@(12,r15)
  301c4e:	65 e3       	mov	r14,r5
  301c50:	75 40       	add	#64,r5
  301c52:	51 5c       	mov.l	@(48,r5),r1
  301c54:	1f 12       	mov.l	r1,@(8,r15)
  301c56:	65 e3       	mov	r14,r5
  301c58:	75 40       	add	#64,r5
  301c5a:	51 5b       	mov.l	@(44,r5),r1
  301c5c:	1f 11       	mov.l	r1,@(4,r15)
  301c5e:	65 e3       	mov	r14,r5
  301c60:	75 40       	add	#64,r5
  301c62:	51 5a       	mov.l	@(40,r5),r1
  301c64:	2f 12       	mov.l	r1,@r15
  301c66:	57 7d       	mov.l	@(52,r7),r7
  301c68:	56 6e       	mov.l	@(56,r6),r6
  301c6a:	55 3f       	mov.l	@(60,r3),r5
  301c6c:	54 20       	mov.l	@(0,r2),r4
  301c6e:	d1 2d       	mov.l	301d24 <dsubimage_p8+0x134>,r1	! 301db4 <dsubimage_p8_clearbg>
  301c70:	41 0b       	jsr	@r1
  301c72:	00 09       	nop	
  301c74:	a0 4d       	bra	301d12 <dsubimage_p8+0x122>
  301c76:	00 09       	nop	

	struct gint_image_box box = { x, y, w, h, left, top };
  301c78:	61 e3       	mov	r14,r1
  301c7a:	71 48       	add	#72,r1
  301c7c:	62 e3       	mov	r14,r2
  301c7e:	72 20       	add	#32,r2
  301c80:	52 20       	mov.l	@(0,r2),r2
  301c82:	21 22       	mov.l	r2,@r1
  301c84:	61 e3       	mov	r14,r1
  301c86:	71 48       	add	#72,r1
  301c88:	62 e3       	mov	r14,r2
  301c8a:	72 e0       	add	#-32,r2
  301c8c:	52 2f       	mov.l	@(60,r2),r2
  301c8e:	11 21       	mov.l	r2,@(4,r1)
  301c90:	61 e3       	mov	r14,r1
  301c92:	71 48       	add	#72,r1
  301c94:	63 e3       	mov	r14,r3
  301c96:	73 40       	add	#64,r3
  301c98:	52 3b       	mov.l	@(44,r3),r2
  301c9a:	11 22       	mov.l	r2,@(8,r1)
  301c9c:	61 e3       	mov	r14,r1
  301c9e:	71 48       	add	#72,r1
  301ca0:	65 e3       	mov	r14,r5
  301ca2:	75 40       	add	#64,r5
  301ca4:	52 5c       	mov.l	@(48,r5),r2
  301ca6:	11 23       	mov.l	r2,@(12,r1)
  301ca8:	61 e3       	mov	r14,r1
  301caa:	71 48       	add	#72,r1
  301cac:	62 e3       	mov	r14,r2
  301cae:	72 e0       	add	#-32,r2
  301cb0:	52 2d       	mov.l	@(52,r2),r2
  301cb2:	11 24       	mov.l	r2,@(16,r1)
  301cb4:	61 e3       	mov	r14,r1
  301cb6:	71 48       	add	#72,r1
  301cb8:	63 e3       	mov	r14,r3
  301cba:	73 40       	add	#64,r3
  301cbc:	52 3a       	mov.l	@(40,r3),r2
  301cbe:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, false, &cmd, &dwindow))
  301cc0:	61 e3       	mov	r14,r1
  301cc2:	71 e0       	add	#-32,r1
  301cc4:	63 e3       	mov	r14,r3
  301cc6:	73 48       	add	#72,r3
  301cc8:	d2 17       	mov.l	301d28 <dsubimage_p8+0x138>,r2	! 8101690 <dwindow>
  301cca:	1f 22       	mov.l	r2,@(8,r15)
  301ccc:	62 e3       	mov	r14,r2
  301cce:	72 24       	add	#36,r2
  301cd0:	1f 21       	mov.l	r2,@(4,r15)
  301cd2:	e2 00       	mov	#0,r2
  301cd4:	2f 22       	mov.l	r2,@r15
  301cd6:	e7 00       	mov	#0,r7
  301cd8:	65 e3       	mov	r14,r5
  301cda:	75 40       	add	#64,r5
  301cdc:	56 5d       	mov.l	@(52,r5),r6
  301cde:	55 1e       	mov.l	@(56,r1),r5
  301ce0:	64 33       	mov	r3,r4
  301ce2:	d1 12       	mov.l	301d2c <dsubimage_p8+0x13c>,r1	! 306a6a <gint_image_mkcmd>
  301ce4:	41 0b       	jsr	@r1
  301ce6:	00 09       	nop	
  301ce8:	61 03       	mov	r0,r1
  301cea:	e2 01       	mov	#1,r2
  301cec:	21 2a       	xor	r2,r1
  301cee:	61 1c       	extu.b	r1,r1
  301cf0:	21 18       	tst	r1,r1
  301cf2:	8b 0d       	bf	301d10 <dsubimage_p8+0x120>
		return;
	cmd.loop = gint_image_p8_normal;
  301cf4:	61 e3       	mov	r14,r1
  301cf6:	71 24       	add	#36,r1
  301cf8:	d2 0d       	mov.l	301d30 <dsubimage_p8+0x140>,r2	! 3070ec <gint_image_p8_normal>
  301cfa:	11 22       	mov.l	r2,@(8,r1)
	gint_image_p8_loop(DWIDTH, &cmd);
  301cfc:	62 e3       	mov	r14,r2
  301cfe:	72 24       	add	#36,r2
  301d00:	91 0d       	mov.w	301d1e <dsubimage_p8+0x12e>,r1	! 18c
  301d02:	65 23       	mov	r2,r5
  301d04:	64 13       	mov	r1,r4
  301d06:	d1 0b       	mov.l	301d34 <dsubimage_p8+0x144>,r1	! 3070bc <gint_image_p8_loop>
  301d08:	41 0b       	jsr	@r1
  301d0a:	00 09       	nop	
  301d0c:	a0 01       	bra	301d12 <dsubimage_p8+0x122>
  301d0e:	00 09       	nop	
		return;
  301d10:	00 09       	nop	
}
  301d12:	7e 60       	add	#96,r14
  301d14:	6f e3       	mov	r14,r15
  301d16:	4f 26       	lds.l	@r15+,pr
  301d18:	6e f6       	mov.l	@r15+,r14
  301d1a:	00 0b       	rts	
  301d1c:	00 09       	nop	
  301d1e:	01 8c       	mov.b	@(r0,r8),r1
  301d20:	00 30       	.word 0x0030
  301d22:	66 10       	mov.b	@r1,r6
  301d24:	00 30       	.word 0x0030
  301d26:	1d b4       	mov.l	r11,@(16,r13)
  301d28:	08 10       	.word 0x0810
  301d2a:	16 90       	mov.l	r9,@(0,r6)
  301d2c:	00 30       	.word 0x0030
  301d2e:	6a 6a       	negc	r6,r10
  301d30:	00 30       	.word 0x0030
  301d32:	70 ec       	add	#-20,r0
  301d34:	00 30       	.word 0x0030
  301d36:	70 bc       	add	#-68,r0

00301d38 <dimage_p8_clearbg>:

void dimage_p8_clearbg(int x, int y, image_t const *img, int eff, int bg)
{
  301d38:	2f e6       	mov.l	r14,@-r15
  301d3a:	4f 22       	sts.l	pr,@-r15
  301d3c:	7f dc       	add	#-36,r15
  301d3e:	6e f3       	mov	r15,r14
  301d40:	61 e3       	mov	r14,r1
  301d42:	71 e4       	add	#-28,r1
  301d44:	11 4f       	mov.l	r4,@(60,r1)
  301d46:	61 e3       	mov	r14,r1
  301d48:	71 e4       	add	#-28,r1
  301d4a:	11 5e       	mov.l	r5,@(56,r1)
  301d4c:	61 e3       	mov	r14,r1
  301d4e:	71 e4       	add	#-28,r1
  301d50:	11 6d       	mov.l	r6,@(52,r1)
  301d52:	61 e3       	mov	r14,r1
  301d54:	71 e4       	add	#-28,r1
  301d56:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_p8_clearbg(x, y, img, 0, 0, img->width, img->height, eff,bg);
  301d58:	61 e3       	mov	r14,r1
  301d5a:	71 e4       	add	#-28,r1
  301d5c:	51 1d       	mov.l	@(52,r1),r1
  301d5e:	85 12       	mov.w	@(4,r1),r0
  301d60:	61 03       	mov	r0,r1
  301d62:	61 1d       	extu.w	r1,r1
  301d64:	66 13       	mov	r1,r6
  301d66:	61 e3       	mov	r14,r1
  301d68:	71 e4       	add	#-28,r1
  301d6a:	51 1d       	mov.l	@(52,r1),r1
  301d6c:	85 13       	mov.w	@(6,r1),r0
  301d6e:	61 03       	mov	r0,r1
  301d70:	61 1d       	extu.w	r1,r1
  301d72:	65 13       	mov	r1,r5
  301d74:	63 e3       	mov	r14,r3
  301d76:	73 e4       	add	#-28,r3
  301d78:	62 e3       	mov	r14,r2
  301d7a:	72 e4       	add	#-28,r2
  301d7c:	61 e3       	mov	r14,r1
  301d7e:	71 e4       	add	#-28,r1
  301d80:	57 eb       	mov.l	@(44,r14),r7
  301d82:	1f 74       	mov.l	r7,@(16,r15)
  301d84:	67 e3       	mov	r14,r7
  301d86:	77 e4       	add	#-28,r7
  301d88:	57 7c       	mov.l	@(48,r7),r7
  301d8a:	1f 73       	mov.l	r7,@(12,r15)
  301d8c:	1f 52       	mov.l	r5,@(8,r15)
  301d8e:	1f 61       	mov.l	r6,@(4,r15)
  301d90:	e7 00       	mov	#0,r7
  301d92:	2f 72       	mov.l	r7,@r15
  301d94:	e7 00       	mov	#0,r7
  301d96:	56 3d       	mov.l	@(52,r3),r6
  301d98:	55 2e       	mov.l	@(56,r2),r5
  301d9a:	54 1f       	mov.l	@(60,r1),r4
  301d9c:	d1 04       	mov.l	301db0 <dimage_p8_clearbg+0x78>,r1	! 301db4 <dsubimage_p8_clearbg>
  301d9e:	41 0b       	jsr	@r1
  301da0:	00 09       	nop	
}
  301da2:	00 09       	nop	
  301da4:	7e 24       	add	#36,r14
  301da6:	6f e3       	mov	r14,r15
  301da8:	4f 26       	lds.l	@r15+,pr
  301daa:	6e f6       	mov.l	@r15+,r14
  301dac:	00 0b       	rts	
  301dae:	00 09       	nop	
  301db0:	00 30       	.word 0x0030
  301db2:	1d b4       	mov.l	r11,@(16,r13)

00301db4 <dsubimage_p8_clearbg>:

void dsubimage_p8_clearbg(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff, int bg_color)
{
  301db4:	2f e6       	mov.l	r14,@-r15
  301db6:	4f 22       	sts.l	pr,@-r15
  301db8:	7f a8       	add	#-88,r15
  301dba:	6e f3       	mov	r15,r14
  301dbc:	61 e3       	mov	r14,r1
  301dbe:	71 18       	add	#24,r1
  301dc0:	11 40       	mov.l	r4,@(0,r1)
  301dc2:	61 e3       	mov	r14,r1
  301dc4:	71 d8       	add	#-40,r1
  301dc6:	11 5f       	mov.l	r5,@(60,r1)
  301dc8:	61 e3       	mov	r14,r1
  301dca:	71 d8       	add	#-40,r1
  301dcc:	11 6e       	mov.l	r6,@(56,r1)
  301dce:	61 e3       	mov	r14,r1
  301dd0:	71 d8       	add	#-40,r1
  301dd2:	11 7d       	mov.l	r7,@(52,r1)
	struct gint_image_box box = { x, y, w, h, left, top };
  301dd4:	61 e3       	mov	r14,r1
  301dd6:	71 40       	add	#64,r1
  301dd8:	62 e3       	mov	r14,r2
  301dda:	72 18       	add	#24,r2
  301ddc:	52 20       	mov.l	@(0,r2),r2
  301dde:	21 22       	mov.l	r2,@r1
  301de0:	61 e3       	mov	r14,r1
  301de2:	71 40       	add	#64,r1
  301de4:	62 e3       	mov	r14,r2
  301de6:	72 d8       	add	#-40,r2
  301de8:	52 2f       	mov.l	@(60,r2),r2
  301dea:	11 21       	mov.l	r2,@(4,r1)
  301dec:	61 e3       	mov	r14,r1
  301dee:	71 40       	add	#64,r1
  301df0:	60 e3       	mov	r14,r0
  301df2:	70 40       	add	#64,r0
  301df4:	52 09       	mov.l	@(36,r0),r2
  301df6:	11 22       	mov.l	r2,@(8,r1)
  301df8:	61 e3       	mov	r14,r1
  301dfa:	71 40       	add	#64,r1
  301dfc:	63 e3       	mov	r14,r3
  301dfe:	73 40       	add	#64,r3
  301e00:	52 3a       	mov.l	@(40,r3),r2
  301e02:	11 23       	mov.l	r2,@(12,r1)
  301e04:	61 e3       	mov	r14,r1
  301e06:	71 40       	add	#64,r1
  301e08:	62 e3       	mov	r14,r2
  301e0a:	72 d8       	add	#-40,r2
  301e0c:	52 2d       	mov.l	@(52,r2),r2
  301e0e:	11 24       	mov.l	r2,@(16,r1)
  301e10:	61 e3       	mov	r14,r1
  301e12:	71 40       	add	#64,r1
  301e14:	60 e3       	mov	r14,r0
  301e16:	70 40       	add	#64,r0
  301e18:	52 08       	mov.l	@(32,r0),r2
  301e1a:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, true, &cmd, &dwindow))
  301e1c:	61 e3       	mov	r14,r1
  301e1e:	71 d8       	add	#-40,r1
  301e20:	63 e3       	mov	r14,r3
  301e22:	73 40       	add	#64,r3
  301e24:	d2 19       	mov.l	301e8c <dsubimage_p8_clearbg+0xd8>,r2	! 8101690 <dwindow>
  301e26:	1f 22       	mov.l	r2,@(8,r15)
  301e28:	62 e3       	mov	r14,r2
  301e2a:	72 1c       	add	#28,r2
  301e2c:	1f 21       	mov.l	r2,@(4,r15)
  301e2e:	e2 01       	mov	#1,r2
  301e30:	2f 22       	mov.l	r2,@r15
  301e32:	e7 00       	mov	#0,r7
  301e34:	62 e3       	mov	r14,r2
  301e36:	72 40       	add	#64,r2
  301e38:	56 2b       	mov.l	@(44,r2),r6
  301e3a:	55 1e       	mov.l	@(56,r1),r5
  301e3c:	64 33       	mov	r3,r4
  301e3e:	d1 14       	mov.l	301e90 <dsubimage_p8_clearbg+0xdc>,r1	! 306a6a <gint_image_mkcmd>
  301e40:	41 0b       	jsr	@r1
  301e42:	00 09       	nop	
  301e44:	61 03       	mov	r0,r1
  301e46:	e3 01       	mov	#1,r3
  301e48:	21 3a       	xor	r3,r1
  301e4a:	61 1c       	extu.b	r1,r1
  301e4c:	21 18       	tst	r1,r1
  301e4e:	8b 15       	bf	301e7c <dsubimage_p8_clearbg+0xc8>
		return;
	cmd.color_1 = bg_color;
  301e50:	60 e3       	mov	r14,r0
  301e52:	70 40       	add	#64,r0
  301e54:	51 0c       	mov.l	@(48,r0),r1
  301e56:	62 1d       	extu.w	r1,r2
  301e58:	61 e3       	mov	r14,r1
  301e5a:	71 1c       	add	#28,r1
  301e5c:	60 23       	mov	r2,r0
  301e5e:	81 1d       	mov.w	r0,@(26,r1)
	cmd.loop = gint_image_p8_clearbg;
  301e60:	61 e3       	mov	r14,r1
  301e62:	71 1c       	add	#28,r1
  301e64:	d2 0b       	mov.l	301e94 <dsubimage_p8_clearbg+0xe0>,r2	! 307140 <gint_image_p8_clearbg>
  301e66:	11 22       	mov.l	r2,@(8,r1)
	gint_image_p8_loop(DWIDTH, &cmd);
  301e68:	62 e3       	mov	r14,r2
  301e6a:	72 1c       	add	#28,r2
  301e6c:	91 0d       	mov.w	301e8a <dsubimage_p8_clearbg+0xd6>,r1	! 18c
  301e6e:	65 23       	mov	r2,r5
  301e70:	64 13       	mov	r1,r4
  301e72:	d1 09       	mov.l	301e98 <dsubimage_p8_clearbg+0xe4>,r1	! 3070bc <gint_image_p8_loop>
  301e74:	41 0b       	jsr	@r1
  301e76:	00 09       	nop	
  301e78:	a0 01       	bra	301e7e <dsubimage_p8_clearbg+0xca>
  301e7a:	00 09       	nop	
		return;
  301e7c:	00 09       	nop	
}
  301e7e:	7e 58       	add	#88,r14
  301e80:	6f e3       	mov	r14,r15
  301e82:	4f 26       	lds.l	@r15+,pr
  301e84:	6e f6       	mov.l	@r15+,r14
  301e86:	00 0b       	rts	
  301e88:	00 09       	nop	
  301e8a:	01 8c       	mov.b	@(r0,r8),r1
  301e8c:	08 10       	.word 0x0810
  301e8e:	16 90       	mov.l	r9,@(0,r6)
  301e90:	00 30       	.word 0x0030
  301e92:	6a 6a       	negc	r6,r10
  301e94:	00 30       	.word 0x0030
  301e96:	71 40       	add	#64,r1
  301e98:	00 30       	.word 0x0030
  301e9a:	70 bc       	add	#-68,r0

00301e9c <GINT_CALL_SET_function>:
{
  301e9c:	2f e6       	mov.l	r14,@-r15
  301e9e:	7f fc       	add	#-4,r15
  301ea0:	6e f3       	mov	r15,r14
  301ea2:	61 e3       	mov	r14,r1
  301ea4:	71 c4       	add	#-60,r1
  301ea6:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301ea8:	61 e3       	mov	r14,r1
  301eaa:	71 c4       	add	#-60,r1
  301eac:	51 1f       	mov.l	@(60,r1),r1
  301eae:	e2 01       	mov	#1,r2
  301eb0:	21 22       	mov.l	r2,@r1
	return 0;
  301eb2:	e1 00       	mov	#0,r1
}
  301eb4:	60 13       	mov	r1,r0
  301eb6:	7e 04       	add	#4,r14
  301eb8:	6f e3       	mov	r14,r15
  301eba:	6e f6       	mov.l	@r15+,r14
  301ebc:	00 0b       	rts	
  301ebe:	00 09       	nop	

00301ec0 <GINT_CALL_INC_function>:
{
  301ec0:	2f e6       	mov.l	r14,@-r15
  301ec2:	7f fc       	add	#-4,r15
  301ec4:	6e f3       	mov	r15,r14
  301ec6:	61 e3       	mov	r14,r1
  301ec8:	71 c4       	add	#-60,r1
  301eca:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301ecc:	61 e3       	mov	r14,r1
  301ece:	71 c4       	add	#-60,r1
  301ed0:	51 1f       	mov.l	@(60,r1),r1
  301ed2:	61 12       	mov.l	@r1,r1
  301ed4:	62 13       	mov	r1,r2
  301ed6:	72 01       	add	#1,r2
  301ed8:	61 e3       	mov	r14,r1
  301eda:	71 c4       	add	#-60,r1
  301edc:	51 1f       	mov.l	@(60,r1),r1
  301ede:	21 22       	mov.l	r2,@r1
	return 0;
  301ee0:	e1 00       	mov	#0,r1
}
  301ee2:	60 13       	mov	r1,r0
  301ee4:	7e 04       	add	#4,r14
  301ee6:	6f e3       	mov	r14,r15
  301ee8:	6e f6       	mov.l	@r15+,r14
  301eea:	00 0b       	rts	
  301eec:	00 09       	nop	

00301eee <GINT_CALL_SET_STOP_function>:
{
  301eee:	2f e6       	mov.l	r14,@-r15
  301ef0:	7f fc       	add	#-4,r15
  301ef2:	6e f3       	mov	r15,r14
  301ef4:	61 e3       	mov	r14,r1
  301ef6:	71 c4       	add	#-60,r1
  301ef8:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  301efa:	61 e3       	mov	r14,r1
  301efc:	71 c4       	add	#-60,r1
  301efe:	51 1f       	mov.l	@(60,r1),r1
  301f00:	e2 01       	mov	#1,r2
  301f02:	21 22       	mov.l	r2,@r1
	return 1;
  301f04:	e1 01       	mov	#1,r1
}
  301f06:	60 13       	mov	r1,r0
  301f08:	7e 04       	add	#4,r14
  301f0a:	6f e3       	mov	r14,r15
  301f0c:	6e f6       	mov.l	@r15+,r14
  301f0e:	00 0b       	rts	
  301f10:	00 09       	nop	

00301f12 <GINT_CALL_INC_STOP_function>:
{
  301f12:	2f e6       	mov.l	r14,@-r15
  301f14:	7f fc       	add	#-4,r15
  301f16:	6e f3       	mov	r15,r14
  301f18:	61 e3       	mov	r14,r1
  301f1a:	71 c4       	add	#-60,r1
  301f1c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  301f1e:	61 e3       	mov	r14,r1
  301f20:	71 c4       	add	#-60,r1
  301f22:	51 1f       	mov.l	@(60,r1),r1
  301f24:	61 12       	mov.l	@r1,r1
  301f26:	62 13       	mov	r1,r2
  301f28:	72 01       	add	#1,r2
  301f2a:	61 e3       	mov	r14,r1
  301f2c:	71 c4       	add	#-60,r1
  301f2e:	51 1f       	mov.l	@(60,r1),r1
  301f30:	21 22       	mov.l	r2,@r1
	return 1;
  301f32:	e1 01       	mov	#1,r1
}
  301f34:	60 13       	mov	r1,r0
  301f36:	7e 04       	add	#4,r14
  301f38:	6f e3       	mov	r14,r15
  301f3a:	6e f6       	mov.l	@r15+,r14
  301f3c:	00 0b       	rts	
  301f3e:	00 09       	nop	

00301f40 <dimage_p4>:
#include <gint/image.h>
#include <gint/display.h>

void dimage_p4(int x, int y, image_t const *img, int eff)
{
  301f40:	2f e6       	mov.l	r14,@-r15
  301f42:	4f 22       	sts.l	pr,@-r15
  301f44:	7f e0       	add	#-32,r15
  301f46:	6e f3       	mov	r15,r14
  301f48:	61 e3       	mov	r14,r1
  301f4a:	71 e0       	add	#-32,r1
  301f4c:	11 4f       	mov.l	r4,@(60,r1)
  301f4e:	61 e3       	mov	r14,r1
  301f50:	71 e0       	add	#-32,r1
  301f52:	11 5e       	mov.l	r5,@(56,r1)
  301f54:	61 e3       	mov	r14,r1
  301f56:	71 e0       	add	#-32,r1
  301f58:	11 6d       	mov.l	r6,@(52,r1)
  301f5a:	61 e3       	mov	r14,r1
  301f5c:	71 e0       	add	#-32,r1
  301f5e:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_p4(x, y, img, 0, 0, img->width, img->height, eff);
  301f60:	61 e3       	mov	r14,r1
  301f62:	71 e0       	add	#-32,r1
  301f64:	51 1d       	mov.l	@(52,r1),r1
  301f66:	85 12       	mov.w	@(4,r1),r0
  301f68:	61 03       	mov	r0,r1
  301f6a:	61 1d       	extu.w	r1,r1
  301f6c:	66 13       	mov	r1,r6
  301f6e:	61 e3       	mov	r14,r1
  301f70:	71 e0       	add	#-32,r1
  301f72:	51 1d       	mov.l	@(52,r1),r1
  301f74:	85 13       	mov.w	@(6,r1),r0
  301f76:	61 03       	mov	r0,r1
  301f78:	61 1d       	extu.w	r1,r1
  301f7a:	65 13       	mov	r1,r5
  301f7c:	63 e3       	mov	r14,r3
  301f7e:	73 e0       	add	#-32,r3
  301f80:	62 e3       	mov	r14,r2
  301f82:	72 e0       	add	#-32,r2
  301f84:	61 e3       	mov	r14,r1
  301f86:	71 e0       	add	#-32,r1
  301f88:	67 e3       	mov	r14,r7
  301f8a:	77 e0       	add	#-32,r7
  301f8c:	57 7c       	mov.l	@(48,r7),r7
  301f8e:	1f 73       	mov.l	r7,@(12,r15)
  301f90:	1f 52       	mov.l	r5,@(8,r15)
  301f92:	1f 61       	mov.l	r6,@(4,r15)
  301f94:	e7 00       	mov	#0,r7
  301f96:	2f 72       	mov.l	r7,@r15
  301f98:	e7 00       	mov	#0,r7
  301f9a:	56 3d       	mov.l	@(52,r3),r6
  301f9c:	55 2e       	mov.l	@(56,r2),r5
  301f9e:	54 1f       	mov.l	@(60,r1),r4
  301fa0:	d1 04       	mov.l	301fb4 <dimage_p4+0x74>,r1	! 301fb8 <dsubimage_p4>
  301fa2:	41 0b       	jsr	@r1
  301fa4:	00 09       	nop	
}
  301fa6:	00 09       	nop	
  301fa8:	7e 20       	add	#32,r14
  301faa:	6f e3       	mov	r14,r15
  301fac:	4f 26       	lds.l	@r15+,pr
  301fae:	6e f6       	mov.l	@r15+,r14
  301fb0:	00 0b       	rts	
  301fb2:	00 09       	nop	
  301fb4:	00 30       	.word 0x0030
  301fb6:	1f b8       	mov.l	r11,@(32,r15)

00301fb8 <dsubimage_p4>:

void dsubimage_p4(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff)
{
  301fb8:	2f e6       	mov.l	r14,@-r15
  301fba:	4f 22       	sts.l	pr,@-r15
  301fbc:	7f a0       	add	#-96,r15
  301fbe:	6e f3       	mov	r15,r14
  301fc0:	61 e3       	mov	r14,r1
  301fc2:	71 20       	add	#32,r1
  301fc4:	11 40       	mov.l	r4,@(0,r1)
  301fc6:	61 e3       	mov	r14,r1
  301fc8:	71 e0       	add	#-32,r1
  301fca:	11 5f       	mov.l	r5,@(60,r1)
  301fcc:	61 e3       	mov	r14,r1
  301fce:	71 e0       	add	#-32,r1
  301fd0:	11 6e       	mov.l	r6,@(56,r1)
  301fd2:	61 e3       	mov	r14,r1
  301fd4:	71 e0       	add	#-32,r1
  301fd6:	11 7d       	mov.l	r7,@(52,r1)
	if(img->format == IMAGE_P4_RGB565A)
  301fd8:	61 e3       	mov	r14,r1
  301fda:	71 e0       	add	#-32,r1
  301fdc:	51 1e       	mov.l	@(56,r1),r1
  301fde:	61 10       	mov.b	@r1,r1
  301fe0:	62 1c       	extu.b	r1,r2
  301fe2:	e1 03       	mov	#3,r1
  301fe4:	32 10       	cmp/eq	r1,r2
  301fe6:	8b 2b       	bf	302040 <dsubimage_p4+0x88>
		return dsubimage_p4_clearbg(x, y, img, left, top, w, h, eff,
			image_alpha(img->format));
  301fe8:	61 e3       	mov	r14,r1
  301fea:	71 e0       	add	#-32,r1
  301fec:	51 1e       	mov.l	@(56,r1),r1
  301fee:	61 10       	mov.b	@r1,r1
  301ff0:	61 1c       	extu.b	r1,r1
		return dsubimage_p4_clearbg(x, y, img, left, top, w, h, eff,
  301ff2:	64 13       	mov	r1,r4
  301ff4:	d1 3c       	mov.l	3020e8 <dsubimage_p4+0x130>,r1	! 306610 <image_alpha>
  301ff6:	41 0b       	jsr	@r1
  301ff8:	00 09       	nop	
  301ffa:	61 03       	mov	r0,r1
  301ffc:	67 e3       	mov	r14,r7
  301ffe:	77 e0       	add	#-32,r7
  302000:	66 e3       	mov	r14,r6
  302002:	76 e0       	add	#-32,r6
  302004:	63 e3       	mov	r14,r3
  302006:	73 e0       	add	#-32,r3
  302008:	62 e3       	mov	r14,r2
  30200a:	72 20       	add	#32,r2
  30200c:	1f 14       	mov.l	r1,@(16,r15)
  30200e:	65 e3       	mov	r14,r5
  302010:	75 40       	add	#64,r5
  302012:	51 5d       	mov.l	@(52,r5),r1
  302014:	1f 13       	mov.l	r1,@(12,r15)
  302016:	65 e3       	mov	r14,r5
  302018:	75 40       	add	#64,r5
  30201a:	51 5c       	mov.l	@(48,r5),r1
  30201c:	1f 12       	mov.l	r1,@(8,r15)
  30201e:	65 e3       	mov	r14,r5
  302020:	75 40       	add	#64,r5
  302022:	51 5b       	mov.l	@(44,r5),r1
  302024:	1f 11       	mov.l	r1,@(4,r15)
  302026:	65 e3       	mov	r14,r5
  302028:	75 40       	add	#64,r5
  30202a:	51 5a       	mov.l	@(40,r5),r1
  30202c:	2f 12       	mov.l	r1,@r15
  30202e:	57 7d       	mov.l	@(52,r7),r7
  302030:	56 6e       	mov.l	@(56,r6),r6
  302032:	55 3f       	mov.l	@(60,r3),r5
  302034:	54 20       	mov.l	@(0,r2),r4
  302036:	d1 2d       	mov.l	3020ec <dsubimage_p4+0x134>,r1	! 30217c <dsubimage_p4_clearbg>
  302038:	41 0b       	jsr	@r1
  30203a:	00 09       	nop	
  30203c:	a0 4d       	bra	3020da <dsubimage_p4+0x122>
  30203e:	00 09       	nop	

	struct gint_image_box box = { x, y, w, h, left, top };
  302040:	61 e3       	mov	r14,r1
  302042:	71 48       	add	#72,r1
  302044:	62 e3       	mov	r14,r2
  302046:	72 20       	add	#32,r2
  302048:	52 20       	mov.l	@(0,r2),r2
  30204a:	21 22       	mov.l	r2,@r1
  30204c:	61 e3       	mov	r14,r1
  30204e:	71 48       	add	#72,r1
  302050:	62 e3       	mov	r14,r2
  302052:	72 e0       	add	#-32,r2
  302054:	52 2f       	mov.l	@(60,r2),r2
  302056:	11 21       	mov.l	r2,@(4,r1)
  302058:	61 e3       	mov	r14,r1
  30205a:	71 48       	add	#72,r1
  30205c:	63 e3       	mov	r14,r3
  30205e:	73 40       	add	#64,r3
  302060:	52 3b       	mov.l	@(44,r3),r2
  302062:	11 22       	mov.l	r2,@(8,r1)
  302064:	61 e3       	mov	r14,r1
  302066:	71 48       	add	#72,r1
  302068:	65 e3       	mov	r14,r5
  30206a:	75 40       	add	#64,r5
  30206c:	52 5c       	mov.l	@(48,r5),r2
  30206e:	11 23       	mov.l	r2,@(12,r1)
  302070:	61 e3       	mov	r14,r1
  302072:	71 48       	add	#72,r1
  302074:	62 e3       	mov	r14,r2
  302076:	72 e0       	add	#-32,r2
  302078:	52 2d       	mov.l	@(52,r2),r2
  30207a:	11 24       	mov.l	r2,@(16,r1)
  30207c:	61 e3       	mov	r14,r1
  30207e:	71 48       	add	#72,r1
  302080:	63 e3       	mov	r14,r3
  302082:	73 40       	add	#64,r3
  302084:	52 3a       	mov.l	@(40,r3),r2
  302086:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, false, &cmd, &dwindow))
  302088:	61 e3       	mov	r14,r1
  30208a:	71 e0       	add	#-32,r1
  30208c:	63 e3       	mov	r14,r3
  30208e:	73 48       	add	#72,r3
  302090:	d2 17       	mov.l	3020f0 <dsubimage_p4+0x138>,r2	! 8101690 <dwindow>
  302092:	1f 22       	mov.l	r2,@(8,r15)
  302094:	62 e3       	mov	r14,r2
  302096:	72 24       	add	#36,r2
  302098:	1f 21       	mov.l	r2,@(4,r15)
  30209a:	e2 00       	mov	#0,r2
  30209c:	2f 22       	mov.l	r2,@r15
  30209e:	e7 00       	mov	#0,r7
  3020a0:	65 e3       	mov	r14,r5
  3020a2:	75 40       	add	#64,r5
  3020a4:	56 5d       	mov.l	@(52,r5),r6
  3020a6:	55 1e       	mov.l	@(56,r1),r5
  3020a8:	64 33       	mov	r3,r4
  3020aa:	d1 12       	mov.l	3020f4 <dsubimage_p4+0x13c>,r1	! 306a6a <gint_image_mkcmd>
  3020ac:	41 0b       	jsr	@r1
  3020ae:	00 09       	nop	
  3020b0:	61 03       	mov	r0,r1
  3020b2:	e2 01       	mov	#1,r2
  3020b4:	21 2a       	xor	r2,r1
  3020b6:	61 1c       	extu.b	r1,r1
  3020b8:	21 18       	tst	r1,r1
  3020ba:	8b 0d       	bf	3020d8 <dsubimage_p4+0x120>
		return;
	cmd.loop = gint_image_p4_normal;
  3020bc:	61 e3       	mov	r14,r1
  3020be:	71 24       	add	#36,r1
  3020c0:	d2 0d       	mov.l	3020f8 <dsubimage_p4+0x140>,r2	! 30729c <gint_image_p4_normal>
  3020c2:	11 22       	mov.l	r2,@(8,r1)
	gint_image_p4_loop(DWIDTH, &cmd);
  3020c4:	62 e3       	mov	r14,r2
  3020c6:	72 24       	add	#36,r2
  3020c8:	91 0d       	mov.w	3020e6 <dsubimage_p4+0x12e>,r1	! 18c
  3020ca:	65 23       	mov	r2,r5
  3020cc:	64 13       	mov	r1,r4
  3020ce:	d1 0b       	mov.l	3020fc <dsubimage_p4+0x144>,r1	! 307264 <gint_image_p4_loop>
  3020d0:	41 0b       	jsr	@r1
  3020d2:	00 09       	nop	
  3020d4:	a0 01       	bra	3020da <dsubimage_p4+0x122>
  3020d6:	00 09       	nop	
		return;
  3020d8:	00 09       	nop	
}
  3020da:	7e 60       	add	#96,r14
  3020dc:	6f e3       	mov	r14,r15
  3020de:	4f 26       	lds.l	@r15+,pr
  3020e0:	6e f6       	mov.l	@r15+,r14
  3020e2:	00 0b       	rts	
  3020e4:	00 09       	nop	
  3020e6:	01 8c       	mov.b	@(r0,r8),r1
  3020e8:	00 30       	.word 0x0030
  3020ea:	66 10       	mov.b	@r1,r6
  3020ec:	00 30       	.word 0x0030
  3020ee:	21 7c       	cmp/str	r7,r1
  3020f0:	08 10       	.word 0x0810
  3020f2:	16 90       	mov.l	r9,@(0,r6)
  3020f4:	00 30       	.word 0x0030
  3020f6:	6a 6a       	negc	r6,r10
  3020f8:	00 30       	.word 0x0030
  3020fa:	72 9c       	add	#-100,r2
  3020fc:	00 30       	.word 0x0030
  3020fe:	72 64       	add	#100,r2

00302100 <dimage_p4_clearbg>:

void dimage_p4_clearbg(int x, int y, image_t const *img, int eff, int bg)
{
  302100:	2f e6       	mov.l	r14,@-r15
  302102:	4f 22       	sts.l	pr,@-r15
  302104:	7f dc       	add	#-36,r15
  302106:	6e f3       	mov	r15,r14
  302108:	61 e3       	mov	r14,r1
  30210a:	71 e4       	add	#-28,r1
  30210c:	11 4f       	mov.l	r4,@(60,r1)
  30210e:	61 e3       	mov	r14,r1
  302110:	71 e4       	add	#-28,r1
  302112:	11 5e       	mov.l	r5,@(56,r1)
  302114:	61 e3       	mov	r14,r1
  302116:	71 e4       	add	#-28,r1
  302118:	11 6d       	mov.l	r6,@(52,r1)
  30211a:	61 e3       	mov	r14,r1
  30211c:	71 e4       	add	#-28,r1
  30211e:	11 7c       	mov.l	r7,@(48,r1)
	dsubimage_p4_clearbg(x, y, img, 0, 0, img->width, img->height, eff,bg);
  302120:	61 e3       	mov	r14,r1
  302122:	71 e4       	add	#-28,r1
  302124:	51 1d       	mov.l	@(52,r1),r1
  302126:	85 12       	mov.w	@(4,r1),r0
  302128:	61 03       	mov	r0,r1
  30212a:	61 1d       	extu.w	r1,r1
  30212c:	66 13       	mov	r1,r6
  30212e:	61 e3       	mov	r14,r1
  302130:	71 e4       	add	#-28,r1
  302132:	51 1d       	mov.l	@(52,r1),r1
  302134:	85 13       	mov.w	@(6,r1),r0
  302136:	61 03       	mov	r0,r1
  302138:	61 1d       	extu.w	r1,r1
  30213a:	65 13       	mov	r1,r5
  30213c:	63 e3       	mov	r14,r3
  30213e:	73 e4       	add	#-28,r3
  302140:	62 e3       	mov	r14,r2
  302142:	72 e4       	add	#-28,r2
  302144:	61 e3       	mov	r14,r1
  302146:	71 e4       	add	#-28,r1
  302148:	57 eb       	mov.l	@(44,r14),r7
  30214a:	1f 74       	mov.l	r7,@(16,r15)
  30214c:	67 e3       	mov	r14,r7
  30214e:	77 e4       	add	#-28,r7
  302150:	57 7c       	mov.l	@(48,r7),r7
  302152:	1f 73       	mov.l	r7,@(12,r15)
  302154:	1f 52       	mov.l	r5,@(8,r15)
  302156:	1f 61       	mov.l	r6,@(4,r15)
  302158:	e7 00       	mov	#0,r7
  30215a:	2f 72       	mov.l	r7,@r15
  30215c:	e7 00       	mov	#0,r7
  30215e:	56 3d       	mov.l	@(52,r3),r6
  302160:	55 2e       	mov.l	@(56,r2),r5
  302162:	54 1f       	mov.l	@(60,r1),r4
  302164:	d1 04       	mov.l	302178 <dimage_p4_clearbg+0x78>,r1	! 30217c <dsubimage_p4_clearbg>
  302166:	41 0b       	jsr	@r1
  302168:	00 09       	nop	
}
  30216a:	00 09       	nop	
  30216c:	7e 24       	add	#36,r14
  30216e:	6f e3       	mov	r14,r15
  302170:	4f 26       	lds.l	@r15+,pr
  302172:	6e f6       	mov.l	@r15+,r14
  302174:	00 0b       	rts	
  302176:	00 09       	nop	
  302178:	00 30       	.word 0x0030
  30217a:	21 7c       	cmp/str	r7,r1

0030217c <dsubimage_p4_clearbg>:

void dsubimage_p4_clearbg(int x, int y, image_t const *img,
	int left, int top, int w, int h, int eff, int bg_color)
{
  30217c:	2f e6       	mov.l	r14,@-r15
  30217e:	4f 22       	sts.l	pr,@-r15
  302180:	7f a8       	add	#-88,r15
  302182:	6e f3       	mov	r15,r14
  302184:	61 e3       	mov	r14,r1
  302186:	71 18       	add	#24,r1
  302188:	11 40       	mov.l	r4,@(0,r1)
  30218a:	61 e3       	mov	r14,r1
  30218c:	71 d8       	add	#-40,r1
  30218e:	11 5f       	mov.l	r5,@(60,r1)
  302190:	61 e3       	mov	r14,r1
  302192:	71 d8       	add	#-40,r1
  302194:	11 6e       	mov.l	r6,@(56,r1)
  302196:	61 e3       	mov	r14,r1
  302198:	71 d8       	add	#-40,r1
  30219a:	11 7d       	mov.l	r7,@(52,r1)
	struct gint_image_box box = { x, y, w, h, left, top };
  30219c:	61 e3       	mov	r14,r1
  30219e:	71 40       	add	#64,r1
  3021a0:	62 e3       	mov	r14,r2
  3021a2:	72 18       	add	#24,r2
  3021a4:	52 20       	mov.l	@(0,r2),r2
  3021a6:	21 22       	mov.l	r2,@r1
  3021a8:	61 e3       	mov	r14,r1
  3021aa:	71 40       	add	#64,r1
  3021ac:	62 e3       	mov	r14,r2
  3021ae:	72 d8       	add	#-40,r2
  3021b0:	52 2f       	mov.l	@(60,r2),r2
  3021b2:	11 21       	mov.l	r2,@(4,r1)
  3021b4:	61 e3       	mov	r14,r1
  3021b6:	71 40       	add	#64,r1
  3021b8:	60 e3       	mov	r14,r0
  3021ba:	70 40       	add	#64,r0
  3021bc:	52 09       	mov.l	@(36,r0),r2
  3021be:	11 22       	mov.l	r2,@(8,r1)
  3021c0:	61 e3       	mov	r14,r1
  3021c2:	71 40       	add	#64,r1
  3021c4:	63 e3       	mov	r14,r3
  3021c6:	73 40       	add	#64,r3
  3021c8:	52 3a       	mov.l	@(40,r3),r2
  3021ca:	11 23       	mov.l	r2,@(12,r1)
  3021cc:	61 e3       	mov	r14,r1
  3021ce:	71 40       	add	#64,r1
  3021d0:	62 e3       	mov	r14,r2
  3021d2:	72 d8       	add	#-40,r2
  3021d4:	52 2d       	mov.l	@(52,r2),r2
  3021d6:	11 24       	mov.l	r2,@(16,r1)
  3021d8:	61 e3       	mov	r14,r1
  3021da:	71 40       	add	#64,r1
  3021dc:	60 e3       	mov	r14,r0
  3021de:	70 40       	add	#64,r0
  3021e0:	52 08       	mov.l	@(32,r0),r2
  3021e2:	11 25       	mov.l	r2,@(20,r1)
	struct gint_image_cmd cmd;

	if(!gint_image_mkcmd(&box, img, eff, false, false, &cmd, &dwindow))
  3021e4:	61 e3       	mov	r14,r1
  3021e6:	71 d8       	add	#-40,r1
  3021e8:	63 e3       	mov	r14,r3
  3021ea:	73 40       	add	#64,r3
  3021ec:	d2 19       	mov.l	302254 <dsubimage_p4_clearbg+0xd8>,r2	! 8101690 <dwindow>
  3021ee:	1f 22       	mov.l	r2,@(8,r15)
  3021f0:	62 e3       	mov	r14,r2
  3021f2:	72 1c       	add	#28,r2
  3021f4:	1f 21       	mov.l	r2,@(4,r15)
  3021f6:	e2 00       	mov	#0,r2
  3021f8:	2f 22       	mov.l	r2,@r15
  3021fa:	e7 00       	mov	#0,r7
  3021fc:	62 e3       	mov	r14,r2
  3021fe:	72 40       	add	#64,r2
  302200:	56 2b       	mov.l	@(44,r2),r6
  302202:	55 1e       	mov.l	@(56,r1),r5
  302204:	64 33       	mov	r3,r4
  302206:	d1 14       	mov.l	302258 <dsubimage_p4_clearbg+0xdc>,r1	! 306a6a <gint_image_mkcmd>
  302208:	41 0b       	jsr	@r1
  30220a:	00 09       	nop	
  30220c:	61 03       	mov	r0,r1
  30220e:	e3 01       	mov	#1,r3
  302210:	21 3a       	xor	r3,r1
  302212:	61 1c       	extu.b	r1,r1
  302214:	21 18       	tst	r1,r1
  302216:	8b 15       	bf	302244 <dsubimage_p4_clearbg+0xc8>
		return;
	cmd.color_1 = bg_color;
  302218:	60 e3       	mov	r14,r0
  30221a:	70 40       	add	#64,r0
  30221c:	51 0c       	mov.l	@(48,r0),r1
  30221e:	62 1d       	extu.w	r1,r2
  302220:	61 e3       	mov	r14,r1
  302222:	71 1c       	add	#28,r1
  302224:	60 23       	mov	r2,r0
  302226:	81 1d       	mov.w	r0,@(26,r1)
	cmd.loop = gint_image_p4_clearbg;
  302228:	61 e3       	mov	r14,r1
  30222a:	71 1c       	add	#28,r1
  30222c:	d2 0b       	mov.l	30225c <dsubimage_p4_clearbg+0xe0>,r2	! 307378 <gint_image_p4_clearbg>
  30222e:	11 22       	mov.l	r2,@(8,r1)
	gint_image_p4_loop(DWIDTH, &cmd);
  302230:	62 e3       	mov	r14,r2
  302232:	72 1c       	add	#28,r2
  302234:	91 0d       	mov.w	302252 <dsubimage_p4_clearbg+0xd6>,r1	! 18c
  302236:	65 23       	mov	r2,r5
  302238:	64 13       	mov	r1,r4
  30223a:	d1 09       	mov.l	302260 <dsubimage_p4_clearbg+0xe4>,r1	! 307264 <gint_image_p4_loop>
  30223c:	41 0b       	jsr	@r1
  30223e:	00 09       	nop	
  302240:	a0 01       	bra	302246 <dsubimage_p4_clearbg+0xca>
  302242:	00 09       	nop	
		return;
  302244:	00 09       	nop	
}
  302246:	7e 58       	add	#88,r14
  302248:	6f e3       	mov	r14,r15
  30224a:	4f 26       	lds.l	@r15+,pr
  30224c:	6e f6       	mov.l	@r15+,r14
  30224e:	00 0b       	rts	
  302250:	00 09       	nop	
  302252:	01 8c       	mov.b	@(r0,r8),r1
  302254:	08 10       	.word 0x0810
  302256:	16 90       	mov.l	r9,@(0,r6)
  302258:	00 30       	.word 0x0030
  30225a:	6a 6a       	negc	r6,r10
  30225c:	00 30       	.word 0x0030
  30225e:	73 78       	add	#120,r3
  302260:	00 30       	.word 0x0030
  302262:	72 64       	add	#100,r2

00302264 <hw_detect>:

#ifdef FXCG50

/* hw_detect(): Basic hardware detection */
void hw_detect(void)
{
  302264:	2f e6       	mov.l	r14,@-r15
  302266:	4f 22       	sts.l	pr,@-r15
  302268:	7f f8       	add	#-8,r15
  30226a:	6e f3       	mov	r15,r14
	gint[HWMPU] = HWMPU_SH7305;
  30226c:	d1 25       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  30226e:	e2 02       	mov	#2,r2
  302270:	21 22       	mov.l	r2,@r1
	gint[HWCPUVR] = PVR;
  302272:	d1 25       	mov.l	302308 <hw_detect+0xa4>,r1	! ff000030
  302274:	62 12       	mov.l	@r1,r2
  302276:	d1 23       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  302278:	11 21       	mov.l	r2,@(4,r1)
	gint[HWCPUPR] = PRR;
  30227a:	d1 24       	mov.l	30230c <hw_detect+0xa8>,r1	! ff000044
  30227c:	62 12       	mov.l	@r1,r2
  30227e:	d1 21       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  302280:	11 22       	mov.l	r2,@(8,r1)

	/* Tell Prizms apart from fx-CG 50 by checking the stack address*/
	uint32_t stack;
	__asm__("mov r15, %0" : "=r"(stack));
  302282:	62 f3       	mov	r15,r2
  302284:	61 e3       	mov	r14,r1
  302286:	71 c8       	add	#-56,r1
  302288:	11 2f       	mov.l	r2,@(60,r1)
	gint[HWCALC] = (stack < 0x8c000000) ? HWCALC_PRIZM : HWCALC_FXCG50;
  30228a:	61 e3       	mov	r14,r1
  30228c:	71 c8       	add	#-56,r1
  30228e:	52 1f       	mov.l	@(60,r1),r2
  302290:	d1 1f       	mov.l	302310 <hw_detect+0xac>,r1	! 8bffffff
  302292:	32 16       	cmp/hi	r1,r2
  302294:	89 02       	bt	30229c <hw_detect+0x38>
  302296:	e1 04       	mov	#4,r1
  302298:	a0 01       	bra	30229e <hw_detect+0x3a>
  30229a:	00 09       	nop	
  30229c:	e1 05       	mov	#5,r1
  30229e:	d2 19       	mov.l	302304 <hw_detect+0xa0>,r2	! 81017d0 <gint>
  3022a0:	12 13       	mov.l	r1,@(12,r2)
	gint[HWFS] = HWFS_FUGUE;
  3022a2:	d1 18       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  3022a4:	e2 02       	mov	#2,r2
  3022a6:	11 2b       	mov.l	r2,@(44,r1)

	/* Tell the fx-CG emulator apart using the product ID */
	uint8_t *productID = (void *)0x8001ffd0;
  3022a8:	61 e3       	mov	r14,r1
  3022aa:	71 c8       	add	#-56,r1
  3022ac:	d2 19       	mov.l	302314 <hw_detect+0xb0>,r2	! 8001ffd0
  3022ae:	11 2e       	mov.l	r2,@(56,r1)
	if(!memcmp(productID, "\xff\xff\xff\xff\xff\xff\xff\xff", 8))
  3022b0:	d2 19       	mov.l	302318 <hw_detect+0xb4>,r2	! 30e9e4
  3022b2:	61 e3       	mov	r14,r1
  3022b4:	71 c8       	add	#-56,r1
  3022b6:	e6 08       	mov	#8,r6
  3022b8:	65 23       	mov	r2,r5
  3022ba:	54 1e       	mov.l	@(56,r1),r4
  3022bc:	d1 17       	mov.l	30231c <hw_detect+0xb8>,r1	! 30ada0 <memcmp>
  3022be:	41 0b       	jsr	@r1
  3022c0:	00 09       	nop	
  3022c2:	61 03       	mov	r0,r1
  3022c4:	21 18       	tst	r1,r1
  3022c6:	8b 02       	bf	3022ce <hw_detect+0x6a>
		gint[HWCALC] = HWCALC_FXCG_MANAGER;
  3022c8:	d1 0e       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  3022ca:	e2 06       	mov	#6,r2
  3022cc:	11 23       	mov.l	r2,@(12,r1)

	/* Basic memory information */
	gint[HWRAM] = (gint[HWCALC] == HWCALC_PRIZM) ? (2 << 20) : (8 << 20);
  3022ce:	d1 0d       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  3022d0:	52 13       	mov.l	@(12,r1),r2
  3022d2:	e1 04       	mov	#4,r1
  3022d4:	32 10       	cmp/eq	r1,r2
  3022d6:	8b 02       	bf	3022de <hw_detect+0x7a>
  3022d8:	d1 11       	mov.l	302320 <hw_detect+0xbc>,r1	! 200000
  3022da:	a0 01       	bra	3022e0 <hw_detect+0x7c>
  3022dc:	00 09       	nop	
  3022de:	d1 11       	mov.l	302324 <hw_detect+0xc0>,r1	! 800000
  3022e0:	d2 08       	mov.l	302304 <hw_detect+0xa0>,r2	! 81017d0 <gint>
  3022e2:	12 14       	mov.l	r1,@(16,r2)
	gint[HWROM] = (32 << 20);
  3022e4:	d1 07       	mov.l	302304 <hw_detect+0xa0>,r1	! 81017d0 <gint>
  3022e6:	d2 10       	mov.l	302328 <hw_detect+0xc4>,r2	! 2000000
  3022e8:	11 25       	mov.l	r2,@(20,r1)

	/* Mapped memory */
	utlb_mapped_memory(NULL, NULL);
  3022ea:	e5 00       	mov	#0,r5
  3022ec:	e4 00       	mov	#0,r4
  3022ee:	d1 0f       	mov.l	30232c <hw_detect+0xc8>,r1	! 305430 <utlb_mapped_memory>
  3022f0:	41 0b       	jsr	@r1
  3022f2:	00 09       	nop	
}
  3022f4:	00 09       	nop	
  3022f6:	7e 08       	add	#8,r14
  3022f8:	6f e3       	mov	r14,r15
  3022fa:	4f 26       	lds.l	@r15+,pr
  3022fc:	6e f6       	mov.l	@r15+,r14
  3022fe:	00 0b       	rts	
  302300:	00 09       	nop	
  302302:	00 09       	nop	
  302304:	08 10       	.word 0x0810
  302306:	17 d0       	mov.l	r13,@(0,r7)
  302308:	ff 00       	.word 0xff00
  30230a:	00 30       	.word 0x0030
  30230c:	ff 00       	.word 0xff00
  30230e:	00 44       	mov.b	r4,@(r0,r0)
  302310:	8b ff       	bf	302312 <hw_detect+0xae>
  302312:	ff ff       	.word 0xffff
  302314:	80 01       	mov.b	r0,@(1,r0)
  302316:	ff d0       	.word 0xffd0
  302318:	00 30       	.word 0x0030
  30231a:	e9 e4       	mov	#-28,r9
  30231c:	00 30       	.word 0x0030
  30231e:	ad a0       	bra	301e62 <dsubimage_p8_clearbg+0xae>
  302320:	00 20       	.word 0x0020
  302322:	00 00       	.word 0x0000
  302324:	00 80       	.word 0x0080
  302326:	00 00       	.word 0x0000
  302328:	02 00       	.word 0x0200
  30232a:	00 00       	.word 0x0000
  30232c:	00 30       	.word 0x0030
  30232e:	54 30       	mov.l	@(0,r3),r4

00302330 <GINT_CALL_SET_function>:
{
  302330:	2f e6       	mov.l	r14,@-r15
  302332:	7f fc       	add	#-4,r15
  302334:	6e f3       	mov	r15,r14
  302336:	61 e3       	mov	r14,r1
  302338:	71 c4       	add	#-60,r1
  30233a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30233c:	61 e3       	mov	r14,r1
  30233e:	71 c4       	add	#-60,r1
  302340:	51 1f       	mov.l	@(60,r1),r1
  302342:	e2 01       	mov	#1,r2
  302344:	21 22       	mov.l	r2,@r1
	return 0;
  302346:	e1 00       	mov	#0,r1
}
  302348:	60 13       	mov	r1,r0
  30234a:	7e 04       	add	#4,r14
  30234c:	6f e3       	mov	r14,r15
  30234e:	6e f6       	mov.l	@r15+,r14
  302350:	00 0b       	rts	
  302352:	00 09       	nop	

00302354 <GINT_CALL_INC_function>:
{
  302354:	2f e6       	mov.l	r14,@-r15
  302356:	7f fc       	add	#-4,r15
  302358:	6e f3       	mov	r15,r14
  30235a:	61 e3       	mov	r14,r1
  30235c:	71 c4       	add	#-60,r1
  30235e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  302360:	61 e3       	mov	r14,r1
  302362:	71 c4       	add	#-60,r1
  302364:	51 1f       	mov.l	@(60,r1),r1
  302366:	61 12       	mov.l	@r1,r1
  302368:	62 13       	mov	r1,r2
  30236a:	72 01       	add	#1,r2
  30236c:	61 e3       	mov	r14,r1
  30236e:	71 c4       	add	#-60,r1
  302370:	51 1f       	mov.l	@(60,r1),r1
  302372:	21 22       	mov.l	r2,@r1
	return 0;
  302374:	e1 00       	mov	#0,r1
}
  302376:	60 13       	mov	r1,r0
  302378:	7e 04       	add	#4,r14
  30237a:	6f e3       	mov	r14,r15
  30237c:	6e f6       	mov.l	@r15+,r14
  30237e:	00 0b       	rts	
  302380:	00 09       	nop	

00302382 <GINT_CALL_SET_STOP_function>:
{
  302382:	2f e6       	mov.l	r14,@-r15
  302384:	7f fc       	add	#-4,r15
  302386:	6e f3       	mov	r15,r14
  302388:	61 e3       	mov	r14,r1
  30238a:	71 c4       	add	#-60,r1
  30238c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30238e:	61 e3       	mov	r14,r1
  302390:	71 c4       	add	#-60,r1
  302392:	51 1f       	mov.l	@(60,r1),r1
  302394:	e2 01       	mov	#1,r2
  302396:	21 22       	mov.l	r2,@r1
	return 1;
  302398:	e1 01       	mov	#1,r1
}
  30239a:	60 13       	mov	r1,r0
  30239c:	7e 04       	add	#4,r14
  30239e:	6f e3       	mov	r14,r15
  3023a0:	6e f6       	mov.l	@r15+,r14
  3023a2:	00 0b       	rts	
  3023a4:	00 09       	nop	

003023a6 <GINT_CALL_INC_STOP_function>:
{
  3023a6:	2f e6       	mov.l	r14,@-r15
  3023a8:	7f fc       	add	#-4,r15
  3023aa:	6e f3       	mov	r15,r14
  3023ac:	61 e3       	mov	r14,r1
  3023ae:	71 c4       	add	#-60,r1
  3023b0:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3023b2:	61 e3       	mov	r14,r1
  3023b4:	71 c4       	add	#-60,r1
  3023b6:	51 1f       	mov.l	@(60,r1),r1
  3023b8:	61 12       	mov.l	@r1,r1
  3023ba:	62 13       	mov	r1,r2
  3023bc:	72 01       	add	#1,r2
  3023be:	61 e3       	mov	r14,r1
  3023c0:	71 c4       	add	#-60,r1
  3023c2:	51 1f       	mov.l	@(60,r1),r1
  3023c4:	21 22       	mov.l	r2,@r1
	return 1;
  3023c6:	e1 01       	mov	#1,r1
}
  3023c8:	60 13       	mov	r1,r0
  3023ca:	7e 04       	add	#4,r14
  3023cc:	6f e3       	mov	r14,r15
  3023ce:	6e f6       	mov.l	@r15+,r14
  3023d0:	00 0b       	rts	
  3023d2:	00 09       	nop	

003023d4 <kinit>:
//	Initialization and unloading
//---

/* kinit(): Install and start gint */
void kinit(void)
{
  3023d4:	2f 86       	mov.l	r8,@-r15
  3023d6:	2f e6       	mov.l	r14,@-r15
  3023d8:	4f 22       	sts.l	pr,@-r15
  3023da:	7f e0       	add	#-32,r15
  3023dc:	6e f3       	mov	r15,r14
	uint32_t VBR = 0;
  3023de:	61 e3       	mov	r14,r1
  3023e0:	71 e0       	add	#-32,r1
  3023e2:	e2 00       	mov	#0,r2
  3023e4:	11 2e       	mov.l	r2,@(56,r1)
	#ifdef FXCG50
	/* On fx-CG 50, VBR is loaded at the start of the user RAM; the linker
	   script leaves 5 kB (0x1400 bytes) before the start of the data
	   segment. The stack is again placed at the end of the region, and we
	   leave 16 kB. */
	VBR = (uint32_t)mmu_uram();
  3023e6:	d1 65       	mov.l	30257c <kinit+0x1a8>,r1	! 305288 <mmu_uram>
  3023e8:	41 0b       	jsr	@r1
  3023ea:	00 09       	nop	
  3023ec:	61 03       	mov	r0,r1
  3023ee:	62 e3       	mov	r14,r2
  3023f0:	72 e0       	add	#-32,r2
  3023f2:	12 1e       	mov.l	r1,@(56,r2)
	uint32_t uram_end = (uint32_t)mmu_uram() + mmu_uram_size() - 0x4000;
  3023f4:	d1 61       	mov.l	30257c <kinit+0x1a8>,r1	! 305288 <mmu_uram>
  3023f6:	41 0b       	jsr	@r1
  3023f8:	00 09       	nop	
  3023fa:	61 03       	mov	r0,r1
  3023fc:	68 13       	mov	r1,r8
  3023fe:	d1 60       	mov.l	302580 <kinit+0x1ac>,r1	! 3052b8 <mmu_uram_size>
  302400:	41 0b       	jsr	@r1
  302402:	00 09       	nop	
  302404:	61 03       	mov	r0,r1
  302406:	62 83       	mov	r8,r2
  302408:	32 1c       	add	r1,r2
  30240a:	61 e3       	mov	r14,r1
  30240c:	71 e0       	add	#-32,r1
  30240e:	90 b1       	mov.w	302574 <kinit+0x1a0>,r0	! c000
  302410:	32 0c       	add	r0,r2
  302412:	11 2d       	mov.l	r2,@(52,r1)
	gint_stack_top = (void *)uram_end;
  302414:	61 e3       	mov	r14,r1
  302416:	71 e0       	add	#-32,r1
  302418:	52 1d       	mov.l	@(52,r1),r2
  30241a:	d1 5a       	mov.l	302584 <kinit+0x1b0>,r1	! 8101454 <gint_stack_top>
  30241c:	21 22       	mov.l	r2,@r1
	#endif

	/* Event handler entry points */
	void *inth_entry = isSH3() ? gint_inth_7705 : gint_inth_7305;
  30241e:	61 e3       	mov	r14,r1
  302420:	71 e0       	add	#-32,r1
  302422:	d2 59       	mov.l	302588 <kinit+0x1b4>,r2	! 30cfc0 <gint_inth_7305>
  302424:	11 2c       	mov.l	r2,@(48,r1)
	uint32_t exch_size = (uint32_t)&gint_exch_size;
  302426:	61 e3       	mov	r14,r1
  302428:	71 e0       	add	#-32,r1
  30242a:	d2 58       	mov.l	30258c <kinit+0x1b8>,r2	! 90 <gint_exch_size>
  30242c:	11 2b       	mov.l	r2,@(44,r1)
	uint32_t tlbh_size = (uint32_t)&gint_tlbh_size;
  30242e:	61 e3       	mov	r14,r1
  302430:	71 e0       	add	#-32,r1
  302432:	d2 57       	mov.l	302590 <kinit+0x1bc>,r2	! 70 <gint_tlbh_size>
  302434:	11 2a       	mov.l	r2,@(40,r1)

	/* Load the event handler entry points into memory */
	memcpy((void *)VBR + 0x100, gint_exch, exch_size);
  302436:	61 e3       	mov	r14,r1
  302438:	71 e0       	add	#-32,r1
  30243a:	51 1e       	mov.l	@(56,r1),r1
  30243c:	92 9b       	mov.w	302576 <kinit+0x1a2>,r2	! 100
  30243e:	31 2c       	add	r2,r1
  302440:	63 13       	mov	r1,r3
  302442:	61 e3       	mov	r14,r1
  302444:	71 e0       	add	#-32,r1
  302446:	d2 53       	mov.l	302594 <kinit+0x1c0>,r2	! 300070 <bdtors>
  302448:	56 1b       	mov.l	@(44,r1),r6
  30244a:	65 23       	mov	r2,r5
  30244c:	64 33       	mov	r3,r4
  30244e:	d1 52       	mov.l	302598 <kinit+0x1c4>,r1	! 30ae40 <memcpy>
  302450:	41 0b       	jsr	@r1
  302452:	00 09       	nop	
	memcpy((void *)VBR + 0x400, gint_tlbh, tlbh_size);
  302454:	61 e3       	mov	r14,r1
  302456:	71 e0       	add	#-32,r1
  302458:	51 1e       	mov.l	@(56,r1),r1
  30245a:	93 8d       	mov.w	302578 <kinit+0x1a4>,r3	! 400
  30245c:	31 3c       	add	r3,r1
  30245e:	63 13       	mov	r1,r3
  302460:	61 e3       	mov	r14,r1
  302462:	71 e0       	add	#-32,r1
  302464:	d2 4d       	mov.l	30259c <kinit+0x1c8>,r2	! 300100 <gint_tlbh>
  302466:	56 1a       	mov.l	@(40,r1),r6
  302468:	65 23       	mov	r2,r5
  30246a:	64 33       	mov	r3,r4
  30246c:	d1 4a       	mov.l	302598 <kinit+0x1c4>,r1	! 30ae40 <memcpy>
  30246e:	41 0b       	jsr	@r1
  302470:	00 09       	nop	
	memcpy((void *)VBR + 0x600, inth_entry, 64);
  302472:	61 e3       	mov	r14,r1
  302474:	71 e0       	add	#-32,r1
  302476:	51 1e       	mov.l	@(56,r1),r1
  302478:	90 7f       	mov.w	30257a <kinit+0x1a6>,r0	! 600
  30247a:	31 0c       	add	r0,r1
  30247c:	62 13       	mov	r1,r2
  30247e:	61 e3       	mov	r14,r1
  302480:	71 e0       	add	#-32,r1
  302482:	e6 40       	mov	#64,r6
  302484:	55 1c       	mov.l	@(48,r1),r5
  302486:	64 23       	mov	r2,r4
  302488:	d1 43       	mov.l	302598 <kinit+0x1c4>,r1	! 30ae40 <memcpy>
  30248a:	41 0b       	jsr	@r1
  30248c:	00 09       	nop	

	/* Initialize memory allocators */
	kmalloc_init();
  30248e:	d1 44       	mov.l	3025a0 <kinit+0x1cc>,r1	! 304b60 <kmalloc_init>
  302490:	41 0b       	jsr	@r1
  302492:	00 09       	nop	

	/* Create an allocation arena with unused static RAM */
	static kmalloc_arena_t static_ram = { 0 };
	extern uint32_t euram;
	static_ram.name = "_uram";
  302494:	d1 43       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  302496:	d2 44       	mov.l	3025a8 <kinit+0x1d4>,r2	! 30e9f0
  302498:	11 24       	mov.l	r2,@(16,r1)
	static_ram.is_default = isSH4();
  30249a:	d1 42       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  30249c:	e2 01       	mov	#1,r2
  30249e:	11 28       	mov.l	r2,@(32,r1)
	static_ram.start = mmu_uram() + ((uint32_t)&euram - 0x08100000);
  3024a0:	d1 36       	mov.l	30257c <kinit+0x1a8>,r1	! 305288 <mmu_uram>
  3024a2:	41 0b       	jsr	@r1
  3024a4:	00 09       	nop	
  3024a6:	61 03       	mov	r0,r1
  3024a8:	d2 40       	mov.l	3025ac <kinit+0x1d8>,r2	! 8101810 <euram>
  3024aa:	d3 41       	mov.l	3025b0 <kinit+0x1dc>,r3	! f7f00000
  3024ac:	32 3c       	add	r3,r2
  3024ae:	32 1c       	add	r1,r2
  3024b0:	d1 3c       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  3024b2:	11 25       	mov.l	r2,@(20,r1)
	static_ram.end = (void *)uram_end;
  3024b4:	61 e3       	mov	r14,r1
  3024b6:	71 e0       	add	#-32,r1
  3024b8:	52 1d       	mov.l	@(52,r1),r2
  3024ba:	d1 3a       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  3024bc:	11 26       	mov.l	r2,@(24,r1)
	kmalloc_init_arena(&static_ram, true);
  3024be:	d1 39       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  3024c0:	e5 01       	mov	#1,r5
  3024c2:	64 13       	mov	r1,r4
  3024c4:	d1 3b       	mov.l	3025b4 <kinit+0x1e0>,r1	! 3048d0 <kmalloc_init_arena>
  3024c6:	41 0b       	jsr	@r1
  3024c8:	00 09       	nop	
	kmalloc_add_arena(&static_ram);
  3024ca:	d1 36       	mov.l	3025a4 <kinit+0x1d0>,r1	! 8101458 <static_ram.1>
  3024cc:	64 13       	mov	r1,r4
  3024ce:	d1 3a       	mov.l	3025b8 <kinit+0x1e4>,r1	! 3051dc <kmalloc_add_arena>
  3024d0:	41 0b       	jsr	@r1
  3024d2:	00 09       	nop	

	/* Create an arena in the OS stack as well, for VRAM and more data */
	#if defined(FXCG50) && !defined(GINT_NO_OS_STACK)
	static kmalloc_arena_t os_stack = { 0 };
	os_stack.name = "_ostk";
  3024d4:	d1 39       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  3024d6:	d2 3a       	mov.l	3025c0 <kinit+0x1ec>,r2	! 30e9f8
  3024d8:	11 24       	mov.l	r2,@(16,r1)
	os_stack.is_default = true;
  3024da:	d1 38       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  3024dc:	e2 01       	mov	#1,r2
  3024de:	11 28       	mov.l	r2,@(32,r1)
	if(gint[HWCALC] == HWCALC_PRIZM || gint[HWCALC] == HWCALC_FXCG_MANAGER)
  3024e0:	d1 38       	mov.l	3025c4 <kinit+0x1f0>,r1	! 81017d0 <gint>
  3024e2:	52 13       	mov.l	@(12,r1),r2
  3024e4:	e1 04       	mov	#4,r1
  3024e6:	32 10       	cmp/eq	r1,r2
  3024e8:	89 04       	bt	3024f4 <kinit+0x120>
  3024ea:	d1 36       	mov.l	3025c4 <kinit+0x1f0>,r1	! 81017d0 <gint>
  3024ec:	52 13       	mov.l	@(12,r1),r2
  3024ee:	e1 06       	mov	#6,r1
  3024f0:	32 10       	cmp/eq	r1,r2
  3024f2:	8b 04       	bf	3024fe <kinit+0x12a>
		os_stack.start = (void *)0x880f0000;
  3024f4:	d1 31       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  3024f6:	d2 34       	mov.l	3025c8 <kinit+0x1f4>,r2	! 880f0000
  3024f8:	11 25       	mov.l	r2,@(20,r1)
  3024fa:	a0 03       	bra	302504 <kinit+0x130>
  3024fc:	00 09       	nop	
	else
		os_stack.start = (void *)0x8c0f0000;
  3024fe:	d1 2f       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  302500:	d2 32       	mov.l	3025cc <kinit+0x1f8>,r2	! 8c0f0000
  302502:	11 25       	mov.l	r2,@(20,r1)
	os_stack.end = os_stack.start + (350 * 1024);
  302504:	d1 2d       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  302506:	51 15       	mov.l	@(20,r1),r1
  302508:	d2 31       	mov.l	3025d0 <kinit+0x1fc>,r2	! 57800
  30250a:	32 1c       	add	r1,r2
  30250c:	d1 2b       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  30250e:	11 26       	mov.l	r2,@(24,r1)
	kmalloc_init_arena(&os_stack, true);
  302510:	d1 2a       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  302512:	e5 01       	mov	#1,r5
  302514:	64 13       	mov	r1,r4
  302516:	d1 27       	mov.l	3025b4 <kinit+0x1e0>,r1	! 3048d0 <kmalloc_init_arena>
  302518:	41 0b       	jsr	@r1
  30251a:	00 09       	nop	
	kmalloc_add_arena(&os_stack);
  30251c:	d1 27       	mov.l	3025bc <kinit+0x1e8>,r1	! 8101490 <os_stack.0>
  30251e:	64 13       	mov	r1,r4
  302520:	d1 25       	mov.l	3025b8 <kinit+0x1e4>,r1	! 3051dc <kmalloc_add_arena>
  302522:	41 0b       	jsr	@r1
  302524:	00 09       	nop	
	#endif /* FXCG50 && !GINT_NO_OS_STACK */

	/* Allocate world buffers for the OS and for gint */
	gint_world_os = gint_world_alloc();
  302526:	d1 2b       	mov.l	3025d4 <kinit+0x200>,r1	! 302ea4 <gint_world_alloc>
  302528:	41 0b       	jsr	@r1
  30252a:	00 09       	nop	
  30252c:	61 03       	mov	r0,r1
  30252e:	d2 2a       	mov.l	3025d8 <kinit+0x204>,r2	! 8101448 <gint_world_os>
  302530:	22 12       	mov.l	r1,@r2
	gint_world_addin = gint_world_alloc();
  302532:	d1 28       	mov.l	3025d4 <kinit+0x200>,r1	! 302ea4 <gint_world_alloc>
  302534:	41 0b       	jsr	@r1
  302536:	00 09       	nop	
  302538:	61 03       	mov	r0,r1
  30253a:	d2 28       	mov.l	3025dc <kinit+0x208>,r2	! 810144c <gint_world_addin>
  30253c:	22 12       	mov.l	r1,@r2
	gint_driver_flags = malloc(gint_driver_count());
  30253e:	d2 28       	mov.l	3025e0 <kinit+0x20c>,r2	! 30d0f0 <gint_drivers_end>
  302540:	d1 28       	mov.l	3025e4 <kinit+0x210>,r1	! 30d000 <drv_cpu>
  302542:	32 18       	sub	r1,r2
  302544:	e1 fc       	mov	#-4,r1
  302546:	42 1c       	shad	r1,r2
  302548:	d1 27       	mov.l	3025e8 <kinit+0x214>,r1	! aaaaaaab
  30254a:	02 17       	mul.l	r1,r2
  30254c:	01 1a       	sts	macl,r1
  30254e:	64 13       	mov	r1,r4
  302550:	d1 26       	mov.l	3025ec <kinit+0x218>,r1	! 30af64 <malloc>
  302552:	41 0b       	jsr	@r1
  302554:	00 09       	nop	
  302556:	61 03       	mov	r0,r1
  302558:	d2 25       	mov.l	3025f0 <kinit+0x21c>,r2	! 8101450 <gint_driver_flags>
  30255a:	22 12       	mov.l	r1,@r2

	#ifdef FXCG50
	/* Allocate VRAMs, which is important for panic screens */
	extern bool dvram_init(void);
	if(!dvram_init())
  30255c:	d1 25       	mov.l	3025f4 <kinit+0x220>,r1	! 301500 <dvram_init>
  30255e:	41 0b       	jsr	@r1
  302560:	00 09       	nop	
  302562:	61 03       	mov	r0,r1
  302564:	e2 01       	mov	#1,r2
  302566:	21 2a       	xor	r2,r1
  302568:	61 1c       	extu.b	r1,r1
  30256a:	21 18       	tst	r1,r1
  30256c:	89 46       	bt	3025fc <kinit+0x228>
		abort();
  30256e:	d1 22       	mov.l	3025f8 <kinit+0x224>,r1	! 30ad04 <abort>
  302570:	41 0b       	jsr	@r1
  302572:	00 09       	nop	
  302574:	c0 00       	mov.b	r0,@(0,gbr)
  302576:	01 00       	.word 0x0100
  302578:	04 00       	.word 0x0400
  30257a:	06 00       	.word 0x0600
  30257c:	00 30       	.word 0x0030
  30257e:	52 88       	mov.l	@(32,r8),r2
  302580:	00 30       	.word 0x0030
  302582:	52 b8       	mov.l	@(32,r11),r2
  302584:	08 10       	.word 0x0810
  302586:	14 54       	mov.l	r5,@(16,r4)
  302588:	00 30       	.word 0x0030
  30258a:	cf c0       	or.b	#192,@(r0,gbr)
  30258c:	00 00       	.word 0x0000
  30258e:	00 90       	.word 0x0090
  302590:	00 00       	.word 0x0000
  302592:	00 70       	.word 0x0070
  302594:	00 30       	.word 0x0030
  302596:	00 70       	.word 0x0070
  302598:	00 30       	.word 0x0030
  30259a:	ae 40       	bra	30221e <dsubimage_p4_clearbg+0xa2>
  30259c:	00 30       	.word 0x0030
  30259e:	01 00       	.word 0x0100
  3025a0:	00 30       	.word 0x0030
  3025a2:	4b 60       	.word 0x4b60
  3025a4:	08 10       	.word 0x0810
  3025a6:	14 58       	mov.l	r5,@(32,r4)
  3025a8:	00 30       	.word 0x0030
  3025aa:	e9 f0       	mov	#-16,r9
  3025ac:	08 10       	.word 0x0810
  3025ae:	18 10       	mov.l	r1,@(0,r8)
  3025b0:	f7 f0       	movs.w	@-r3,a0g
  3025b2:	00 00       	.word 0x0000
  3025b4:	00 30       	.word 0x0030
  3025b6:	48 d0       	.word 0x48d0
  3025b8:	00 30       	.word 0x0030
  3025ba:	51 dc       	mov.l	@(48,r13),r1
  3025bc:	08 10       	.word 0x0810
  3025be:	14 90       	mov.l	r9,@(0,r4)
  3025c0:	00 30       	.word 0x0030
  3025c2:	e9 f8       	mov	#-8,r9
  3025c4:	08 10       	.word 0x0810
  3025c6:	17 d0       	mov.l	r13,@(0,r7)
  3025c8:	88 0f       	cmp/eq	#15,r0
  3025ca:	00 00       	.word 0x0000
  3025cc:	8c 0f       	ldrs	3025ee <kinit+0x21a>	! af64
  3025ce:	00 00       	.word 0x0000
  3025d0:	00 05       	mov.w	r0,@(r0,r0)
  3025d2:	78 00       	add	#0,r8
  3025d4:	00 30       	.word 0x0030
  3025d6:	2e a4       	mov.b	r10,@-r14
  3025d8:	08 10       	.word 0x0810
  3025da:	14 48       	mov.l	r4,@(32,r4)
  3025dc:	08 10       	.word 0x0810
  3025de:	14 4c       	mov.l	r4,@(48,r4)
  3025e0:	00 30       	.word 0x0030
  3025e2:	d0 f0       	mov.l	3029a4 <gint_osmenu_native+0x134>,r0	! 90009
  3025e4:	00 30       	.word 0x0030
  3025e6:	d0 00       	mov.l	3025e8 <kinit+0x214>,r0	! aaaaaaab
  3025e8:	aa aa       	bra	301b40 <GINT_CALL_SET_STOP_function+0x1a>
  3025ea:	aa ab       	bra	301b44 <GINT_CALL_SET_STOP_function+0x1e>
  3025ec:	00 30       	.word 0x0030
  3025ee:	af 64       	bra	3024ba <kinit+0xe6>
  3025f0:	08 10       	.word 0x0810
  3025f2:	14 50       	mov.l	r5,@(0,r4)
  3025f4:	00 30       	.word 0x0030
  3025f6:	15 00       	mov.l	r0,@(0,r5)
  3025f8:	00 30       	.word 0x0030
  3025fa:	ad 04       	bra	302006 <dsubimage_p4+0x4e>
	#endif

	if(!gint_world_os || !gint_world_addin || !gint_driver_flags)
  3025fc:	d1 3b       	mov.l	3026ec <kinit+0x318>,r1	! 8101448 <gint_world_os>
  3025fe:	61 12       	mov.l	@r1,r1
  302600:	21 18       	tst	r1,r1
  302602:	89 07       	bt	302614 <kinit+0x240>
  302604:	d1 3a       	mov.l	3026f0 <kinit+0x31c>,r1	! 810144c <gint_world_addin>
  302606:	61 12       	mov.l	@r1,r1
  302608:	21 18       	tst	r1,r1
  30260a:	89 03       	bt	302614 <kinit+0x240>
  30260c:	d1 39       	mov.l	3026f4 <kinit+0x320>,r1	! 8101450 <gint_driver_flags>
  30260e:	61 12       	mov.l	@r1,r1
  302610:	21 18       	tst	r1,r1
  302612:	8b 04       	bf	30261e <kinit+0x24a>
		gint_panic(0x1060);
  302614:	91 68       	mov.w	3026e8 <kinit+0x314>,r1	! 1060
  302616:	64 13       	mov	r1,r4
  302618:	d1 37       	mov.l	3026f8 <kinit+0x324>,r1	! 3091d4 <gint_panic>
  30261a:	41 0b       	jsr	@r1
  30261c:	00 09       	nop	

	/* Initialize drivers */
	for(int i = 0; i < gint_driver_count(); i++)
  30261e:	61 e3       	mov	r14,r1
  302620:	71 e0       	add	#-32,r1
  302622:	e2 00       	mov	#0,r2
  302624:	11 2f       	mov.l	r2,@(60,r1)
  302626:	a0 3a       	bra	30269e <kinit+0x2ca>
  302628:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  30262a:	61 e3       	mov	r14,r1
  30262c:	71 e0       	add	#-32,r1
  30262e:	62 e3       	mov	r14,r2
  302630:	72 e0       	add	#-32,r2
  302632:	53 2f       	mov.l	@(60,r2),r3
  302634:	e2 30       	mov	#48,r2
  302636:	03 27       	mul.l	r2,r3
  302638:	03 1a       	sts	macl,r3
  30263a:	d2 30       	mov.l	3026fc <kinit+0x328>,r2	! 30d000 <drv_cpu>
  30263c:	32 3c       	add	r3,r2
  30263e:	11 29       	mov.l	r2,@(36,r1)
		if(d->constructor) d->constructor();
  302640:	61 e3       	mov	r14,r1
  302642:	71 e0       	add	#-32,r1
  302644:	51 19       	mov.l	@(36,r1),r1
  302646:	51 11       	mov.l	@(4,r1),r1
  302648:	21 18       	tst	r1,r1
  30264a:	89 05       	bt	302658 <kinit+0x284>
  30264c:	61 e3       	mov	r14,r1
  30264e:	71 e0       	add	#-32,r1
  302650:	51 19       	mov.l	@(36,r1),r1
  302652:	51 11       	mov.l	@(4,r1),r1
  302654:	41 0b       	jsr	@r1
  302656:	00 09       	nop	

		uint8_t *f = &gint_driver_flags[i];
  302658:	d1 26       	mov.l	3026f4 <kinit+0x320>,r1	! 8101450 <gint_driver_flags>
  30265a:	63 12       	mov.l	@r1,r3
  30265c:	61 e3       	mov	r14,r1
  30265e:	71 e0       	add	#-32,r1
  302660:	52 1f       	mov.l	@(60,r1),r2
  302662:	61 e3       	mov	r14,r1
  302664:	71 e0       	add	#-32,r1
  302666:	32 3c       	add	r3,r2
  302668:	11 28       	mov.l	r2,@(32,r1)
		*f = (d->flags & GINT_DRV_INIT_) | GINT_DRV_CLEAN;
  30266a:	61 e3       	mov	r14,r1
  30266c:	71 e0       	add	#-32,r1
  30266e:	51 19       	mov.l	@(36,r1),r1
  302670:	71 20       	add	#32,r1
  302672:	84 1e       	mov.b	@(14,r1),r0
  302674:	61 03       	mov	r0,r1
  302676:	61 1c       	extu.b	r1,r1
  302678:	61 1e       	exts.b	r1,r1
  30267a:	e2 10       	mov	#16,r2
  30267c:	21 29       	and	r2,r1
  30267e:	61 1e       	exts.b	r1,r1
  302680:	e3 01       	mov	#1,r3
  302682:	21 3b       	or	r3,r1
  302684:	61 1e       	exts.b	r1,r1
  302686:	62 1c       	extu.b	r1,r2
  302688:	61 e3       	mov	r14,r1
  30268a:	71 e0       	add	#-32,r1
  30268c:	51 18       	mov.l	@(32,r1),r1
  30268e:	21 20       	mov.b	r2,@r1
	for(int i = 0; i < gint_driver_count(); i++)
  302690:	61 e3       	mov	r14,r1
  302692:	71 e0       	add	#-32,r1
  302694:	62 e3       	mov	r14,r2
  302696:	72 e0       	add	#-32,r2
  302698:	52 2f       	mov.l	@(60,r2),r2
  30269a:	72 01       	add	#1,r2
  30269c:	11 2f       	mov.l	r2,@(60,r1)
  30269e:	d2 18       	mov.l	302700 <kinit+0x32c>,r2	! 30d0f0 <gint_drivers_end>
  3026a0:	d1 16       	mov.l	3026fc <kinit+0x328>,r1	! 30d000 <drv_cpu>
  3026a2:	32 18       	sub	r1,r2
  3026a4:	e1 fc       	mov	#-4,r1
  3026a6:	42 1c       	shad	r1,r2
  3026a8:	d1 16       	mov.l	302704 <kinit+0x330>,r1	! aaaaaaab
  3026aa:	02 17       	mul.l	r1,r2
  3026ac:	01 1a       	sts	macl,r1
  3026ae:	62 13       	mov	r1,r2
  3026b0:	61 e3       	mov	r14,r1
  3026b2:	71 e0       	add	#-32,r1
  3026b4:	51 1f       	mov.l	@(60,r1),r1
  3026b6:	31 23       	cmp/ge	r2,r1
  3026b8:	8b b7       	bf	30262a <kinit+0x256>
	}

	/* Select the VBR address for this world before configuring */
	cpu_configure_VBR(VBR);
  3026ba:	61 e3       	mov	r14,r1
  3026bc:	71 e0       	add	#-32,r1
  3026be:	54 1e       	mov.l	@(56,r1),r4
  3026c0:	d1 11       	mov.l	302708 <kinit+0x334>,r1	! 30754c <cpu_configure_VBR>
  3026c2:	41 0b       	jsr	@r1
  3026c4:	00 09       	nop	

	gint_world_switch_in(gint_world_os, gint_world_addin);
  3026c6:	d1 09       	mov.l	3026ec <kinit+0x318>,r1	! 8101448 <gint_world_os>
  3026c8:	62 12       	mov.l	@r1,r2
  3026ca:	d1 09       	mov.l	3026f0 <kinit+0x31c>,r1	! 810144c <gint_world_addin>
  3026cc:	61 12       	mov.l	@r1,r1
  3026ce:	65 13       	mov	r1,r5
  3026d0:	64 23       	mov	r2,r4
  3026d2:	d1 0e       	mov.l	30270c <kinit+0x338>,r1	! 3030d4 <gint_world_switch_in>
  3026d4:	41 0b       	jsr	@r1
  3026d6:	00 09       	nop	
}
  3026d8:	00 09       	nop	
  3026da:	7e 20       	add	#32,r14
  3026dc:	6f e3       	mov	r14,r15
  3026de:	4f 26       	lds.l	@r15+,pr
  3026e0:	6e f6       	mov.l	@r15+,r14
  3026e2:	68 f6       	mov.l	@r15+,r8
  3026e4:	00 0b       	rts	
  3026e6:	00 09       	nop	
  3026e8:	10 60       	mov.l	r6,@(0,r0)
  3026ea:	00 09       	nop	
  3026ec:	08 10       	.word 0x0810
  3026ee:	14 48       	mov.l	r4,@(32,r4)
  3026f0:	08 10       	.word 0x0810
  3026f2:	14 4c       	mov.l	r4,@(48,r4)
  3026f4:	08 10       	.word 0x0810
  3026f6:	14 50       	mov.l	r5,@(0,r4)
  3026f8:	00 30       	.word 0x0030
  3026fa:	91 d4       	mov.w	3028a6 <gint_osmenu_native+0x36>,r1	! 71ec
  3026fc:	00 30       	.word 0x0030
  3026fe:	d0 00       	mov.l	302700 <kinit+0x32c>,r0	! 30d0f0 <gint_drivers_end>
  302700:	00 30       	.word 0x0030
  302702:	d0 f0       	mov.l	302ac4 <__handler+0x88>,r0	! 962e3
  302704:	aa aa       	bra	301c5c <dsubimage_p8+0x6c>
  302706:	aa ab       	bra	301c60 <dsubimage_p8+0x70>
  302708:	00 30       	.word 0x0030
  30270a:	75 4c       	add	#76,r5
  30270c:	00 30       	.word 0x0030
  30270e:	30 d4       	div1	r13,r0

00302710 <kquit>:

/* kquit(): Quit gint and give back control to the system */
void kquit(void)
{
  302710:	2f e6       	mov.l	r14,@-r15
  302712:	4f 22       	sts.l	pr,@-r15
  302714:	6e f3       	mov	r15,r14
	gint_world_switch_out(gint_world_addin, gint_world_os);
  302716:	d1 15       	mov.l	30276c <kquit+0x5c>,r1	! 810144c <gint_world_addin>
  302718:	62 12       	mov.l	@r1,r2
  30271a:	d1 15       	mov.l	302770 <kquit+0x60>,r1	! 8101448 <gint_world_os>
  30271c:	61 12       	mov.l	@r1,r1
  30271e:	65 13       	mov	r1,r5
  302720:	64 23       	mov	r2,r4
  302722:	d1 14       	mov.l	302774 <kquit+0x64>,r1	! 303364 <gint_world_switch_out>
  302724:	41 0b       	jsr	@r1
  302726:	00 09       	nop	

	gint_world_free(gint_world_os);
  302728:	d1 11       	mov.l	302770 <kquit+0x60>,r1	! 8101448 <gint_world_os>
  30272a:	61 12       	mov.l	@r1,r1
  30272c:	64 13       	mov	r1,r4
  30272e:	d1 12       	mov.l	302778 <kquit+0x68>,r1	! 303020 <gint_world_free>
  302730:	41 0b       	jsr	@r1
  302732:	00 09       	nop	
	gint_world_free(gint_world_addin);
  302734:	d1 0d       	mov.l	30276c <kquit+0x5c>,r1	! 810144c <gint_world_addin>
  302736:	61 12       	mov.l	@r1,r1
  302738:	64 13       	mov	r1,r4
  30273a:	d1 0f       	mov.l	302778 <kquit+0x68>,r1	! 303020 <gint_world_free>
  30273c:	41 0b       	jsr	@r1
  30273e:	00 09       	nop	
	free(gint_driver_flags);
  302740:	d1 0e       	mov.l	30277c <kquit+0x6c>,r1	! 8101450 <gint_driver_flags>
  302742:	61 12       	mov.l	@r1,r1
  302744:	64 13       	mov	r1,r4
  302746:	d1 0e       	mov.l	302780 <kquit+0x70>,r1	! 30af58 <free>
  302748:	41 0b       	jsr	@r1
  30274a:	00 09       	nop	

	gint_world_os = NULL;
  30274c:	d1 08       	mov.l	302770 <kquit+0x60>,r1	! 8101448 <gint_world_os>
  30274e:	e2 00       	mov	#0,r2
  302750:	21 22       	mov.l	r2,@r1
	gint_world_addin = NULL;
  302752:	d1 06       	mov.l	30276c <kquit+0x5c>,r1	! 810144c <gint_world_addin>
  302754:	e2 00       	mov	#0,r2
  302756:	21 22       	mov.l	r2,@r1
	gint_driver_flags = NULL;
  302758:	d1 08       	mov.l	30277c <kquit+0x6c>,r1	! 8101450 <gint_driver_flags>
  30275a:	e2 00       	mov	#0,r2
  30275c:	21 22       	mov.l	r2,@r1
}
  30275e:	00 09       	nop	
  302760:	6f e3       	mov	r14,r15
  302762:	4f 26       	lds.l	@r15+,pr
  302764:	6e f6       	mov.l	@r15+,r14
  302766:	00 0b       	rts	
  302768:	00 09       	nop	
  30276a:	00 09       	nop	
  30276c:	08 10       	.word 0x0810
  30276e:	14 4c       	mov.l	r4,@(48,r4)
  302770:	08 10       	.word 0x0810
  302772:	14 48       	mov.l	r4,@(32,r4)
  302774:	00 30       	.word 0x0030
  302776:	33 64       	div1	r6,r3
  302778:	00 30       	.word 0x0030
  30277a:	30 20       	cmp/eq	r2,r0
  30277c:	08 10       	.word 0x0810
  30277e:	14 50       	mov.l	r5,@(0,r4)
  302780:	00 30       	.word 0x0030
  302782:	af 58       	bra	302636 <kinit+0x262>

00302784 <GINT_CALL_SET_function>:
{
  302784:	2f e6       	mov.l	r14,@-r15
  302786:	7f fc       	add	#-4,r15
  302788:	6e f3       	mov	r15,r14
  30278a:	61 e3       	mov	r14,r1
  30278c:	71 c4       	add	#-60,r1
  30278e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  302790:	61 e3       	mov	r14,r1
  302792:	71 c4       	add	#-60,r1
  302794:	51 1f       	mov.l	@(60,r1),r1
  302796:	e2 01       	mov	#1,r2
  302798:	21 22       	mov.l	r2,@r1
	return 0;
  30279a:	e1 00       	mov	#0,r1
}
  30279c:	60 13       	mov	r1,r0
  30279e:	7e 04       	add	#4,r14
  3027a0:	6f e3       	mov	r14,r15
  3027a2:	6e f6       	mov.l	@r15+,r14
  3027a4:	00 0b       	rts	
  3027a6:	00 09       	nop	

003027a8 <GINT_CALL_INC_function>:
{
  3027a8:	2f e6       	mov.l	r14,@-r15
  3027aa:	7f fc       	add	#-4,r15
  3027ac:	6e f3       	mov	r15,r14
  3027ae:	61 e3       	mov	r14,r1
  3027b0:	71 c4       	add	#-60,r1
  3027b2:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3027b4:	61 e3       	mov	r14,r1
  3027b6:	71 c4       	add	#-60,r1
  3027b8:	51 1f       	mov.l	@(60,r1),r1
  3027ba:	61 12       	mov.l	@r1,r1
  3027bc:	62 13       	mov	r1,r2
  3027be:	72 01       	add	#1,r2
  3027c0:	61 e3       	mov	r14,r1
  3027c2:	71 c4       	add	#-60,r1
  3027c4:	51 1f       	mov.l	@(60,r1),r1
  3027c6:	21 22       	mov.l	r2,@r1
	return 0;
  3027c8:	e1 00       	mov	#0,r1
}
  3027ca:	60 13       	mov	r1,r0
  3027cc:	7e 04       	add	#4,r14
  3027ce:	6f e3       	mov	r14,r15
  3027d0:	6e f6       	mov.l	@r15+,r14
  3027d2:	00 0b       	rts	
  3027d4:	00 09       	nop	

003027d6 <GINT_CALL_SET_STOP_function>:
{
  3027d6:	2f e6       	mov.l	r14,@-r15
  3027d8:	7f fc       	add	#-4,r15
  3027da:	6e f3       	mov	r15,r14
  3027dc:	61 e3       	mov	r14,r1
  3027de:	71 c4       	add	#-60,r1
  3027e0:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3027e2:	61 e3       	mov	r14,r1
  3027e4:	71 c4       	add	#-60,r1
  3027e6:	51 1f       	mov.l	@(60,r1),r1
  3027e8:	e2 01       	mov	#1,r2
  3027ea:	21 22       	mov.l	r2,@r1
	return 1;
  3027ec:	e1 01       	mov	#1,r1
}
  3027ee:	60 13       	mov	r1,r0
  3027f0:	7e 04       	add	#4,r14
  3027f2:	6f e3       	mov	r14,r15
  3027f4:	6e f6       	mov.l	@r15+,r14
  3027f6:	00 0b       	rts	
  3027f8:	00 09       	nop	

003027fa <GINT_CALL_INC_STOP_function>:
{
  3027fa:	2f e6       	mov.l	r14,@-r15
  3027fc:	7f fc       	add	#-4,r15
  3027fe:	6e f3       	mov	r15,r14
  302800:	61 e3       	mov	r14,r1
  302802:	71 c4       	add	#-60,r1
  302804:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  302806:	61 e3       	mov	r14,r1
  302808:	71 c4       	add	#-60,r1
  30280a:	51 1f       	mov.l	@(60,r1),r1
  30280c:	61 12       	mov.l	@r1,r1
  30280e:	62 13       	mov	r1,r2
  302810:	72 01       	add	#1,r2
  302812:	61 e3       	mov	r14,r1
  302814:	71 c4       	add	#-60,r1
  302816:	51 1f       	mov.l	@(60,r1),r1
  302818:	21 22       	mov.l	r2,@r1
	return 1;
  30281a:	e1 01       	mov	#1,r1
}
  30281c:	60 13       	mov	r1,r0
  30281e:	7e 04       	add	#4,r14
  302820:	6f e3       	mov	r14,r15
  302822:	6e f6       	mov.l	@r15+,r14
  302824:	00 0b       	rts	
  302826:	00 09       	nop	

00302828 <__osmenu_handler>:
void __SetQuitHandler(void (*callback)(void));

static int __osmenu_id;

static void __osmenu_handler(void)
{
  302828:	2f e6       	mov.l	r14,@-r15
  30282a:	4f 22       	sts.l	pr,@-r15
  30282c:	6e f3       	mov	r15,r14
	if(isSlim())
		__PutKeyCode(0x07, 0x0A, 0);
	else
		__PutKeyCode(0x04, 0x09, 0);
  30282e:	e6 00       	mov	#0,r6
  302830:	e5 09       	mov	#9,r5
  302832:	e4 04       	mov	#4,r4
  302834:	d1 0a       	mov.l	302860 <__osmenu_handler+0x38>,r1	! 302d74 <__PutKeyCode>
  302836:	41 0b       	jsr	@r1
  302838:	00 09       	nop	

	__Timer_Stop(__osmenu_id);
  30283a:	d1 0a       	mov.l	302864 <__osmenu_handler+0x3c>,r1	! 81014c8 <__osmenu_id>
  30283c:	61 12       	mov.l	@r1,r1
  30283e:	64 13       	mov	r1,r4
  302840:	d1 09       	mov.l	302868 <__osmenu_handler+0x40>,r1	! 302d54 <__Timer_Stop>
  302842:	41 0b       	jsr	@r1
  302844:	00 09       	nop	
	__Timer_Deinstall(__osmenu_id);
  302846:	d1 07       	mov.l	302864 <__osmenu_handler+0x3c>,r1	! 81014c8 <__osmenu_id>
  302848:	61 12       	mov.l	@r1,r1
  30284a:	64 13       	mov	r1,r4
  30284c:	d1 07       	mov.l	30286c <__osmenu_handler+0x44>,r1	! 302d64 <__Timer_Deinstall>
  30284e:	41 0b       	jsr	@r1
  302850:	00 09       	nop	
}
  302852:	00 09       	nop	
  302854:	6f e3       	mov	r14,r15
  302856:	4f 26       	lds.l	@r15+,pr
  302858:	6e f6       	mov.l	@r15+,r14
  30285a:	00 0b       	rts	
  30285c:	00 09       	nop	
  30285e:	00 09       	nop	
  302860:	00 30       	.word 0x0030
  302862:	2d 74       	mov.b	r7,@-r13
  302864:	08 10       	.word 0x0810
  302866:	14 c8       	mov.l	r12,@(32,r4)
  302868:	00 30       	.word 0x0030
  30286a:	2d 54       	mov.b	r5,@-r13
  30286c:	00 30       	.word 0x0030
  30286e:	2d 64       	mov.b	r6,@-r13

00302870 <gint_osmenu_native>:

void gint_osmenu_native(void)
{
  302870:	2f 86       	mov.l	r8,@-r15
  302872:	2f e6       	mov.l	r14,@-r15
  302874:	4f 22       	sts.l	pr,@-r15
  302876:	7f d4       	add	#-44,r15
  302878:	6e f3       	mov	r15,r14
	__ClearKeyBuffer();
  30287a:	d1 51       	mov.l	3029c0 <gint_osmenu_native+0x150>,r1	! 302d94 <__ClearKeyBuffer>
  30287c:	41 0b       	jsr	@r1
  30287e:	00 09       	nop	
	/* Unfortunately ineffective (main menu probably reenables it)
	__ConfigureStatusArea(3); */

	/* TODO: Improve copied VRAM behavior in gint_osmenu() on fxcg50 */
	uint16_t *vram1, *vram2;
	dgetvram(&vram1, &vram2);
  302880:	62 e3       	mov	r14,r2
  302882:	72 14       	add	#20,r2
  302884:	61 e3       	mov	r14,r1
  302886:	71 18       	add	#24,r1
  302888:	65 23       	mov	r2,r5
  30288a:	64 13       	mov	r1,r4
  30288c:	d1 4d       	mov.l	3029c4 <gint_osmenu_native+0x154>,r1	! 301680 <dgetvram>
  30288e:	41 0b       	jsr	@r1
  302890:	00 09       	nop	

	uint16_t *dst = __GetVRAMAddress();
  302892:	68 e3       	mov	r14,r8
  302894:	78 ec       	add	#-20,r8
  302896:	d1 4c       	mov.l	3029c8 <gint_osmenu_native+0x158>,r1	! 302da4 <__GetVRAMAddress>
  302898:	41 0b       	jsr	@r1
  30289a:	00 09       	nop	
  30289c:	61 03       	mov	r0,r1
  30289e:	18 1f       	mov.l	r1,@(60,r8)
	uint16_t *src = (gint_vram == vram1) ? vram2 + 6 : vram1 + 6;
  3028a0:	d1 4a       	mov.l	3029cc <gint_osmenu_native+0x15c>,r1	! 810143c <gint_vram>
  3028a2:	62 12       	mov.l	@r1,r2
  3028a4:	61 e3       	mov	r14,r1
  3028a6:	71 ec       	add	#-20,r1
  3028a8:	51 1b       	mov.l	@(44,r1),r1
  3028aa:	32 10       	cmp/eq	r1,r2
  3028ac:	8b 05       	bf	3028ba <gint_osmenu_native+0x4a>
  3028ae:	61 e3       	mov	r14,r1
  3028b0:	71 ec       	add	#-20,r1
  3028b2:	51 1a       	mov.l	@(40,r1),r1
  3028b4:	71 0c       	add	#12,r1
  3028b6:	a0 04       	bra	3028c2 <gint_osmenu_native+0x52>
  3028b8:	00 09       	nop	
  3028ba:	61 e3       	mov	r14,r1
  3028bc:	71 ec       	add	#-20,r1
  3028be:	51 1b       	mov.l	@(44,r1),r1
  3028c0:	71 0c       	add	#12,r1
  3028c2:	62 e3       	mov	r14,r2
  3028c4:	72 ec       	add	#-20,r2
  3028c6:	12 1e       	mov.l	r1,@(56,r2)

	for(int y = 0; y < 216; y++, dst+=384, src+=396)
  3028c8:	61 e3       	mov	r14,r1
  3028ca:	71 ec       	add	#-20,r1
  3028cc:	e2 00       	mov	#0,r2
  3028ce:	11 2d       	mov.l	r2,@(52,r1)
  3028d0:	a0 3d       	bra	30294e <gint_osmenu_native+0xde>
  3028d2:	00 09       	nop	
	for(int x = 0; x < 384; x++)
  3028d4:	61 e3       	mov	r14,r1
  3028d6:	71 ec       	add	#-20,r1
  3028d8:	e2 00       	mov	#0,r2
  3028da:	11 2c       	mov.l	r2,@(48,r1)
  3028dc:	a0 1a       	bra	302914 <gint_osmenu_native+0xa4>
  3028de:	00 09       	nop	
	{
		dst[x] = src[x];
  3028e0:	61 e3       	mov	r14,r1
  3028e2:	71 ec       	add	#-20,r1
  3028e4:	51 1c       	mov.l	@(48,r1),r1
  3028e6:	31 1c       	add	r1,r1
  3028e8:	62 e3       	mov	r14,r2
  3028ea:	72 ec       	add	#-20,r2
  3028ec:	52 2e       	mov.l	@(56,r2),r2
  3028ee:	32 1c       	add	r1,r2
  3028f0:	61 e3       	mov	r14,r1
  3028f2:	71 ec       	add	#-20,r1
  3028f4:	51 1c       	mov.l	@(48,r1),r1
  3028f6:	31 1c       	add	r1,r1
  3028f8:	63 e3       	mov	r14,r3
  3028fa:	73 ec       	add	#-20,r3
  3028fc:	53 3f       	mov.l	@(60,r3),r3
  3028fe:	31 3c       	add	r3,r1
  302900:	62 21       	mov.w	@r2,r2
  302902:	62 2d       	extu.w	r2,r2
  302904:	21 21       	mov.w	r2,@r1
	for(int x = 0; x < 384; x++)
  302906:	61 e3       	mov	r14,r1
  302908:	71 ec       	add	#-20,r1
  30290a:	62 e3       	mov	r14,r2
  30290c:	72 ec       	add	#-20,r2
  30290e:	52 2c       	mov.l	@(48,r2),r2
  302910:	72 01       	add	#1,r2
  302912:	11 2c       	mov.l	r2,@(48,r1)
  302914:	61 e3       	mov	r14,r1
  302916:	71 ec       	add	#-20,r1
  302918:	52 1c       	mov.l	@(48,r1),r2
  30291a:	91 4c       	mov.w	3029b6 <gint_osmenu_native+0x146>,r1	! 17f
  30291c:	32 17       	cmp/gt	r1,r2
  30291e:	8b df       	bf	3028e0 <gint_osmenu_native+0x70>
	for(int y = 0; y < 216; y++, dst+=384, src+=396)
  302920:	61 e3       	mov	r14,r1
  302922:	71 ec       	add	#-20,r1
  302924:	62 e3       	mov	r14,r2
  302926:	72 ec       	add	#-20,r2
  302928:	52 2d       	mov.l	@(52,r2),r2
  30292a:	72 01       	add	#1,r2
  30292c:	11 2d       	mov.l	r2,@(52,r1)
  30292e:	61 e3       	mov	r14,r1
  302930:	71 ec       	add	#-20,r1
  302932:	62 e3       	mov	r14,r2
  302934:	72 ec       	add	#-20,r2
  302936:	52 2f       	mov.l	@(60,r2),r2
  302938:	93 3e       	mov.w	3029b8 <gint_osmenu_native+0x148>,r3	! 300
  30293a:	32 3c       	add	r3,r2
  30293c:	11 2f       	mov.l	r2,@(60,r1)
  30293e:	61 e3       	mov	r14,r1
  302940:	71 ec       	add	#-20,r1
  302942:	62 e3       	mov	r14,r2
  302944:	72 ec       	add	#-20,r2
  302946:	52 2e       	mov.l	@(56,r2),r2
  302948:	93 37       	mov.w	3029ba <gint_osmenu_native+0x14a>,r3	! 318
  30294a:	32 3c       	add	r3,r2
  30294c:	11 2e       	mov.l	r2,@(56,r1)
  30294e:	61 e3       	mov	r14,r1
  302950:	71 ec       	add	#-20,r1
  302952:	52 1d       	mov.l	@(52,r1),r2
  302954:	91 32       	mov.w	3029bc <gint_osmenu_native+0x14c>,r1	! d7
  302956:	32 17       	cmp/gt	r1,r2
  302958:	8b bc       	bf	3028d4 <gint_osmenu_native+0x64>
	/* Mysteriously crashes when coming back; might be useful another time
	   instead of GetKeyWait()
	int C=0x04, R=0x09;
	__SpecialMatrixCodeProcessing(&C, &R); */

	__osmenu_id = __Timer_Install(0, __osmenu_handler, 0 /* ms */);
  30295a:	d1 1d       	mov.l	3029d0 <gint_osmenu_native+0x160>,r1	! 302828 <__osmenu_handler>
  30295c:	e6 00       	mov	#0,r6
  30295e:	65 13       	mov	r1,r5
  302960:	e4 00       	mov	#0,r4
  302962:	d1 1c       	mov.l	3029d4 <gint_osmenu_native+0x164>,r1	! 302d34 <__Timer_Install>
  302964:	41 0b       	jsr	@r1
  302966:	00 09       	nop	
  302968:	61 03       	mov	r0,r1
  30296a:	d2 1b       	mov.l	3029d8 <gint_osmenu_native+0x168>,r2	! 81014c8 <__osmenu_id>
  30296c:	22 12       	mov.l	r1,@r2
	if(__osmenu_id <= 0) return;
  30296e:	d1 1a       	mov.l	3029d8 <gint_osmenu_native+0x168>,r1	! 81014c8 <__osmenu_id>
  302970:	61 12       	mov.l	@r1,r1
  302972:	41 15       	cmp/pl	r1
  302974:	8b 17       	bf	3029a6 <gint_osmenu_native+0x136>
	__Timer_Start(__osmenu_id);
  302976:	d1 18       	mov.l	3029d8 <gint_osmenu_native+0x168>,r1	! 81014c8 <__osmenu_id>
  302978:	61 12       	mov.l	@r1,r1
  30297a:	64 13       	mov	r1,r4
  30297c:	d1 17       	mov.l	3029dc <gint_osmenu_native+0x16c>,r1	! 302d44 <__Timer_Start>
  30297e:	41 0b       	jsr	@r1
  302980:	00 09       	nop	

	int column, row;
	unsigned short keycode;
	__GetKeyWait(&column, &row,
  302982:	63 e3       	mov	r14,r3
  302984:	73 0c       	add	#12,r3
  302986:	62 e3       	mov	r14,r2
  302988:	72 10       	add	#16,r2
  30298a:	61 e3       	mov	r14,r1
  30298c:	71 0a       	add	#10,r1
  30298e:	1f 11       	mov.l	r1,@(4,r15)
  302990:	e1 00       	mov	#0,r1
  302992:	2f 12       	mov.l	r1,@r15
  302994:	e7 01       	mov	#1,r7
  302996:	e6 00       	mov	#0,r6
  302998:	65 33       	mov	r3,r5
  30299a:	64 23       	mov	r2,r4
  30299c:	d1 10       	mov.l	3029e0 <gint_osmenu_native+0x170>,r1	! 302d84 <__GetKeyWait>
  30299e:	41 0b       	jsr	@r1
  3029a0:	00 09       	nop	
  3029a2:	a0 01       	bra	3029a8 <gint_osmenu_native+0x138>
  3029a4:	00 09       	nop	
	if(__osmenu_id <= 0) return;
  3029a6:	00 09       	nop	
		0 /* KEYWAIT_HALTON_TIMEROFF */,
		1 /* Delay in seconds */,
		0 /* Enable return to main menu */,
		&keycode);
}
  3029a8:	7e 2c       	add	#44,r14
  3029aa:	6f e3       	mov	r14,r15
  3029ac:	4f 26       	lds.l	@r15+,pr
  3029ae:	6e f6       	mov.l	@r15+,r14
  3029b0:	68 f6       	mov.l	@r15+,r8
  3029b2:	00 0b       	rts	
  3029b4:	00 09       	nop	
  3029b6:	01 7f       	mac.l	@r7+,@r1+
  3029b8:	03 00       	.word 0x0300
  3029ba:	03 18       	.word 0x0318
  3029bc:	00 d7       	mul.l	r13,r0
  3029be:	00 09       	nop	
  3029c0:	00 30       	.word 0x0030
  3029c2:	2d 94       	mov.b	r9,@-r13
  3029c4:	00 30       	.word 0x0030
  3029c6:	16 80       	mov.l	r8,@(0,r6)
  3029c8:	00 30       	.word 0x0030
  3029ca:	2d a4       	mov.b	r10,@-r13
  3029cc:	08 10       	.word 0x0810
  3029ce:	14 3c       	mov.l	r3,@(48,r4)
  3029d0:	00 30       	.word 0x0030
  3029d2:	28 28       	tst	r2,r8
  3029d4:	00 30       	.word 0x0030
  3029d6:	2d 34       	mov.b	r3,@-r13
  3029d8:	08 10       	.word 0x0810
  3029da:	14 c8       	mov.l	r12,@(32,r4)
  3029dc:	00 30       	.word 0x0030
  3029de:	2d 44       	mov.b	r4,@-r13
  3029e0:	00 30       	.word 0x0030
  3029e2:	2d 84       	mov.b	r8,@-r13

003029e4 <gint_osmenu>:

/* gint_osmenu() - switch out of gint and call the calculator's main menu */
void gint_osmenu(void)
{
  3029e4:	2f e6       	mov.l	r14,@-r15
  3029e6:	4f 22       	sts.l	pr,@-r15
  3029e8:	7f e8       	add	#-24,r15
  3029ea:	6e f3       	mov	r15,r14
	gint_world_switch(GINT_CALL(gint_osmenu_native));
  3029ec:	61 e3       	mov	r14,r1
  3029ee:	71 04       	add	#4,r1
  3029f0:	e2 00       	mov	#0,r2
  3029f2:	21 22       	mov.l	r2,@r1
  3029f4:	e2 00       	mov	#0,r2
  3029f6:	11 21       	mov.l	r2,@(4,r1)
  3029f8:	e2 00       	mov	#0,r2
  3029fa:	11 22       	mov.l	r2,@(8,r1)
  3029fc:	e2 00       	mov	#0,r2
  3029fe:	11 23       	mov.l	r2,@(12,r1)
  302a00:	e2 00       	mov	#0,r2
  302a02:	11 24       	mov.l	r2,@(16,r1)
  302a04:	61 e3       	mov	r14,r1
  302a06:	71 04       	add	#4,r1
  302a08:	d2 0a       	mov.l	302a34 <gint_osmenu+0x50>,r2	! 302870 <gint_osmenu_native>
  302a0a:	21 22       	mov.l	r2,@r1
  302a0c:	61 e3       	mov	r14,r1
  302a0e:	71 04       	add	#4,r1
  302a10:	62 13       	mov	r1,r2
  302a12:	72 10       	add	#16,r2
  302a14:	62 22       	mov.l	@r2,r2
  302a16:	2f 22       	mov.l	r2,@r15
  302a18:	64 12       	mov.l	@r1,r4
  302a1a:	55 11       	mov.l	@(4,r1),r5
  302a1c:	56 12       	mov.l	@(8,r1),r6
  302a1e:	57 13       	mov.l	@(12,r1),r7
  302a20:	d1 05       	mov.l	302a38 <gint_osmenu+0x54>,r1	! 303540 <gint_world_switch>
  302a22:	41 0b       	jsr	@r1
  302a24:	00 09       	nop	
}
  302a26:	00 09       	nop	
  302a28:	7e 18       	add	#24,r14
  302a2a:	6f e3       	mov	r14,r15
  302a2c:	4f 26       	lds.l	@r15+,pr
  302a2e:	6e f6       	mov.l	@r15+,r14
  302a30:	00 0b       	rts	
  302a32:	00 09       	nop	
  302a34:	00 30       	.word 0x0030
  302a36:	28 70       	mov.b	r7,@r8
  302a38:	00 30       	.word 0x0030
  302a3a:	35 40       	cmp/eq	r4,r5

00302a3c <__handler>:

static gint_call_t __gcall;
static bool __do_world_switch;

static void __handler()
{
  302a3c:	2f e6       	mov.l	r14,@-r15
  302a3e:	4f 22       	sts.l	pr,@-r15
  302a40:	7f c8       	add	#-56,r15
  302a42:	6e f3       	mov	r15,r14
	if(__do_world_switch){
  302a44:	d1 42       	mov.l	302b50 <__handler+0x114>,r1	! 81014e0 <__do_world_switch>
  302a46:	61 10       	mov.b	@r1,r1
  302a48:	61 1c       	extu.b	r1,r1
  302a4a:	21 18       	tst	r1,r1
  302a4c:	89 3b       	bt	302ac6 <__handler+0x8a>
  302a4e:	62 e3       	mov	r14,r2
  302a50:	d1 40       	mov.l	302b54 <__handler+0x118>,r1	! 81014cc <__gcall>
  302a52:	63 12       	mov.l	@r1,r3
  302a54:	22 32       	mov.l	r3,@r2
  302a56:	71 04       	add	#4,r1
  302a58:	63 12       	mov.l	@r1,r3
  302a5a:	12 31       	mov.l	r3,@(4,r2)
  302a5c:	71 04       	add	#4,r1
  302a5e:	63 12       	mov.l	@r1,r3
  302a60:	12 32       	mov.l	r3,@(8,r2)
  302a62:	71 04       	add	#4,r1
  302a64:	63 12       	mov.l	@r1,r3
  302a66:	12 33       	mov.l	r3,@(12,r2)
  302a68:	71 04       	add	#4,r1
  302a6a:	63 12       	mov.l	@r1,r3
  302a6c:	12 34       	mov.l	r3,@(16,r2)
  302a6e:	71 04       	add	#4,r1
	int (*f)(int r4, int r5, int r6, int r7) = cb.function;
  302a70:	61 e3       	mov	r14,r1
  302a72:	62 12       	mov.l	@r1,r2
  302a74:	61 e3       	mov	r14,r1
  302a76:	71 f8       	add	#-8,r1
  302a78:	11 2f       	mov.l	r2,@(60,r1)
        gint_call_arg_t *args = cb.args;
  302a7a:	61 e3       	mov	r14,r1
  302a7c:	71 f8       	add	#-8,r1
  302a7e:	62 e3       	mov	r14,r2
  302a80:	72 04       	add	#4,r2
  302a82:	11 2e       	mov.l	r2,@(56,r1)
	return f ? f(args[0].i, args[1].i, args[2].i, args[3].i) : -1;
  302a84:	61 e3       	mov	r14,r1
  302a86:	71 f8       	add	#-8,r1
  302a88:	51 1f       	mov.l	@(60,r1),r1
  302a8a:	21 18       	tst	r1,r1
  302a8c:	89 59       	bt	302b42 <__handler+0x106>
  302a8e:	61 e3       	mov	r14,r1
  302a90:	71 f8       	add	#-8,r1
  302a92:	51 1e       	mov.l	@(56,r1),r1
  302a94:	62 12       	mov.l	@r1,r2
  302a96:	61 e3       	mov	r14,r1
  302a98:	71 f8       	add	#-8,r1
  302a9a:	51 1e       	mov.l	@(56,r1),r1
  302a9c:	71 04       	add	#4,r1
  302a9e:	63 12       	mov.l	@r1,r3
  302aa0:	61 e3       	mov	r14,r1
  302aa2:	71 f8       	add	#-8,r1
  302aa4:	51 1e       	mov.l	@(56,r1),r1
  302aa6:	71 08       	add	#8,r1
  302aa8:	66 12       	mov.l	@r1,r6
  302aaa:	61 e3       	mov	r14,r1
  302aac:	71 f8       	add	#-8,r1
  302aae:	51 1e       	mov.l	@(56,r1),r1
  302ab0:	71 0c       	add	#12,r1
  302ab2:	67 12       	mov.l	@r1,r7
  302ab4:	61 e3       	mov	r14,r1
  302ab6:	71 f8       	add	#-8,r1
  302ab8:	51 1f       	mov.l	@(60,r1),r1
  302aba:	65 33       	mov	r3,r5
  302abc:	64 23       	mov	r2,r4
  302abe:	41 0b       	jsr	@r1
  302ac0:	00 09       	nop	
  302ac2:	a0 3e       	bra	302b42 <__handler+0x106>
  302ac4:	00 09       	nop	
  302ac6:	62 e3       	mov	r14,r2
  302ac8:	72 14       	add	#20,r2
  302aca:	d1 22       	mov.l	302b54 <__handler+0x118>,r1	! 81014cc <__gcall>
  302acc:	63 12       	mov.l	@r1,r3
  302ace:	22 32       	mov.l	r3,@r2
  302ad0:	71 04       	add	#4,r1
  302ad2:	63 12       	mov.l	@r1,r3
  302ad4:	12 31       	mov.l	r3,@(4,r2)
  302ad6:	71 04       	add	#4,r1
  302ad8:	63 12       	mov.l	@r1,r3
  302ada:	12 32       	mov.l	r3,@(8,r2)
  302adc:	71 04       	add	#4,r1
  302ade:	63 12       	mov.l	@r1,r3
  302ae0:	12 33       	mov.l	r3,@(12,r2)
  302ae2:	71 04       	add	#4,r1
  302ae4:	63 12       	mov.l	@r1,r3
  302ae6:	12 34       	mov.l	r3,@(16,r2)
  302ae8:	71 04       	add	#4,r1
	int (*f)(int r4, int r5, int r6, int r7) = cb.function;
  302aea:	61 e3       	mov	r14,r1
  302aec:	71 14       	add	#20,r1
  302aee:	62 12       	mov.l	@r1,r2
  302af0:	61 e3       	mov	r14,r1
  302af2:	71 f8       	add	#-8,r1
  302af4:	11 2d       	mov.l	r2,@(52,r1)
        gint_call_arg_t *args = cb.args;
  302af6:	61 e3       	mov	r14,r1
  302af8:	71 f8       	add	#-8,r1
  302afa:	62 e3       	mov	r14,r2
  302afc:	72 14       	add	#20,r2
  302afe:	72 04       	add	#4,r2
  302b00:	11 2c       	mov.l	r2,@(48,r1)
	return f ? f(args[0].i, args[1].i, args[2].i, args[3].i) : -1;
  302b02:	61 e3       	mov	r14,r1
  302b04:	71 f8       	add	#-8,r1
  302b06:	51 1d       	mov.l	@(52,r1),r1
  302b08:	21 18       	tst	r1,r1
  302b0a:	89 19       	bt	302b40 <__handler+0x104>
  302b0c:	61 e3       	mov	r14,r1
  302b0e:	71 f8       	add	#-8,r1
  302b10:	51 1c       	mov.l	@(48,r1),r1
  302b12:	62 12       	mov.l	@r1,r2
  302b14:	61 e3       	mov	r14,r1
  302b16:	71 f8       	add	#-8,r1
  302b18:	51 1c       	mov.l	@(48,r1),r1
  302b1a:	71 04       	add	#4,r1
  302b1c:	63 12       	mov.l	@r1,r3
  302b1e:	61 e3       	mov	r14,r1
  302b20:	71 f8       	add	#-8,r1
  302b22:	51 1c       	mov.l	@(48,r1),r1
  302b24:	71 08       	add	#8,r1
  302b26:	66 12       	mov.l	@r1,r6
  302b28:	61 e3       	mov	r14,r1
  302b2a:	71 f8       	add	#-8,r1
  302b2c:	51 1c       	mov.l	@(48,r1),r1
  302b2e:	71 0c       	add	#12,r1
  302b30:	67 12       	mov.l	@r1,r7
  302b32:	61 e3       	mov	r14,r1
  302b34:	71 f8       	add	#-8,r1
  302b36:	51 1d       	mov.l	@(52,r1),r1
  302b38:	65 33       	mov	r3,r5
  302b3a:	64 23       	mov	r2,r4
  302b3c:	41 0b       	jsr	@r1
  302b3e:	00 09       	nop	
  302b40:	00 09       	nop	
		gint_call(__gcall);
	}else{
		/* TODO: quit the world switch */
		gint_call(__gcall);
	}
}
  302b42:	00 09       	nop	
  302b44:	7e 38       	add	#56,r14
  302b46:	6f e3       	mov	r14,r15
  302b48:	4f 26       	lds.l	@r15+,pr
  302b4a:	6e f6       	mov.l	@r15+,r14
  302b4c:	00 0b       	rts	
  302b4e:	00 09       	nop	
  302b50:	08 10       	.word 0x0810
  302b52:	14 e0       	mov.l	r14,@(0,r4)
  302b54:	08 10       	.word 0x0810
  302b56:	14 cc       	mov.l	r12,@(48,r4)

00302b58 <__sethandler>:

static void __sethandler()
{
  302b58:	2f e6       	mov.l	r14,@-r15
  302b5a:	4f 22       	sts.l	pr,@-r15
  302b5c:	6e f3       	mov	r15,r14
	__SetQuitHandler((void *)__handler);
  302b5e:	d1 05       	mov.l	302b74 <__sethandler+0x1c>,r1	! 302a3c <__handler>
  302b60:	64 13       	mov	r1,r4
  302b62:	d1 05       	mov.l	302b78 <__sethandler+0x20>,r1	! 302dc4 <__SetQuitHandler>
  302b64:	41 0b       	jsr	@r1
  302b66:	00 09       	nop	
}
  302b68:	00 09       	nop	
  302b6a:	6f e3       	mov	r14,r15
  302b6c:	4f 26       	lds.l	@r15+,pr
  302b6e:	6e f6       	mov.l	@r15+,r14
  302b70:	00 0b       	rts	
  302b72:	00 09       	nop	
  302b74:	00 30       	.word 0x0030
  302b76:	2a 3c       	cmp/str	r3,r10
  302b78:	00 30       	.word 0x0030
  302b7a:	2d c4       	mov.b	r12,@-r13

00302b7c <gint_set_quit_handler>:

void gint_set_quit_handler(gint_call_t gcall, bool do_world_switch)
{
  302b7c:	7f f0       	add	#-16,r15
  302b7e:	2f e6       	mov.l	r14,@-r15
  302b80:	4f 22       	sts.l	pr,@-r15
  302b82:	7f e4       	add	#-28,r15
  302b84:	6e f3       	mov	r15,r14
  302b86:	1e 49       	mov.l	r4,@(36,r14)
  302b88:	1e 5a       	mov.l	r5,@(40,r14)
  302b8a:	1e 6b       	mov.l	r6,@(44,r14)
  302b8c:	1e 7c       	mov.l	r7,@(48,r14)
  302b8e:	52 ee       	mov.l	@(56,r14),r2
  302b90:	61 e3       	mov	r14,r1
  302b92:	71 fc       	add	#-4,r1
  302b94:	60 23       	mov	r2,r0
  302b96:	80 18       	mov.b	r0,@(8,r1)
	__gcall = gcall;
  302b98:	d2 1e       	mov.l	302c14 <gint_set_quit_handler+0x98>,r2	! 81014cc <__gcall>
  302b9a:	61 e3       	mov	r14,r1
  302b9c:	71 24       	add	#36,r1
  302b9e:	63 12       	mov.l	@r1,r3
  302ba0:	22 32       	mov.l	r3,@r2
  302ba2:	71 04       	add	#4,r1
  302ba4:	63 12       	mov.l	@r1,r3
  302ba6:	12 31       	mov.l	r3,@(4,r2)
  302ba8:	71 04       	add	#4,r1
  302baa:	63 12       	mov.l	@r1,r3
  302bac:	12 32       	mov.l	r3,@(8,r2)
  302bae:	71 04       	add	#4,r1
  302bb0:	63 12       	mov.l	@r1,r3
  302bb2:	12 33       	mov.l	r3,@(12,r2)
  302bb4:	71 04       	add	#4,r1
  302bb6:	63 12       	mov.l	@r1,r3
  302bb8:	12 34       	mov.l	r3,@(16,r2)
  302bba:	71 04       	add	#4,r1
	__do_world_switch = do_world_switch;
  302bbc:	d1 16       	mov.l	302c18 <gint_set_quit_handler+0x9c>,r1	! 81014e0 <__do_world_switch>
  302bbe:	62 e3       	mov	r14,r2
  302bc0:	72 fc       	add	#-4,r2
  302bc2:	84 28       	mov.b	@(8,r2),r0
  302bc4:	62 03       	mov	r0,r2
  302bc6:	21 20       	mov.b	r2,@r1
	gint_world_switch(GINT_CALL(__sethandler));
  302bc8:	61 e3       	mov	r14,r1
  302bca:	71 08       	add	#8,r1
  302bcc:	e2 00       	mov	#0,r2
  302bce:	21 22       	mov.l	r2,@r1
  302bd0:	e2 00       	mov	#0,r2
  302bd2:	11 21       	mov.l	r2,@(4,r1)
  302bd4:	e2 00       	mov	#0,r2
  302bd6:	11 22       	mov.l	r2,@(8,r1)
  302bd8:	e2 00       	mov	#0,r2
  302bda:	11 23       	mov.l	r2,@(12,r1)
  302bdc:	e2 00       	mov	#0,r2
  302bde:	11 24       	mov.l	r2,@(16,r1)
  302be0:	61 e3       	mov	r14,r1
  302be2:	71 08       	add	#8,r1
  302be4:	d2 0d       	mov.l	302c1c <gint_set_quit_handler+0xa0>,r2	! 302b58 <__sethandler>
  302be6:	21 22       	mov.l	r2,@r1
  302be8:	61 e3       	mov	r14,r1
  302bea:	71 08       	add	#8,r1
  302bec:	62 13       	mov	r1,r2
  302bee:	72 10       	add	#16,r2
  302bf0:	62 22       	mov.l	@r2,r2
  302bf2:	2f 22       	mov.l	r2,@r15
  302bf4:	64 12       	mov.l	@r1,r4
  302bf6:	55 11       	mov.l	@(4,r1),r5
  302bf8:	56 12       	mov.l	@(8,r1),r6
  302bfa:	57 13       	mov.l	@(12,r1),r7
  302bfc:	d1 08       	mov.l	302c20 <gint_set_quit_handler+0xa4>,r1	! 303540 <gint_world_switch>
  302bfe:	41 0b       	jsr	@r1
  302c00:	00 09       	nop	
}
  302c02:	00 09       	nop	
  302c04:	7e 1c       	add	#28,r14
  302c06:	6f e3       	mov	r14,r15
  302c08:	4f 26       	lds.l	@r15+,pr
  302c0a:	6e f6       	mov.l	@r15+,r14
  302c0c:	7f 10       	add	#16,r15
  302c0e:	00 0b       	rts	
  302c10:	00 09       	nop	
  302c12:	00 09       	nop	
  302c14:	08 10       	.word 0x0810
  302c16:	14 cc       	mov.l	r12,@(48,r4)
  302c18:	08 10       	.word 0x0810
  302c1a:	14 e0       	mov.l	r14,@(0,r4)
  302c1c:	00 30       	.word 0x0030
  302c1e:	2b 58       	tst	r5,r11
  302c20:	00 30       	.word 0x0030
  302c22:	35 40       	cmp/eq	r4,r5
	...

00302c30 <__malloc>:
  302c30:	d2 70       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c32:	d0 03       	mov.l	302c40 <__malloc+0x10>,r0	! 1f44
  302c34:	42 2b       	jmp	@r2
  302c36:	00 09       	nop	
  302c38:	00 09       	nop	
  302c3a:	00 09       	nop	
  302c3c:	00 09       	nop	
  302c3e:	00 09       	nop	
  302c40:	00 00       	.word 0x0000
  302c42:	1f 44       	mov.l	r4,@(16,r15)

00302c44 <__free>:
  302c44:	d2 6b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c46:	d0 02       	mov.l	302c50 <__free+0xc>,r0	! 1f42
  302c48:	42 2b       	jmp	@r2
  302c4a:	00 09       	nop	
  302c4c:	00 09       	nop	
  302c4e:	00 09       	nop	
  302c50:	00 00       	.word 0x0000
  302c52:	1f 42       	mov.l	r4,@(8,r15)

00302c54 <__realloc>:
  302c54:	d2 67       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c56:	d0 02       	mov.l	302c60 <__realloc+0xc>,r0	! 1f46
  302c58:	42 2b       	jmp	@r2
  302c5a:	00 09       	nop	
  302c5c:	00 09       	nop	
  302c5e:	00 09       	nop	
  302c60:	00 00       	.word 0x0000
  302c62:	1f 46       	mov.l	r4,@(24,r15)

00302c64 <BFile_Remove>:
  302c64:	d2 63       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c66:	d0 02       	mov.l	302c70 <BFile_Remove+0xc>,r0	! 1db4
  302c68:	42 2b       	jmp	@r2
  302c6a:	00 09       	nop	
  302c6c:	00 09       	nop	
  302c6e:	00 09       	nop	
  302c70:	00 00       	.word 0x0000
  302c72:	1d b4       	mov.l	r11,@(16,r13)

00302c74 <BFile_Rename>:
  302c74:	d2 5f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c76:	d0 02       	mov.l	302c80 <BFile_Rename+0xc>,r0	! 1db3
  302c78:	42 2b       	jmp	@r2
  302c7a:	00 09       	nop	
  302c7c:	00 09       	nop	
  302c7e:	00 09       	nop	
  302c80:	00 00       	.word 0x0000
  302c82:	1d b3       	mov.l	r11,@(12,r13)

00302c84 <BFile_Create>:
  302c84:	d2 5b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c86:	d0 02       	mov.l	302c90 <BFile_Create+0xc>,r0	! 1dae
  302c88:	42 2b       	jmp	@r2
  302c8a:	00 09       	nop	
  302c8c:	00 09       	nop	
  302c8e:	00 09       	nop	
  302c90:	00 00       	.word 0x0000
  302c92:	1d ae       	mov.l	r10,@(56,r13)

00302c94 <BFile_Open>:
  302c94:	e6 00       	mov	#0,r6
  302c96:	d2 57       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302c98:	d0 01       	mov.l	302ca0 <BFile_Open+0xc>,r0	! 1da3
  302c9a:	42 2b       	jmp	@r2
  302c9c:	00 09       	nop	
  302c9e:	00 09       	nop	
  302ca0:	00 00       	.word 0x0000
  302ca2:	1d a3       	mov.l	r10,@(12,r13)

00302ca4 <BFile_Close>:
  302ca4:	d2 53       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302ca6:	d0 02       	mov.l	302cb0 <BFile_Close+0xc>,r0	! 1da4
  302ca8:	42 2b       	jmp	@r2
  302caa:	00 09       	nop	
  302cac:	00 09       	nop	
  302cae:	00 09       	nop	
  302cb0:	00 00       	.word 0x0000
  302cb2:	1d a4       	mov.l	r10,@(16,r13)

00302cb4 <BFile_Size>:
  302cb4:	d2 4f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302cb6:	d0 02       	mov.l	302cc0 <BFile_Size+0xc>,r0	! 1da6
  302cb8:	42 2b       	jmp	@r2
  302cba:	00 09       	nop	
  302cbc:	00 09       	nop	
  302cbe:	00 09       	nop	
  302cc0:	00 00       	.word 0x0000
  302cc2:	1d a6       	mov.l	r10,@(24,r13)

00302cc4 <BFile_Seek>:
  302cc4:	d2 4b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302cc6:	d0 02       	mov.l	302cd0 <BFile_Seek+0xc>,r0	! 1da9
  302cc8:	42 2b       	jmp	@r2
  302cca:	00 09       	nop	
  302ccc:	00 09       	nop	
  302cce:	00 09       	nop	
  302cd0:	00 00       	.word 0x0000
  302cd2:	1d a9       	mov.l	r10,@(36,r13)

00302cd4 <BFile_GetPos>:
  302cd4:	d2 47       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302cd6:	d0 02       	mov.l	302ce0 <BFile_GetPos+0xc>,r0	! 1dab
  302cd8:	42 2b       	jmp	@r2
  302cda:	00 09       	nop	
  302cdc:	00 09       	nop	
  302cde:	00 09       	nop	
  302ce0:	00 00       	.word 0x0000
  302ce2:	1d ab       	mov.l	r10,@(44,r13)

00302ce4 <BFile_Write>:
  302ce4:	d2 43       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302ce6:	d0 02       	mov.l	302cf0 <BFile_Write+0xc>,r0	! 1daf
  302ce8:	42 2b       	jmp	@r2
  302cea:	00 09       	nop	
  302cec:	00 09       	nop	
  302cee:	00 09       	nop	
  302cf0:	00 00       	.word 0x0000
  302cf2:	1d af       	mov.l	r10,@(60,r13)

00302cf4 <BFile_Read>:
  302cf4:	d2 3f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302cf6:	d0 02       	mov.l	302d00 <BFile_Read+0xc>,r0	! 1dac
  302cf8:	42 2b       	jmp	@r2
  302cfa:	00 09       	nop	
  302cfc:	00 09       	nop	
  302cfe:	00 09       	nop	
  302d00:	00 00       	.word 0x0000
  302d02:	1d ac       	mov.l	r10,@(48,r13)

00302d04 <BFile_FindFirst>:
  302d04:	d2 3b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d06:	d0 02       	mov.l	302d10 <BFile_FindFirst+0xc>,r0	! 1db6
  302d08:	42 2b       	jmp	@r2
  302d0a:	00 09       	nop	
  302d0c:	00 09       	nop	
  302d0e:	00 09       	nop	
  302d10:	00 00       	.word 0x0000
  302d12:	1d b6       	mov.l	r11,@(24,r13)

00302d14 <BFile_FindNext>:
  302d14:	d2 37       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d16:	d0 02       	mov.l	302d20 <BFile_FindNext+0xc>,r0	! 1db8
  302d18:	42 2b       	jmp	@r2
  302d1a:	00 09       	nop	
  302d1c:	00 09       	nop	
  302d1e:	00 09       	nop	
  302d20:	00 00       	.word 0x0000
  302d22:	1d b8       	mov.l	r11,@(32,r13)

00302d24 <BFile_FindClose>:
  302d24:	d2 33       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d26:	d0 02       	mov.l	302d30 <BFile_FindClose+0xc>,r0	! 1dba
  302d28:	42 2b       	jmp	@r2
  302d2a:	00 09       	nop	
  302d2c:	00 09       	nop	
  302d2e:	00 09       	nop	
  302d30:	00 00       	.word 0x0000
  302d32:	1d ba       	mov.l	r11,@(40,r13)

00302d34 <__Timer_Install>:
  302d34:	d2 2f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d36:	d0 02       	mov.l	302d40 <__Timer_Install+0xc>,r0	! 8d9
  302d38:	42 2b       	jmp	@r2
  302d3a:	00 09       	nop	
  302d3c:	00 09       	nop	
  302d3e:	00 09       	nop	
  302d40:	00 00       	.word 0x0000
  302d42:	08 d9       	.word 0x08d9

00302d44 <__Timer_Start>:
  302d44:	d2 2b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d46:	d0 02       	mov.l	302d50 <__Timer_Start+0xc>,r0	! 8db
  302d48:	42 2b       	jmp	@r2
  302d4a:	00 09       	nop	
  302d4c:	00 09       	nop	
  302d4e:	00 09       	nop	
  302d50:	00 00       	.word 0x0000
  302d52:	08 db       	.word 0x08db

00302d54 <__Timer_Stop>:
  302d54:	d2 27       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d56:	d0 02       	mov.l	302d60 <__Timer_Stop+0xc>,r0	! 8dc
  302d58:	42 2b       	jmp	@r2
  302d5a:	00 09       	nop	
  302d5c:	00 09       	nop	
  302d5e:	00 09       	nop	
  302d60:	00 00       	.word 0x0000
  302d62:	08 dc       	mov.b	@(r0,r13),r8

00302d64 <__Timer_Deinstall>:
  302d64:	d2 23       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d66:	d0 02       	mov.l	302d70 <__Timer_Deinstall+0xc>,r0	! 8da
  302d68:	42 2b       	jmp	@r2
  302d6a:	00 09       	nop	
  302d6c:	00 09       	nop	
  302d6e:	00 09       	nop	
  302d70:	00 00       	.word 0x0000
  302d72:	08 da       	.word 0x08da

00302d74 <__PutKeyCode>:
  302d74:	d2 1f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d76:	d0 02       	mov.l	302d80 <__PutKeyCode+0xc>,r0	! 12c6
  302d78:	42 2b       	jmp	@r2
  302d7a:	00 09       	nop	
  302d7c:	00 09       	nop	
  302d7e:	00 09       	nop	
  302d80:	00 00       	.word 0x0000
  302d82:	12 c6       	mov.l	r12,@(24,r2)

00302d84 <__GetKeyWait>:
  302d84:	d2 1b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d86:	d0 02       	mov.l	302d90 <__GetKeyWait+0xc>,r0	! 12bf
  302d88:	42 2b       	jmp	@r2
  302d8a:	00 09       	nop	
  302d8c:	00 09       	nop	
  302d8e:	00 09       	nop	
  302d90:	00 00       	.word 0x0000
  302d92:	12 bf       	mov.l	r11,@(60,r2)

00302d94 <__ClearKeyBuffer>:
  302d94:	d2 17       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302d96:	d0 02       	mov.l	302da0 <__ClearKeyBuffer+0xc>,r0	! 12c7
  302d98:	42 2b       	jmp	@r2
  302d9a:	00 09       	nop	
  302d9c:	00 09       	nop	
  302d9e:	00 09       	nop	
  302da0:	00 00       	.word 0x0000
  302da2:	12 c7       	mov.l	r12,@(28,r2)

00302da4 <__GetVRAMAddress>:
  302da4:	d2 13       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302da6:	d0 02       	mov.l	302db0 <__GetVRAMAddress+0xc>,r0	! 1e6
  302da8:	42 2b       	jmp	@r2
  302daa:	00 09       	nop	
  302dac:	00 09       	nop	
  302dae:	00 09       	nop	
  302db0:	00 00       	.word 0x0000
  302db2:	01 e6       	mov.l	r14,@(r0,r1)

00302db4 <__ConfigureStatusArea>:
  302db4:	d2 0f       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302db6:	d0 02       	mov.l	302dc0 <__ConfigureStatusArea+0xc>,r0	! 2b7
  302db8:	42 2b       	jmp	@r2
  302dba:	00 09       	nop	
  302dbc:	00 09       	nop	
  302dbe:	00 09       	nop	
  302dc0:	00 00       	.word 0x0000
  302dc2:	02 b7       	mul.l	r11,r2

00302dc4 <__SetQuitHandler>:
  302dc4:	d2 0b       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302dc6:	d0 02       	mov.l	302dd0 <__SetQuitHandler+0xc>,r0	! 1e6e
  302dc8:	42 2b       	jmp	@r2
  302dca:	00 09       	nop	
  302dcc:	00 09       	nop	
  302dce:	00 09       	nop	
  302dd0:	00 00       	.word 0x0000
  302dd2:	1e 6e       	mov.l	r6,@(56,r14)

00302dd4 <__SpecialMatrixCodeProcessing>:
  302dd4:	d2 07       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302dd6:	d0 02       	mov.l	302de0 <__SpecialMatrixCodeProcessing+0xc>,r0	! 1e60
  302dd8:	42 2b       	jmp	@r2
  302dda:	00 09       	nop	
  302ddc:	00 09       	nop	
  302dde:	00 09       	nop	
  302de0:	00 00       	.word 0x0000
  302de2:	1e 60       	mov.l	r6,@(0,r14)

00302de4 <__Reset>:
  302de4:	d2 03       	mov.l	302df4 <syscall_table>,r2	! 80020070
  302de6:	d0 02       	mov.l	302df0 <__Reset+0xc>,r0	! 1187
  302de8:	42 2b       	jmp	@r2
  302dea:	00 09       	nop	
  302dec:	00 09       	nop	
  302dee:	00 09       	nop	
  302df0:	00 00       	.word 0x0000
  302df2:	11 87       	mov.l	r8,@(28,r1)

00302df4 <syscall_table>:
  302df4:	80 02       	mov.b	r0,@(2,r0)
  302df6:	00 70       	.word 0x0070
  302df8:	00 09       	nop	
  302dfa:	00 09       	nop	
  302dfc:	00 09       	nop	
  302dfe:	00 09       	nop	

00302e00 <GINT_CALL_SET_function>:
{
  302e00:	2f e6       	mov.l	r14,@-r15
  302e02:	7f fc       	add	#-4,r15
  302e04:	6e f3       	mov	r15,r14
  302e06:	61 e3       	mov	r14,r1
  302e08:	71 c4       	add	#-60,r1
  302e0a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  302e0c:	61 e3       	mov	r14,r1
  302e0e:	71 c4       	add	#-60,r1
  302e10:	51 1f       	mov.l	@(60,r1),r1
  302e12:	e2 01       	mov	#1,r2
  302e14:	21 22       	mov.l	r2,@r1
	return 0;
  302e16:	e1 00       	mov	#0,r1
}
  302e18:	60 13       	mov	r1,r0
  302e1a:	7e 04       	add	#4,r14
  302e1c:	6f e3       	mov	r14,r15
  302e1e:	6e f6       	mov.l	@r15+,r14
  302e20:	00 0b       	rts	
  302e22:	00 09       	nop	

00302e24 <GINT_CALL_INC_function>:
{
  302e24:	2f e6       	mov.l	r14,@-r15
  302e26:	7f fc       	add	#-4,r15
  302e28:	6e f3       	mov	r15,r14
  302e2a:	61 e3       	mov	r14,r1
  302e2c:	71 c4       	add	#-60,r1
  302e2e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  302e30:	61 e3       	mov	r14,r1
  302e32:	71 c4       	add	#-60,r1
  302e34:	51 1f       	mov.l	@(60,r1),r1
  302e36:	61 12       	mov.l	@r1,r1
  302e38:	62 13       	mov	r1,r2
  302e3a:	72 01       	add	#1,r2
  302e3c:	61 e3       	mov	r14,r1
  302e3e:	71 c4       	add	#-60,r1
  302e40:	51 1f       	mov.l	@(60,r1),r1
  302e42:	21 22       	mov.l	r2,@r1
	return 0;
  302e44:	e1 00       	mov	#0,r1
}
  302e46:	60 13       	mov	r1,r0
  302e48:	7e 04       	add	#4,r14
  302e4a:	6f e3       	mov	r14,r15
  302e4c:	6e f6       	mov.l	@r15+,r14
  302e4e:	00 0b       	rts	
  302e50:	00 09       	nop	

00302e52 <GINT_CALL_SET_STOP_function>:
{
  302e52:	2f e6       	mov.l	r14,@-r15
  302e54:	7f fc       	add	#-4,r15
  302e56:	6e f3       	mov	r15,r14
  302e58:	61 e3       	mov	r14,r1
  302e5a:	71 c4       	add	#-60,r1
  302e5c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  302e5e:	61 e3       	mov	r14,r1
  302e60:	71 c4       	add	#-60,r1
  302e62:	51 1f       	mov.l	@(60,r1),r1
  302e64:	e2 01       	mov	#1,r2
  302e66:	21 22       	mov.l	r2,@r1
	return 1;
  302e68:	e1 01       	mov	#1,r1
}
  302e6a:	60 13       	mov	r1,r0
  302e6c:	7e 04       	add	#4,r14
  302e6e:	6f e3       	mov	r14,r15
  302e70:	6e f6       	mov.l	@r15+,r14
  302e72:	00 0b       	rts	
  302e74:	00 09       	nop	

00302e76 <GINT_CALL_INC_STOP_function>:
{
  302e76:	2f e6       	mov.l	r14,@-r15
  302e78:	7f fc       	add	#-4,r15
  302e7a:	6e f3       	mov	r15,r14
  302e7c:	61 e3       	mov	r14,r1
  302e7e:	71 c4       	add	#-60,r1
  302e80:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  302e82:	61 e3       	mov	r14,r1
  302e84:	71 c4       	add	#-60,r1
  302e86:	51 1f       	mov.l	@(60,r1),r1
  302e88:	61 12       	mov.l	@r1,r1
  302e8a:	62 13       	mov	r1,r2
  302e8c:	72 01       	add	#1,r2
  302e8e:	61 e3       	mov	r14,r1
  302e90:	71 c4       	add	#-60,r1
  302e92:	51 1f       	mov.l	@(60,r1),r1
  302e94:	21 22       	mov.l	r2,@r1
	return 1;
  302e96:	e1 01       	mov	#1,r1
}
  302e98:	60 13       	mov	r1,r0
  302e9a:	7e 04       	add	#4,r14
  302e9c:	6f e3       	mov	r14,r15
  302e9e:	6e f6       	mov.l	@r15+,r14
  302ea0:	00 0b       	rts	
  302ea2:	00 09       	nop	

00302ea4 <gint_world_alloc>:
//---
// World buffer
//---

gint_world_t gint_world_alloc(void)
{
  302ea4:	2f 86       	mov.l	r8,@-r15
  302ea6:	2f e6       	mov.l	r14,@-r15
  302ea8:	4f 22       	sts.l	pr,@-r15
  302eaa:	7f e8       	add	#-24,r15
  302eac:	6e f3       	mov	r15,r14
	size_t header_size = gint_driver_count() * sizeof(void *);
  302eae:	d2 58       	mov.l	303010 <gint_world_alloc+0x16c>,r2	! 30d0f0 <gint_drivers_end>
  302eb0:	d1 58       	mov.l	303014 <gint_world_alloc+0x170>,r1	! 30d000 <drv_cpu>
  302eb2:	32 18       	sub	r1,r2
  302eb4:	e1 fc       	mov	#-4,r1
  302eb6:	42 1c       	shad	r1,r2
  302eb8:	d1 57       	mov.l	303018 <gint_world_alloc+0x174>,r1	! aaaaaaab
  302eba:	02 17       	mul.l	r1,r2
  302ebc:	01 1a       	sts	macl,r1
  302ebe:	62 13       	mov	r1,r2
  302ec0:	61 e3       	mov	r14,r1
  302ec2:	71 d8       	add	#-40,r1
  302ec4:	42 08       	shll2	r2
  302ec6:	11 2b       	mov.l	r2,@(44,r1)
	size_t data_size = 0;
  302ec8:	61 e3       	mov	r14,r1
  302eca:	71 d8       	add	#-40,r1
  302ecc:	e2 00       	mov	#0,r2
  302ece:	11 2f       	mov.l	r2,@(60,r1)

	for(int i = 0; i < gint_driver_count(); i++)
  302ed0:	61 e3       	mov	r14,r1
  302ed2:	71 d8       	add	#-40,r1
  302ed4:	e2 00       	mov	#0,r2
  302ed6:	11 2e       	mov.l	r2,@(56,r1)
  302ed8:	a0 1d       	bra	302f16 <gint_world_alloc+0x72>
  302eda:	00 09       	nop	
		data_size += (gint_drivers[i].state_size + 3) & ~3;
  302edc:	d1 4d       	mov.l	303014 <gint_world_alloc+0x170>,r1	! 30d000 <drv_cpu>
  302ede:	62 e3       	mov	r14,r2
  302ee0:	72 d8       	add	#-40,r2
  302ee2:	53 2e       	mov.l	@(56,r2),r3
  302ee4:	e2 30       	mov	#48,r2
  302ee6:	03 27       	mul.l	r2,r3
  302ee8:	02 1a       	sts	macl,r2
  302eea:	31 2c       	add	r2,r1
  302eec:	71 2c       	add	#44,r1
  302eee:	61 11       	mov.w	@r1,r1
  302ef0:	61 1d       	extu.w	r1,r1
  302ef2:	71 03       	add	#3,r1
  302ef4:	62 13       	mov	r1,r2
  302ef6:	e1 fc       	mov	#-4,r1
  302ef8:	22 19       	and	r1,r2
  302efa:	61 e3       	mov	r14,r1
  302efc:	71 d8       	add	#-40,r1
  302efe:	63 e3       	mov	r14,r3
  302f00:	73 d8       	add	#-40,r3
  302f02:	53 3f       	mov.l	@(60,r3),r3
  302f04:	32 3c       	add	r3,r2
  302f06:	11 2f       	mov.l	r2,@(60,r1)
	for(int i = 0; i < gint_driver_count(); i++)
  302f08:	61 e3       	mov	r14,r1
  302f0a:	71 d8       	add	#-40,r1
  302f0c:	62 e3       	mov	r14,r2
  302f0e:	72 d8       	add	#-40,r2
  302f10:	52 2e       	mov.l	@(56,r2),r2
  302f12:	72 01       	add	#1,r2
  302f14:	11 2e       	mov.l	r2,@(56,r1)
  302f16:	d2 3e       	mov.l	303010 <gint_world_alloc+0x16c>,r2	! 30d0f0 <gint_drivers_end>
  302f18:	d1 3e       	mov.l	303014 <gint_world_alloc+0x170>,r1	! 30d000 <drv_cpu>
  302f1a:	32 18       	sub	r1,r2
  302f1c:	e1 fc       	mov	#-4,r1
  302f1e:	42 1c       	shad	r1,r2
  302f20:	d1 3d       	mov.l	303018 <gint_world_alloc+0x174>,r1	! aaaaaaab
  302f22:	02 17       	mul.l	r1,r2
  302f24:	01 1a       	sts	macl,r1
  302f26:	62 13       	mov	r1,r2
  302f28:	61 e3       	mov	r14,r1
  302f2a:	71 d8       	add	#-40,r1
  302f2c:	51 1e       	mov.l	@(56,r1),r1
  302f2e:	31 23       	cmp/ge	r2,r1
  302f30:	8b d4       	bf	302edc <gint_world_alloc+0x38>

	void *buffer = malloc(header_size + data_size);
  302f32:	62 e3       	mov	r14,r2
  302f34:	72 d8       	add	#-40,r2
  302f36:	61 e3       	mov	r14,r1
  302f38:	71 d8       	add	#-40,r1
  302f3a:	52 2b       	mov.l	@(44,r2),r2
  302f3c:	51 1f       	mov.l	@(60,r1),r1
  302f3e:	31 2c       	add	r2,r1
  302f40:	68 e3       	mov	r14,r8
  302f42:	78 d8       	add	#-40,r8
  302f44:	64 13       	mov	r1,r4
  302f46:	d1 35       	mov.l	30301c <gint_world_alloc+0x178>,r1	! 30af64 <malloc>
  302f48:	41 0b       	jsr	@r1
  302f4a:	00 09       	nop	
  302f4c:	61 03       	mov	r0,r1
  302f4e:	18 1d       	mov.l	r1,@(52,r8)
	if(!buffer) return NULL;
  302f50:	61 e3       	mov	r14,r1
  302f52:	71 d8       	add	#-40,r1
  302f54:	51 1d       	mov.l	@(52,r1),r1
  302f56:	21 18       	tst	r1,r1
  302f58:	8b 02       	bf	302f60 <gint_world_alloc+0xbc>
  302f5a:	e1 00       	mov	#0,r1
  302f5c:	a0 50       	bra	303000 <gint_world_alloc+0x15c>
  302f5e:	00 09       	nop	

	gint_world_t world = buffer;
  302f60:	61 e3       	mov	r14,r1
  302f62:	71 d8       	add	#-40,r1
  302f64:	62 e3       	mov	r14,r2
  302f66:	72 d8       	add	#-40,r2
  302f68:	52 2d       	mov.l	@(52,r2),r2
  302f6a:	11 2a       	mov.l	r2,@(40,r1)
	buffer += header_size;
  302f6c:	61 e3       	mov	r14,r1
  302f6e:	71 d8       	add	#-40,r1
  302f70:	63 e3       	mov	r14,r3
  302f72:	73 d8       	add	#-40,r3
  302f74:	62 e3       	mov	r14,r2
  302f76:	72 d8       	add	#-40,r2
  302f78:	53 3d       	mov.l	@(52,r3),r3
  302f7a:	52 2b       	mov.l	@(44,r2),r2
  302f7c:	32 3c       	add	r3,r2
  302f7e:	11 2d       	mov.l	r2,@(52,r1)

	for(int i = 0; i < gint_driver_count(); i++)
  302f80:	61 e3       	mov	r14,r1
  302f82:	71 d8       	add	#-40,r1
  302f84:	e2 00       	mov	#0,r2
  302f86:	11 2c       	mov.l	r2,@(48,r1)
  302f88:	a0 29       	bra	302fde <gint_world_alloc+0x13a>
  302f8a:	00 09       	nop	
	{
		world[i] = buffer;
  302f8c:	61 e3       	mov	r14,r1
  302f8e:	71 d8       	add	#-40,r1
  302f90:	51 1c       	mov.l	@(48,r1),r1
  302f92:	41 08       	shll2	r1
  302f94:	62 e3       	mov	r14,r2
  302f96:	72 d8       	add	#-40,r2
  302f98:	52 2a       	mov.l	@(40,r2),r2
  302f9a:	31 2c       	add	r2,r1
  302f9c:	62 e3       	mov	r14,r2
  302f9e:	72 d8       	add	#-40,r2
  302fa0:	52 2d       	mov.l	@(52,r2),r2
  302fa2:	21 22       	mov.l	r2,@r1
		buffer += (gint_drivers[i].state_size + 3) & ~3;
  302fa4:	d1 1b       	mov.l	303014 <gint_world_alloc+0x170>,r1	! 30d000 <drv_cpu>
  302fa6:	62 e3       	mov	r14,r2
  302fa8:	72 d8       	add	#-40,r2
  302faa:	53 2c       	mov.l	@(48,r2),r3
  302fac:	e2 30       	mov	#48,r2
  302fae:	03 27       	mul.l	r2,r3
  302fb0:	02 1a       	sts	macl,r2
  302fb2:	31 2c       	add	r2,r1
  302fb4:	71 2c       	add	#44,r1
  302fb6:	61 11       	mov.w	@r1,r1
  302fb8:	61 1d       	extu.w	r1,r1
  302fba:	71 03       	add	#3,r1
  302fbc:	62 13       	mov	r1,r2
  302fbe:	e1 fc       	mov	#-4,r1
  302fc0:	22 19       	and	r1,r2
  302fc2:	61 e3       	mov	r14,r1
  302fc4:	71 d8       	add	#-40,r1
  302fc6:	63 e3       	mov	r14,r3
  302fc8:	73 d8       	add	#-40,r3
  302fca:	53 3d       	mov.l	@(52,r3),r3
  302fcc:	32 3c       	add	r3,r2
  302fce:	11 2d       	mov.l	r2,@(52,r1)
	for(int i = 0; i < gint_driver_count(); i++)
  302fd0:	61 e3       	mov	r14,r1
  302fd2:	71 d8       	add	#-40,r1
  302fd4:	62 e3       	mov	r14,r2
  302fd6:	72 d8       	add	#-40,r2
  302fd8:	52 2c       	mov.l	@(48,r2),r2
  302fda:	72 01       	add	#1,r2
  302fdc:	11 2c       	mov.l	r2,@(48,r1)
  302fde:	d2 0c       	mov.l	303010 <gint_world_alloc+0x16c>,r2	! 30d0f0 <gint_drivers_end>
  302fe0:	d1 0c       	mov.l	303014 <gint_world_alloc+0x170>,r1	! 30d000 <drv_cpu>
  302fe2:	32 18       	sub	r1,r2
  302fe4:	e1 fc       	mov	#-4,r1
  302fe6:	42 1c       	shad	r1,r2
  302fe8:	d1 0b       	mov.l	303018 <gint_world_alloc+0x174>,r1	! aaaaaaab
  302fea:	02 17       	mul.l	r1,r2
  302fec:	01 1a       	sts	macl,r1
  302fee:	62 13       	mov	r1,r2
  302ff0:	61 e3       	mov	r14,r1
  302ff2:	71 d8       	add	#-40,r1
  302ff4:	51 1c       	mov.l	@(48,r1),r1
  302ff6:	31 23       	cmp/ge	r2,r1
  302ff8:	8b c8       	bf	302f8c <gint_world_alloc+0xe8>
	}

	return world;
  302ffa:	61 e3       	mov	r14,r1
  302ffc:	71 d8       	add	#-40,r1
  302ffe:	51 1a       	mov.l	@(40,r1),r1
}
  303000:	60 13       	mov	r1,r0
  303002:	7e 18       	add	#24,r14
  303004:	6f e3       	mov	r14,r15
  303006:	4f 26       	lds.l	@r15+,pr
  303008:	6e f6       	mov.l	@r15+,r14
  30300a:	68 f6       	mov.l	@r15+,r8
  30300c:	00 0b       	rts	
  30300e:	00 09       	nop	
  303010:	00 30       	.word 0x0030
  303012:	d0 f0       	mov.l	3033d4 <gint_world_switch_out+0x70>,r0	! 71dc511f
  303014:	00 30       	.word 0x0030
  303016:	d0 00       	mov.l	303018 <gint_world_alloc+0x174>,r0	! aaaaaaab
  303018:	aa aa       	bra	302570 <kinit+0x19c>
  30301a:	aa ab       	bra	302574 <kinit+0x1a0>
  30301c:	00 30       	.word 0x0030
  30301e:	af 64       	bra	302eea <gint_world_alloc+0x46>

00303020 <gint_world_free>:

void gint_world_free(gint_world_t world)
{
  303020:	2f e6       	mov.l	r14,@-r15
  303022:	4f 22       	sts.l	pr,@-r15
  303024:	7f fc       	add	#-4,r15
  303026:	6e f3       	mov	r15,r14
  303028:	61 e3       	mov	r14,r1
  30302a:	71 c4       	add	#-60,r1
  30302c:	11 4f       	mov.l	r4,@(60,r1)
	free(world);
  30302e:	61 e3       	mov	r14,r1
  303030:	71 c4       	add	#-60,r1
  303032:	54 1f       	mov.l	@(60,r1),r4
  303034:	d1 04       	mov.l	303048 <gint_world_free+0x28>,r1	! 30af58 <free>
  303036:	41 0b       	jsr	@r1
  303038:	00 09       	nop	
}
  30303a:	00 09       	nop	
  30303c:	7e 04       	add	#4,r14
  30303e:	6f e3       	mov	r14,r15
  303040:	4f 26       	lds.l	@r15+,pr
  303042:	6e f6       	mov.l	@r15+,r14
  303044:	00 0b       	rts	
  303046:	00 09       	nop	
  303048:	00 30       	.word 0x0030
  30304a:	af 58       	bra	302efe <gint_world_alloc+0x5a>

0030304c <gint_world_sync>:
//---
// Synchronization
//---

void gint_world_sync(void)
{
  30304c:	2f e6       	mov.l	r14,@-r15
  30304e:	4f 22       	sts.l	pr,@-r15
  303050:	7f f8       	add	#-8,r15
  303052:	6e f3       	mov	r15,r14
	/* Unbind all drivers, which waits for async tasks to complete */
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  303054:	d2 1c       	mov.l	3030c8 <gint_world_sync+0x7c>,r2	! 30d0f0 <gint_drivers_end>
  303056:	d1 1d       	mov.l	3030cc <gint_world_sync+0x80>,r1	! 30d000 <drv_cpu>
  303058:	32 18       	sub	r1,r2
  30305a:	e1 fc       	mov	#-4,r1
  30305c:	42 1c       	shad	r1,r2
  30305e:	d1 1c       	mov.l	3030d0 <gint_world_sync+0x84>,r1	! aaaaaaab
  303060:	02 17       	mul.l	r1,r2
  303062:	01 1a       	sts	macl,r1
  303064:	62 13       	mov	r1,r2
  303066:	61 e3       	mov	r14,r1
  303068:	71 c8       	add	#-56,r1
  30306a:	72 ff       	add	#-1,r2
  30306c:	11 2f       	mov.l	r2,@(60,r1)
  30306e:	a0 1e       	bra	3030ae <gint_world_sync+0x62>
  303070:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  303072:	61 e3       	mov	r14,r1
  303074:	71 c8       	add	#-56,r1
  303076:	62 e3       	mov	r14,r2
  303078:	72 c8       	add	#-56,r2
  30307a:	53 2f       	mov.l	@(60,r2),r3
  30307c:	e2 30       	mov	#48,r2
  30307e:	03 27       	mul.l	r2,r3
  303080:	03 1a       	sts	macl,r3
  303082:	d2 12       	mov.l	3030cc <gint_world_sync+0x80>,r2	! 30d000 <drv_cpu>
  303084:	32 3c       	add	r3,r2
  303086:	11 2e       	mov.l	r2,@(56,r1)
		if(d->unbind) d->unbind();
  303088:	61 e3       	mov	r14,r1
  30308a:	71 c8       	add	#-56,r1
  30308c:	51 1e       	mov.l	@(56,r1),r1
  30308e:	51 19       	mov.l	@(36,r1),r1
  303090:	21 18       	tst	r1,r1
  303092:	89 05       	bt	3030a0 <gint_world_sync+0x54>
  303094:	61 e3       	mov	r14,r1
  303096:	71 c8       	add	#-56,r1
  303098:	51 1e       	mov.l	@(56,r1),r1
  30309a:	51 19       	mov.l	@(36,r1),r1
  30309c:	41 0b       	jsr	@r1
  30309e:	00 09       	nop	
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  3030a0:	61 e3       	mov	r14,r1
  3030a2:	71 c8       	add	#-56,r1
  3030a4:	62 e3       	mov	r14,r2
  3030a6:	72 c8       	add	#-56,r2
  3030a8:	52 2f       	mov.l	@(60,r2),r2
  3030aa:	72 ff       	add	#-1,r2
  3030ac:	11 2f       	mov.l	r2,@(60,r1)
  3030ae:	61 e3       	mov	r14,r1
  3030b0:	71 c8       	add	#-56,r1
  3030b2:	51 1f       	mov.l	@(60,r1),r1
  3030b4:	41 11       	cmp/pz	r1
  3030b6:	89 dc       	bt	303072 <gint_world_sync+0x26>
	}
}
  3030b8:	00 09       	nop	
  3030ba:	00 09       	nop	
  3030bc:	7e 08       	add	#8,r14
  3030be:	6f e3       	mov	r14,r15
  3030c0:	4f 26       	lds.l	@r15+,pr
  3030c2:	6e f6       	mov.l	@r15+,r14
  3030c4:	00 0b       	rts	
  3030c6:	00 09       	nop	
  3030c8:	00 30       	.word 0x0030
  3030ca:	d0 f0       	mov.l	30348c <gint_world_switch_out+0x128>,r0	! 72dc522e
  3030cc:	00 30       	.word 0x0030
  3030ce:	d0 00       	mov.l	3030d0 <gint_world_sync+0x84>,r0	! aaaaaaab
  3030d0:	aa aa       	bra	302628 <kinit+0x254>
  3030d2:	aa ab       	bra	30262c <kinit+0x258>

003030d4 <gint_world_switch_in>:
//---
// World switch with driver state saves
//---

void gint_world_switch_in(gint_world_t world_os, gint_world_t world_addin)
{
  3030d4:	2f e6       	mov.l	r14,@-r15
  3030d6:	4f 22       	sts.l	pr,@-r15
  3030d8:	7f e0       	add	#-32,r15
  3030da:	6e f3       	mov	r15,r14
  3030dc:	61 e3       	mov	r14,r1
  3030de:	71 e0       	add	#-32,r1
  3030e0:	11 49       	mov.l	r4,@(36,r1)
  3030e2:	61 e3       	mov	r14,r1
  3030e4:	71 e0       	add	#-32,r1
  3030e6:	11 58       	mov.l	r5,@(32,r1)
	/* Unbind from the OS driver and complete foreign asynchronous tasks */
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  3030e8:	d2 3f       	mov.l	3031e8 <gint_world_switch_in+0x114>,r2	! 30d0f0 <gint_drivers_end>
  3030ea:	d1 40       	mov.l	3031ec <gint_world_switch_in+0x118>,r1	! 30d000 <drv_cpu>
  3030ec:	32 18       	sub	r1,r2
  3030ee:	e1 fc       	mov	#-4,r1
  3030f0:	42 1c       	shad	r1,r2
  3030f2:	d1 3f       	mov.l	3031f0 <gint_world_switch_in+0x11c>,r1	! aaaaaaab
  3030f4:	02 17       	mul.l	r1,r2
  3030f6:	01 1a       	sts	macl,r1
  3030f8:	62 13       	mov	r1,r2
  3030fa:	61 e3       	mov	r14,r1
  3030fc:	71 e0       	add	#-32,r1
  3030fe:	72 ff       	add	#-1,r2
  303100:	11 2f       	mov.l	r2,@(60,r1)
  303102:	a0 1e       	bra	303142 <gint_world_switch_in+0x6e>
  303104:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  303106:	61 e3       	mov	r14,r1
  303108:	71 e0       	add	#-32,r1
  30310a:	62 e3       	mov	r14,r2
  30310c:	72 e0       	add	#-32,r2
  30310e:	53 2f       	mov.l	@(60,r2),r3
  303110:	e2 30       	mov	#48,r2
  303112:	03 27       	mul.l	r2,r3
  303114:	03 1a       	sts	macl,r3
  303116:	d2 35       	mov.l	3031ec <gint_world_switch_in+0x118>,r2	! 30d000 <drv_cpu>
  303118:	32 3c       	add	r3,r2
  30311a:	11 2a       	mov.l	r2,@(40,r1)
		if(d->funbind) d->funbind();
  30311c:	61 e3       	mov	r14,r1
  30311e:	71 e0       	add	#-32,r1
  303120:	51 1a       	mov.l	@(40,r1),r1
  303122:	51 12       	mov.l	@(8,r1),r1
  303124:	21 18       	tst	r1,r1
  303126:	89 05       	bt	303134 <gint_world_switch_in+0x60>
  303128:	61 e3       	mov	r14,r1
  30312a:	71 e0       	add	#-32,r1
  30312c:	51 1a       	mov.l	@(40,r1),r1
  30312e:	51 12       	mov.l	@(8,r1),r1
  303130:	41 0b       	jsr	@r1
  303132:	00 09       	nop	
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  303134:	61 e3       	mov	r14,r1
  303136:	71 e0       	add	#-32,r1
  303138:	62 e3       	mov	r14,r2
  30313a:	72 e0       	add	#-32,r2
  30313c:	52 2f       	mov.l	@(60,r2),r2
  30313e:	72 ff       	add	#-1,r2
  303140:	11 2f       	mov.l	r2,@(60,r1)
  303142:	61 e3       	mov	r14,r1
  303144:	71 e0       	add	#-32,r1
  303146:	51 1f       	mov.l	@(60,r1),r1
  303148:	41 11       	cmp/pz	r1
  30314a:	89 dc       	bt	303106 <gint_world_switch_in+0x32>
	}

	cpu_atomic_start();
  30314c:	d1 29       	mov.l	3031f4 <gint_world_switch_in+0x120>,r1	! 307444 <cpu_atomic_start>
  30314e:	41 0b       	jsr	@r1
  303150:	00 09       	nop	

	for(int i = 0; i < gint_driver_count(); i++)
  303152:	61 e3       	mov	r14,r1
  303154:	71 e0       	add	#-32,r1
  303156:	e2 00       	mov	#0,r2
  303158:	11 2e       	mov.l	r2,@(56,r1)
  30315a:	a0 e1       	bra	303320 <gint_world_switch_in+0x24c>
  30315c:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  30315e:	61 e3       	mov	r14,r1
  303160:	71 e0       	add	#-32,r1
  303162:	62 e3       	mov	r14,r2
  303164:	72 e0       	add	#-32,r2
  303166:	53 2e       	mov.l	@(56,r2),r3
  303168:	e2 30       	mov	#48,r2
  30316a:	03 27       	mul.l	r2,r3
  30316c:	03 1a       	sts	macl,r3
  30316e:	d2 1f       	mov.l	3031ec <gint_world_switch_in+0x118>,r2	! 30d000 <drv_cpu>
  303170:	32 3c       	add	r3,r2
  303172:	11 2d       	mov.l	r2,@(52,r1)
		uint8_t *f = &gint_driver_flags[i];
  303174:	d1 20       	mov.l	3031f8 <gint_world_switch_in+0x124>,r1	! 8101450 <gint_driver_flags>
  303176:	63 12       	mov.l	@r1,r3
  303178:	61 e3       	mov	r14,r1
  30317a:	71 e0       	add	#-32,r1
  30317c:	52 1e       	mov.l	@(56,r1),r2
  30317e:	61 e3       	mov	r14,r1
  303180:	71 e0       	add	#-32,r1
  303182:	32 3c       	add	r3,r2
  303184:	11 2c       	mov.l	r2,@(48,r1)

		bool foreign_powered = (!d->hpowered || d->hpowered());
  303186:	61 e3       	mov	r14,r1
  303188:	71 e0       	add	#-32,r1
  30318a:	51 1d       	mov.l	@(52,r1),r1
  30318c:	51 13       	mov.l	@(12,r1),r1
  30318e:	21 18       	tst	r1,r1
  303190:	89 08       	bt	3031a4 <gint_world_switch_in+0xd0>
  303192:	61 e3       	mov	r14,r1
  303194:	71 e0       	add	#-32,r1
  303196:	51 1d       	mov.l	@(52,r1),r1
  303198:	51 13       	mov.l	@(12,r1),r1
  30319a:	41 0b       	jsr	@r1
  30319c:	00 09       	nop	
  30319e:	61 03       	mov	r0,r1
  3031a0:	21 18       	tst	r1,r1
  3031a2:	89 02       	bt	3031aa <gint_world_switch_in+0xd6>
  3031a4:	e2 01       	mov	#1,r2
  3031a6:	a0 01       	bra	3031ac <gint_world_switch_in+0xd8>
  3031a8:	00 09       	nop	
  3031aa:	e2 00       	mov	#0,r2
  3031ac:	61 e3       	mov	r14,r1
  3031ae:	60 23       	mov	r2,r0
  3031b0:	80 1f       	mov.b	r0,@(15,r1)
  3031b2:	84 1f       	mov.b	@(15,r1),r0
  3031b4:	62 03       	mov	r0,r2
  3031b6:	e3 01       	mov	#1,r3
  3031b8:	22 39       	and	r3,r2
  3031ba:	60 23       	mov	r2,r0
  3031bc:	80 1f       	mov.b	r0,@(15,r1)
		if(foreign_powered)
  3031be:	61 e3       	mov	r14,r1
  3031c0:	84 1f       	mov.b	@(15,r1),r0
  3031c2:	61 03       	mov	r0,r1
  3031c4:	61 1c       	extu.b	r1,r1
  3031c6:	21 18       	tst	r1,r1
  3031c8:	89 18       	bt	3031fc <gint_world_switch_in+0x128>
			*f |= GINT_DRV_FOREIGN_POWERED;
  3031ca:	61 e3       	mov	r14,r1
  3031cc:	71 e0       	add	#-32,r1
  3031ce:	51 1c       	mov.l	@(48,r1),r1
  3031d0:	61 10       	mov.b	@r1,r1
  3031d2:	61 1c       	extu.b	r1,r1
  3031d4:	e2 02       	mov	#2,r2
  3031d6:	21 2b       	or	r2,r1
  3031d8:	62 1c       	extu.b	r1,r2
  3031da:	61 e3       	mov	r14,r1
  3031dc:	71 e0       	add	#-32,r1
  3031de:	51 1c       	mov.l	@(48,r1),r1
  3031e0:	21 20       	mov.b	r2,@r1
  3031e2:	a0 17       	bra	303214 <gint_world_switch_in+0x140>
  3031e4:	00 09       	nop	
  3031e6:	00 09       	nop	
  3031e8:	00 30       	.word 0x0030
  3031ea:	d0 f0       	mov.l	3035ac <gint_world_switch+0x6c>,r0	! 71e4112d
  3031ec:	00 30       	.word 0x0030
  3031ee:	d0 00       	mov.l	3031f0 <gint_world_switch_in+0x11c>,r0	! aaaaaaab
  3031f0:	aa aa       	bra	302748 <kquit+0x38>
  3031f2:	aa ab       	bra	30274c <kquit+0x3c>
  3031f4:	00 30       	.word 0x0030
  3031f6:	74 44       	add	#68,r4
  3031f8:	08 10       	.word 0x0810
  3031fa:	14 50       	mov.l	r5,@(0,r4)
		else
			*f &= ~GINT_DRV_FOREIGN_POWERED;
  3031fc:	61 e3       	mov	r14,r1
  3031fe:	71 e0       	add	#-32,r1
  303200:	51 1c       	mov.l	@(48,r1),r1
  303202:	61 10       	mov.b	@r1,r1
  303204:	62 1c       	extu.b	r1,r2
  303206:	e1 fd       	mov	#-3,r1
  303208:	21 29       	and	r2,r1
  30320a:	62 1c       	extu.b	r1,r2
  30320c:	61 e3       	mov	r14,r1
  30320e:	71 e0       	add	#-32,r1
  303210:	51 1c       	mov.l	@(48,r1),r1
  303212:	21 20       	mov.b	r2,@r1

		/* Power the device if it was unpowered previously */
		if(!foreign_powered && d->hpoweron) d->hpoweron();
  303214:	61 e3       	mov	r14,r1
  303216:	84 1f       	mov.b	@(15,r1),r0
  303218:	61 03       	mov	r0,r1
  30321a:	e2 01       	mov	#1,r2
  30321c:	21 2a       	xor	r2,r1
  30321e:	61 1c       	extu.b	r1,r1
  303220:	21 18       	tst	r1,r1
  303222:	89 0b       	bt	30323c <gint_world_switch_in+0x168>
  303224:	61 e3       	mov	r14,r1
  303226:	71 e0       	add	#-32,r1
  303228:	51 1d       	mov.l	@(52,r1),r1
  30322a:	51 14       	mov.l	@(16,r1),r1
  30322c:	21 18       	tst	r1,r1
  30322e:	89 05       	bt	30323c <gint_world_switch_in+0x168>
  303230:	61 e3       	mov	r14,r1
  303232:	71 e0       	add	#-32,r1
  303234:	51 1d       	mov.l	@(52,r1),r1
  303236:	51 14       	mov.l	@(16,r1),r1
  303238:	41 0b       	jsr	@r1
  30323a:	00 09       	nop	

		/* For non-shared devices, save previous device state and
		   consider restoring the preserved one */
		if(!(*f & GINT_DRV_SHARED))
  30323c:	61 e3       	mov	r14,r1
  30323e:	71 e0       	add	#-32,r1
  303240:	51 1c       	mov.l	@(48,r1),r1
  303242:	61 10       	mov.b	@r1,r1
  303244:	61 1c       	extu.b	r1,r1
  303246:	e3 10       	mov	#16,r3
  303248:	21 39       	and	r3,r1
  30324a:	21 18       	tst	r1,r1
  30324c:	8b 34       	bf	3032b8 <gint_world_switch_in+0x1e4>
		{
			if(d->hsave)
  30324e:	61 e3       	mov	r14,r1
  303250:	71 e0       	add	#-32,r1
  303252:	51 1d       	mov.l	@(52,r1),r1
  303254:	51 16       	mov.l	@(24,r1),r1
  303256:	21 18       	tst	r1,r1
  303258:	89 0f       	bt	30327a <gint_world_switch_in+0x1a6>
				d->hsave(world_os[i]);
  30325a:	61 e3       	mov	r14,r1
  30325c:	71 e0       	add	#-32,r1
  30325e:	51 1d       	mov.l	@(52,r1),r1
  303260:	51 16       	mov.l	@(24,r1),r1
  303262:	62 e3       	mov	r14,r2
  303264:	72 e0       	add	#-32,r2
  303266:	52 2e       	mov.l	@(56,r2),r2
  303268:	42 08       	shll2	r2
  30326a:	63 e3       	mov	r14,r3
  30326c:	73 e0       	add	#-32,r3
  30326e:	53 39       	mov.l	@(36,r3),r3
  303270:	32 3c       	add	r3,r2
  303272:	62 22       	mov.l	@r2,r2
  303274:	64 23       	mov	r2,r4
  303276:	41 0b       	jsr	@r1
  303278:	00 09       	nop	
			if(!(*f & GINT_DRV_CLEAN) && d->hrestore)
  30327a:	61 e3       	mov	r14,r1
  30327c:	71 e0       	add	#-32,r1
  30327e:	51 1c       	mov.l	@(48,r1),r1
  303280:	61 10       	mov.b	@r1,r1
  303282:	61 1c       	extu.b	r1,r1
  303284:	e0 01       	mov	#1,r0
  303286:	21 09       	and	r0,r1
  303288:	21 18       	tst	r1,r1
  30328a:	8b 15       	bf	3032b8 <gint_world_switch_in+0x1e4>
  30328c:	61 e3       	mov	r14,r1
  30328e:	71 e0       	add	#-32,r1
  303290:	51 1d       	mov.l	@(52,r1),r1
  303292:	51 17       	mov.l	@(28,r1),r1
  303294:	21 18       	tst	r1,r1
  303296:	89 0f       	bt	3032b8 <gint_world_switch_in+0x1e4>
				d->hrestore(world_addin[i]);
  303298:	61 e3       	mov	r14,r1
  30329a:	71 e0       	add	#-32,r1
  30329c:	51 1d       	mov.l	@(52,r1),r1
  30329e:	51 17       	mov.l	@(28,r1),r1
  3032a0:	62 e3       	mov	r14,r2
  3032a2:	72 e0       	add	#-32,r2
  3032a4:	52 2e       	mov.l	@(56,r2),r2
  3032a6:	42 08       	shll2	r2
  3032a8:	63 e3       	mov	r14,r3
  3032aa:	73 e0       	add	#-32,r3
  3032ac:	53 38       	mov.l	@(32,r3),r3
  3032ae:	32 3c       	add	r3,r2
  3032b0:	62 22       	mov.l	@r2,r2
  3032b2:	64 23       	mov	r2,r4
  3032b4:	41 0b       	jsr	@r1
  3032b6:	00 09       	nop	
		}

		/* Bind the driver, configure if needed. Note that we either
		   configure or restore the new world's state, not both */
		if(d->bind) d->bind();
  3032b8:	61 e3       	mov	r14,r1
  3032ba:	71 e0       	add	#-32,r1
  3032bc:	51 1d       	mov.l	@(52,r1),r1
  3032be:	51 18       	mov.l	@(32,r1),r1
  3032c0:	21 18       	tst	r1,r1
  3032c2:	89 05       	bt	3032d0 <gint_world_switch_in+0x1fc>
  3032c4:	61 e3       	mov	r14,r1
  3032c6:	71 e0       	add	#-32,r1
  3032c8:	51 1d       	mov.l	@(52,r1),r1
  3032ca:	51 18       	mov.l	@(32,r1),r1
  3032cc:	41 0b       	jsr	@r1
  3032ce:	00 09       	nop	

		if(*f & GINT_DRV_CLEAN)
  3032d0:	61 e3       	mov	r14,r1
  3032d2:	71 e0       	add	#-32,r1
  3032d4:	51 1c       	mov.l	@(48,r1),r1
  3032d6:	61 10       	mov.b	@r1,r1
  3032d8:	61 1c       	extu.b	r1,r1
  3032da:	e2 01       	mov	#1,r2
  3032dc:	21 29       	and	r2,r1
  3032de:	21 18       	tst	r1,r1
  3032e0:	89 17       	bt	303312 <gint_world_switch_in+0x23e>
		{
			if(d->configure) d->configure();
  3032e2:	61 e3       	mov	r14,r1
  3032e4:	71 e0       	add	#-32,r1
  3032e6:	51 1d       	mov.l	@(52,r1),r1
  3032e8:	51 1a       	mov.l	@(40,r1),r1
  3032ea:	21 18       	tst	r1,r1
  3032ec:	89 05       	bt	3032fa <gint_world_switch_in+0x226>
  3032ee:	61 e3       	mov	r14,r1
  3032f0:	71 e0       	add	#-32,r1
  3032f2:	51 1d       	mov.l	@(52,r1),r1
  3032f4:	51 1a       	mov.l	@(40,r1),r1
  3032f6:	41 0b       	jsr	@r1
  3032f8:	00 09       	nop	
			*f &= ~GINT_DRV_CLEAN;
  3032fa:	61 e3       	mov	r14,r1
  3032fc:	71 e0       	add	#-32,r1
  3032fe:	51 1c       	mov.l	@(48,r1),r1
  303300:	61 10       	mov.b	@r1,r1
  303302:	62 1c       	extu.b	r1,r2
  303304:	e1 fe       	mov	#-2,r1
  303306:	21 29       	and	r2,r1
  303308:	62 1c       	extu.b	r1,r2
  30330a:	61 e3       	mov	r14,r1
  30330c:	71 e0       	add	#-32,r1
  30330e:	51 1c       	mov.l	@(48,r1),r1
  303310:	21 20       	mov.b	r2,@r1
	for(int i = 0; i < gint_driver_count(); i++)
  303312:	61 e3       	mov	r14,r1
  303314:	71 e0       	add	#-32,r1
  303316:	62 e3       	mov	r14,r2
  303318:	72 e0       	add	#-32,r2
  30331a:	52 2e       	mov.l	@(56,r2),r2
  30331c:	72 01       	add	#1,r2
  30331e:	11 2e       	mov.l	r2,@(56,r1)
  303320:	d2 0c       	mov.l	303354 <gint_world_switch_in+0x280>,r2	! 30d0f0 <gint_drivers_end>
  303322:	d1 0d       	mov.l	303358 <gint_world_switch_in+0x284>,r1	! 30d000 <drv_cpu>
  303324:	32 18       	sub	r1,r2
  303326:	e1 fc       	mov	#-4,r1
  303328:	42 1c       	shad	r1,r2
  30332a:	d1 0c       	mov.l	30335c <gint_world_switch_in+0x288>,r1	! aaaaaaab
  30332c:	02 17       	mul.l	r1,r2
  30332e:	01 1a       	sts	macl,r1
  303330:	62 13       	mov	r1,r2
  303332:	61 e3       	mov	r14,r1
  303334:	71 e0       	add	#-32,r1
  303336:	51 1e       	mov.l	@(56,r1),r1
  303338:	31 23       	cmp/ge	r2,r1
  30333a:	89 01       	bt	303340 <gint_world_switch_in+0x26c>
  30333c:	af 0f       	bra	30315e <gint_world_switch_in+0x8a>
  30333e:	00 09       	nop	
		}
	}

	cpu_atomic_end();
  303340:	d1 07       	mov.l	303360 <gint_world_switch_in+0x28c>,r1	! 3074cc <cpu_atomic_end>
  303342:	41 0b       	jsr	@r1
  303344:	00 09       	nop	
}
  303346:	00 09       	nop	
  303348:	7e 20       	add	#32,r14
  30334a:	6f e3       	mov	r14,r15
  30334c:	4f 26       	lds.l	@r15+,pr
  30334e:	6e f6       	mov.l	@r15+,r14
  303350:	00 0b       	rts	
  303352:	00 09       	nop	
  303354:	00 30       	.word 0x0030
  303356:	d0 f0       	mov.l	303718 <next_block+0x48>,r0	! ffffff
  303358:	00 30       	.word 0x0030
  30335a:	d0 00       	mov.l	30335c <gint_world_switch_in+0x288>,r0	! aaaaaaab
  30335c:	aa aa       	bra	3028b4 <gint_osmenu_native+0x44>
  30335e:	aa ab       	bra	3028b8 <gint_osmenu_native+0x48>
  303360:	00 30       	.word 0x0030
  303362:	74 cc       	add	#-52,r4

00303364 <gint_world_switch_out>:

void gint_world_switch_out(gint_world_t world_addin, gint_world_t world_os)
{
  303364:	2f e6       	mov.l	r14,@-r15
  303366:	4f 22       	sts.l	pr,@-r15
  303368:	7f e4       	add	#-28,r15
  30336a:	6e f3       	mov	r15,r14
  30336c:	61 e3       	mov	r14,r1
  30336e:	71 dc       	add	#-36,r1
  303370:	11 4a       	mov.l	r4,@(40,r1)
  303372:	61 e3       	mov	r14,r1
  303374:	71 dc       	add	#-36,r1
  303376:	11 59       	mov.l	r5,@(36,r1)
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  303378:	d2 6b       	mov.l	303528 <gint_world_switch_out+0x1c4>,r2	! 30d0f0 <gint_drivers_end>
  30337a:	d1 6c       	mov.l	30352c <gint_world_switch_out+0x1c8>,r1	! 30d000 <drv_cpu>
  30337c:	32 18       	sub	r1,r2
  30337e:	e1 fc       	mov	#-4,r1
  303380:	42 1c       	shad	r1,r2
  303382:	d1 6b       	mov.l	303530 <gint_world_switch_out+0x1cc>,r1	! aaaaaaab
  303384:	02 17       	mul.l	r1,r2
  303386:	01 1a       	sts	macl,r1
  303388:	62 13       	mov	r1,r2
  30338a:	61 e3       	mov	r14,r1
  30338c:	71 dc       	add	#-36,r1
  30338e:	72 ff       	add	#-1,r2
  303390:	11 2f       	mov.l	r2,@(60,r1)
  303392:	a0 1e       	bra	3033d2 <gint_world_switch_out+0x6e>
  303394:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  303396:	61 e3       	mov	r14,r1
  303398:	71 dc       	add	#-36,r1
  30339a:	62 e3       	mov	r14,r2
  30339c:	72 dc       	add	#-36,r2
  30339e:	53 2f       	mov.l	@(60,r2),r3
  3033a0:	e2 30       	mov	#48,r2
  3033a2:	03 27       	mul.l	r2,r3
  3033a4:	03 1a       	sts	macl,r3
  3033a6:	d2 61       	mov.l	30352c <gint_world_switch_out+0x1c8>,r2	! 30d000 <drv_cpu>
  3033a8:	32 3c       	add	r3,r2
  3033aa:	11 2b       	mov.l	r2,@(44,r1)
		if(d->unbind) d->unbind();
  3033ac:	61 e3       	mov	r14,r1
  3033ae:	71 dc       	add	#-36,r1
  3033b0:	51 1b       	mov.l	@(44,r1),r1
  3033b2:	51 19       	mov.l	@(36,r1),r1
  3033b4:	21 18       	tst	r1,r1
  3033b6:	89 05       	bt	3033c4 <gint_world_switch_out+0x60>
  3033b8:	61 e3       	mov	r14,r1
  3033ba:	71 dc       	add	#-36,r1
  3033bc:	51 1b       	mov.l	@(44,r1),r1
  3033be:	51 19       	mov.l	@(36,r1),r1
  3033c0:	41 0b       	jsr	@r1
  3033c2:	00 09       	nop	
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  3033c4:	61 e3       	mov	r14,r1
  3033c6:	71 dc       	add	#-36,r1
  3033c8:	62 e3       	mov	r14,r2
  3033ca:	72 dc       	add	#-36,r2
  3033cc:	52 2f       	mov.l	@(60,r2),r2
  3033ce:	72 ff       	add	#-1,r2
  3033d0:	11 2f       	mov.l	r2,@(60,r1)
  3033d2:	61 e3       	mov	r14,r1
  3033d4:	71 dc       	add	#-36,r1
  3033d6:	51 1f       	mov.l	@(60,r1),r1
  3033d8:	41 11       	cmp/pz	r1
  3033da:	89 dc       	bt	303396 <gint_world_switch_out+0x32>
	}

	cpu_atomic_start();
  3033dc:	d1 55       	mov.l	303534 <gint_world_switch_out+0x1d0>,r1	! 307444 <cpu_atomic_start>
  3033de:	41 0b       	jsr	@r1
  3033e0:	00 09       	nop	

	for(int i = gint_driver_count() - 1; i >= 0; i--)
  3033e2:	d2 51       	mov.l	303528 <gint_world_switch_out+0x1c4>,r2	! 30d0f0 <gint_drivers_end>
  3033e4:	d1 51       	mov.l	30352c <gint_world_switch_out+0x1c8>,r1	! 30d000 <drv_cpu>
  3033e6:	32 18       	sub	r1,r2
  3033e8:	e1 fc       	mov	#-4,r1
  3033ea:	42 1c       	shad	r1,r2
  3033ec:	d1 50       	mov.l	303530 <gint_world_switch_out+0x1cc>,r1	! aaaaaaab
  3033ee:	02 17       	mul.l	r1,r2
  3033f0:	01 1a       	sts	macl,r1
  3033f2:	62 13       	mov	r1,r2
  3033f4:	61 e3       	mov	r14,r1
  3033f6:	71 dc       	add	#-36,r1
  3033f8:	72 ff       	add	#-1,r2
  3033fa:	11 2e       	mov.l	r2,@(56,r1)
  3033fc:	a0 83       	bra	303506 <gint_world_switch_out+0x1a2>
  3033fe:	00 09       	nop	
	{
		gint_driver_t *d = &gint_drivers[i];
  303400:	61 e3       	mov	r14,r1
  303402:	71 dc       	add	#-36,r1
  303404:	62 e3       	mov	r14,r2
  303406:	72 dc       	add	#-36,r2
  303408:	53 2e       	mov.l	@(56,r2),r3
  30340a:	e2 30       	mov	#48,r2
  30340c:	03 27       	mul.l	r2,r3
  30340e:	03 1a       	sts	macl,r3
  303410:	d2 46       	mov.l	30352c <gint_world_switch_out+0x1c8>,r2	! 30d000 <drv_cpu>
  303412:	32 3c       	add	r3,r2
  303414:	11 2d       	mov.l	r2,@(52,r1)
		uint8_t *f = &gint_driver_flags[i];
  303416:	d1 48       	mov.l	303538 <gint_world_switch_out+0x1d4>,r1	! 8101450 <gint_driver_flags>
  303418:	63 12       	mov.l	@r1,r3
  30341a:	61 e3       	mov	r14,r1
  30341c:	71 dc       	add	#-36,r1
  30341e:	52 1e       	mov.l	@(56,r1),r2
  303420:	61 e3       	mov	r14,r1
  303422:	71 dc       	add	#-36,r1
  303424:	32 3c       	add	r3,r2
  303426:	11 2c       	mov.l	r2,@(48,r1)

		/* Power the device if it was unpowered previously */
		if(d->hpowered && !d->hpowered() && d->hpoweron) d->hpoweron();
  303428:	61 e3       	mov	r14,r1
  30342a:	71 dc       	add	#-36,r1
  30342c:	51 1d       	mov.l	@(52,r1),r1
  30342e:	51 13       	mov.l	@(12,r1),r1
  303430:	21 18       	tst	r1,r1
  303432:	89 17       	bt	303464 <gint_world_switch_out+0x100>
  303434:	61 e3       	mov	r14,r1
  303436:	71 dc       	add	#-36,r1
  303438:	51 1d       	mov.l	@(52,r1),r1
  30343a:	51 13       	mov.l	@(12,r1),r1
  30343c:	41 0b       	jsr	@r1
  30343e:	00 09       	nop	
  303440:	61 03       	mov	r0,r1
  303442:	e2 01       	mov	#1,r2
  303444:	21 2a       	xor	r2,r1
  303446:	61 1c       	extu.b	r1,r1
  303448:	21 18       	tst	r1,r1
  30344a:	89 0b       	bt	303464 <gint_world_switch_out+0x100>
  30344c:	61 e3       	mov	r14,r1
  30344e:	71 dc       	add	#-36,r1
  303450:	51 1d       	mov.l	@(52,r1),r1
  303452:	51 14       	mov.l	@(16,r1),r1
  303454:	21 18       	tst	r1,r1
  303456:	89 05       	bt	303464 <gint_world_switch_out+0x100>
  303458:	61 e3       	mov	r14,r1
  30345a:	71 dc       	add	#-36,r1
  30345c:	51 1d       	mov.l	@(52,r1),r1
  30345e:	51 14       	mov.l	@(16,r1),r1
  303460:	41 0b       	jsr	@r1
  303462:	00 09       	nop	

		/* For non-shared devices, save previous device state and
		   consider restoring the preserved one */
		if(!(*f & GINT_DRV_SHARED))
  303464:	61 e3       	mov	r14,r1
  303466:	71 dc       	add	#-36,r1
  303468:	51 1c       	mov.l	@(48,r1),r1
  30346a:	61 10       	mov.b	@r1,r1
  30346c:	61 1c       	extu.b	r1,r1
  30346e:	e2 10       	mov	#16,r2
  303470:	21 29       	and	r2,r1
  303472:	21 18       	tst	r1,r1
  303474:	8b 2b       	bf	3034ce <gint_world_switch_out+0x16a>
		{
			if(d->hsave) d->hsave(world_addin[i]);
  303476:	61 e3       	mov	r14,r1
  303478:	71 dc       	add	#-36,r1
  30347a:	51 1d       	mov.l	@(52,r1),r1
  30347c:	51 16       	mov.l	@(24,r1),r1
  30347e:	21 18       	tst	r1,r1
  303480:	89 0f       	bt	3034a2 <gint_world_switch_out+0x13e>
  303482:	61 e3       	mov	r14,r1
  303484:	71 dc       	add	#-36,r1
  303486:	51 1d       	mov.l	@(52,r1),r1
  303488:	51 16       	mov.l	@(24,r1),r1
  30348a:	62 e3       	mov	r14,r2
  30348c:	72 dc       	add	#-36,r2
  30348e:	52 2e       	mov.l	@(56,r2),r2
  303490:	42 08       	shll2	r2
  303492:	63 e3       	mov	r14,r3
  303494:	73 dc       	add	#-36,r3
  303496:	53 3a       	mov.l	@(40,r3),r3
  303498:	32 3c       	add	r3,r2
  30349a:	62 22       	mov.l	@r2,r2
  30349c:	64 23       	mov	r2,r4
  30349e:	41 0b       	jsr	@r1
  3034a0:	00 09       	nop	
			if(d->hrestore) d->hrestore(world_os[i]);
  3034a2:	61 e3       	mov	r14,r1
  3034a4:	71 dc       	add	#-36,r1
  3034a6:	51 1d       	mov.l	@(52,r1),r1
  3034a8:	51 17       	mov.l	@(28,r1),r1
  3034aa:	21 18       	tst	r1,r1
  3034ac:	89 0f       	bt	3034ce <gint_world_switch_out+0x16a>
  3034ae:	61 e3       	mov	r14,r1
  3034b0:	71 dc       	add	#-36,r1
  3034b2:	51 1d       	mov.l	@(52,r1),r1
  3034b4:	51 17       	mov.l	@(28,r1),r1
  3034b6:	62 e3       	mov	r14,r2
  3034b8:	72 dc       	add	#-36,r2
  3034ba:	52 2e       	mov.l	@(56,r2),r2
  3034bc:	42 08       	shll2	r2
  3034be:	63 e3       	mov	r14,r3
  3034c0:	73 dc       	add	#-36,r3
  3034c2:	53 39       	mov.l	@(36,r3),r3
  3034c4:	32 3c       	add	r3,r2
  3034c6:	62 22       	mov.l	@r2,r2
  3034c8:	64 23       	mov	r2,r4
  3034ca:	41 0b       	jsr	@r1
  3034cc:	00 09       	nop	
		}

		/* Restore the power state of the device */
		if(!(*f & GINT_DRV_FOREIGN_POWERED) && d->hpoweroff)
  3034ce:	61 e3       	mov	r14,r1
  3034d0:	71 dc       	add	#-36,r1
  3034d2:	51 1c       	mov.l	@(48,r1),r1
  3034d4:	61 10       	mov.b	@r1,r1
  3034d6:	61 1c       	extu.b	r1,r1
  3034d8:	e2 02       	mov	#2,r2
  3034da:	21 29       	and	r2,r1
  3034dc:	21 18       	tst	r1,r1
  3034de:	8b 0b       	bf	3034f8 <gint_world_switch_out+0x194>
  3034e0:	61 e3       	mov	r14,r1
  3034e2:	71 dc       	add	#-36,r1
  3034e4:	51 1d       	mov.l	@(52,r1),r1
  3034e6:	51 15       	mov.l	@(20,r1),r1
  3034e8:	21 18       	tst	r1,r1
  3034ea:	89 05       	bt	3034f8 <gint_world_switch_out+0x194>
			d->hpoweroff();
  3034ec:	61 e3       	mov	r14,r1
  3034ee:	71 dc       	add	#-36,r1
  3034f0:	51 1d       	mov.l	@(52,r1),r1
  3034f2:	51 15       	mov.l	@(20,r1),r1
  3034f4:	41 0b       	jsr	@r1
  3034f6:	00 09       	nop	
	for(int i = gint_driver_count() - 1; i >= 0; i--)
  3034f8:	61 e3       	mov	r14,r1
  3034fa:	71 dc       	add	#-36,r1
  3034fc:	62 e3       	mov	r14,r2
  3034fe:	72 dc       	add	#-36,r2
  303500:	52 2e       	mov.l	@(56,r2),r2
  303502:	72 ff       	add	#-1,r2
  303504:	11 2e       	mov.l	r2,@(56,r1)
  303506:	61 e3       	mov	r14,r1
  303508:	71 dc       	add	#-36,r1
  30350a:	51 1e       	mov.l	@(56,r1),r1
  30350c:	41 11       	cmp/pz	r1
  30350e:	8b 01       	bf	303514 <gint_world_switch_out+0x1b0>
  303510:	af 76       	bra	303400 <gint_world_switch_out+0x9c>
  303512:	00 09       	nop	
	}

	cpu_atomic_end();
  303514:	d1 09       	mov.l	30353c <gint_world_switch_out+0x1d8>,r1	! 3074cc <cpu_atomic_end>
  303516:	41 0b       	jsr	@r1
  303518:	00 09       	nop	
}
  30351a:	00 09       	nop	
  30351c:	7e 1c       	add	#28,r14
  30351e:	6f e3       	mov	r14,r15
  303520:	4f 26       	lds.l	@r15+,pr
  303522:	6e f6       	mov.l	@r15+,r14
  303524:	00 0b       	rts	
  303526:	00 09       	nop	
  303528:	00 30       	.word 0x0030
  30352a:	d0 f0       	mov.l	3038ec <split+0x158>,r0	! 61e371d4
  30352c:	00 30       	.word 0x0030
  30352e:	d0 00       	mov.l	303530 <gint_world_switch_out+0x1cc>,r0	! aaaaaaab
  303530:	aa aa       	bra	302a88 <__handler+0x4c>
  303532:	aa ab       	bra	302a8c <__handler+0x50>
  303534:	00 30       	.word 0x0030
  303536:	74 44       	add	#68,r4
  303538:	08 10       	.word 0x0810
  30353a:	14 50       	mov.l	r5,@(0,r4)
  30353c:	00 30       	.word 0x0030
  30353e:	74 cc       	add	#-52,r4

00303540 <gint_world_switch>:

int gint_world_switch(gint_call_t call)
{
  303540:	7f f0       	add	#-16,r15
  303542:	2f e6       	mov.l	r14,@-r15
  303544:	4f 22       	sts.l	pr,@-r15
  303546:	7f dc       	add	#-36,r15
  303548:	6e f3       	mov	r15,r14
  30354a:	1e 4b       	mov.l	r4,@(44,r14)
  30354c:	1e 5c       	mov.l	r5,@(48,r14)
  30354e:	1e 6d       	mov.l	r6,@(52,r14)
  303550:	1e 7e       	mov.l	r7,@(56,r14)
	extern void *gint_stack_top;
	gint_world_switch_out(gint_world_addin, gint_world_os);
  303552:	d1 40       	mov.l	303654 <gint_world_switch+0x114>,r1	! 810144c <gint_world_addin>
  303554:	62 12       	mov.l	@r1,r2
  303556:	d1 40       	mov.l	303658 <gint_world_switch+0x118>,r1	! 8101448 <gint_world_os>
  303558:	61 12       	mov.l	@r1,r1
  30355a:	65 13       	mov	r1,r5
  30355c:	64 23       	mov	r2,r4
  30355e:	d1 3f       	mov.l	30365c <gint_world_switch+0x11c>,r1	! 303364 <gint_world_switch_out>
  303560:	41 0b       	jsr	@r1
  303562:	00 09       	nop	

	/* Watch out for stack overflows */
	uint32_t *canary = gint_stack_top;
  303564:	61 e3       	mov	r14,r1
  303566:	71 e4       	add	#-28,r1
  303568:	d2 3d       	mov.l	303660 <gint_world_switch+0x120>,r2	! 8101454 <gint_stack_top>
  30356a:	62 22       	mov.l	@r2,r2
  30356c:	11 2f       	mov.l	r2,@(60,r1)
	if(canary)
  30356e:	61 e3       	mov	r14,r1
  303570:	71 e4       	add	#-28,r1
  303572:	51 1f       	mov.l	@(60,r1),r1
  303574:	21 18       	tst	r1,r1
  303576:	89 04       	bt	303582 <gint_world_switch+0x42>
		*canary = 0xb7c0ffee;
  303578:	61 e3       	mov	r14,r1
  30357a:	71 e4       	add	#-28,r1
  30357c:	51 1f       	mov.l	@(60,r1),r1
  30357e:	d2 39       	mov.l	303664 <gint_world_switch+0x124>,r2	! b7c0ffee
  303580:	21 22       	mov.l	r2,@r1
  303582:	62 e3       	mov	r14,r2
  303584:	61 e3       	mov	r14,r1
  303586:	71 2c       	add	#44,r1
  303588:	63 12       	mov.l	@r1,r3
  30358a:	22 32       	mov.l	r3,@r2
  30358c:	71 04       	add	#4,r1
  30358e:	63 12       	mov.l	@r1,r3
  303590:	12 31       	mov.l	r3,@(4,r2)
  303592:	71 04       	add	#4,r1
  303594:	63 12       	mov.l	@r1,r3
  303596:	12 32       	mov.l	r3,@(8,r2)
  303598:	71 04       	add	#4,r1
  30359a:	63 12       	mov.l	@r1,r3
  30359c:	12 33       	mov.l	r3,@(12,r2)
  30359e:	71 04       	add	#4,r1
  3035a0:	63 12       	mov.l	@r1,r3
  3035a2:	12 34       	mov.l	r3,@(16,r2)
  3035a4:	71 04       	add	#4,r1
	int (*f)(int r4, int r5, int r6, int r7) = cb.function;
  3035a6:	61 e3       	mov	r14,r1
  3035a8:	62 12       	mov.l	@r1,r2
  3035aa:	61 e3       	mov	r14,r1
  3035ac:	71 e4       	add	#-28,r1
  3035ae:	11 2d       	mov.l	r2,@(52,r1)
        gint_call_arg_t *args = cb.args;
  3035b0:	61 e3       	mov	r14,r1
  3035b2:	71 e4       	add	#-28,r1
  3035b4:	62 e3       	mov	r14,r2
  3035b6:	72 04       	add	#4,r2
  3035b8:	11 2c       	mov.l	r2,@(48,r1)
	return f ? f(args[0].i, args[1].i, args[2].i, args[3].i) : -1;
  3035ba:	61 e3       	mov	r14,r1
  3035bc:	71 e4       	add	#-28,r1
  3035be:	51 1d       	mov.l	@(52,r1),r1
  3035c0:	21 18       	tst	r1,r1
  3035c2:	89 1c       	bt	3035fe <gint_world_switch+0xbe>
  3035c4:	61 e3       	mov	r14,r1
  3035c6:	71 e4       	add	#-28,r1
  3035c8:	51 1c       	mov.l	@(48,r1),r1
  3035ca:	62 12       	mov.l	@r1,r2
  3035cc:	61 e3       	mov	r14,r1
  3035ce:	71 e4       	add	#-28,r1
  3035d0:	51 1c       	mov.l	@(48,r1),r1
  3035d2:	71 04       	add	#4,r1
  3035d4:	63 12       	mov.l	@r1,r3
  3035d6:	61 e3       	mov	r14,r1
  3035d8:	71 e4       	add	#-28,r1
  3035da:	51 1c       	mov.l	@(48,r1),r1
  3035dc:	71 08       	add	#8,r1
  3035de:	66 12       	mov.l	@r1,r6
  3035e0:	61 e3       	mov	r14,r1
  3035e2:	71 e4       	add	#-28,r1
  3035e4:	51 1c       	mov.l	@(48,r1),r1
  3035e6:	71 0c       	add	#12,r1
  3035e8:	67 12       	mov.l	@r1,r7
  3035ea:	61 e3       	mov	r14,r1
  3035ec:	71 e4       	add	#-28,r1
  3035ee:	51 1d       	mov.l	@(52,r1),r1
  3035f0:	65 33       	mov	r3,r5
  3035f2:	64 23       	mov	r2,r4
  3035f4:	41 0b       	jsr	@r1
  3035f6:	00 09       	nop	
  3035f8:	61 03       	mov	r0,r1
  3035fa:	a0 01       	bra	303600 <gint_world_switch+0xc0>
  3035fc:	00 09       	nop	
  3035fe:	e1 ff       	mov	#-1,r1

	int rc = gint_call(call);
  303600:	62 e3       	mov	r14,r2
  303602:	72 e4       	add	#-28,r2
  303604:	12 1e       	mov.l	r1,@(56,r2)
	/* The canary check needs to occur before switching in the gint world;
	   otherwise we just crash due to the overflow. gint_panic() isn't
	   really designed to work from the OS world, but it does fine on the
	   fx-9860G series and sometimes also on the fx-CG series; better crash
	   attempting to show a panic message than just crash */
	if(canary && *canary != 0xb7c0ffee)
  303606:	61 e3       	mov	r14,r1
  303608:	71 e4       	add	#-28,r1
  30360a:	51 1f       	mov.l	@(60,r1),r1
  30360c:	21 18       	tst	r1,r1
  30360e:	89 0b       	bt	303628 <gint_world_switch+0xe8>
  303610:	61 e3       	mov	r14,r1
  303612:	71 e4       	add	#-28,r1
  303614:	51 1f       	mov.l	@(60,r1),r1
  303616:	62 12       	mov.l	@r1,r2
  303618:	d1 12       	mov.l	303664 <gint_world_switch+0x124>,r1	! b7c0ffee
  30361a:	32 10       	cmp/eq	r1,r2
  30361c:	89 04       	bt	303628 <gint_world_switch+0xe8>
		gint_panic(0x1080);
  30361e:	91 17       	mov.w	303650 <gint_world_switch+0x110>,r1	! 1080
  303620:	64 13       	mov	r1,r4
  303622:	d1 11       	mov.l	303668 <gint_world_switch+0x128>,r1	! 3091d4 <gint_panic>
  303624:	41 0b       	jsr	@r1
  303626:	00 09       	nop	

	gint_world_switch_in(gint_world_os, gint_world_addin);
  303628:	d1 0b       	mov.l	303658 <gint_world_switch+0x118>,r1	! 8101448 <gint_world_os>
  30362a:	62 12       	mov.l	@r1,r2
  30362c:	d1 09       	mov.l	303654 <gint_world_switch+0x114>,r1	! 810144c <gint_world_addin>
  30362e:	61 12       	mov.l	@r1,r1
  303630:	65 13       	mov	r1,r5
  303632:	64 23       	mov	r2,r4
  303634:	d1 0d       	mov.l	30366c <gint_world_switch+0x12c>,r1	! 3030d4 <gint_world_switch_in>
  303636:	41 0b       	jsr	@r1
  303638:	00 09       	nop	
	return rc;
  30363a:	61 e3       	mov	r14,r1
  30363c:	71 e4       	add	#-28,r1
  30363e:	51 1e       	mov.l	@(56,r1),r1
}
  303640:	60 13       	mov	r1,r0
  303642:	7e 24       	add	#36,r14
  303644:	6f e3       	mov	r14,r15
  303646:	4f 26       	lds.l	@r15+,pr
  303648:	6e f6       	mov.l	@r15+,r14
  30364a:	7f 10       	add	#16,r15
  30364c:	00 0b       	rts	
  30364e:	00 09       	nop	
  303650:	10 80       	mov.l	r8,@(0,r0)
  303652:	00 09       	nop	
  303654:	08 10       	.word 0x0810
  303656:	14 4c       	mov.l	r4,@(48,r4)
  303658:	08 10       	.word 0x0810
  30365a:	14 48       	mov.l	r4,@(32,r4)
  30365c:	00 30       	.word 0x0030
  30365e:	33 64       	div1	r6,r3
  303660:	08 10       	.word 0x0810
  303662:	14 54       	mov.l	r5,@(16,r4)
  303664:	b7 c0       	bsr	3045e8 <gint_realloc+0x260>
  303666:	ff ee       	.word 0xffee
  303668:	00 30       	.word 0x0030
  30366a:	91 d4       	mov.w	303816 <split+0x82>,r1	! 223b
  30366c:	00 30       	.word 0x0030
  30366e:	30 d4       	div1	r13,r0

00303670 <gint_switch>:

void gint_switch(void (*function)(void))
{
  303670:	2f e6       	mov.l	r14,@-r15
  303672:	4f 22       	sts.l	pr,@-r15
  303674:	7f e4       	add	#-28,r15
  303676:	6e f3       	mov	r15,r14
  303678:	61 e3       	mov	r14,r1
  30367a:	71 dc       	add	#-36,r1
  30367c:	11 4a       	mov.l	r4,@(40,r1)
	gint_world_switch(GINT_CALL(function));
  30367e:	61 e3       	mov	r14,r1
  303680:	71 08       	add	#8,r1
  303682:	e2 00       	mov	#0,r2
  303684:	21 22       	mov.l	r2,@r1
  303686:	e2 00       	mov	#0,r2
  303688:	11 21       	mov.l	r2,@(4,r1)
  30368a:	e2 00       	mov	#0,r2
  30368c:	11 22       	mov.l	r2,@(8,r1)
  30368e:	e2 00       	mov	#0,r2
  303690:	11 23       	mov.l	r2,@(12,r1)
  303692:	e2 00       	mov	#0,r2
  303694:	11 24       	mov.l	r2,@(16,r1)
  303696:	61 e3       	mov	r14,r1
  303698:	71 08       	add	#8,r1
  30369a:	62 e3       	mov	r14,r2
  30369c:	72 dc       	add	#-36,r2
  30369e:	52 2a       	mov.l	@(40,r2),r2
  3036a0:	21 22       	mov.l	r2,@r1
  3036a2:	61 e3       	mov	r14,r1
  3036a4:	71 08       	add	#8,r1
  3036a6:	62 13       	mov	r1,r2
  3036a8:	72 10       	add	#16,r2
  3036aa:	62 22       	mov.l	@r2,r2
  3036ac:	2f 22       	mov.l	r2,@r15
  3036ae:	64 12       	mov.l	@r1,r4
  3036b0:	55 11       	mov.l	@(4,r1),r5
  3036b2:	56 12       	mov.l	@(8,r1),r6
  3036b4:	57 13       	mov.l	@(12,r1),r7
  3036b6:	d1 05       	mov.l	3036cc <gint_switch+0x5c>,r1	! 303540 <gint_world_switch>
  3036b8:	41 0b       	jsr	@r1
  3036ba:	00 09       	nop	
}
  3036bc:	00 09       	nop	
  3036be:	7e 1c       	add	#28,r14
  3036c0:	6f e3       	mov	r14,r15
  3036c2:	4f 26       	lds.l	@r15+,pr
  3036c4:	6e f6       	mov.l	@r15+,r14
  3036c6:	00 0b       	rts	
  3036c8:	00 09       	nop	
  3036ca:	00 09       	nop	
  3036cc:	00 30       	.word 0x0030
  3036ce:	35 40       	cmp/eq	r4,r5

003036d0 <next_block>:
// Block-level operations
//---

/* Returns a pointer to the next block in the sequence (might be used) */
static block_t *next_block(block_t *b)
{
  3036d0:	2f e6       	mov.l	r14,@-r15
  3036d2:	7f fc       	add	#-4,r15
  3036d4:	6e f3       	mov	r15,r14
  3036d6:	61 e3       	mov	r14,r1
  3036d8:	71 c4       	add	#-60,r1
  3036da:	11 4f       	mov.l	r4,@(60,r1)
	if(b->last) return NULL;
  3036dc:	61 e3       	mov	r14,r1
  3036de:	71 c4       	add	#-60,r1
  3036e0:	51 1f       	mov.l	@(60,r1),r1
  3036e2:	62 12       	mov.l	@r1,r2
  3036e4:	d1 0b       	mov.l	303714 <next_block+0x44>,r1	! 4000000
  3036e6:	21 29       	and	r2,r1
  3036e8:	21 18       	tst	r1,r1
  3036ea:	89 02       	bt	3036f2 <next_block+0x22>
  3036ec:	e1 00       	mov	#0,r1
  3036ee:	a0 0b       	bra	303708 <next_block+0x38>
  3036f0:	00 09       	nop	
	return (void *)b + sizeof(block_t) + b->size;
  3036f2:	61 e3       	mov	r14,r1
  3036f4:	71 c4       	add	#-60,r1
  3036f6:	51 1f       	mov.l	@(60,r1),r1
  3036f8:	62 12       	mov.l	@r1,r2
  3036fa:	d1 07       	mov.l	303718 <next_block+0x48>,r1	! ffffff
  3036fc:	21 29       	and	r2,r1
  3036fe:	71 04       	add	#4,r1
  303700:	62 e3       	mov	r14,r2
  303702:	72 c4       	add	#-60,r2
  303704:	52 2f       	mov.l	@(60,r2),r2
  303706:	31 2c       	add	r2,r1
}
  303708:	60 13       	mov	r1,r0
  30370a:	7e 04       	add	#4,r14
  30370c:	6f e3       	mov	r14,r15
  30370e:	6e f6       	mov.l	@r15+,r14
  303710:	00 0b       	rts	
  303712:	00 09       	nop	
  303714:	04 00       	.word 0x0400
  303716:	00 00       	.word 0x0000
  303718:	00 ff       	mac.l	@r15+,@r0+
  30371a:	ff ff       	.word 0xffff

0030371c <previous_block_if_free>:

/* Returns a pointer to the previous block's header, if it's a free block */
static block_t *previous_block_if_free(block_t *b)
{
  30371c:	2f e6       	mov.l	r14,@-r15
  30371e:	7f f4       	add	#-12,r15
  303720:	6e f3       	mov	r15,r14
  303722:	61 e3       	mov	r14,r1
  303724:	71 cc       	add	#-52,r1
  303726:	11 4d       	mov.l	r4,@(52,r1)
	if(b->previous_used) return NULL;
  303728:	61 e3       	mov	r14,r1
  30372a:	71 cc       	add	#-52,r1
  30372c:	51 1d       	mov.l	@(52,r1),r1
  30372e:	62 12       	mov.l	@r1,r2
  303730:	d1 17       	mov.l	303790 <previous_block_if_free+0x74>,r1	! 1000000
  303732:	21 29       	and	r2,r1
  303734:	21 18       	tst	r1,r1
  303736:	89 02       	bt	30373e <previous_block_if_free+0x22>
  303738:	e1 00       	mov	#0,r1
  30373a:	a0 23       	bra	303784 <previous_block_if_free+0x68>
  30373c:	00 09       	nop	
	/* The footer of the previous block indicates its size */
	uint32_t *footer = (void *)b;
  30373e:	61 e3       	mov	r14,r1
  303740:	71 cc       	add	#-52,r1
  303742:	62 e3       	mov	r14,r2
  303744:	72 cc       	add	#-52,r2
  303746:	52 2d       	mov.l	@(52,r2),r2
  303748:	11 2f       	mov.l	r2,@(60,r1)
	uint32_t previous_size = (footer[-1] & 1) ? 8 : footer[-3];
  30374a:	61 e3       	mov	r14,r1
  30374c:	71 cc       	add	#-52,r1
  30374e:	51 1f       	mov.l	@(60,r1),r1
  303750:	71 fc       	add	#-4,r1
  303752:	61 12       	mov.l	@r1,r1
  303754:	e2 01       	mov	#1,r2
  303756:	21 29       	and	r2,r1
  303758:	21 18       	tst	r1,r1
  30375a:	8b 06       	bf	30376a <previous_block_if_free+0x4e>
  30375c:	61 e3       	mov	r14,r1
  30375e:	71 cc       	add	#-52,r1
  303760:	51 1f       	mov.l	@(60,r1),r1
  303762:	71 f4       	add	#-12,r1
  303764:	61 12       	mov.l	@r1,r1
  303766:	a0 01       	bra	30376c <previous_block_if_free+0x50>
  303768:	00 09       	nop	
  30376a:	e1 08       	mov	#8,r1
  30376c:	62 e3       	mov	r14,r2
  30376e:	72 cc       	add	#-52,r2
  303770:	12 1e       	mov.l	r1,@(56,r2)
	return (void *)b - previous_size - sizeof(block_t);
  303772:	61 e3       	mov	r14,r1
  303774:	71 cc       	add	#-52,r1
  303776:	51 1e       	mov.l	@(56,r1),r1
  303778:	61 1b       	neg	r1,r1
  30377a:	71 fc       	add	#-4,r1
  30377c:	62 e3       	mov	r14,r2
  30377e:	72 cc       	add	#-52,r2
  303780:	52 2d       	mov.l	@(52,r2),r2
  303782:	31 2c       	add	r2,r1
}
  303784:	60 13       	mov	r1,r0
  303786:	7e 0c       	add	#12,r14
  303788:	6f e3       	mov	r14,r15
  30378a:	6e f6       	mov.l	@r15+,r14
  30378c:	00 0b       	rts	
  30378e:	00 09       	nop	
  303790:	01 00       	.word 0x0100
	...

00303794 <split>:

/* Splits a used or free-floating block into a first block with (size) bytes
   and a free second block with the rest. Returns the address of the second
   block. If the initial block is too small to split, returns NULL. */
static block_t *split(block_t *b, int size)
{
  303794:	2f 86       	mov.l	r8,@-r15
  303796:	2f e6       	mov.l	r14,@-r15
  303798:	4f 22       	sts.l	pr,@-r15
  30379a:	7f ec       	add	#-20,r15
  30379c:	6e f3       	mov	r15,r14
  30379e:	61 e3       	mov	r14,r1
  3037a0:	71 d4       	add	#-44,r1
  3037a2:	11 4c       	mov.l	r4,@(48,r1)
  3037a4:	61 e3       	mov	r14,r1
  3037a6:	71 d4       	add	#-44,r1
  3037a8:	11 5b       	mov.l	r5,@(44,r1)
	size_t extra_size = b->size - size;
  3037aa:	61 e3       	mov	r14,r1
  3037ac:	71 d4       	add	#-44,r1
  3037ae:	51 1c       	mov.l	@(48,r1),r1
  3037b0:	62 12       	mov.l	@r1,r2
  3037b2:	d1 54       	mov.l	303904 <split+0x170>,r1	! ffffff
  3037b4:	21 29       	and	r2,r1
  3037b6:	62 13       	mov	r1,r2
  3037b8:	61 e3       	mov	r14,r1
  3037ba:	71 d4       	add	#-44,r1
  3037bc:	51 1b       	mov.l	@(44,r1),r1
  3037be:	32 18       	sub	r1,r2
  3037c0:	61 e3       	mov	r14,r1
  3037c2:	71 d4       	add	#-44,r1
  3037c4:	11 2f       	mov.l	r2,@(60,r1)
	if(extra_size < sizeof(block_t) + 8) return NULL;
  3037c6:	61 e3       	mov	r14,r1
  3037c8:	71 d4       	add	#-44,r1
  3037ca:	52 1f       	mov.l	@(60,r1),r2
  3037cc:	e1 0b       	mov	#11,r1
  3037ce:	32 16       	cmp/hi	r1,r2
  3037d0:	89 02       	bt	3037d8 <split+0x44>
  3037d2:	e1 00       	mov	#0,r1
  3037d4:	a0 8d       	bra	3038f2 <split+0x15e>
  3037d6:	00 09       	nop	

	block_t *second = (void *)b + sizeof(block_t) + size;
  3037d8:	61 e3       	mov	r14,r1
  3037da:	71 d4       	add	#-44,r1
  3037dc:	51 1b       	mov.l	@(44,r1),r1
  3037de:	62 13       	mov	r1,r2
  3037e0:	72 04       	add	#4,r2
  3037e2:	61 e3       	mov	r14,r1
  3037e4:	71 d4       	add	#-44,r1
  3037e6:	63 e3       	mov	r14,r3
  3037e8:	73 d4       	add	#-44,r3
  3037ea:	53 3c       	mov.l	@(48,r3),r3
  3037ec:	32 3c       	add	r3,r2
  3037ee:	11 2e       	mov.l	r2,@(56,r1)
	second->last = b->last;
  3037f0:	61 e3       	mov	r14,r1
  3037f2:	71 d4       	add	#-44,r1
  3037f4:	51 1c       	mov.l	@(48,r1),r1
  3037f6:	61 12       	mov.l	@r1,r1
  3037f8:	e2 e6       	mov	#-26,r2
  3037fa:	41 2d       	shld	r2,r1
  3037fc:	e3 01       	mov	#1,r3
  3037fe:	21 39       	and	r3,r1
  303800:	62 1c       	extu.b	r1,r2
  303802:	61 e3       	mov	r14,r1
  303804:	71 d4       	add	#-44,r1
  303806:	51 1e       	mov.l	@(56,r1),r1
  303808:	e3 01       	mov	#1,r3
  30380a:	22 39       	and	r3,r2
  30380c:	e3 1a       	mov	#26,r3
  30380e:	42 3d       	shld	r3,r2
  303810:	67 12       	mov.l	@r1,r7
  303812:	d3 3d       	mov.l	303908 <split+0x174>,r3	! fbffffff
  303814:	23 79       	and	r7,r3
  303816:	22 3b       	or	r3,r2
  303818:	21 22       	mov.l	r2,@r1
	second->used = false;
  30381a:	61 e3       	mov	r14,r1
  30381c:	71 d4       	add	#-44,r1
  30381e:	51 1e       	mov.l	@(56,r1),r1
  303820:	63 12       	mov.l	@r1,r3
  303822:	d2 3a       	mov.l	30390c <split+0x178>,r2	! fdffffff
  303824:	22 39       	and	r3,r2
  303826:	21 22       	mov.l	r2,@r1
	second->previous_used = b->used;
  303828:	61 e3       	mov	r14,r1
  30382a:	71 d4       	add	#-44,r1
  30382c:	51 1c       	mov.l	@(48,r1),r1
  30382e:	61 12       	mov.l	@r1,r1
  303830:	e2 e7       	mov	#-25,r2
  303832:	41 2d       	shld	r2,r1
  303834:	e3 01       	mov	#1,r3
  303836:	21 39       	and	r3,r1
  303838:	61 1c       	extu.b	r1,r1
  30383a:	62 e3       	mov	r14,r2
  30383c:	72 d4       	add	#-44,r2
  30383e:	52 2e       	mov.l	@(56,r2),r2
  303840:	e3 01       	mov	#1,r3
  303842:	21 39       	and	r3,r1
  303844:	41 28       	shll16	r1
  303846:	41 18       	shll8	r1
  303848:	67 22       	mov.l	@r2,r7
  30384a:	d3 31       	mov.l	303910 <split+0x17c>,r3	! feffffff
  30384c:	23 79       	and	r7,r3
  30384e:	21 3b       	or	r3,r1
  303850:	22 12       	mov.l	r1,@r2
	second->size = extra_size - sizeof(block_t);
  303852:	61 e3       	mov	r14,r1
  303854:	71 d4       	add	#-44,r1
  303856:	51 1f       	mov.l	@(60,r1),r1
  303858:	62 13       	mov	r1,r2
  30385a:	72 fc       	add	#-4,r2
  30385c:	d1 29       	mov.l	303904 <split+0x170>,r1	! ffffff
  30385e:	63 23       	mov	r2,r3
  303860:	23 19       	and	r1,r3
  303862:	61 e3       	mov	r14,r1
  303864:	71 d4       	add	#-44,r1
  303866:	51 1e       	mov.l	@(56,r1),r1
  303868:	d2 26       	mov.l	303904 <split+0x170>,r2	! ffffff
  30386a:	22 39       	and	r3,r2
  30386c:	67 12       	mov.l	@r1,r7
  30386e:	d3 29       	mov.l	303914 <split+0x180>,r3	! ff000000
  303870:	23 79       	and	r7,r3
  303872:	22 3b       	or	r3,r2
  303874:	21 22       	mov.l	r2,@r1

	block_t *third = next_block(second);
  303876:	68 e3       	mov	r14,r8
  303878:	78 d4       	add	#-44,r8
  30387a:	61 e3       	mov	r14,r1
  30387c:	71 d4       	add	#-44,r1
  30387e:	54 1e       	mov.l	@(56,r1),r4
  303880:	d1 25       	mov.l	303918 <split+0x184>,r1	! 3036d0 <next_block>
  303882:	41 0b       	jsr	@r1
  303884:	00 09       	nop	
  303886:	61 03       	mov	r0,r1
  303888:	18 1d       	mov.l	r1,@(52,r8)
	if(third) third->previous_used = second->used;
  30388a:	61 e3       	mov	r14,r1
  30388c:	71 d4       	add	#-44,r1
  30388e:	51 1d       	mov.l	@(52,r1),r1
  303890:	21 18       	tst	r1,r1
  303892:	89 14       	bt	3038be <split+0x12a>
  303894:	61 e3       	mov	r14,r1
  303896:	71 d4       	add	#-44,r1
  303898:	51 1e       	mov.l	@(56,r1),r1
  30389a:	61 12       	mov.l	@r1,r1
  30389c:	e2 e7       	mov	#-25,r2
  30389e:	41 2d       	shld	r2,r1
  3038a0:	e3 01       	mov	#1,r3
  3038a2:	21 39       	and	r3,r1
  3038a4:	61 1c       	extu.b	r1,r1
  3038a6:	62 e3       	mov	r14,r2
  3038a8:	72 d4       	add	#-44,r2
  3038aa:	52 2d       	mov.l	@(52,r2),r2
  3038ac:	e3 01       	mov	#1,r3
  3038ae:	21 39       	and	r3,r1
  3038b0:	41 28       	shll16	r1
  3038b2:	41 18       	shll8	r1
  3038b4:	67 22       	mov.l	@r2,r7
  3038b6:	d3 16       	mov.l	303910 <split+0x17c>,r3	! feffffff
  3038b8:	23 79       	and	r7,r3
  3038ba:	21 3b       	or	r3,r1
  3038bc:	22 12       	mov.l	r1,@r2

	b->last = 0;
  3038be:	61 e3       	mov	r14,r1
  3038c0:	71 d4       	add	#-44,r1
  3038c2:	51 1c       	mov.l	@(48,r1),r1
  3038c4:	63 12       	mov.l	@r1,r3
  3038c6:	d2 10       	mov.l	303908 <split+0x174>,r2	! fbffffff
  3038c8:	22 39       	and	r3,r2
  3038ca:	21 22       	mov.l	r2,@r1
	b->size = size;
  3038cc:	61 e3       	mov	r14,r1
  3038ce:	71 d4       	add	#-44,r1
  3038d0:	52 1b       	mov.l	@(44,r1),r2
  3038d2:	d1 0c       	mov.l	303904 <split+0x170>,r1	! ffffff
  3038d4:	63 23       	mov	r2,r3
  3038d6:	23 19       	and	r1,r3
  3038d8:	61 e3       	mov	r14,r1
  3038da:	71 d4       	add	#-44,r1
  3038dc:	51 1c       	mov.l	@(48,r1),r1
  3038de:	d2 09       	mov.l	303904 <split+0x170>,r2	! ffffff
  3038e0:	22 39       	and	r3,r2
  3038e2:	67 12       	mov.l	@r1,r7
  3038e4:	d3 0b       	mov.l	303914 <split+0x180>,r3	! ff000000
  3038e6:	23 79       	and	r7,r3
  3038e8:	22 3b       	or	r3,r2
  3038ea:	21 22       	mov.l	r2,@r1

	return second;
  3038ec:	61 e3       	mov	r14,r1
  3038ee:	71 d4       	add	#-44,r1
  3038f0:	51 1e       	mov.l	@(56,r1),r1
}
  3038f2:	60 13       	mov	r1,r0
  3038f4:	7e 14       	add	#20,r14
  3038f6:	6f e3       	mov	r14,r15
  3038f8:	4f 26       	lds.l	@r15+,pr
  3038fa:	6e f6       	mov.l	@r15+,r14
  3038fc:	68 f6       	mov.l	@r15+,r8
  3038fe:	00 0b       	rts	
  303900:	00 09       	nop	
  303902:	00 09       	nop	
  303904:	00 ff       	mac.l	@r15+,@r0+
  303906:	ff ff       	.word 0xffff
  303908:	fb ff ff ff 	dcf plds	a0g,macl	movx.w	a1,@r5+r8	movy.w	a1,@r7+r9
  30390c:	fd ff       	.word 0xfdff
  30390e:	ff ff       	.word 0xffff
  303910:	fe ff       	.word 0xfeff
  303912:	ff ff       	.word 0xffff
  303914:	ff 00       	.word 0xff00
  303916:	00 00       	.word 0x0000
  303918:	00 30       	.word 0x0030
  30391a:	36 d0       	cmp/eq	r13,r6

0030391c <merge>:

/* Merge a used or free-floating block with its free neighbor. There are two
   parameters for clarity, but really (right == next_block(left)). */
static void merge(block_t *left, block_t *right)
{
  30391c:	2f 86       	mov.l	r8,@-r15
  30391e:	2f e6       	mov.l	r14,@-r15
  303920:	4f 22       	sts.l	pr,@-r15
  303922:	7f f0       	add	#-16,r15
  303924:	6e f3       	mov	r15,r14
  303926:	61 e3       	mov	r14,r1
  303928:	71 d0       	add	#-48,r1
  30392a:	11 4d       	mov.l	r4,@(52,r1)
  30392c:	61 e3       	mov	r14,r1
  30392e:	71 d0       	add	#-48,r1
  303930:	11 5c       	mov.l	r5,@(48,r1)
	size_t extra_size = sizeof(block_t) + right->size;
  303932:	61 e3       	mov	r14,r1
  303934:	71 d0       	add	#-48,r1
  303936:	51 1c       	mov.l	@(48,r1),r1
  303938:	62 12       	mov.l	@r1,r2
  30393a:	d1 30       	mov.l	3039fc <merge+0xe0>,r1	! ffffff
  30393c:	21 29       	and	r2,r1
  30393e:	62 13       	mov	r1,r2
  303940:	61 e3       	mov	r14,r1
  303942:	71 d0       	add	#-48,r1
  303944:	72 04       	add	#4,r2
  303946:	11 2f       	mov.l	r2,@(60,r1)
	left->last = right->last;
  303948:	61 e3       	mov	r14,r1
  30394a:	71 d0       	add	#-48,r1
  30394c:	51 1c       	mov.l	@(48,r1),r1
  30394e:	61 12       	mov.l	@r1,r1
  303950:	e2 e6       	mov	#-26,r2
  303952:	41 2d       	shld	r2,r1
  303954:	e3 01       	mov	#1,r3
  303956:	21 39       	and	r3,r1
  303958:	62 1c       	extu.b	r1,r2
  30395a:	61 e3       	mov	r14,r1
  30395c:	71 d0       	add	#-48,r1
  30395e:	51 1d       	mov.l	@(52,r1),r1
  303960:	e3 01       	mov	#1,r3
  303962:	22 39       	and	r3,r2
  303964:	e3 1a       	mov	#26,r3
  303966:	42 3d       	shld	r3,r2
  303968:	67 12       	mov.l	@r1,r7
  30396a:	d3 25       	mov.l	303a00 <merge+0xe4>,r3	! fbffffff
  30396c:	23 79       	and	r7,r3
  30396e:	22 3b       	or	r3,r2
  303970:	21 22       	mov.l	r2,@r1
	left->size += extra_size;
  303972:	61 e3       	mov	r14,r1
  303974:	71 d0       	add	#-48,r1
  303976:	51 1d       	mov.l	@(52,r1),r1
  303978:	62 12       	mov.l	@r1,r2
  30397a:	d1 20       	mov.l	3039fc <merge+0xe0>,r1	! ffffff
  30397c:	21 29       	and	r2,r1
  30397e:	62 13       	mov	r1,r2
  303980:	61 e3       	mov	r14,r1
  303982:	71 d0       	add	#-48,r1
  303984:	51 1f       	mov.l	@(60,r1),r1
  303986:	32 1c       	add	r1,r2
  303988:	d1 1c       	mov.l	3039fc <merge+0xe0>,r1	! ffffff
  30398a:	63 23       	mov	r2,r3
  30398c:	23 19       	and	r1,r3
  30398e:	61 e3       	mov	r14,r1
  303990:	71 d0       	add	#-48,r1
  303992:	51 1d       	mov.l	@(52,r1),r1
  303994:	d2 19       	mov.l	3039fc <merge+0xe0>,r2	! ffffff
  303996:	22 39       	and	r3,r2
  303998:	67 12       	mov.l	@r1,r7
  30399a:	d3 1a       	mov.l	303a04 <merge+0xe8>,r3	! ff000000
  30399c:	23 79       	and	r7,r3
  30399e:	22 3b       	or	r3,r2
  3039a0:	21 22       	mov.l	r2,@r1

	block_t *next = next_block(left);
  3039a2:	68 e3       	mov	r14,r8
  3039a4:	78 d0       	add	#-48,r8
  3039a6:	61 e3       	mov	r14,r1
  3039a8:	71 d0       	add	#-48,r1
  3039aa:	54 1d       	mov.l	@(52,r1),r4
  3039ac:	d1 16       	mov.l	303a08 <merge+0xec>,r1	! 3036d0 <next_block>
  3039ae:	41 0b       	jsr	@r1
  3039b0:	00 09       	nop	
  3039b2:	61 03       	mov	r0,r1
  3039b4:	18 1e       	mov.l	r1,@(56,r8)
	if(next) next->previous_used = left->used;
  3039b6:	61 e3       	mov	r14,r1
  3039b8:	71 d0       	add	#-48,r1
  3039ba:	51 1e       	mov.l	@(56,r1),r1
  3039bc:	21 18       	tst	r1,r1
  3039be:	89 14       	bt	3039ea <merge+0xce>
  3039c0:	61 e3       	mov	r14,r1
  3039c2:	71 d0       	add	#-48,r1
  3039c4:	51 1d       	mov.l	@(52,r1),r1
  3039c6:	61 12       	mov.l	@r1,r1
  3039c8:	e2 e7       	mov	#-25,r2
  3039ca:	41 2d       	shld	r2,r1
  3039cc:	e3 01       	mov	#1,r3
  3039ce:	21 39       	and	r3,r1
  3039d0:	61 1c       	extu.b	r1,r1
  3039d2:	62 e3       	mov	r14,r2
  3039d4:	72 d0       	add	#-48,r2
  3039d6:	52 2e       	mov.l	@(56,r2),r2
  3039d8:	e3 01       	mov	#1,r3
  3039da:	21 39       	and	r3,r1
  3039dc:	41 28       	shll16	r1
  3039de:	41 18       	shll8	r1
  3039e0:	67 22       	mov.l	@r2,r7
  3039e2:	d3 0a       	mov.l	303a0c <merge+0xf0>,r3	! feffffff
  3039e4:	23 79       	and	r7,r3
  3039e6:	21 3b       	or	r3,r1
  3039e8:	22 12       	mov.l	r1,@r2
}
  3039ea:	00 09       	nop	
  3039ec:	7e 10       	add	#16,r14
  3039ee:	6f e3       	mov	r14,r15
  3039f0:	4f 26       	lds.l	@r15+,pr
  3039f2:	6e f6       	mov.l	@r15+,r14
  3039f4:	68 f6       	mov.l	@r15+,r8
  3039f6:	00 0b       	rts	
  3039f8:	00 09       	nop	
  3039fa:	00 09       	nop	
  3039fc:	00 ff       	mac.l	@r15+,@r0+
  3039fe:	ff ff       	.word 0xffff
  303a00:	fb ff ff ff 	dcf plds	a0g,macl	movx.w	a1,@r5+r8	movy.w	a1,@r7+r9
  303a04:	ff 00       	.word 0xff00
  303a06:	00 00       	.word 0x0000
  303a08:	00 30       	.word 0x0030
  303a0a:	36 d0       	cmp/eq	r13,r6
  303a0c:	fe ff       	.word 0xfeff
  303a0e:	ff ff       	.word 0xffff

00303a10 <next_link>:
// List-level operations
//---

/* Returns the next free block in the list, assumes (b) is free */
static block_t *next_link(block_t *b)
{
  303a10:	2f e6       	mov.l	r14,@-r15
  303a12:	7f f8       	add	#-8,r15
  303a14:	6e f3       	mov	r15,r14
  303a16:	61 e3       	mov	r14,r1
  303a18:	71 c8       	add	#-56,r1
  303a1a:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t *footer = (void *)b + sizeof(block_t) + b->size;
  303a1c:	61 e3       	mov	r14,r1
  303a1e:	71 c8       	add	#-56,r1
  303a20:	51 1e       	mov.l	@(56,r1),r1
  303a22:	62 12       	mov.l	@r1,r2
  303a24:	d1 0b       	mov.l	303a54 <next_link+0x44>,r1	! ffffff
  303a26:	21 29       	and	r2,r1
  303a28:	62 13       	mov	r1,r2
  303a2a:	72 04       	add	#4,r2
  303a2c:	61 e3       	mov	r14,r1
  303a2e:	71 c8       	add	#-56,r1
  303a30:	63 e3       	mov	r14,r3
  303a32:	73 c8       	add	#-56,r3
  303a34:	53 3e       	mov.l	@(56,r3),r3
  303a36:	32 3c       	add	r3,r2
  303a38:	11 2f       	mov.l	r2,@(60,r1)
	return (block_t *)(footer[-1] & ~3);
  303a3a:	61 e3       	mov	r14,r1
  303a3c:	71 c8       	add	#-56,r1
  303a3e:	51 1f       	mov.l	@(60,r1),r1
  303a40:	71 fc       	add	#-4,r1
  303a42:	62 12       	mov.l	@r1,r2
  303a44:	e1 fc       	mov	#-4,r1
  303a46:	21 29       	and	r2,r1
}
  303a48:	60 13       	mov	r1,r0
  303a4a:	7e 08       	add	#8,r14
  303a4c:	6f e3       	mov	r14,r15
  303a4e:	6e f6       	mov.l	@r15+,r14
  303a50:	00 0b       	rts	
  303a52:	00 09       	nop	
  303a54:	00 ff       	mac.l	@r15+,@r0+
  303a56:	ff ff       	.word 0xffff

00303a58 <previous_link>:

/* Returns the previous free block in the list, assumes (b) is free */
static block_t *previous_link(block_t *b)
{
  303a58:	2f e6       	mov.l	r14,@-r15
  303a5a:	7f f8       	add	#-8,r15
  303a5c:	6e f3       	mov	r15,r14
  303a5e:	61 e3       	mov	r14,r1
  303a60:	71 c8       	add	#-56,r1
  303a62:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t *footer = (void *)b + sizeof(block_t) + b->size;
  303a64:	61 e3       	mov	r14,r1
  303a66:	71 c8       	add	#-56,r1
  303a68:	51 1e       	mov.l	@(56,r1),r1
  303a6a:	62 12       	mov.l	@r1,r2
  303a6c:	d1 0a       	mov.l	303a98 <previous_link+0x40>,r1	! ffffff
  303a6e:	21 29       	and	r2,r1
  303a70:	62 13       	mov	r1,r2
  303a72:	72 04       	add	#4,r2
  303a74:	61 e3       	mov	r14,r1
  303a76:	71 c8       	add	#-56,r1
  303a78:	63 e3       	mov	r14,r3
  303a7a:	73 c8       	add	#-56,r3
  303a7c:	53 3e       	mov.l	@(56,r3),r3
  303a7e:	32 3c       	add	r3,r2
  303a80:	11 2f       	mov.l	r2,@(60,r1)
	return (block_t *)footer[-2];
  303a82:	61 e3       	mov	r14,r1
  303a84:	71 c8       	add	#-56,r1
  303a86:	51 1f       	mov.l	@(60,r1),r1
  303a88:	71 f8       	add	#-8,r1
  303a8a:	61 12       	mov.l	@r1,r1
}
  303a8c:	60 13       	mov	r1,r0
  303a8e:	7e 08       	add	#8,r14
  303a90:	6f e3       	mov	r14,r15
  303a92:	6e f6       	mov.l	@r15+,r14
  303a94:	00 0b       	rts	
  303a96:	00 09       	nop	
  303a98:	00 ff       	mac.l	@r15+,@r0+
  303a9a:	ff ff       	.word 0xffff

00303a9c <set_footer>:

/* Writes the given free block links to the footer of free block (b) */
static void set_footer(block_t *b, block_t *previous_link, block_t *next_link)
{
  303a9c:	2f e6       	mov.l	r14,@-r15
  303a9e:	7f f0       	add	#-16,r15
  303aa0:	6e f3       	mov	r15,r14
  303aa2:	61 e3       	mov	r14,r1
  303aa4:	71 d0       	add	#-48,r1
  303aa6:	11 4e       	mov.l	r4,@(56,r1)
  303aa8:	61 e3       	mov	r14,r1
  303aaa:	71 d0       	add	#-48,r1
  303aac:	11 5d       	mov.l	r5,@(52,r1)
  303aae:	61 e3       	mov	r14,r1
  303ab0:	71 d0       	add	#-48,r1
  303ab2:	11 6c       	mov.l	r6,@(48,r1)
	uint32_t *footer = (void *)b + sizeof(block_t) + b->size;
  303ab4:	61 e3       	mov	r14,r1
  303ab6:	71 d0       	add	#-48,r1
  303ab8:	51 1e       	mov.l	@(56,r1),r1
  303aba:	62 12       	mov.l	@r1,r2
  303abc:	d1 24       	mov.l	303b50 <set_footer+0xb4>,r1	! ffffff
  303abe:	21 29       	and	r2,r1
  303ac0:	62 13       	mov	r1,r2
  303ac2:	72 04       	add	#4,r2
  303ac4:	61 e3       	mov	r14,r1
  303ac6:	71 d0       	add	#-48,r1
  303ac8:	63 e3       	mov	r14,r3
  303aca:	73 d0       	add	#-48,r3
  303acc:	53 3e       	mov.l	@(56,r3),r3
  303ace:	32 3c       	add	r3,r2
  303ad0:	11 2f       	mov.l	r2,@(60,r1)
	/* 8-byte block: store the next link with LSB=1 */
	if(b->size == 8)
  303ad2:	61 e3       	mov	r14,r1
  303ad4:	71 d0       	add	#-48,r1
  303ad6:	51 1e       	mov.l	@(56,r1),r1
  303ad8:	62 12       	mov.l	@r1,r2
  303ada:	d1 1d       	mov.l	303b50 <set_footer+0xb4>,r1	! ffffff
  303adc:	22 19       	and	r1,r2
  303ade:	e1 08       	mov	#8,r1
  303ae0:	32 10       	cmp/eq	r1,r2
  303ae2:	8b 13       	bf	303b0c <set_footer+0x70>
	{
		footer[-2] = (uint32_t)previous_link;
  303ae4:	61 e3       	mov	r14,r1
  303ae6:	71 d0       	add	#-48,r1
  303ae8:	51 1f       	mov.l	@(60,r1),r1
  303aea:	71 f8       	add	#-8,r1
  303aec:	62 e3       	mov	r14,r2
  303aee:	72 d0       	add	#-48,r2
  303af0:	52 2d       	mov.l	@(52,r2),r2
  303af2:	21 22       	mov.l	r2,@r1
		footer[-1] = (uint32_t)next_link | 1;
  303af4:	61 e3       	mov	r14,r1
  303af6:	71 d0       	add	#-48,r1
  303af8:	52 1c       	mov.l	@(48,r1),r2
  303afa:	61 e3       	mov	r14,r1
  303afc:	71 d0       	add	#-48,r1
  303afe:	51 1f       	mov.l	@(60,r1),r1
  303b00:	71 fc       	add	#-4,r1
  303b02:	e3 01       	mov	#1,r3
  303b04:	22 3b       	or	r3,r2
  303b06:	21 22       	mov.l	r2,@r1
	{
		footer[-3] = b->size;
		footer[-2] = (uint32_t)previous_link;
		footer[-1] = (uint32_t)next_link;
	}
}
  303b08:	a0 1b       	bra	303b42 <set_footer+0xa6>
  303b0a:	00 09       	nop	
		footer[-3] = b->size;
  303b0c:	61 e3       	mov	r14,r1
  303b0e:	71 d0       	add	#-48,r1
  303b10:	51 1e       	mov.l	@(56,r1),r1
  303b12:	62 12       	mov.l	@r1,r2
  303b14:	d1 0e       	mov.l	303b50 <set_footer+0xb4>,r1	! ffffff
  303b16:	22 19       	and	r1,r2
  303b18:	61 e3       	mov	r14,r1
  303b1a:	71 d0       	add	#-48,r1
  303b1c:	51 1f       	mov.l	@(60,r1),r1
  303b1e:	71 f4       	add	#-12,r1
  303b20:	21 22       	mov.l	r2,@r1
		footer[-2] = (uint32_t)previous_link;
  303b22:	61 e3       	mov	r14,r1
  303b24:	71 d0       	add	#-48,r1
  303b26:	51 1f       	mov.l	@(60,r1),r1
  303b28:	71 f8       	add	#-8,r1
  303b2a:	62 e3       	mov	r14,r2
  303b2c:	72 d0       	add	#-48,r2
  303b2e:	52 2d       	mov.l	@(52,r2),r2
  303b30:	21 22       	mov.l	r2,@r1
		footer[-1] = (uint32_t)next_link;
  303b32:	61 e3       	mov	r14,r1
  303b34:	71 d0       	add	#-48,r1
  303b36:	51 1f       	mov.l	@(60,r1),r1
  303b38:	71 fc       	add	#-4,r1
  303b3a:	62 e3       	mov	r14,r2
  303b3c:	72 d0       	add	#-48,r2
  303b3e:	52 2c       	mov.l	@(48,r2),r2
  303b40:	21 22       	mov.l	r2,@r1
}
  303b42:	00 09       	nop	
  303b44:	7e 10       	add	#16,r14
  303b46:	6f e3       	mov	r14,r15
  303b48:	6e f6       	mov.l	@r15+,r14
  303b4a:	00 0b       	rts	
  303b4c:	00 09       	nop	
  303b4e:	00 09       	nop	
  303b50:	00 ff       	mac.l	@r15+,@r0+
  303b52:	ff ff       	.word 0xffff

00303b54 <best_fit>:

/* Find a best fit for the requested size in the list */
static block_t *best_fit(block_t *list, size_t size)
{
  303b54:	2f 86       	mov.l	r8,@-r15
  303b56:	2f e6       	mov.l	r14,@-r15
  303b58:	4f 22       	sts.l	pr,@-r15
  303b5a:	7f f0       	add	#-16,r15
  303b5c:	6e f3       	mov	r15,r14
  303b5e:	61 e3       	mov	r14,r1
  303b60:	71 d0       	add	#-48,r1
  303b62:	11 4d       	mov.l	r4,@(52,r1)
  303b64:	61 e3       	mov	r14,r1
  303b66:	71 d0       	add	#-48,r1
  303b68:	11 5c       	mov.l	r5,@(48,r1)
	block_t *best_match = NULL;
  303b6a:	61 e3       	mov	r14,r1
  303b6c:	71 d0       	add	#-48,r1
  303b6e:	e2 00       	mov	#0,r2
  303b70:	11 2f       	mov.l	r2,@(60,r1)
	size_t best_size = 0xffffffff;
  303b72:	61 e3       	mov	r14,r1
  303b74:	71 d0       	add	#-48,r1
  303b76:	e2 ff       	mov	#-1,r2
  303b78:	11 2e       	mov.l	r2,@(56,r1)

	while(list && best_size != size)
  303b7a:	a0 31       	bra	303be0 <best_fit+0x8c>
  303b7c:	00 09       	nop	
	{
		if(list->size >= size && list->size < best_size)
  303b7e:	61 e3       	mov	r14,r1
  303b80:	71 d0       	add	#-48,r1
  303b82:	51 1d       	mov.l	@(52,r1),r1
  303b84:	62 12       	mov.l	@r1,r2
  303b86:	d1 22       	mov.l	303c10 <best_fit+0xbc>,r1	! ffffff
  303b88:	21 29       	and	r2,r1
  303b8a:	62 13       	mov	r1,r2
  303b8c:	61 e3       	mov	r14,r1
  303b8e:	71 d0       	add	#-48,r1
  303b90:	51 1c       	mov.l	@(48,r1),r1
  303b92:	31 26       	cmp/hi	r2,r1
  303b94:	89 1a       	bt	303bcc <best_fit+0x78>
  303b96:	61 e3       	mov	r14,r1
  303b98:	71 d0       	add	#-48,r1
  303b9a:	51 1d       	mov.l	@(52,r1),r1
  303b9c:	62 12       	mov.l	@r1,r2
  303b9e:	d1 1c       	mov.l	303c10 <best_fit+0xbc>,r1	! ffffff
  303ba0:	21 29       	and	r2,r1
  303ba2:	62 13       	mov	r1,r2
  303ba4:	61 e3       	mov	r14,r1
  303ba6:	71 d0       	add	#-48,r1
  303ba8:	51 1e       	mov.l	@(56,r1),r1
  303baa:	31 26       	cmp/hi	r2,r1
  303bac:	8b 0e       	bf	303bcc <best_fit+0x78>
		{
			best_match = list;
  303bae:	61 e3       	mov	r14,r1
  303bb0:	71 d0       	add	#-48,r1
  303bb2:	62 e3       	mov	r14,r2
  303bb4:	72 d0       	add	#-48,r2
  303bb6:	52 2d       	mov.l	@(52,r2),r2
  303bb8:	11 2f       	mov.l	r2,@(60,r1)
			best_size = list->size;
  303bba:	61 e3       	mov	r14,r1
  303bbc:	71 d0       	add	#-48,r1
  303bbe:	51 1d       	mov.l	@(52,r1),r1
  303bc0:	62 12       	mov.l	@r1,r2
  303bc2:	d1 13       	mov.l	303c10 <best_fit+0xbc>,r1	! ffffff
  303bc4:	22 19       	and	r1,r2
  303bc6:	61 e3       	mov	r14,r1
  303bc8:	71 d0       	add	#-48,r1
  303bca:	11 2e       	mov.l	r2,@(56,r1)
		}
		list = next_link(list);
  303bcc:	68 e3       	mov	r14,r8
  303bce:	78 d0       	add	#-48,r8
  303bd0:	61 e3       	mov	r14,r1
  303bd2:	71 d0       	add	#-48,r1
  303bd4:	54 1d       	mov.l	@(52,r1),r4
  303bd6:	d1 0f       	mov.l	303c14 <best_fit+0xc0>,r1	! 303a10 <next_link>
  303bd8:	41 0b       	jsr	@r1
  303bda:	00 09       	nop	
  303bdc:	61 03       	mov	r0,r1
  303bde:	18 1d       	mov.l	r1,@(52,r8)
	while(list && best_size != size)
  303be0:	61 e3       	mov	r14,r1
  303be2:	71 d0       	add	#-48,r1
  303be4:	51 1d       	mov.l	@(52,r1),r1
  303be6:	21 18       	tst	r1,r1
  303be8:	89 07       	bt	303bfa <best_fit+0xa6>
  303bea:	62 e3       	mov	r14,r2
  303bec:	72 d0       	add	#-48,r2
  303bee:	61 e3       	mov	r14,r1
  303bf0:	71 d0       	add	#-48,r1
  303bf2:	52 2e       	mov.l	@(56,r2),r2
  303bf4:	51 1c       	mov.l	@(48,r1),r1
  303bf6:	32 10       	cmp/eq	r1,r2
  303bf8:	8b c1       	bf	303b7e <best_fit+0x2a>
	}

	return best_match;
  303bfa:	61 e3       	mov	r14,r1
  303bfc:	71 d0       	add	#-48,r1
  303bfe:	51 1f       	mov.l	@(60,r1),r1
}
  303c00:	60 13       	mov	r1,r0
  303c02:	7e 10       	add	#16,r14
  303c04:	6f e3       	mov	r14,r15
  303c06:	4f 26       	lds.l	@r15+,pr
  303c08:	6e f6       	mov.l	@r15+,r14
  303c0a:	68 f6       	mov.l	@r15+,r8
  303c0c:	00 0b       	rts	
  303c0e:	00 09       	nop	
  303c10:	00 ff       	mac.l	@r15+,@r0+
  303c12:	ff ff       	.word 0xffff
  303c14:	00 30       	.word 0x0030
  303c16:	3a 10       	cmp/eq	r1,r10

00303c18 <worst_fit>:

/* Find a worst fit in the list */
static block_t *worst_fit(block_t *list)
{
  303c18:	2f 86       	mov.l	r8,@-r15
  303c1a:	2f e6       	mov.l	r14,@-r15
  303c1c:	4f 22       	sts.l	pr,@-r15
  303c1e:	7f f4       	add	#-12,r15
  303c20:	6e f3       	mov	r15,r14
  303c22:	61 e3       	mov	r14,r1
  303c24:	71 cc       	add	#-52,r1
  303c26:	11 4d       	mov.l	r4,@(52,r1)
	block_t *best_match = NULL;
  303c28:	61 e3       	mov	r14,r1
  303c2a:	71 cc       	add	#-52,r1
  303c2c:	e2 00       	mov	#0,r2
  303c2e:	11 2f       	mov.l	r2,@(60,r1)
	size_t best_size = 0;
  303c30:	61 e3       	mov	r14,r1
  303c32:	71 cc       	add	#-52,r1
  303c34:	e2 00       	mov	#0,r2
  303c36:	11 2e       	mov.l	r2,@(56,r1)

	while(list)
  303c38:	a0 25       	bra	303c86 <worst_fit+0x6e>
  303c3a:	00 09       	nop	
	{
		if(list->size >= best_size)
  303c3c:	61 e3       	mov	r14,r1
  303c3e:	71 cc       	add	#-52,r1
  303c40:	51 1d       	mov.l	@(52,r1),r1
  303c42:	62 12       	mov.l	@r1,r2
  303c44:	d1 18       	mov.l	303ca8 <worst_fit+0x90>,r1	! ffffff
  303c46:	21 29       	and	r2,r1
  303c48:	62 13       	mov	r1,r2
  303c4a:	61 e3       	mov	r14,r1
  303c4c:	71 cc       	add	#-52,r1
  303c4e:	51 1e       	mov.l	@(56,r1),r1
  303c50:	31 26       	cmp/hi	r2,r1
  303c52:	89 0e       	bt	303c72 <worst_fit+0x5a>
		{
			best_match = list;
  303c54:	61 e3       	mov	r14,r1
  303c56:	71 cc       	add	#-52,r1
  303c58:	62 e3       	mov	r14,r2
  303c5a:	72 cc       	add	#-52,r2
  303c5c:	52 2d       	mov.l	@(52,r2),r2
  303c5e:	11 2f       	mov.l	r2,@(60,r1)
			best_size = list->size;
  303c60:	61 e3       	mov	r14,r1
  303c62:	71 cc       	add	#-52,r1
  303c64:	51 1d       	mov.l	@(52,r1),r1
  303c66:	62 12       	mov.l	@r1,r2
  303c68:	d1 0f       	mov.l	303ca8 <worst_fit+0x90>,r1	! ffffff
  303c6a:	22 19       	and	r1,r2
  303c6c:	61 e3       	mov	r14,r1
  303c6e:	71 cc       	add	#-52,r1
  303c70:	11 2e       	mov.l	r2,@(56,r1)
		}
		list = next_link(list);
  303c72:	68 e3       	mov	r14,r8
  303c74:	78 cc       	add	#-52,r8
  303c76:	61 e3       	mov	r14,r1
  303c78:	71 cc       	add	#-52,r1
  303c7a:	54 1d       	mov.l	@(52,r1),r4
  303c7c:	d1 0b       	mov.l	303cac <worst_fit+0x94>,r1	! 303a10 <next_link>
  303c7e:	41 0b       	jsr	@r1
  303c80:	00 09       	nop	
  303c82:	61 03       	mov	r0,r1
  303c84:	18 1d       	mov.l	r1,@(52,r8)
	while(list)
  303c86:	61 e3       	mov	r14,r1
  303c88:	71 cc       	add	#-52,r1
  303c8a:	51 1d       	mov.l	@(52,r1),r1
  303c8c:	21 18       	tst	r1,r1
  303c8e:	8b d5       	bf	303c3c <worst_fit+0x24>
	}

	return best_match;
  303c90:	61 e3       	mov	r14,r1
  303c92:	71 cc       	add	#-52,r1
  303c94:	51 1f       	mov.l	@(60,r1),r1
}
  303c96:	60 13       	mov	r1,r0
  303c98:	7e 0c       	add	#12,r14
  303c9a:	6f e3       	mov	r14,r15
  303c9c:	4f 26       	lds.l	@r15+,pr
  303c9e:	6e f6       	mov.l	@r15+,r14
  303ca0:	68 f6       	mov.l	@r15+,r8
  303ca2:	00 0b       	rts	
  303ca4:	00 09       	nop	
  303ca6:	00 09       	nop	
  303ca8:	00 ff       	mac.l	@r15+,@r0+
  303caa:	ff ff       	.word 0xffff
  303cac:	00 30       	.word 0x0030
  303cae:	3a 10       	cmp/eq	r1,r10

00303cb0 <remove_link>:
}

/* Removes a block from a list, updating the index if needed. The free block is
   in a temporary state of being in no list, called "free-floating" */
static void remove_link(block_t *b, index_t *index)
{
  303cb0:	2f 86       	mov.l	r8,@-r15
  303cb2:	2f e6       	mov.l	r14,@-r15
  303cb4:	4f 22       	sts.l	pr,@-r15
  303cb6:	7f e8       	add	#-24,r15
  303cb8:	6e f3       	mov	r15,r14
  303cba:	61 e3       	mov	r14,r1
  303cbc:	71 d8       	add	#-40,r1
  303cbe:	11 4b       	mov.l	r4,@(44,r1)
  303cc0:	61 e3       	mov	r14,r1
  303cc2:	71 d8       	add	#-40,r1
  303cc4:	11 5a       	mov.l	r5,@(40,r1)
	int c = size_class(b->size);
  303cc6:	61 e3       	mov	r14,r1
  303cc8:	71 d8       	add	#-40,r1
  303cca:	51 1b       	mov.l	@(44,r1),r1
  303ccc:	62 12       	mov.l	@r1,r2
  303cce:	d1 4f       	mov.l	303e0c <remove_link+0x15c>,r1	! ffffff
  303cd0:	21 29       	and	r2,r1
  303cd2:	62 13       	mov	r1,r2
  303cd4:	61 e3       	mov	r14,r1
  303cd6:	71 d8       	add	#-40,r1
  303cd8:	11 2c       	mov.l	r2,@(48,r1)
	if(size < 64) return (size - 8) >> 2;
  303cda:	61 e3       	mov	r14,r1
  303cdc:	71 d8       	add	#-40,r1
  303cde:	52 1c       	mov.l	@(48,r1),r2
  303ce0:	e1 3f       	mov	#63,r1
  303ce2:	32 16       	cmp/hi	r1,r2
  303ce4:	89 06       	bt	303cf4 <remove_link+0x44>
  303ce6:	61 e3       	mov	r14,r1
  303ce8:	71 d8       	add	#-40,r1
  303cea:	51 1c       	mov.l	@(48,r1),r1
  303cec:	71 f8       	add	#-8,r1
  303cee:	41 09       	shlr2	r1
  303cf0:	a0 0a       	bra	303d08 <remove_link+0x58>
  303cf2:	00 09       	nop	
	if(size < 256) return 14;
  303cf4:	61 e3       	mov	r14,r1
  303cf6:	71 d8       	add	#-40,r1
  303cf8:	52 1c       	mov.l	@(48,r1),r2
  303cfa:	91 85       	mov.w	303e08 <remove_link+0x158>,r1	! ff
  303cfc:	32 16       	cmp/hi	r1,r2
  303cfe:	89 02       	bt	303d06 <remove_link+0x56>
  303d00:	e1 0e       	mov	#14,r1
  303d02:	a0 01       	bra	303d08 <remove_link+0x58>
  303d04:	00 09       	nop	
	return 15;
  303d06:	e1 0f       	mov	#15,r1
	int c = size_class(b->size);
  303d08:	62 e3       	mov	r14,r2
  303d0a:	72 d8       	add	#-40,r2
  303d0c:	12 1f       	mov.l	r1,@(60,r2)

	block_t *prev = previous_link(b);
  303d0e:	68 e3       	mov	r14,r8
  303d10:	78 d8       	add	#-40,r8
  303d12:	61 e3       	mov	r14,r1
  303d14:	71 d8       	add	#-40,r1
  303d16:	54 1b       	mov.l	@(44,r1),r4
  303d18:	d1 3d       	mov.l	303e10 <remove_link+0x160>,r1	! 303a58 <previous_link>
  303d1a:	41 0b       	jsr	@r1
  303d1c:	00 09       	nop	
  303d1e:	61 03       	mov	r0,r1
  303d20:	18 1e       	mov.l	r1,@(56,r8)
	block_t *next = next_link(b);
  303d22:	68 e3       	mov	r14,r8
  303d24:	78 d8       	add	#-40,r8
  303d26:	61 e3       	mov	r14,r1
  303d28:	71 d8       	add	#-40,r1
  303d2a:	54 1b       	mov.l	@(44,r1),r4
  303d2c:	d1 39       	mov.l	303e14 <remove_link+0x164>,r1	! 303a10 <next_link>
  303d2e:	41 0b       	jsr	@r1
  303d30:	00 09       	nop	
  303d32:	61 03       	mov	r0,r1
  303d34:	18 1d       	mov.l	r1,@(52,r8)

	/* Redirect links around (b) in its list */
	if(prev) set_footer(prev, previous_link(prev), next);
  303d36:	61 e3       	mov	r14,r1
  303d38:	71 d8       	add	#-40,r1
  303d3a:	51 1e       	mov.l	@(56,r1),r1
  303d3c:	21 18       	tst	r1,r1
  303d3e:	89 10       	bt	303d62 <remove_link+0xb2>
  303d40:	61 e3       	mov	r14,r1
  303d42:	71 d8       	add	#-40,r1
  303d44:	54 1e       	mov.l	@(56,r1),r4
  303d46:	d1 32       	mov.l	303e10 <remove_link+0x160>,r1	! 303a58 <previous_link>
  303d48:	41 0b       	jsr	@r1
  303d4a:	00 09       	nop	
  303d4c:	63 03       	mov	r0,r3
  303d4e:	62 e3       	mov	r14,r2
  303d50:	72 d8       	add	#-40,r2
  303d52:	61 e3       	mov	r14,r1
  303d54:	71 d8       	add	#-40,r1
  303d56:	56 2d       	mov.l	@(52,r2),r6
  303d58:	65 33       	mov	r3,r5
  303d5a:	54 1e       	mov.l	@(56,r1),r4
  303d5c:	d1 2e       	mov.l	303e18 <remove_link+0x168>,r1	! 303a9c <set_footer>
  303d5e:	41 0b       	jsr	@r1
  303d60:	00 09       	nop	
	if(next) set_footer(next, prev, next_link(next));
  303d62:	61 e3       	mov	r14,r1
  303d64:	71 d8       	add	#-40,r1
  303d66:	51 1d       	mov.l	@(52,r1),r1
  303d68:	21 18       	tst	r1,r1
  303d6a:	89 10       	bt	303d8e <remove_link+0xde>
  303d6c:	61 e3       	mov	r14,r1
  303d6e:	71 d8       	add	#-40,r1
  303d70:	54 1d       	mov.l	@(52,r1),r4
  303d72:	d1 28       	mov.l	303e14 <remove_link+0x164>,r1	! 303a10 <next_link>
  303d74:	41 0b       	jsr	@r1
  303d76:	00 09       	nop	
  303d78:	63 03       	mov	r0,r3
  303d7a:	62 e3       	mov	r14,r2
  303d7c:	72 d8       	add	#-40,r2
  303d7e:	61 e3       	mov	r14,r1
  303d80:	71 d8       	add	#-40,r1
  303d82:	66 33       	mov	r3,r6
  303d84:	55 2e       	mov.l	@(56,r2),r5
  303d86:	54 1d       	mov.l	@(52,r1),r4
  303d88:	d1 23       	mov.l	303e18 <remove_link+0x168>,r1	! 303a9c <set_footer>
  303d8a:	41 0b       	jsr	@r1
  303d8c:	00 09       	nop	

	if(index->classes[c] == b) index->classes[c] = next;
  303d8e:	61 e3       	mov	r14,r1
  303d90:	71 d8       	add	#-40,r1
  303d92:	52 1a       	mov.l	@(40,r1),r2
  303d94:	61 e3       	mov	r14,r1
  303d96:	71 d8       	add	#-40,r1
  303d98:	51 1f       	mov.l	@(60,r1),r1
  303d9a:	41 08       	shll2	r1
  303d9c:	31 2c       	add	r2,r1
  303d9e:	61 12       	mov.l	@r1,r1
  303da0:	62 e3       	mov	r14,r2
  303da2:	72 d8       	add	#-40,r2
  303da4:	52 2b       	mov.l	@(44,r2),r2
  303da6:	32 10       	cmp/eq	r1,r2
  303da8:	8b 0b       	bf	303dc2 <remove_link+0x112>
  303daa:	61 e3       	mov	r14,r1
  303dac:	71 d8       	add	#-40,r1
  303dae:	52 1a       	mov.l	@(40,r1),r2
  303db0:	61 e3       	mov	r14,r1
  303db2:	71 d8       	add	#-40,r1
  303db4:	51 1f       	mov.l	@(60,r1),r1
  303db6:	41 08       	shll2	r1
  303db8:	31 2c       	add	r2,r1
  303dba:	62 e3       	mov	r14,r2
  303dbc:	72 d8       	add	#-40,r2
  303dbe:	52 2d       	mov.l	@(52,r2),r2
  303dc0:	21 22       	mov.l	r2,@r1

	if(index->stats) index->stats->free_memory -= b->size;
  303dc2:	61 e3       	mov	r14,r1
  303dc4:	71 d8       	add	#-40,r1
  303dc6:	51 1a       	mov.l	@(40,r1),r1
  303dc8:	71 40       	add	#64,r1
  303dca:	51 10       	mov.l	@(0,r1),r1
  303dcc:	21 18       	tst	r1,r1
  303dce:	89 13       	bt	303df8 <remove_link+0x148>
  303dd0:	61 e3       	mov	r14,r1
  303dd2:	71 d8       	add	#-40,r1
  303dd4:	51 1a       	mov.l	@(40,r1),r1
  303dd6:	71 40       	add	#64,r1
  303dd8:	51 10       	mov.l	@(0,r1),r1
  303dda:	62 12       	mov.l	@r1,r2
  303ddc:	61 e3       	mov	r14,r1
  303dde:	71 d8       	add	#-40,r1
  303de0:	51 1b       	mov.l	@(44,r1),r1
  303de2:	63 12       	mov.l	@r1,r3
  303de4:	d1 09       	mov.l	303e0c <remove_link+0x15c>,r1	! ffffff
  303de6:	21 39       	and	r3,r1
  303de8:	63 13       	mov	r1,r3
  303dea:	61 e3       	mov	r14,r1
  303dec:	71 d8       	add	#-40,r1
  303dee:	51 1a       	mov.l	@(40,r1),r1
  303df0:	71 40       	add	#64,r1
  303df2:	51 10       	mov.l	@(0,r1),r1
  303df4:	32 38       	sub	r3,r2
  303df6:	21 22       	mov.l	r2,@r1
}
  303df8:	00 09       	nop	
  303dfa:	7e 18       	add	#24,r14
  303dfc:	6f e3       	mov	r14,r15
  303dfe:	4f 26       	lds.l	@r15+,pr
  303e00:	6e f6       	mov.l	@r15+,r14
  303e02:	68 f6       	mov.l	@r15+,r8
  303e04:	00 0b       	rts	
  303e06:	00 09       	nop	
  303e08:	00 ff       	mac.l	@r15+,@r0+
  303e0a:	00 09       	nop	
  303e0c:	00 ff       	mac.l	@r15+,@r0+
  303e0e:	ff ff       	.word 0xffff
  303e10:	00 30       	.word 0x0030
  303e12:	3a 58       	sub	r5,r10
  303e14:	00 30       	.word 0x0030
  303e16:	3a 10       	cmp/eq	r1,r10
  303e18:	00 30       	.word 0x0030
  303e1a:	3a 9c       	add	r9,r10

00303e1c <prepend_link>:

/* Prepends a block to the list for its size class, and update the index */
static void prepend_link(block_t *b, index_t *index)
{
  303e1c:	2f e6       	mov.l	r14,@-r15
  303e1e:	4f 22       	sts.l	pr,@-r15
  303e20:	7f ec       	add	#-20,r15
  303e22:	6e f3       	mov	r15,r14
  303e24:	61 e3       	mov	r14,r1
  303e26:	71 d4       	add	#-44,r1
  303e28:	11 4c       	mov.l	r4,@(48,r1)
  303e2a:	61 e3       	mov	r14,r1
  303e2c:	71 d4       	add	#-44,r1
  303e2e:	11 5b       	mov.l	r5,@(44,r1)
	int c = size_class(b->size);
  303e30:	61 e3       	mov	r14,r1
  303e32:	71 d4       	add	#-44,r1
  303e34:	51 1c       	mov.l	@(48,r1),r1
  303e36:	62 12       	mov.l	@r1,r2
  303e38:	d1 3d       	mov.l	303f30 <prepend_link+0x114>,r1	! ffffff
  303e3a:	21 29       	and	r2,r1
  303e3c:	62 13       	mov	r1,r2
  303e3e:	61 e3       	mov	r14,r1
  303e40:	71 d4       	add	#-44,r1
  303e42:	11 2d       	mov.l	r2,@(52,r1)
	if(size < 64) return (size - 8) >> 2;
  303e44:	61 e3       	mov	r14,r1
  303e46:	71 d4       	add	#-44,r1
  303e48:	52 1d       	mov.l	@(52,r1),r2
  303e4a:	e1 3f       	mov	#63,r1
  303e4c:	32 16       	cmp/hi	r1,r2
  303e4e:	89 06       	bt	303e5e <prepend_link+0x42>
  303e50:	61 e3       	mov	r14,r1
  303e52:	71 d4       	add	#-44,r1
  303e54:	51 1d       	mov.l	@(52,r1),r1
  303e56:	71 f8       	add	#-8,r1
  303e58:	41 09       	shlr2	r1
  303e5a:	a0 0a       	bra	303e72 <prepend_link+0x56>
  303e5c:	00 09       	nop	
	if(size < 256) return 14;
  303e5e:	61 e3       	mov	r14,r1
  303e60:	71 d4       	add	#-44,r1
  303e62:	52 1d       	mov.l	@(52,r1),r2
  303e64:	91 62       	mov.w	303f2c <prepend_link+0x110>,r1	! ff
  303e66:	32 16       	cmp/hi	r1,r2
  303e68:	89 02       	bt	303e70 <prepend_link+0x54>
  303e6a:	e1 0e       	mov	#14,r1
  303e6c:	a0 01       	bra	303e72 <prepend_link+0x56>
  303e6e:	00 09       	nop	
	return 15;
  303e70:	e1 0f       	mov	#15,r1
	int c = size_class(b->size);
  303e72:	62 e3       	mov	r14,r2
  303e74:	72 d4       	add	#-44,r2
  303e76:	12 1f       	mov.l	r1,@(60,r2)

	block_t *first = index->classes[c];
  303e78:	61 e3       	mov	r14,r1
  303e7a:	71 d4       	add	#-44,r1
  303e7c:	62 e3       	mov	r14,r2
  303e7e:	72 d4       	add	#-44,r2
  303e80:	53 2b       	mov.l	@(44,r2),r3
  303e82:	62 e3       	mov	r14,r2
  303e84:	72 d4       	add	#-44,r2
  303e86:	52 2f       	mov.l	@(60,r2),r2
  303e88:	42 08       	shll2	r2
  303e8a:	32 3c       	add	r3,r2
  303e8c:	62 22       	mov.l	@r2,r2
  303e8e:	11 2e       	mov.l	r2,@(56,r1)
	set_footer(b, NULL, first);
  303e90:	62 e3       	mov	r14,r2
  303e92:	72 d4       	add	#-44,r2
  303e94:	61 e3       	mov	r14,r1
  303e96:	71 d4       	add	#-44,r1
  303e98:	56 2e       	mov.l	@(56,r2),r6
  303e9a:	e5 00       	mov	#0,r5
  303e9c:	54 1c       	mov.l	@(48,r1),r4
  303e9e:	d1 25       	mov.l	303f34 <prepend_link+0x118>,r1	! 303a9c <set_footer>
  303ea0:	41 0b       	jsr	@r1
  303ea2:	00 09       	nop	
	if(first) set_footer(first, b, next_link(first));
  303ea4:	61 e3       	mov	r14,r1
  303ea6:	71 d4       	add	#-44,r1
  303ea8:	51 1e       	mov.l	@(56,r1),r1
  303eaa:	21 18       	tst	r1,r1
  303eac:	89 10       	bt	303ed0 <prepend_link+0xb4>
  303eae:	61 e3       	mov	r14,r1
  303eb0:	71 d4       	add	#-44,r1
  303eb2:	54 1e       	mov.l	@(56,r1),r4
  303eb4:	d1 20       	mov.l	303f38 <prepend_link+0x11c>,r1	! 303a10 <next_link>
  303eb6:	41 0b       	jsr	@r1
  303eb8:	00 09       	nop	
  303eba:	63 03       	mov	r0,r3
  303ebc:	62 e3       	mov	r14,r2
  303ebe:	72 d4       	add	#-44,r2
  303ec0:	61 e3       	mov	r14,r1
  303ec2:	71 d4       	add	#-44,r1
  303ec4:	66 33       	mov	r3,r6
  303ec6:	55 2c       	mov.l	@(48,r2),r5
  303ec8:	54 1e       	mov.l	@(56,r1),r4
  303eca:	d1 1a       	mov.l	303f34 <prepend_link+0x118>,r1	! 303a9c <set_footer>
  303ecc:	41 0b       	jsr	@r1
  303ece:	00 09       	nop	

	index->classes[c] = b;
  303ed0:	61 e3       	mov	r14,r1
  303ed2:	71 d4       	add	#-44,r1
  303ed4:	52 1b       	mov.l	@(44,r1),r2
  303ed6:	61 e3       	mov	r14,r1
  303ed8:	71 d4       	add	#-44,r1
  303eda:	51 1f       	mov.l	@(60,r1),r1
  303edc:	41 08       	shll2	r1
  303ede:	31 2c       	add	r2,r1
  303ee0:	62 e3       	mov	r14,r2
  303ee2:	72 d4       	add	#-44,r2
  303ee4:	52 2c       	mov.l	@(48,r2),r2
  303ee6:	21 22       	mov.l	r2,@r1

	if(index->stats) index->stats->free_memory += b->size;
  303ee8:	61 e3       	mov	r14,r1
  303eea:	71 d4       	add	#-44,r1
  303eec:	51 1b       	mov.l	@(44,r1),r1
  303eee:	71 40       	add	#64,r1
  303ef0:	51 10       	mov.l	@(0,r1),r1
  303ef2:	21 18       	tst	r1,r1
  303ef4:	89 13       	bt	303f1e <prepend_link+0x102>
  303ef6:	61 e3       	mov	r14,r1
  303ef8:	71 d4       	add	#-44,r1
  303efa:	51 1b       	mov.l	@(44,r1),r1
  303efc:	71 40       	add	#64,r1
  303efe:	51 10       	mov.l	@(0,r1),r1
  303f00:	62 12       	mov.l	@r1,r2
  303f02:	61 e3       	mov	r14,r1
  303f04:	71 d4       	add	#-44,r1
  303f06:	51 1c       	mov.l	@(48,r1),r1
  303f08:	63 12       	mov.l	@r1,r3
  303f0a:	d1 09       	mov.l	303f30 <prepend_link+0x114>,r1	! ffffff
  303f0c:	21 39       	and	r3,r1
  303f0e:	63 13       	mov	r1,r3
  303f10:	61 e3       	mov	r14,r1
  303f12:	71 d4       	add	#-44,r1
  303f14:	51 1b       	mov.l	@(44,r1),r1
  303f16:	71 40       	add	#64,r1
  303f18:	51 10       	mov.l	@(0,r1),r1
  303f1a:	32 3c       	add	r3,r2
  303f1c:	21 22       	mov.l	r2,@r1
}
  303f1e:	00 09       	nop	
  303f20:	7e 14       	add	#20,r14
  303f22:	6f e3       	mov	r14,r15
  303f24:	4f 26       	lds.l	@r15+,pr
  303f26:	6e f6       	mov.l	@r15+,r14
  303f28:	00 0b       	rts	
  303f2a:	00 09       	nop	
  303f2c:	00 ff       	mac.l	@r15+,@r0+
  303f2e:	00 09       	nop	
  303f30:	00 ff       	mac.l	@r15+,@r0+
  303f32:	ff ff       	.word 0xffff
  303f34:	00 30       	.word 0x0030
  303f36:	3a 9c       	add	r9,r10
  303f38:	00 30       	.word 0x0030
  303f3a:	3a 10       	cmp/eq	r1,r10

00303f3c <round>:
// Arena allocator
//---

/* Round a size to the closest allocatable size */
static size_t round(size_t size)
{
  303f3c:	2f e6       	mov.l	r14,@-r15
  303f3e:	7f fc       	add	#-4,r15
  303f40:	6e f3       	mov	r15,r14
  303f42:	61 e3       	mov	r14,r1
  303f44:	71 c4       	add	#-60,r1
  303f46:	11 4f       	mov.l	r4,@(60,r1)
	return (size < 8) ? 8 : ((size + 3) & ~3);
  303f48:	61 e3       	mov	r14,r1
  303f4a:	71 c4       	add	#-60,r1
  303f4c:	52 1f       	mov.l	@(60,r1),r2
  303f4e:	e1 07       	mov	#7,r1
  303f50:	32 16       	cmp/hi	r1,r2
  303f52:	8b 08       	bf	303f66 <round+0x2a>
  303f54:	61 e3       	mov	r14,r1
  303f56:	71 c4       	add	#-60,r1
  303f58:	51 1f       	mov.l	@(60,r1),r1
  303f5a:	62 13       	mov	r1,r2
  303f5c:	72 03       	add	#3,r2
  303f5e:	e1 fc       	mov	#-4,r1
  303f60:	21 29       	and	r2,r1
  303f62:	a0 01       	bra	303f68 <round+0x2c>
  303f64:	00 09       	nop	
  303f66:	e1 08       	mov	#8,r1
}
  303f68:	60 13       	mov	r1,r0
  303f6a:	7e 04       	add	#4,r14
  303f6c:	6f e3       	mov	r14,r15
  303f6e:	6e f6       	mov.l	@r15+,r14
  303f70:	00 0b       	rts	
  303f72:	00 09       	nop	

00303f74 <gint_malloc>:

static void *gint_malloc(size_t size, void *data)
{
  303f74:	2f 86       	mov.l	r8,@-r15
  303f76:	2f e6       	mov.l	r14,@-r15
  303f78:	4f 22       	sts.l	pr,@-r15
  303f7a:	7f d0       	add	#-48,r15
  303f7c:	6e f3       	mov	r15,r14
  303f7e:	61 e3       	mov	r14,r1
  303f80:	71 f0       	add	#-16,r1
  303f82:	11 45       	mov.l	r4,@(20,r1)
  303f84:	61 e3       	mov	r14,r1
  303f86:	71 f0       	add	#-16,r1
  303f88:	11 54       	mov.l	r5,@(16,r1)
	index_t *index = data;
  303f8a:	61 e3       	mov	r14,r1
  303f8c:	71 f0       	add	#-16,r1
  303f8e:	62 e3       	mov	r14,r2
  303f90:	72 f0       	add	#-16,r2
  303f92:	52 24       	mov.l	@(16,r2),r2
  303f94:	11 2d       	mov.l	r2,@(52,r1)
	stats_t *s = index->stats;
  303f96:	61 e3       	mov	r14,r1
  303f98:	71 f0       	add	#-16,r1
  303f9a:	62 e3       	mov	r14,r2
  303f9c:	72 f0       	add	#-16,r2
  303f9e:	52 2d       	mov.l	@(52,r2),r2
  303fa0:	72 40       	add	#64,r2
  303fa2:	52 20       	mov.l	@(0,r2),r2
  303fa4:	11 2c       	mov.l	r2,@(48,r1)
	size = round(size);
  303fa6:	68 e3       	mov	r14,r8
  303fa8:	78 f0       	add	#-16,r8
  303faa:	61 e3       	mov	r14,r1
  303fac:	71 f0       	add	#-16,r1
  303fae:	54 15       	mov.l	@(20,r1),r4
  303fb0:	d1 31       	mov.l	304078 <gint_malloc+0x104>,r1	! 303f3c <round>
  303fb2:	41 0b       	jsr	@r1
  303fb4:	00 09       	nop	
  303fb6:	61 03       	mov	r0,r1
  303fb8:	18 15       	mov.l	r1,@(20,r8)
  303fba:	61 e3       	mov	r14,r1
  303fbc:	71 f0       	add	#-16,r1
  303fbe:	62 e3       	mov	r14,r2
  303fc0:	72 f0       	add	#-16,r2
  303fc2:	52 25       	mov.l	@(20,r2),r2
  303fc4:	11 26       	mov.l	r2,@(24,r1)
	if(size < 64) return (size - 8) >> 2;
  303fc6:	61 e3       	mov	r14,r1
  303fc8:	71 f0       	add	#-16,r1
  303fca:	52 16       	mov.l	@(24,r1),r2
  303fcc:	e1 3f       	mov	#63,r1
  303fce:	32 16       	cmp/hi	r1,r2
  303fd0:	89 06       	bt	303fe0 <gint_malloc+0x6c>
  303fd2:	61 e3       	mov	r14,r1
  303fd4:	71 f0       	add	#-16,r1
  303fd6:	51 16       	mov.l	@(24,r1),r1
  303fd8:	71 f8       	add	#-8,r1
  303fda:	41 09       	shlr2	r1
  303fdc:	a0 0a       	bra	303ff4 <gint_malloc+0x80>
  303fde:	00 09       	nop	
	if(size < 256) return 14;
  303fe0:	61 e3       	mov	r14,r1
  303fe2:	71 f0       	add	#-16,r1
  303fe4:	52 16       	mov.l	@(24,r1),r2
  303fe6:	91 46       	mov.w	304076 <gint_malloc+0x102>,r1	! ff
  303fe8:	32 16       	cmp/hi	r1,r2
  303fea:	89 02       	bt	303ff2 <gint_malloc+0x7e>
  303fec:	e1 0e       	mov	#14,r1
  303fee:	a0 01       	bra	303ff4 <gint_malloc+0x80>
  303ff0:	00 09       	nop	
	return 15;
  303ff2:	e1 0f       	mov	#15,r1
	int c = size_class(size);
  303ff4:	62 e3       	mov	r14,r2
  303ff6:	72 f0       	add	#-16,r2
  303ff8:	12 1f       	mov.l	r1,@(60,r2)

	/* Try to find a class that has a free block available */
	block_t *alloc = NULL;
  303ffa:	61 e3       	mov	r14,r1
  303ffc:	71 f0       	add	#-16,r1
  303ffe:	e2 00       	mov	#0,r2
  304000:	11 2e       	mov.l	r2,@(56,r1)
	for(; c <= 15; c++)
  304002:	a0 30       	bra	304066 <gint_malloc+0xf2>
  304004:	00 09       	nop	
	{
		block_t *list = index->classes[c];
  304006:	61 e3       	mov	r14,r1
  304008:	71 f0       	add	#-16,r1
  30400a:	62 e3       	mov	r14,r2
  30400c:	72 f0       	add	#-16,r2
  30400e:	53 2d       	mov.l	@(52,r2),r3
  304010:	62 e3       	mov	r14,r2
  304012:	72 f0       	add	#-16,r2
  304014:	52 2f       	mov.l	@(60,r2),r2
  304016:	42 08       	shll2	r2
  304018:	32 3c       	add	r3,r2
  30401a:	62 22       	mov.l	@r2,r2
  30401c:	11 2b       	mov.l	r2,@(44,r1)
		/* The first 14 classes are exact-size, so there is no need to
		   search. For the last two, we use a best fit. */
		alloc = (c < 14) ? list : best_fit(list, size);
  30401e:	61 e3       	mov	r14,r1
  304020:	71 f0       	add	#-16,r1
  304022:	52 1f       	mov.l	@(60,r1),r2
  304024:	e1 0d       	mov	#13,r1
  304026:	32 17       	cmp/gt	r1,r2
  304028:	8b 0b       	bf	304042 <gint_malloc+0xce>
  30402a:	62 e3       	mov	r14,r2
  30402c:	72 f0       	add	#-16,r2
  30402e:	61 e3       	mov	r14,r1
  304030:	71 f0       	add	#-16,r1
  304032:	55 25       	mov.l	@(20,r2),r5
  304034:	54 1b       	mov.l	@(44,r1),r4
  304036:	d1 11       	mov.l	30407c <gint_malloc+0x108>,r1	! 303b54 <best_fit>
  304038:	41 0b       	jsr	@r1
  30403a:	00 09       	nop	
  30403c:	61 03       	mov	r0,r1
  30403e:	a0 03       	bra	304048 <gint_malloc+0xd4>
  304040:	00 09       	nop	
  304042:	61 e3       	mov	r14,r1
  304044:	71 f0       	add	#-16,r1
  304046:	51 1b       	mov.l	@(44,r1),r1
  304048:	62 e3       	mov	r14,r2
  30404a:	72 f0       	add	#-16,r2
  30404c:	12 1e       	mov.l	r1,@(56,r2)
		if(alloc) break;
  30404e:	61 e3       	mov	r14,r1
  304050:	71 f0       	add	#-16,r1
  304052:	51 1e       	mov.l	@(56,r1),r1
  304054:	21 18       	tst	r1,r1
  304056:	8b 13       	bf	304080 <gint_malloc+0x10c>
	for(; c <= 15; c++)
  304058:	61 e3       	mov	r14,r1
  30405a:	71 f0       	add	#-16,r1
  30405c:	62 e3       	mov	r14,r2
  30405e:	72 f0       	add	#-16,r2
  304060:	52 2f       	mov.l	@(60,r2),r2
  304062:	72 01       	add	#1,r2
  304064:	11 2f       	mov.l	r2,@(60,r1)
  304066:	61 e3       	mov	r14,r1
  304068:	71 f0       	add	#-16,r1
  30406a:	52 1f       	mov.l	@(60,r1),r2
  30406c:	e1 0f       	mov	#15,r1
  30406e:	32 17       	cmp/gt	r1,r2
  304070:	8b c9       	bf	304006 <gint_malloc+0x92>
  304072:	a0 06       	bra	304082 <gint_malloc+0x10e>
  304074:	00 09       	nop	
  304076:	00 ff       	mac.l	@r15+,@r0+
  304078:	00 30       	.word 0x0030
  30407a:	3f 3c       	add	r3,r15
  30407c:	00 30       	.word 0x0030
  30407e:	3b 54       	div1	r5,r11
		if(alloc) break;
  304080:	00 09       	nop	
	}
	if(!alloc)
  304082:	61 e3       	mov	r14,r1
  304084:	71 f0       	add	#-16,r1
  304086:	51 1e       	mov.l	@(56,r1),r1
  304088:	21 18       	tst	r1,r1
  30408a:	8b 32       	bf	3040f2 <gint_malloc+0x17e>
	{
		if(s && s->free_memory >= size) s->fragmentation_failures++;
  30408c:	61 e3       	mov	r14,r1
  30408e:	71 f0       	add	#-16,r1
  304090:	51 1c       	mov.l	@(48,r1),r1
  304092:	21 18       	tst	r1,r1
  304094:	89 12       	bt	3040bc <gint_malloc+0x148>
  304096:	61 e3       	mov	r14,r1
  304098:	71 f0       	add	#-16,r1
  30409a:	51 1c       	mov.l	@(48,r1),r1
  30409c:	61 12       	mov.l	@r1,r1
  30409e:	62 e3       	mov	r14,r2
  3040a0:	72 f0       	add	#-16,r2
  3040a2:	52 25       	mov.l	@(20,r2),r2
  3040a4:	32 16       	cmp/hi	r1,r2
  3040a6:	89 09       	bt	3040bc <gint_malloc+0x148>
  3040a8:	61 e3       	mov	r14,r1
  3040aa:	71 f0       	add	#-16,r1
  3040ac:	51 1c       	mov.l	@(48,r1),r1
  3040ae:	51 14       	mov.l	@(16,r1),r1
  3040b0:	62 13       	mov	r1,r2
  3040b2:	72 01       	add	#1,r2
  3040b4:	61 e3       	mov	r14,r1
  3040b6:	71 f0       	add	#-16,r1
  3040b8:	51 1c       	mov.l	@(48,r1),r1
  3040ba:	11 24       	mov.l	r2,@(16,r1)
		if(s && s->free_memory <  size) s->exhaustion_failures++;
  3040bc:	61 e3       	mov	r14,r1
  3040be:	71 f0       	add	#-16,r1
  3040c0:	51 1c       	mov.l	@(48,r1),r1
  3040c2:	21 18       	tst	r1,r1
  3040c4:	89 12       	bt	3040ec <gint_malloc+0x178>
  3040c6:	61 e3       	mov	r14,r1
  3040c8:	71 f0       	add	#-16,r1
  3040ca:	51 1c       	mov.l	@(48,r1),r1
  3040cc:	61 12       	mov.l	@r1,r1
  3040ce:	62 e3       	mov	r14,r2
  3040d0:	72 f0       	add	#-16,r2
  3040d2:	52 25       	mov.l	@(20,r2),r2
  3040d4:	32 16       	cmp/hi	r1,r2
  3040d6:	8b 09       	bf	3040ec <gint_malloc+0x178>
  3040d8:	61 e3       	mov	r14,r1
  3040da:	71 f0       	add	#-16,r1
  3040dc:	51 1c       	mov.l	@(48,r1),r1
  3040de:	51 13       	mov.l	@(12,r1),r1
  3040e0:	62 13       	mov	r1,r2
  3040e2:	72 01       	add	#1,r2
  3040e4:	61 e3       	mov	r14,r1
  3040e6:	71 f0       	add	#-16,r1
  3040e8:	51 1c       	mov.l	@(48,r1),r1
  3040ea:	11 23       	mov.l	r2,@(12,r1)
		return NULL;
  3040ec:	e1 00       	mov	#0,r1
  3040ee:	a0 7a       	bra	3041e6 <gint_malloc+0x272>
  3040f0:	00 09       	nop	
	}

	/* Remove the block to allocate from its list */
	remove_link(alloc, index);
  3040f2:	62 e3       	mov	r14,r2
  3040f4:	72 f0       	add	#-16,r2
  3040f6:	61 e3       	mov	r14,r1
  3040f8:	71 f0       	add	#-16,r1
  3040fa:	55 2d       	mov.l	@(52,r2),r5
  3040fc:	54 1e       	mov.l	@(56,r1),r4
  3040fe:	d1 3e       	mov.l	3041f8 <gint_malloc+0x284>,r1	! 303cb0 <remove_link>
  304100:	41 0b       	jsr	@r1
  304102:	00 09       	nop	

	/* If it's larger than needed, split it and reinsert the leftover */
	block_t *rest = split(alloc, size);
  304104:	61 e3       	mov	r14,r1
  304106:	71 f0       	add	#-16,r1
  304108:	52 15       	mov.l	@(20,r1),r2
  30410a:	68 e3       	mov	r14,r8
  30410c:	78 f0       	add	#-16,r8
  30410e:	61 e3       	mov	r14,r1
  304110:	71 f0       	add	#-16,r1
  304112:	65 23       	mov	r2,r5
  304114:	54 1e       	mov.l	@(56,r1),r4
  304116:	d1 39       	mov.l	3041fc <gint_malloc+0x288>,r1	! 303794 <split>
  304118:	41 0b       	jsr	@r1
  30411a:	00 09       	nop	
  30411c:	61 03       	mov	r0,r1
  30411e:	18 1a       	mov.l	r1,@(40,r8)
	if(rest) prepend_link(rest, index);
  304120:	61 e3       	mov	r14,r1
  304122:	71 f0       	add	#-16,r1
  304124:	51 1a       	mov.l	@(40,r1),r1
  304126:	21 18       	tst	r1,r1
  304128:	89 08       	bt	30413c <gint_malloc+0x1c8>
  30412a:	62 e3       	mov	r14,r2
  30412c:	72 f0       	add	#-16,r2
  30412e:	61 e3       	mov	r14,r1
  304130:	71 f0       	add	#-16,r1
  304132:	55 2d       	mov.l	@(52,r2),r5
  304134:	54 1a       	mov.l	@(40,r1),r4
  304136:	d1 32       	mov.l	304200 <gint_malloc+0x28c>,r1	! 303e1c <prepend_link>
  304138:	41 0b       	jsr	@r1
  30413a:	00 09       	nop	

	/* Mark the block as allocated and return it */
	block_t *next = next_block(alloc);
  30413c:	68 e3       	mov	r14,r8
  30413e:	78 f0       	add	#-16,r8
  304140:	61 e3       	mov	r14,r1
  304142:	71 f0       	add	#-16,r1
  304144:	54 1e       	mov.l	@(56,r1),r4
  304146:	d1 2f       	mov.l	304204 <gint_malloc+0x290>,r1	! 3036d0 <next_block>
  304148:	41 0b       	jsr	@r1
  30414a:	00 09       	nop	
  30414c:	61 03       	mov	r0,r1
  30414e:	18 19       	mov.l	r1,@(36,r8)
	alloc->used = true;
  304150:	61 e3       	mov	r14,r1
  304152:	71 f0       	add	#-16,r1
  304154:	51 1e       	mov.l	@(56,r1),r1
  304156:	63 12       	mov.l	@r1,r3
  304158:	d2 2b       	mov.l	304208 <gint_malloc+0x294>,r2	! 2000000
  30415a:	22 3b       	or	r3,r2
  30415c:	21 22       	mov.l	r2,@r1
	if(next) next->previous_used = true;
  30415e:	61 e3       	mov	r14,r1
  304160:	71 f0       	add	#-16,r1
  304162:	51 19       	mov.l	@(36,r1),r1
  304164:	21 18       	tst	r1,r1
  304166:	89 06       	bt	304176 <gint_malloc+0x202>
  304168:	61 e3       	mov	r14,r1
  30416a:	71 f0       	add	#-16,r1
  30416c:	51 19       	mov.l	@(36,r1),r1
  30416e:	63 12       	mov.l	@r1,r3
  304170:	d2 26       	mov.l	30420c <gint_malloc+0x298>,r2	! 1000000
  304172:	22 3b       	or	r3,r2
  304174:	21 22       	mov.l	r2,@r1

	if(s) s->used_memory += alloc->size;
  304176:	61 e3       	mov	r14,r1
  304178:	71 f0       	add	#-16,r1
  30417a:	51 1c       	mov.l	@(48,r1),r1
  30417c:	21 18       	tst	r1,r1
  30417e:	89 0e       	bt	30419e <gint_malloc+0x22a>
  304180:	61 e3       	mov	r14,r1
  304182:	71 f0       	add	#-16,r1
  304184:	51 1c       	mov.l	@(48,r1),r1
  304186:	51 11       	mov.l	@(4,r1),r1
  304188:	62 e3       	mov	r14,r2
  30418a:	72 f0       	add	#-16,r2
  30418c:	52 2e       	mov.l	@(56,r2),r2
  30418e:	63 22       	mov.l	@r2,r3
  304190:	d2 1f       	mov.l	304210 <gint_malloc+0x29c>,r2	! ffffff
  304192:	22 39       	and	r3,r2
  304194:	32 1c       	add	r1,r2
  304196:	61 e3       	mov	r14,r1
  304198:	71 f0       	add	#-16,r1
  30419a:	51 1c       	mov.l	@(48,r1),r1
  30419c:	11 21       	mov.l	r2,@(4,r1)
	if(s) s->peak_used_memory = max(s->peak_used_memory, s->used_memory);
  30419e:	61 e3       	mov	r14,r1
  3041a0:	71 f0       	add	#-16,r1
  3041a2:	51 1c       	mov.l	@(48,r1),r1
  3041a4:	21 18       	tst	r1,r1
  3041a6:	89 1a       	bt	3041de <gint_malloc+0x26a>
  3041a8:	61 e3       	mov	r14,r1
  3041aa:	71 f0       	add	#-16,r1
  3041ac:	62 e3       	mov	r14,r2
  3041ae:	72 f0       	add	#-16,r2
  3041b0:	52 2c       	mov.l	@(48,r2),r2
  3041b2:	52 22       	mov.l	@(8,r2),r2
  3041b4:	11 28       	mov.l	r2,@(32,r1)
  3041b6:	61 e3       	mov	r14,r1
  3041b8:	71 f0       	add	#-16,r1
  3041ba:	62 e3       	mov	r14,r2
  3041bc:	72 f0       	add	#-16,r2
  3041be:	52 2c       	mov.l	@(48,r2),r2
  3041c0:	52 21       	mov.l	@(4,r2),r2
  3041c2:	11 27       	mov.l	r2,@(28,r1)
  3041c4:	61 e3       	mov	r14,r1
  3041c6:	71 f0       	add	#-16,r1
  3041c8:	62 e3       	mov	r14,r2
  3041ca:	72 f0       	add	#-16,r2
  3041cc:	52 28       	mov.l	@(32,r2),r2
  3041ce:	51 17       	mov.l	@(28,r1),r1
  3041d0:	31 22       	cmp/hs	r2,r1
  3041d2:	89 00       	bt	3041d6 <gint_malloc+0x262>
  3041d4:	61 23       	mov	r2,r1
  3041d6:	62 e3       	mov	r14,r2
  3041d8:	72 f0       	add	#-16,r2
  3041da:	52 2c       	mov.l	@(48,r2),r2
  3041dc:	12 12       	mov.l	r1,@(8,r2)

	return (void *)alloc + sizeof(block_t);
  3041de:	61 e3       	mov	r14,r1
  3041e0:	71 f0       	add	#-16,r1
  3041e2:	51 1e       	mov.l	@(56,r1),r1
  3041e4:	71 04       	add	#4,r1
}
  3041e6:	60 13       	mov	r1,r0
  3041e8:	7e 30       	add	#48,r14
  3041ea:	6f e3       	mov	r14,r15
  3041ec:	4f 26       	lds.l	@r15+,pr
  3041ee:	6e f6       	mov.l	@r15+,r14
  3041f0:	68 f6       	mov.l	@r15+,r8
  3041f2:	00 0b       	rts	
  3041f4:	00 09       	nop	
  3041f6:	00 09       	nop	
  3041f8:	00 30       	.word 0x0030
  3041fa:	3c b0       	cmp/eq	r11,r12
  3041fc:	00 30       	.word 0x0030
  3041fe:	37 94       	div1	r9,r7
  304200:	00 30       	.word 0x0030
  304202:	3e 1c       	add	r1,r14
  304204:	00 30       	.word 0x0030
  304206:	36 d0       	cmp/eq	r13,r6
  304208:	02 00       	.word 0x0200
  30420a:	00 00       	.word 0x0000
  30420c:	01 00       	.word 0x0100
  30420e:	00 00       	.word 0x0000
  304210:	00 ff       	mac.l	@r15+,@r0+
  304212:	ff ff       	.word 0xffff

00304214 <gint_free>:

static void gint_free(void *ptr, void *data)
{
  304214:	2f 86       	mov.l	r8,@-r15
  304216:	2f e6       	mov.l	r14,@-r15
  304218:	4f 22       	sts.l	pr,@-r15
  30421a:	7f e8       	add	#-24,r15
  30421c:	6e f3       	mov	r15,r14
  30421e:	61 e3       	mov	r14,r1
  304220:	71 d8       	add	#-40,r1
  304222:	11 4b       	mov.l	r4,@(44,r1)
  304224:	61 e3       	mov	r14,r1
  304226:	71 d8       	add	#-40,r1
  304228:	11 5a       	mov.l	r5,@(40,r1)
	index_t *index = data;
  30422a:	61 e3       	mov	r14,r1
  30422c:	71 d8       	add	#-40,r1
  30422e:	62 e3       	mov	r14,r2
  304230:	72 d8       	add	#-40,r2
  304232:	52 2a       	mov.l	@(40,r2),r2
  304234:	11 2e       	mov.l	r2,@(56,r1)
	block_t *b = ptr - sizeof(block_t);
  304236:	61 e3       	mov	r14,r1
  304238:	71 d8       	add	#-40,r1
  30423a:	62 e3       	mov	r14,r2
  30423c:	72 d8       	add	#-40,r2
  30423e:	52 2b       	mov.l	@(44,r2),r2
  304240:	72 fc       	add	#-4,r2
  304242:	11 2f       	mov.l	r2,@(60,r1)

	block_t *prev = previous_block_if_free(b);
  304244:	68 e3       	mov	r14,r8
  304246:	78 d8       	add	#-40,r8
  304248:	61 e3       	mov	r14,r1
  30424a:	71 d8       	add	#-40,r1
  30424c:	54 1f       	mov.l	@(60,r1),r4
  30424e:	d1 45       	mov.l	304364 <gint_free+0x150>,r1	! 30371c <previous_block_if_free>
  304250:	41 0b       	jsr	@r1
  304252:	00 09       	nop	
  304254:	61 03       	mov	r0,r1
  304256:	18 1d       	mov.l	r1,@(52,r8)
	block_t *next = next_block(b);
  304258:	68 e3       	mov	r14,r8
  30425a:	78 d8       	add	#-40,r8
  30425c:	61 e3       	mov	r14,r1
  30425e:	71 d8       	add	#-40,r1
  304260:	54 1f       	mov.l	@(60,r1),r4
  304262:	d1 41       	mov.l	304368 <gint_free+0x154>,r1	! 3036d0 <next_block>
  304264:	41 0b       	jsr	@r1
  304266:	00 09       	nop	
  304268:	61 03       	mov	r0,r1
  30426a:	18 1c       	mov.l	r1,@(48,r8)

	/* Mark the block as free */
	b->used = false;
  30426c:	61 e3       	mov	r14,r1
  30426e:	71 d8       	add	#-40,r1
  304270:	51 1f       	mov.l	@(60,r1),r1
  304272:	63 12       	mov.l	@r1,r3
  304274:	d2 3d       	mov.l	30436c <gint_free+0x158>,r2	! fdffffff
  304276:	22 39       	and	r3,r2
  304278:	21 22       	mov.l	r2,@r1
	if(index->stats) index->stats->used_memory -= b->size;
  30427a:	61 e3       	mov	r14,r1
  30427c:	71 d8       	add	#-40,r1
  30427e:	51 1e       	mov.l	@(56,r1),r1
  304280:	71 40       	add	#64,r1
  304282:	51 10       	mov.l	@(0,r1),r1
  304284:	21 18       	tst	r1,r1
  304286:	89 13       	bt	3042b0 <gint_free+0x9c>
  304288:	61 e3       	mov	r14,r1
  30428a:	71 d8       	add	#-40,r1
  30428c:	51 1e       	mov.l	@(56,r1),r1
  30428e:	71 40       	add	#64,r1
  304290:	51 10       	mov.l	@(0,r1),r1
  304292:	52 11       	mov.l	@(4,r1),r2
  304294:	61 e3       	mov	r14,r1
  304296:	71 d8       	add	#-40,r1
  304298:	51 1f       	mov.l	@(60,r1),r1
  30429a:	63 12       	mov.l	@r1,r3
  30429c:	d1 34       	mov.l	304370 <gint_free+0x15c>,r1	! ffffff
  30429e:	21 39       	and	r3,r1
  3042a0:	63 13       	mov	r1,r3
  3042a2:	61 e3       	mov	r14,r1
  3042a4:	71 d8       	add	#-40,r1
  3042a6:	51 1e       	mov.l	@(56,r1),r1
  3042a8:	71 40       	add	#64,r1
  3042aa:	51 10       	mov.l	@(0,r1),r1
  3042ac:	32 38       	sub	r3,r2
  3042ae:	11 21       	mov.l	r2,@(4,r1)
	if(next) next->previous_used = false;
  3042b0:	61 e3       	mov	r14,r1
  3042b2:	71 d8       	add	#-40,r1
  3042b4:	51 1c       	mov.l	@(48,r1),r1
  3042b6:	21 18       	tst	r1,r1
  3042b8:	89 06       	bt	3042c8 <gint_free+0xb4>
  3042ba:	61 e3       	mov	r14,r1
  3042bc:	71 d8       	add	#-40,r1
  3042be:	51 1c       	mov.l	@(48,r1),r1
  3042c0:	63 12       	mov.l	@r1,r3
  3042c2:	d2 2c       	mov.l	304374 <gint_free+0x160>,r2	! feffffff
  3042c4:	22 39       	and	r3,r2
  3042c6:	21 22       	mov.l	r2,@r1

	/* Merge with the next block if free */
	if(next && !next->used)
  3042c8:	61 e3       	mov	r14,r1
  3042ca:	71 d8       	add	#-40,r1
  3042cc:	51 1c       	mov.l	@(48,r1),r1
  3042ce:	21 18       	tst	r1,r1
  3042d0:	89 19       	bt	304306 <gint_free+0xf2>
  3042d2:	61 e3       	mov	r14,r1
  3042d4:	71 d8       	add	#-40,r1
  3042d6:	51 1c       	mov.l	@(48,r1),r1
  3042d8:	62 12       	mov.l	@r1,r2
  3042da:	d1 27       	mov.l	304378 <gint_free+0x164>,r1	! 2000000
  3042dc:	21 29       	and	r2,r1
  3042de:	21 18       	tst	r1,r1
  3042e0:	8b 11       	bf	304306 <gint_free+0xf2>
	{
		remove_link(next, index);
  3042e2:	62 e3       	mov	r14,r2
  3042e4:	72 d8       	add	#-40,r2
  3042e6:	61 e3       	mov	r14,r1
  3042e8:	71 d8       	add	#-40,r1
  3042ea:	55 2e       	mov.l	@(56,r2),r5
  3042ec:	54 1c       	mov.l	@(48,r1),r4
  3042ee:	d1 23       	mov.l	30437c <gint_free+0x168>,r1	! 303cb0 <remove_link>
  3042f0:	41 0b       	jsr	@r1
  3042f2:	00 09       	nop	
		merge(b, next);
  3042f4:	62 e3       	mov	r14,r2
  3042f6:	72 d8       	add	#-40,r2
  3042f8:	61 e3       	mov	r14,r1
  3042fa:	71 d8       	add	#-40,r1
  3042fc:	55 2c       	mov.l	@(48,r2),r5
  3042fe:	54 1f       	mov.l	@(60,r1),r4
  304300:	d1 1f       	mov.l	304380 <gint_free+0x16c>,r1	! 30391c <merge>
  304302:	41 0b       	jsr	@r1
  304304:	00 09       	nop	
	}
	/* Merge with the previous block if free */
	if(prev)
  304306:	61 e3       	mov	r14,r1
  304308:	71 d8       	add	#-40,r1
  30430a:	51 1d       	mov.l	@(52,r1),r1
  30430c:	21 18       	tst	r1,r1
  30430e:	89 17       	bt	304340 <gint_free+0x12c>
	{
		remove_link(prev, index);
  304310:	62 e3       	mov	r14,r2
  304312:	72 d8       	add	#-40,r2
  304314:	61 e3       	mov	r14,r1
  304316:	71 d8       	add	#-40,r1
  304318:	55 2e       	mov.l	@(56,r2),r5
  30431a:	54 1d       	mov.l	@(52,r1),r4
  30431c:	d1 17       	mov.l	30437c <gint_free+0x168>,r1	! 303cb0 <remove_link>
  30431e:	41 0b       	jsr	@r1
  304320:	00 09       	nop	
		merge(prev, b);
  304322:	62 e3       	mov	r14,r2
  304324:	72 d8       	add	#-40,r2
  304326:	61 e3       	mov	r14,r1
  304328:	71 d8       	add	#-40,r1
  30432a:	55 2f       	mov.l	@(60,r2),r5
  30432c:	54 1d       	mov.l	@(52,r1),r4
  30432e:	d1 14       	mov.l	304380 <gint_free+0x16c>,r1	! 30391c <merge>
  304330:	41 0b       	jsr	@r1
  304332:	00 09       	nop	
		b = prev;
  304334:	61 e3       	mov	r14,r1
  304336:	71 d8       	add	#-40,r1
  304338:	62 e3       	mov	r14,r2
  30433a:	72 d8       	add	#-40,r2
  30433c:	52 2d       	mov.l	@(52,r2),r2
  30433e:	11 2f       	mov.l	r2,@(60,r1)
	}

	/* Insert the result in the index */
	prepend_link(b, index);
  304340:	62 e3       	mov	r14,r2
  304342:	72 d8       	add	#-40,r2
  304344:	61 e3       	mov	r14,r1
  304346:	71 d8       	add	#-40,r1
  304348:	55 2e       	mov.l	@(56,r2),r5
  30434a:	54 1f       	mov.l	@(60,r1),r4
  30434c:	d1 0d       	mov.l	304384 <gint_free+0x170>,r1	! 303e1c <prepend_link>
  30434e:	41 0b       	jsr	@r1
  304350:	00 09       	nop	
}
  304352:	00 09       	nop	
  304354:	7e 18       	add	#24,r14
  304356:	6f e3       	mov	r14,r15
  304358:	4f 26       	lds.l	@r15+,pr
  30435a:	6e f6       	mov.l	@r15+,r14
  30435c:	68 f6       	mov.l	@r15+,r8
  30435e:	00 0b       	rts	
  304360:	00 09       	nop	
  304362:	00 09       	nop	
  304364:	00 30       	.word 0x0030
  304366:	37 1c       	add	r1,r7
  304368:	00 30       	.word 0x0030
  30436a:	36 d0       	cmp/eq	r13,r6
  30436c:	fd ff       	.word 0xfdff
  30436e:	ff ff       	.word 0xffff
  304370:	00 ff       	mac.l	@r15+,@r0+
  304372:	ff ff       	.word 0xffff
  304374:	fe ff       	.word 0xfeff
  304376:	ff ff       	.word 0xffff
  304378:	02 00       	.word 0x0200
  30437a:	00 00       	.word 0x0000
  30437c:	00 30       	.word 0x0030
  30437e:	3c b0       	cmp/eq	r11,r12
  304380:	00 30       	.word 0x0030
  304382:	39 1c       	add	r1,r9
  304384:	00 30       	.word 0x0030
  304386:	3e 1c       	add	r1,r14

00304388 <gint_realloc>:

static void *gint_realloc(void *ptr, size_t size, void *data)
{
  304388:	2f 86       	mov.l	r8,@-r15
  30438a:	2f e6       	mov.l	r14,@-r15
  30438c:	4f 22       	sts.l	pr,@-r15
  30438e:	7f cc       	add	#-52,r15
  304390:	6e f3       	mov	r15,r14
  304392:	61 e3       	mov	r14,r1
  304394:	71 f4       	add	#-12,r1
  304396:	11 45       	mov.l	r4,@(20,r1)
  304398:	61 e3       	mov	r14,r1
  30439a:	71 f4       	add	#-12,r1
  30439c:	11 54       	mov.l	r5,@(16,r1)
  30439e:	61 e3       	mov	r14,r1
  3043a0:	71 f4       	add	#-12,r1
  3043a2:	11 63       	mov.l	r6,@(12,r1)
	index_t *index = data;
  3043a4:	61 e3       	mov	r14,r1
  3043a6:	71 f4       	add	#-12,r1
  3043a8:	62 e3       	mov	r14,r2
  3043aa:	72 f4       	add	#-12,r2
  3043ac:	52 23       	mov.l	@(12,r2),r2
  3043ae:	11 2f       	mov.l	r2,@(60,r1)
	stats_t *s = index->stats;
  3043b0:	61 e3       	mov	r14,r1
  3043b2:	71 f4       	add	#-12,r1
  3043b4:	62 e3       	mov	r14,r2
  3043b6:	72 f4       	add	#-12,r2
  3043b8:	52 2f       	mov.l	@(60,r2),r2
  3043ba:	72 40       	add	#64,r2
  3043bc:	52 20       	mov.l	@(0,r2),r2
  3043be:	11 2e       	mov.l	r2,@(56,r1)
	block_t *b = ptr - sizeof(block_t);
  3043c0:	61 e3       	mov	r14,r1
  3043c2:	71 f4       	add	#-12,r1
  3043c4:	62 e3       	mov	r14,r2
  3043c6:	72 f4       	add	#-12,r2
  3043c8:	52 25       	mov.l	@(20,r2),r2
  3043ca:	72 fc       	add	#-4,r2
  3043cc:	11 2d       	mov.l	r2,@(52,r1)
	size = round(size);
  3043ce:	68 e3       	mov	r14,r8
  3043d0:	78 f4       	add	#-12,r8
  3043d2:	61 e3       	mov	r14,r1
  3043d4:	71 f4       	add	#-12,r1
  3043d6:	54 14       	mov.l	@(16,r1),r4
  3043d8:	d1 87       	mov.l	3045f8 <gint_realloc+0x270>,r1	! 303f3c <round>
  3043da:	41 0b       	jsr	@r1
  3043dc:	00 09       	nop	
  3043de:	61 03       	mov	r0,r1
  3043e0:	18 14       	mov.l	r1,@(16,r8)
	int size_before = b->size;
  3043e2:	61 e3       	mov	r14,r1
  3043e4:	71 f4       	add	#-12,r1
  3043e6:	51 1d       	mov.l	@(52,r1),r1
  3043e8:	62 12       	mov.l	@r1,r2
  3043ea:	d1 84       	mov.l	3045fc <gint_realloc+0x274>,r1	! ffffff
  3043ec:	22 19       	and	r1,r2
  3043ee:	61 e3       	mov	r14,r1
  3043f0:	71 f4       	add	#-12,r1
  3043f2:	11 2c       	mov.l	r2,@(48,r1)

	/* When requesting a smaller size, split the original block */
	if(size <= b->size)
  3043f4:	61 e3       	mov	r14,r1
  3043f6:	71 f4       	add	#-12,r1
  3043f8:	51 1d       	mov.l	@(52,r1),r1
  3043fa:	62 12       	mov.l	@r1,r2
  3043fc:	d1 7f       	mov.l	3045fc <gint_realloc+0x274>,r1	! ffffff
  3043fe:	21 29       	and	r2,r1
  304400:	62 13       	mov	r1,r2
  304402:	61 e3       	mov	r14,r1
  304404:	71 f4       	add	#-12,r1
  304406:	51 14       	mov.l	@(16,r1),r1
  304408:	31 26       	cmp/hi	r2,r1
  30440a:	8b 01       	bf	304410 <gint_realloc+0x88>
  30440c:	a0 64       	bra	3044d8 <gint_realloc+0x150>
  30440e:	00 09       	nop	
	{
		block_t *rest = split(b, size);
  304410:	61 e3       	mov	r14,r1
  304412:	71 f4       	add	#-12,r1
  304414:	52 14       	mov.l	@(16,r1),r2
  304416:	68 e3       	mov	r14,r8
  304418:	78 f4       	add	#-12,r8
  30441a:	61 e3       	mov	r14,r1
  30441c:	71 f4       	add	#-12,r1
  30441e:	65 23       	mov	r2,r5
  304420:	54 1d       	mov.l	@(52,r1),r4
  304422:	d1 77       	mov.l	304600 <gint_realloc+0x278>,r1	! 303794 <split>
  304424:	41 0b       	jsr	@r1
  304426:	00 09       	nop	
  304428:	61 03       	mov	r0,r1
  30442a:	18 17       	mov.l	r1,@(28,r8)
		if(!rest) return ptr;
  30442c:	61 e3       	mov	r14,r1
  30442e:	71 f4       	add	#-12,r1
  304430:	51 17       	mov.l	@(28,r1),r1
  304432:	21 18       	tst	r1,r1
  304434:	8b 04       	bf	304440 <gint_realloc+0xb8>
  304436:	61 e3       	mov	r14,r1
  304438:	71 f4       	add	#-12,r1
  30443a:	51 15       	mov.l	@(20,r1),r1
  30443c:	a1 5d       	bra	3046fa <gint_realloc+0x372>
  30443e:	00 09       	nop	

		/* Try to merge the rest with a following free block */
		block_t *next = next_block(rest);
  304440:	68 e3       	mov	r14,r8
  304442:	78 f4       	add	#-12,r8
  304444:	61 e3       	mov	r14,r1
  304446:	71 f4       	add	#-12,r1
  304448:	54 17       	mov.l	@(28,r1),r4
  30444a:	d1 6e       	mov.l	304604 <gint_realloc+0x27c>,r1	! 3036d0 <next_block>
  30444c:	41 0b       	jsr	@r1
  30444e:	00 09       	nop	
  304450:	61 03       	mov	r0,r1
  304452:	18 16       	mov.l	r1,@(24,r8)
		if(next && !next->used)
  304454:	61 e3       	mov	r14,r1
  304456:	71 f4       	add	#-12,r1
  304458:	51 16       	mov.l	@(24,r1),r1
  30445a:	21 18       	tst	r1,r1
  30445c:	89 19       	bt	304492 <gint_realloc+0x10a>
  30445e:	61 e3       	mov	r14,r1
  304460:	71 f4       	add	#-12,r1
  304462:	51 16       	mov.l	@(24,r1),r1
  304464:	62 12       	mov.l	@r1,r2
  304466:	d1 68       	mov.l	304608 <gint_realloc+0x280>,r1	! 2000000
  304468:	21 29       	and	r2,r1
  30446a:	21 18       	tst	r1,r1
  30446c:	8b 11       	bf	304492 <gint_realloc+0x10a>
		{
			remove_link(next, index);
  30446e:	62 e3       	mov	r14,r2
  304470:	72 f4       	add	#-12,r2
  304472:	61 e3       	mov	r14,r1
  304474:	71 f4       	add	#-12,r1
  304476:	55 2f       	mov.l	@(60,r2),r5
  304478:	54 16       	mov.l	@(24,r1),r4
  30447a:	d1 64       	mov.l	30460c <gint_realloc+0x284>,r1	! 303cb0 <remove_link>
  30447c:	41 0b       	jsr	@r1
  30447e:	00 09       	nop	
			merge(rest, next);
  304480:	62 e3       	mov	r14,r2
  304482:	72 f4       	add	#-12,r2
  304484:	61 e3       	mov	r14,r1
  304486:	71 f4       	add	#-12,r1
  304488:	55 26       	mov.l	@(24,r2),r5
  30448a:	54 17       	mov.l	@(28,r1),r4
  30448c:	d1 60       	mov.l	304610 <gint_realloc+0x288>,r1	! 30391c <merge>
  30448e:	41 0b       	jsr	@r1
  304490:	00 09       	nop	
		}
		prepend_link(rest, index);
  304492:	62 e3       	mov	r14,r2
  304494:	72 f4       	add	#-12,r2
  304496:	61 e3       	mov	r14,r1
  304498:	71 f4       	add	#-12,r1
  30449a:	55 2f       	mov.l	@(60,r2),r5
  30449c:	54 17       	mov.l	@(28,r1),r4
  30449e:	d1 5d       	mov.l	304614 <gint_realloc+0x28c>,r1	! 303e1c <prepend_link>
  3044a0:	41 0b       	jsr	@r1
  3044a2:	00 09       	nop	

		if(s) s->used_memory -= (size_before - size);
  3044a4:	61 e3       	mov	r14,r1
  3044a6:	71 f4       	add	#-12,r1
  3044a8:	51 1e       	mov.l	@(56,r1),r1
  3044aa:	21 18       	tst	r1,r1
  3044ac:	89 0f       	bt	3044ce <gint_realloc+0x146>
  3044ae:	61 e3       	mov	r14,r1
  3044b0:	71 f4       	add	#-12,r1
  3044b2:	51 1e       	mov.l	@(56,r1),r1
  3044b4:	52 11       	mov.l	@(4,r1),r2
  3044b6:	61 e3       	mov	r14,r1
  3044b8:	71 f4       	add	#-12,r1
  3044ba:	53 1c       	mov.l	@(48,r1),r3
  3044bc:	61 e3       	mov	r14,r1
  3044be:	71 f4       	add	#-12,r1
  3044c0:	51 14       	mov.l	@(16,r1),r1
  3044c2:	31 38       	sub	r3,r1
  3044c4:	32 1c       	add	r1,r2
  3044c6:	61 e3       	mov	r14,r1
  3044c8:	71 f4       	add	#-12,r1
  3044ca:	51 1e       	mov.l	@(56,r1),r1
  3044cc:	11 21       	mov.l	r2,@(4,r1)
		return ptr;
  3044ce:	61 e3       	mov	r14,r1
  3044d0:	71 f4       	add	#-12,r1
  3044d2:	51 15       	mov.l	@(20,r1),r1
  3044d4:	a1 11       	bra	3046fa <gint_realloc+0x372>
  3044d6:	00 09       	nop	
	}

	/* When requesting a larger size and the next block is free and large
	   enough, expand the original allocation */
	block_t *next = next_block(b);
  3044d8:	68 e3       	mov	r14,r8
  3044da:	78 f4       	add	#-12,r8
  3044dc:	61 e3       	mov	r14,r1
  3044de:	71 f4       	add	#-12,r1
  3044e0:	54 1d       	mov.l	@(52,r1),r4
  3044e2:	d1 48       	mov.l	304604 <gint_realloc+0x27c>,r1	! 3036d0 <next_block>
  3044e4:	41 0b       	jsr	@r1
  3044e6:	00 09       	nop	
  3044e8:	61 03       	mov	r0,r1
  3044ea:	18 1b       	mov.l	r1,@(44,r8)
	int next_needed = size - b->size - sizeof(block_t);
  3044ec:	61 e3       	mov	r14,r1
  3044ee:	71 f4       	add	#-12,r1
  3044f0:	51 1d       	mov.l	@(52,r1),r1
  3044f2:	62 12       	mov.l	@r1,r2
  3044f4:	d1 41       	mov.l	3045fc <gint_realloc+0x274>,r1	! ffffff
  3044f6:	21 29       	and	r2,r1
  3044f8:	62 13       	mov	r1,r2
  3044fa:	61 e3       	mov	r14,r1
  3044fc:	71 f4       	add	#-12,r1
  3044fe:	51 14       	mov.l	@(16,r1),r1
  304500:	31 28       	sub	r2,r1
  304502:	62 13       	mov	r1,r2
  304504:	72 fc       	add	#-4,r2
  304506:	61 e3       	mov	r14,r1
  304508:	71 f4       	add	#-12,r1
  30450a:	11 2a       	mov.l	r2,@(40,r1)

	if(next && !next->used && next->size >= next_needed)
  30450c:	61 e3       	mov	r14,r1
  30450e:	71 f4       	add	#-12,r1
  304510:	51 1b       	mov.l	@(44,r1),r1
  304512:	21 18       	tst	r1,r1
  304514:	89 13       	bt	30453e <gint_realloc+0x1b6>
  304516:	61 e3       	mov	r14,r1
  304518:	71 f4       	add	#-12,r1
  30451a:	51 1b       	mov.l	@(44,r1),r1
  30451c:	62 12       	mov.l	@r1,r2
  30451e:	d1 3a       	mov.l	304608 <gint_realloc+0x280>,r1	! 2000000
  304520:	21 29       	and	r2,r1
  304522:	21 18       	tst	r1,r1
  304524:	8b 0b       	bf	30453e <gint_realloc+0x1b6>
  304526:	61 e3       	mov	r14,r1
  304528:	71 f4       	add	#-12,r1
  30452a:	51 1b       	mov.l	@(44,r1),r1
  30452c:	62 12       	mov.l	@r1,r2
  30452e:	d1 33       	mov.l	3045fc <gint_realloc+0x274>,r1	! ffffff
  304530:	21 29       	and	r2,r1
  304532:	62 13       	mov	r1,r2
  304534:	61 e3       	mov	r14,r1
  304536:	71 f4       	add	#-12,r1
  304538:	51 1a       	mov.l	@(40,r1),r1
  30453a:	31 27       	cmp/gt	r2,r1
  30453c:	8b 01       	bf	304542 <gint_realloc+0x1ba>
  30453e:	a0 6b       	bra	304618 <gint_realloc+0x290>
  304540:	00 09       	nop	
	{
		remove_link(next, index);
  304542:	62 e3       	mov	r14,r2
  304544:	72 f4       	add	#-12,r2
  304546:	61 e3       	mov	r14,r1
  304548:	71 f4       	add	#-12,r1
  30454a:	55 2f       	mov.l	@(60,r2),r5
  30454c:	54 1b       	mov.l	@(44,r1),r4
  30454e:	d1 2f       	mov.l	30460c <gint_realloc+0x284>,r1	! 303cb0 <remove_link>
  304550:	41 0b       	jsr	@r1
  304552:	00 09       	nop	
		block_t *rest = split(next, next_needed);
  304554:	68 e3       	mov	r14,r8
  304556:	78 f4       	add	#-12,r8
  304558:	62 e3       	mov	r14,r2
  30455a:	72 f4       	add	#-12,r2
  30455c:	61 e3       	mov	r14,r1
  30455e:	71 f4       	add	#-12,r1
  304560:	55 2a       	mov.l	@(40,r2),r5
  304562:	54 1b       	mov.l	@(44,r1),r4
  304564:	d1 26       	mov.l	304600 <gint_realloc+0x278>,r1	! 303794 <split>
  304566:	41 0b       	jsr	@r1
  304568:	00 09       	nop	
  30456a:	61 03       	mov	r0,r1
  30456c:	18 19       	mov.l	r1,@(36,r8)
		if(rest) prepend_link(rest, index);
  30456e:	61 e3       	mov	r14,r1
  304570:	71 f4       	add	#-12,r1
  304572:	51 19       	mov.l	@(36,r1),r1
  304574:	21 18       	tst	r1,r1
  304576:	89 08       	bt	30458a <gint_realloc+0x202>
  304578:	62 e3       	mov	r14,r2
  30457a:	72 f4       	add	#-12,r2
  30457c:	61 e3       	mov	r14,r1
  30457e:	71 f4       	add	#-12,r1
  304580:	55 2f       	mov.l	@(60,r2),r5
  304582:	54 19       	mov.l	@(36,r1),r4
  304584:	d1 23       	mov.l	304614 <gint_realloc+0x28c>,r1	! 303e1c <prepend_link>
  304586:	41 0b       	jsr	@r1
  304588:	00 09       	nop	
		merge(b, next);
  30458a:	62 e3       	mov	r14,r2
  30458c:	72 f4       	add	#-12,r2
  30458e:	61 e3       	mov	r14,r1
  304590:	71 f4       	add	#-12,r1
  304592:	55 2b       	mov.l	@(44,r2),r5
  304594:	54 1d       	mov.l	@(52,r1),r4
  304596:	d1 1e       	mov.l	304610 <gint_realloc+0x288>,r1	! 30391c <merge>
  304598:	41 0b       	jsr	@r1
  30459a:	00 09       	nop	

		if(s) s->used_memory += (b->size - size_before);
  30459c:	61 e3       	mov	r14,r1
  30459e:	71 f4       	add	#-12,r1
  3045a0:	51 1e       	mov.l	@(56,r1),r1
  3045a2:	21 18       	tst	r1,r1
  3045a4:	89 14       	bt	3045d0 <gint_realloc+0x248>
  3045a6:	61 e3       	mov	r14,r1
  3045a8:	71 f4       	add	#-12,r1
  3045aa:	51 1e       	mov.l	@(56,r1),r1
  3045ac:	51 11       	mov.l	@(4,r1),r1
  3045ae:	62 e3       	mov	r14,r2
  3045b0:	72 f4       	add	#-12,r2
  3045b2:	52 2d       	mov.l	@(52,r2),r2
  3045b4:	63 22       	mov.l	@r2,r3
  3045b6:	d2 11       	mov.l	3045fc <gint_realloc+0x274>,r2	! ffffff
  3045b8:	22 39       	and	r3,r2
  3045ba:	63 23       	mov	r2,r3
  3045bc:	62 e3       	mov	r14,r2
  3045be:	72 f4       	add	#-12,r2
  3045c0:	52 2c       	mov.l	@(48,r2),r2
  3045c2:	33 28       	sub	r2,r3
  3045c4:	62 33       	mov	r3,r2
  3045c6:	32 1c       	add	r1,r2
  3045c8:	61 e3       	mov	r14,r1
  3045ca:	71 f4       	add	#-12,r1
  3045cc:	51 1e       	mov.l	@(56,r1),r1
  3045ce:	11 21       	mov.l	r2,@(4,r1)
		if(s) s->expanding_reallocs++;
  3045d0:	61 e3       	mov	r14,r1
  3045d2:	71 f4       	add	#-12,r1
  3045d4:	51 1e       	mov.l	@(56,r1),r1
  3045d6:	21 18       	tst	r1,r1
  3045d8:	89 09       	bt	3045ee <gint_realloc+0x266>
  3045da:	61 e3       	mov	r14,r1
  3045dc:	71 f4       	add	#-12,r1
  3045de:	51 1e       	mov.l	@(56,r1),r1
  3045e0:	51 15       	mov.l	@(20,r1),r1
  3045e2:	62 13       	mov	r1,r2
  3045e4:	72 01       	add	#1,r2
  3045e6:	61 e3       	mov	r14,r1
  3045e8:	71 f4       	add	#-12,r1
  3045ea:	51 1e       	mov.l	@(56,r1),r1
  3045ec:	11 25       	mov.l	r2,@(20,r1)
		return ptr;
  3045ee:	61 e3       	mov	r14,r1
  3045f0:	71 f4       	add	#-12,r1
  3045f2:	51 15       	mov.l	@(20,r1),r1
  3045f4:	a0 81       	bra	3046fa <gint_realloc+0x372>
  3045f6:	00 09       	nop	
  3045f8:	00 30       	.word 0x0030
  3045fa:	3f 3c       	add	r3,r15
  3045fc:	00 ff       	mac.l	@r15+,@r0+
  3045fe:	ff ff       	.word 0xffff
  304600:	00 30       	.word 0x0030
  304602:	37 94       	div1	r9,r7
  304604:	00 30       	.word 0x0030
  304606:	36 d0       	cmp/eq	r13,r6
  304608:	02 00       	.word 0x0200
  30460a:	00 00       	.word 0x0000
  30460c:	00 30       	.word 0x0030
  30460e:	3c b0       	cmp/eq	r11,r12
  304610:	00 30       	.word 0x0030
  304612:	39 1c       	add	r1,r9
  304614:	00 30       	.word 0x0030
  304616:	3e 1c       	add	r1,r14
	}

	/* Otherwise, perform a brand new allocation */
	void *new_ptr = gint_malloc(size, data);
  304618:	68 e3       	mov	r14,r8
  30461a:	78 f4       	add	#-12,r8
  30461c:	62 e3       	mov	r14,r2
  30461e:	72 f4       	add	#-12,r2
  304620:	61 e3       	mov	r14,r1
  304622:	71 f4       	add	#-12,r1
  304624:	55 23       	mov.l	@(12,r2),r5
  304626:	54 14       	mov.l	@(16,r1),r4
  304628:	d1 38       	mov.l	30470c <gint_realloc+0x384>,r1	! 303f74 <gint_malloc>
  30462a:	41 0b       	jsr	@r1
  30462c:	00 09       	nop	
  30462e:	61 03       	mov	r0,r1
  304630:	18 18       	mov.l	r1,@(32,r8)
	if(!new_ptr)
  304632:	61 e3       	mov	r14,r1
  304634:	71 f4       	add	#-12,r1
  304636:	51 18       	mov.l	@(32,r1),r1
  304638:	21 18       	tst	r1,r1
  30463a:	8b 32       	bf	3046a2 <gint_realloc+0x31a>
	{
		if(s && size >= s->free_memory) s->exhaustion_failures++;
  30463c:	61 e3       	mov	r14,r1
  30463e:	71 f4       	add	#-12,r1
  304640:	51 1e       	mov.l	@(56,r1),r1
  304642:	21 18       	tst	r1,r1
  304644:	89 12       	bt	30466c <gint_realloc+0x2e4>
  304646:	61 e3       	mov	r14,r1
  304648:	71 f4       	add	#-12,r1
  30464a:	51 1e       	mov.l	@(56,r1),r1
  30464c:	61 12       	mov.l	@r1,r1
  30464e:	62 e3       	mov	r14,r2
  304650:	72 f4       	add	#-12,r2
  304652:	52 24       	mov.l	@(16,r2),r2
  304654:	32 12       	cmp/hs	r1,r2
  304656:	8b 09       	bf	30466c <gint_realloc+0x2e4>
  304658:	61 e3       	mov	r14,r1
  30465a:	71 f4       	add	#-12,r1
  30465c:	51 1e       	mov.l	@(56,r1),r1
  30465e:	51 13       	mov.l	@(12,r1),r1
  304660:	62 13       	mov	r1,r2
  304662:	72 01       	add	#1,r2
  304664:	61 e3       	mov	r14,r1
  304666:	71 f4       	add	#-12,r1
  304668:	51 1e       	mov.l	@(56,r1),r1
  30466a:	11 23       	mov.l	r2,@(12,r1)
		if(s && size <  s->free_memory) s->fragmentation_failures++;
  30466c:	61 e3       	mov	r14,r1
  30466e:	71 f4       	add	#-12,r1
  304670:	51 1e       	mov.l	@(56,r1),r1
  304672:	21 18       	tst	r1,r1
  304674:	89 12       	bt	30469c <gint_realloc+0x314>
  304676:	61 e3       	mov	r14,r1
  304678:	71 f4       	add	#-12,r1
  30467a:	51 1e       	mov.l	@(56,r1),r1
  30467c:	61 12       	mov.l	@r1,r1
  30467e:	62 e3       	mov	r14,r2
  304680:	72 f4       	add	#-12,r2
  304682:	52 24       	mov.l	@(16,r2),r2
  304684:	32 12       	cmp/hs	r1,r2
  304686:	89 09       	bt	30469c <gint_realloc+0x314>
  304688:	61 e3       	mov	r14,r1
  30468a:	71 f4       	add	#-12,r1
  30468c:	51 1e       	mov.l	@(56,r1),r1
  30468e:	51 14       	mov.l	@(16,r1),r1
  304690:	62 13       	mov	r1,r2
  304692:	72 01       	add	#1,r2
  304694:	61 e3       	mov	r14,r1
  304696:	71 f4       	add	#-12,r1
  304698:	51 1e       	mov.l	@(56,r1),r1
  30469a:	11 24       	mov.l	r2,@(16,r1)
		return NULL;
  30469c:	e1 00       	mov	#0,r1
  30469e:	a0 2c       	bra	3046fa <gint_realloc+0x372>
  3046a0:	00 09       	nop	
	}

	/* Move the data and free the original block */
	memcpy(new_ptr, ptr, b->size);
  3046a2:	61 e3       	mov	r14,r1
  3046a4:	71 f4       	add	#-12,r1
  3046a6:	51 1d       	mov.l	@(52,r1),r1
  3046a8:	62 12       	mov.l	@r1,r2
  3046aa:	d1 19       	mov.l	304710 <gint_realloc+0x388>,r1	! ffffff
  3046ac:	21 29       	and	r2,r1
  3046ae:	63 13       	mov	r1,r3
  3046b0:	62 e3       	mov	r14,r2
  3046b2:	72 f4       	add	#-12,r2
  3046b4:	61 e3       	mov	r14,r1
  3046b6:	71 f4       	add	#-12,r1
  3046b8:	66 33       	mov	r3,r6
  3046ba:	55 25       	mov.l	@(20,r2),r5
  3046bc:	54 18       	mov.l	@(32,r1),r4
  3046be:	d1 15       	mov.l	304714 <gint_realloc+0x38c>,r1	! 30ae40 <memcpy>
  3046c0:	41 0b       	jsr	@r1
  3046c2:	00 09       	nop	
	gint_free(ptr, data);
  3046c4:	62 e3       	mov	r14,r2
  3046c6:	72 f4       	add	#-12,r2
  3046c8:	61 e3       	mov	r14,r1
  3046ca:	71 f4       	add	#-12,r1
  3046cc:	55 23       	mov.l	@(12,r2),r5
  3046ce:	54 15       	mov.l	@(20,r1),r4
  3046d0:	d1 11       	mov.l	304718 <gint_realloc+0x390>,r1	! 304214 <gint_free>
  3046d2:	41 0b       	jsr	@r1
  3046d4:	00 09       	nop	

	if(s) s->relocating_reallocs++;
  3046d6:	61 e3       	mov	r14,r1
  3046d8:	71 f4       	add	#-12,r1
  3046da:	51 1e       	mov.l	@(56,r1),r1
  3046dc:	21 18       	tst	r1,r1
  3046de:	89 09       	bt	3046f4 <gint_realloc+0x36c>
  3046e0:	61 e3       	mov	r14,r1
  3046e2:	71 f4       	add	#-12,r1
  3046e4:	51 1e       	mov.l	@(56,r1),r1
  3046e6:	51 16       	mov.l	@(24,r1),r1
  3046e8:	62 13       	mov	r1,r2
  3046ea:	72 01       	add	#1,r2
  3046ec:	61 e3       	mov	r14,r1
  3046ee:	71 f4       	add	#-12,r1
  3046f0:	51 1e       	mov.l	@(56,r1),r1
  3046f2:	11 26       	mov.l	r2,@(24,r1)
	return new_ptr;
  3046f4:	61 e3       	mov	r14,r1
  3046f6:	71 f4       	add	#-12,r1
  3046f8:	51 18       	mov.l	@(32,r1),r1
}
  3046fa:	60 13       	mov	r1,r0
  3046fc:	7e 34       	add	#52,r14
  3046fe:	6f e3       	mov	r14,r15
  304700:	4f 26       	lds.l	@r15+,pr
  304702:	6e f6       	mov.l	@r15+,r14
  304704:	68 f6       	mov.l	@r15+,r8
  304706:	00 0b       	rts	
  304708:	00 09       	nop	
  30470a:	00 09       	nop	
  30470c:	00 30       	.word 0x0030
  30470e:	3f 74       	div1	r7,r15
  304710:	00 ff       	mac.l	@r15+,@r0+
  304712:	ff ff       	.word 0xffff
  304714:	00 30       	.word 0x0030
  304716:	ae 40       	bra	30439a <gint_realloc+0x12>
  304718:	00 30       	.word 0x0030
  30471a:	42 14       	setrc	r2

0030471c <gint_malloc_max>:

static void *gint_malloc_max(size_t *size, void *data)
{
  30471c:	2f 86       	mov.l	r8,@-r15
  30471e:	2f e6       	mov.l	r14,@-r15
  304720:	4f 22       	sts.l	pr,@-r15
  304722:	7f d8       	add	#-40,r15
  304724:	6e f3       	mov	r15,r14
  304726:	61 e3       	mov	r14,r1
  304728:	71 e8       	add	#-24,r1
  30472a:	11 47       	mov.l	r4,@(28,r1)
  30472c:	61 e3       	mov	r14,r1
  30472e:	71 e8       	add	#-24,r1
  304730:	11 56       	mov.l	r5,@(24,r1)
	index_t *index = data;
  304732:	61 e3       	mov	r14,r1
  304734:	71 e8       	add	#-24,r1
  304736:	62 e3       	mov	r14,r2
  304738:	72 e8       	add	#-24,r2
  30473a:	52 26       	mov.l	@(24,r2),r2
  30473c:	11 2d       	mov.l	r2,@(52,r1)
	stats_t *s = index->stats;
  30473e:	61 e3       	mov	r14,r1
  304740:	71 e8       	add	#-24,r1
  304742:	62 e3       	mov	r14,r2
  304744:	72 e8       	add	#-24,r2
  304746:	52 2d       	mov.l	@(52,r2),r2
  304748:	72 40       	add	#64,r2
  30474a:	52 20       	mov.l	@(0,r2),r2
  30474c:	11 2c       	mov.l	r2,@(48,r1)

	/* Find the largest available block in the largest possible class */
	block_t *alloc;
	for(int c = 15; c >= 0; c--)
  30474e:	61 e3       	mov	r14,r1
  304750:	71 e8       	add	#-24,r1
  304752:	e2 0f       	mov	#15,r2
  304754:	11 2e       	mov.l	r2,@(56,r1)
  304756:	a0 2d       	bra	3047b4 <gint_malloc_max+0x98>
  304758:	00 09       	nop	
	{
		block_t *list = index->classes[c];
  30475a:	61 e3       	mov	r14,r1
  30475c:	71 e8       	add	#-24,r1
  30475e:	62 e3       	mov	r14,r2
  304760:	72 e8       	add	#-24,r2
  304762:	53 2d       	mov.l	@(52,r2),r3
  304764:	62 e3       	mov	r14,r2
  304766:	72 e8       	add	#-24,r2
  304768:	52 2e       	mov.l	@(56,r2),r2
  30476a:	42 08       	shll2	r2
  30476c:	32 3c       	add	r3,r2
  30476e:	62 22       	mov.l	@r2,r2
  304770:	11 2b       	mov.l	r2,@(44,r1)
		alloc = (c < 14) ? list : worst_fit(list);
  304772:	61 e3       	mov	r14,r1
  304774:	71 e8       	add	#-24,r1
  304776:	52 1e       	mov.l	@(56,r1),r2
  304778:	e1 0d       	mov	#13,r1
  30477a:	32 17       	cmp/gt	r1,r2
  30477c:	8b 08       	bf	304790 <gint_malloc_max+0x74>
  30477e:	61 e3       	mov	r14,r1
  304780:	71 e8       	add	#-24,r1
  304782:	54 1b       	mov.l	@(44,r1),r4
  304784:	d1 4c       	mov.l	3048b8 <gint_malloc_max+0x19c>,r1	! 303c18 <worst_fit>
  304786:	41 0b       	jsr	@r1
  304788:	00 09       	nop	
  30478a:	61 03       	mov	r0,r1
  30478c:	a0 03       	bra	304796 <gint_malloc_max+0x7a>
  30478e:	00 09       	nop	
  304790:	61 e3       	mov	r14,r1
  304792:	71 e8       	add	#-24,r1
  304794:	51 1b       	mov.l	@(44,r1),r1
  304796:	62 e3       	mov	r14,r2
  304798:	72 e8       	add	#-24,r2
  30479a:	12 1f       	mov.l	r1,@(60,r2)
		if(alloc) break;
  30479c:	61 e3       	mov	r14,r1
  30479e:	71 e8       	add	#-24,r1
  3047a0:	51 1f       	mov.l	@(60,r1),r1
  3047a2:	21 18       	tst	r1,r1
  3047a4:	8b 0d       	bf	3047c2 <gint_malloc_max+0xa6>
	for(int c = 15; c >= 0; c--)
  3047a6:	61 e3       	mov	r14,r1
  3047a8:	71 e8       	add	#-24,r1
  3047aa:	62 e3       	mov	r14,r2
  3047ac:	72 e8       	add	#-24,r2
  3047ae:	52 2e       	mov.l	@(56,r2),r2
  3047b0:	72 ff       	add	#-1,r2
  3047b2:	11 2e       	mov.l	r2,@(56,r1)
  3047b4:	61 e3       	mov	r14,r1
  3047b6:	71 e8       	add	#-24,r1
  3047b8:	51 1e       	mov.l	@(56,r1),r1
  3047ba:	41 11       	cmp/pz	r1
  3047bc:	89 cd       	bt	30475a <gint_malloc_max+0x3e>
  3047be:	a0 01       	bra	3047c4 <gint_malloc_max+0xa8>
  3047c0:	00 09       	nop	
		if(alloc) break;
  3047c2:	00 09       	nop	
	}
	if(!alloc) return NULL;
  3047c4:	61 e3       	mov	r14,r1
  3047c6:	71 e8       	add	#-24,r1
  3047c8:	51 1f       	mov.l	@(60,r1),r1
  3047ca:	21 18       	tst	r1,r1
  3047cc:	8b 02       	bf	3047d4 <gint_malloc_max+0xb8>
  3047ce:	e1 00       	mov	#0,r1
  3047d0:	a0 69       	bra	3048a6 <gint_malloc_max+0x18a>
  3047d2:	00 09       	nop	

	remove_link(alloc, index);
  3047d4:	62 e3       	mov	r14,r2
  3047d6:	72 e8       	add	#-24,r2
  3047d8:	61 e3       	mov	r14,r1
  3047da:	71 e8       	add	#-24,r1
  3047dc:	55 2d       	mov.l	@(52,r2),r5
  3047de:	54 1f       	mov.l	@(60,r1),r4
  3047e0:	d1 36       	mov.l	3048bc <gint_malloc_max+0x1a0>,r1	! 303cb0 <remove_link>
  3047e2:	41 0b       	jsr	@r1
  3047e4:	00 09       	nop	

	/* Mark the block as allocated and return it */
	block_t *next = next_block(alloc);
  3047e6:	68 e3       	mov	r14,r8
  3047e8:	78 e8       	add	#-24,r8
  3047ea:	61 e3       	mov	r14,r1
  3047ec:	71 e8       	add	#-24,r1
  3047ee:	54 1f       	mov.l	@(60,r1),r4
  3047f0:	d1 33       	mov.l	3048c0 <gint_malloc_max+0x1a4>,r1	! 3036d0 <next_block>
  3047f2:	41 0b       	jsr	@r1
  3047f4:	00 09       	nop	
  3047f6:	61 03       	mov	r0,r1
  3047f8:	18 1a       	mov.l	r1,@(40,r8)
	alloc->used = true;
  3047fa:	61 e3       	mov	r14,r1
  3047fc:	71 e8       	add	#-24,r1
  3047fe:	51 1f       	mov.l	@(60,r1),r1
  304800:	63 12       	mov.l	@r1,r3
  304802:	d2 30       	mov.l	3048c4 <gint_malloc_max+0x1a8>,r2	! 2000000
  304804:	22 3b       	or	r3,r2
  304806:	21 22       	mov.l	r2,@r1
	if(next) next->previous_used = true;
  304808:	61 e3       	mov	r14,r1
  30480a:	71 e8       	add	#-24,r1
  30480c:	51 1a       	mov.l	@(40,r1),r1
  30480e:	21 18       	tst	r1,r1
  304810:	89 06       	bt	304820 <gint_malloc_max+0x104>
  304812:	61 e3       	mov	r14,r1
  304814:	71 e8       	add	#-24,r1
  304816:	51 1a       	mov.l	@(40,r1),r1
  304818:	63 12       	mov.l	@r1,r3
  30481a:	d2 2b       	mov.l	3048c8 <gint_malloc_max+0x1ac>,r2	! 1000000
  30481c:	22 3b       	or	r3,r2
  30481e:	21 22       	mov.l	r2,@r1

	if(s) s->used_memory += alloc->size;
  304820:	61 e3       	mov	r14,r1
  304822:	71 e8       	add	#-24,r1
  304824:	51 1c       	mov.l	@(48,r1),r1
  304826:	21 18       	tst	r1,r1
  304828:	89 0e       	bt	304848 <gint_malloc_max+0x12c>
  30482a:	61 e3       	mov	r14,r1
  30482c:	71 e8       	add	#-24,r1
  30482e:	51 1c       	mov.l	@(48,r1),r1
  304830:	51 11       	mov.l	@(4,r1),r1
  304832:	62 e3       	mov	r14,r2
  304834:	72 e8       	add	#-24,r2
  304836:	52 2f       	mov.l	@(60,r2),r2
  304838:	63 22       	mov.l	@r2,r3
  30483a:	d2 24       	mov.l	3048cc <gint_malloc_max+0x1b0>,r2	! ffffff
  30483c:	22 39       	and	r3,r2
  30483e:	32 1c       	add	r1,r2
  304840:	61 e3       	mov	r14,r1
  304842:	71 e8       	add	#-24,r1
  304844:	51 1c       	mov.l	@(48,r1),r1
  304846:	11 21       	mov.l	r2,@(4,r1)
	if(s) s->peak_used_memory = max(s->peak_used_memory, s->used_memory);
  304848:	61 e3       	mov	r14,r1
  30484a:	71 e8       	add	#-24,r1
  30484c:	51 1c       	mov.l	@(48,r1),r1
  30484e:	21 18       	tst	r1,r1
  304850:	89 1a       	bt	304888 <gint_malloc_max+0x16c>
  304852:	61 e3       	mov	r14,r1
  304854:	71 e8       	add	#-24,r1
  304856:	62 e3       	mov	r14,r2
  304858:	72 e8       	add	#-24,r2
  30485a:	52 2c       	mov.l	@(48,r2),r2
  30485c:	52 22       	mov.l	@(8,r2),r2
  30485e:	11 29       	mov.l	r2,@(36,r1)
  304860:	61 e3       	mov	r14,r1
  304862:	71 e8       	add	#-24,r1
  304864:	62 e3       	mov	r14,r2
  304866:	72 e8       	add	#-24,r2
  304868:	52 2c       	mov.l	@(48,r2),r2
  30486a:	52 21       	mov.l	@(4,r2),r2
  30486c:	11 28       	mov.l	r2,@(32,r1)
  30486e:	61 e3       	mov	r14,r1
  304870:	71 e8       	add	#-24,r1
  304872:	62 e3       	mov	r14,r2
  304874:	72 e8       	add	#-24,r2
  304876:	52 29       	mov.l	@(36,r2),r2
  304878:	51 18       	mov.l	@(32,r1),r1
  30487a:	31 22       	cmp/hs	r2,r1
  30487c:	89 00       	bt	304880 <gint_malloc_max+0x164>
  30487e:	61 23       	mov	r2,r1
  304880:	62 e3       	mov	r14,r2
  304882:	72 e8       	add	#-24,r2
  304884:	52 2c       	mov.l	@(48,r2),r2
  304886:	12 12       	mov.l	r1,@(8,r2)

	*size = alloc->size;
  304888:	61 e3       	mov	r14,r1
  30488a:	71 e8       	add	#-24,r1
  30488c:	51 1f       	mov.l	@(60,r1),r1
  30488e:	62 12       	mov.l	@r1,r2
  304890:	d1 0e       	mov.l	3048cc <gint_malloc_max+0x1b0>,r1	! ffffff
  304892:	21 29       	and	r2,r1
  304894:	62 13       	mov	r1,r2
  304896:	61 e3       	mov	r14,r1
  304898:	71 e8       	add	#-24,r1
  30489a:	51 17       	mov.l	@(28,r1),r1
  30489c:	21 22       	mov.l	r2,@r1
	return (void *)alloc + sizeof(block_t);
  30489e:	61 e3       	mov	r14,r1
  3048a0:	71 e8       	add	#-24,r1
  3048a2:	51 1f       	mov.l	@(60,r1),r1
  3048a4:	71 04       	add	#4,r1
}
  3048a6:	60 13       	mov	r1,r0
  3048a8:	7e 28       	add	#40,r14
  3048aa:	6f e3       	mov	r14,r15
  3048ac:	4f 26       	lds.l	@r15+,pr
  3048ae:	6e f6       	mov.l	@r15+,r14
  3048b0:	68 f6       	mov.l	@r15+,r8
  3048b2:	00 0b       	rts	
  3048b4:	00 09       	nop	
  3048b6:	00 09       	nop	
  3048b8:	00 30       	.word 0x0030
  3048ba:	3c 18       	sub	r1,r12
  3048bc:	00 30       	.word 0x0030
  3048be:	3c b0       	cmp/eq	r11,r12
  3048c0:	00 30       	.word 0x0030
  3048c2:	36 d0       	cmp/eq	r13,r6
  3048c4:	02 00       	.word 0x0200
  3048c6:	00 00       	.word 0x0000
  3048c8:	01 00       	.word 0x0100
  3048ca:	00 00       	.word 0x0000
  3048cc:	00 ff       	mac.l	@r15+,@r0+
  3048ce:	ff ff       	.word 0xffff

003048d0 <kmalloc_init_arena>:

/* kmalloc_init_arena(): Initialize an arena with gint's allocator */
void kmalloc_init_arena(kmalloc_arena_t *a, bool enable_statistics)
{
  3048d0:	2f e6       	mov.l	r14,@-r15
  3048d2:	4f 22       	sts.l	pr,@-r15
  3048d4:	7f e8       	add	#-24,r15
  3048d6:	6e f3       	mov	r15,r14
  3048d8:	61 e3       	mov	r14,r1
  3048da:	71 d8       	add	#-40,r1
  3048dc:	11 4b       	mov.l	r4,@(44,r1)
  3048de:	62 53       	mov	r5,r2
  3048e0:	61 e3       	mov	r14,r1
  3048e2:	71 f8       	add	#-8,r1
  3048e4:	60 23       	mov	r2,r0
  3048e6:	80 18       	mov.b	r0,@(8,r1)
	if(a->end - a->start < 256) return;
  3048e8:	61 e3       	mov	r14,r1
  3048ea:	71 d8       	add	#-40,r1
  3048ec:	51 1b       	mov.l	@(44,r1),r1
  3048ee:	52 16       	mov.l	@(24,r1),r2
  3048f0:	61 e3       	mov	r14,r1
  3048f2:	71 d8       	add	#-40,r1
  3048f4:	51 1b       	mov.l	@(44,r1),r1
  3048f6:	51 15       	mov.l	@(20,r1),r1
  3048f8:	32 18       	sub	r1,r2
  3048fa:	91 96       	mov.w	304a2a <kmalloc_init_arena+0x15a>,r1	! ff
  3048fc:	32 17       	cmp/gt	r1,r2
  3048fe:	89 01       	bt	304904 <kmalloc_init_arena+0x34>
  304900:	a1 00       	bra	304b04 <kmalloc_init_arena+0x234>
  304902:	00 09       	nop	
	block_t *entry_block;

	a->malloc = gint_malloc;
  304904:	61 e3       	mov	r14,r1
  304906:	71 d8       	add	#-40,r1
  304908:	51 1b       	mov.l	@(44,r1),r1
  30490a:	d2 48       	mov.l	304a2c <kmalloc_init_arena+0x15c>,r2	! 303f74 <gint_malloc>
  30490c:	21 22       	mov.l	r2,@r1
	a->free = gint_free;
  30490e:	61 e3       	mov	r14,r1
  304910:	71 d8       	add	#-40,r1
  304912:	51 1b       	mov.l	@(44,r1),r1
  304914:	d2 46       	mov.l	304a30 <kmalloc_init_arena+0x160>,r2	! 304214 <gint_free>
  304916:	11 22       	mov.l	r2,@(8,r1)
	a->realloc = gint_realloc;
  304918:	61 e3       	mov	r14,r1
  30491a:	71 d8       	add	#-40,r1
  30491c:	51 1b       	mov.l	@(44,r1),r1
  30491e:	d2 45       	mov.l	304a34 <kmalloc_init_arena+0x164>,r2	! 304388 <gint_realloc>
  304920:	11 21       	mov.l	r2,@(4,r1)
	a->malloc_max = gint_malloc_max;
  304922:	61 e3       	mov	r14,r1
  304924:	71 d8       	add	#-40,r1
  304926:	51 1b       	mov.l	@(44,r1),r1
  304928:	d2 43       	mov.l	304a38 <kmalloc_init_arena+0x168>,r2	! 30471c <gint_malloc_max>
  30492a:	11 23       	mov.l	r2,@(12,r1)

	/* The index is located at the very start of the arena */
	index_t *index = a->start;
  30492c:	61 e3       	mov	r14,r1
  30492e:	71 d8       	add	#-40,r1
  304930:	62 e3       	mov	r14,r2
  304932:	72 d8       	add	#-40,r2
  304934:	52 2b       	mov.l	@(44,r2),r2
  304936:	52 25       	mov.l	@(20,r2),r2
  304938:	11 2d       	mov.l	r2,@(52,r1)
	a->data = index;
  30493a:	61 e3       	mov	r14,r1
  30493c:	71 d8       	add	#-40,r1
  30493e:	51 1b       	mov.l	@(44,r1),r1
  304940:	62 e3       	mov	r14,r2
  304942:	72 d8       	add	#-40,r2
  304944:	52 2d       	mov.l	@(52,r2),r2
  304946:	11 27       	mov.l	r2,@(28,r1)

	/* If requested, keep space for statistics */
	if(enable_statistics)
  304948:	61 e3       	mov	r14,r1
  30494a:	71 f8       	add	#-8,r1
  30494c:	84 18       	mov.b	@(8,r1),r0
  30494e:	61 03       	mov	r0,r1
  304950:	61 1c       	extu.b	r1,r1
  304952:	21 18       	tst	r1,r1
  304954:	89 20       	bt	304998 <kmalloc_init_arena+0xc8>
	{
		index->stats = (void *)a->start + sizeof(index_t);
  304956:	61 e3       	mov	r14,r1
  304958:	71 d8       	add	#-40,r1
  30495a:	51 1b       	mov.l	@(44,r1),r1
  30495c:	51 15       	mov.l	@(20,r1),r1
  30495e:	62 13       	mov	r1,r2
  304960:	72 44       	add	#68,r2
  304962:	61 e3       	mov	r14,r1
  304964:	71 d8       	add	#-40,r1
  304966:	51 1d       	mov.l	@(52,r1),r1
  304968:	71 40       	add	#64,r1
  30496a:	11 20       	mov.l	r2,@(0,r1)
		entry_block = (void *)index->stats + sizeof(stats_t);
  30496c:	61 e3       	mov	r14,r1
  30496e:	71 d8       	add	#-40,r1
  304970:	51 1d       	mov.l	@(52,r1),r1
  304972:	71 40       	add	#64,r1
  304974:	52 10       	mov.l	@(0,r1),r2
  304976:	61 e3       	mov	r14,r1
  304978:	71 d8       	add	#-40,r1
  30497a:	72 1c       	add	#28,r2
  30497c:	11 2f       	mov.l	r2,@(60,r1)

		memset(index->stats, 0, sizeof(stats_t));
  30497e:	61 e3       	mov	r14,r1
  304980:	71 d8       	add	#-40,r1
  304982:	51 1d       	mov.l	@(52,r1),r1
  304984:	71 40       	add	#64,r1
  304986:	51 10       	mov.l	@(0,r1),r1
  304988:	e6 1c       	mov	#28,r6
  30498a:	e5 00       	mov	#0,r5
  30498c:	64 13       	mov	r1,r4
  30498e:	d1 2b       	mov.l	304a3c <kmalloc_init_arena+0x16c>,r1	! 30af00 <memset>
  304990:	41 0b       	jsr	@r1
  304992:	00 09       	nop	
  304994:	a0 0e       	bra	3049b4 <kmalloc_init_arena+0xe4>
  304996:	00 09       	nop	
	}
	else
	{
		index->stats = NULL;
  304998:	61 e3       	mov	r14,r1
  30499a:	71 d8       	add	#-40,r1
  30499c:	51 1d       	mov.l	@(52,r1),r1
  30499e:	71 40       	add	#64,r1
  3049a0:	e2 00       	mov	#0,r2
  3049a2:	11 20       	mov.l	r2,@(0,r1)
		entry_block = (void *)a->start + sizeof(index_t);
  3049a4:	61 e3       	mov	r14,r1
  3049a6:	71 d8       	add	#-40,r1
  3049a8:	51 1b       	mov.l	@(44,r1),r1
  3049aa:	52 15       	mov.l	@(20,r1),r2
  3049ac:	61 e3       	mov	r14,r1
  3049ae:	71 d8       	add	#-40,r1
  3049b0:	72 44       	add	#68,r2
  3049b2:	11 2f       	mov.l	r2,@(60,r1)
	}

	/* Initialize the first block */
	entry_block->last = 1;
  3049b4:	61 e3       	mov	r14,r1
  3049b6:	71 d8       	add	#-40,r1
  3049b8:	51 1f       	mov.l	@(60,r1),r1
  3049ba:	63 12       	mov.l	@r1,r3
  3049bc:	d2 20       	mov.l	304a40 <kmalloc_init_arena+0x170>,r2	! 4000000
  3049be:	22 3b       	or	r3,r2
  3049c0:	21 22       	mov.l	r2,@r1
	entry_block->used = 0;
  3049c2:	61 e3       	mov	r14,r1
  3049c4:	71 d8       	add	#-40,r1
  3049c6:	51 1f       	mov.l	@(60,r1),r1
  3049c8:	63 12       	mov.l	@r1,r3
  3049ca:	d2 1e       	mov.l	304a44 <kmalloc_init_arena+0x174>,r2	! fdffffff
  3049cc:	22 39       	and	r3,r2
  3049ce:	21 22       	mov.l	r2,@r1
	entry_block->previous_used = 1;
  3049d0:	61 e3       	mov	r14,r1
  3049d2:	71 d8       	add	#-40,r1
  3049d4:	51 1f       	mov.l	@(60,r1),r1
  3049d6:	63 12       	mov.l	@r1,r3
  3049d8:	d2 1b       	mov.l	304a48 <kmalloc_init_arena+0x178>,r2	! 1000000
  3049da:	22 3b       	or	r3,r2
  3049dc:	21 22       	mov.l	r2,@r1
	entry_block->size = a->end - (void *)entry_block - sizeof(block_t);
  3049de:	61 e3       	mov	r14,r1
  3049e0:	71 d8       	add	#-40,r1
  3049e2:	51 1b       	mov.l	@(44,r1),r1
  3049e4:	52 16       	mov.l	@(24,r1),r2
  3049e6:	61 e3       	mov	r14,r1
  3049e8:	71 d8       	add	#-40,r1
  3049ea:	51 1f       	mov.l	@(60,r1),r1
  3049ec:	32 18       	sub	r1,r2
  3049ee:	61 23       	mov	r2,r1
  3049f0:	62 13       	mov	r1,r2
  3049f2:	72 fc       	add	#-4,r2
  3049f4:	d1 15       	mov.l	304a4c <kmalloc_init_arena+0x17c>,r1	! ffffff
  3049f6:	63 23       	mov	r2,r3
  3049f8:	23 19       	and	r1,r3
  3049fa:	61 e3       	mov	r14,r1
  3049fc:	71 d8       	add	#-40,r1
  3049fe:	51 1f       	mov.l	@(60,r1),r1
  304a00:	d2 12       	mov.l	304a4c <kmalloc_init_arena+0x17c>,r2	! ffffff
  304a02:	22 39       	and	r3,r2
  304a04:	67 12       	mov.l	@r1,r7
  304a06:	d3 12       	mov.l	304a50 <kmalloc_init_arena+0x180>,r3	! ff000000
  304a08:	23 79       	and	r7,r3
  304a0a:	22 3b       	or	r3,r2
  304a0c:	21 22       	mov.l	r2,@r1
	set_footer(entry_block, NULL, NULL);
  304a0e:	61 e3       	mov	r14,r1
  304a10:	71 d8       	add	#-40,r1
  304a12:	e6 00       	mov	#0,r6
  304a14:	e5 00       	mov	#0,r5
  304a16:	54 1f       	mov.l	@(60,r1),r4
  304a18:	d1 0e       	mov.l	304a54 <kmalloc_init_arena+0x184>,r1	! 303a9c <set_footer>
  304a1a:	41 0b       	jsr	@r1
  304a1c:	00 09       	nop	

	/* Initialize the index */
	for(int i = 0; i < 16; i++) index->classes[i] = NULL;
  304a1e:	61 e3       	mov	r14,r1
  304a20:	71 d8       	add	#-40,r1
  304a22:	e2 00       	mov	#0,r2
  304a24:	11 2e       	mov.l	r2,@(56,r1)
  304a26:	a0 28       	bra	304a7a <kmalloc_init_arena+0x1aa>
  304a28:	00 09       	nop	
  304a2a:	00 ff       	mac.l	@r15+,@r0+
  304a2c:	00 30       	.word 0x0030
  304a2e:	3f 74       	div1	r7,r15
  304a30:	00 30       	.word 0x0030
  304a32:	42 14       	setrc	r2
  304a34:	00 30       	.word 0x0030
  304a36:	43 88       	.word 0x4388
  304a38:	00 30       	.word 0x0030
  304a3a:	47 1c       	shad	r1,r7
  304a3c:	00 30       	.word 0x0030
  304a3e:	af 00       	bra	304842 <gint_malloc_max+0x126>
  304a40:	04 00       	.word 0x0400
  304a42:	00 00       	.word 0x0000
  304a44:	fd ff       	.word 0xfdff
  304a46:	ff ff       	.word 0xffff
  304a48:	01 00       	.word 0x0100
  304a4a:	00 00       	.word 0x0000
  304a4c:	00 ff       	mac.l	@r15+,@r0+
  304a4e:	ff ff       	.word 0xffff
  304a50:	ff 00       	.word 0xff00
  304a52:	00 00       	.word 0x0000
  304a54:	00 30       	.word 0x0030
  304a56:	3a 9c       	add	r9,r10
  304a58:	61 e3       	mov	r14,r1
  304a5a:	71 d8       	add	#-40,r1
  304a5c:	52 1d       	mov.l	@(52,r1),r2
  304a5e:	61 e3       	mov	r14,r1
  304a60:	71 d8       	add	#-40,r1
  304a62:	51 1e       	mov.l	@(56,r1),r1
  304a64:	41 08       	shll2	r1
  304a66:	31 2c       	add	r2,r1
  304a68:	e2 00       	mov	#0,r2
  304a6a:	21 22       	mov.l	r2,@r1
  304a6c:	61 e3       	mov	r14,r1
  304a6e:	71 d8       	add	#-40,r1
  304a70:	62 e3       	mov	r14,r2
  304a72:	72 d8       	add	#-40,r2
  304a74:	52 2e       	mov.l	@(56,r2),r2
  304a76:	72 01       	add	#1,r2
  304a78:	11 2e       	mov.l	r2,@(56,r1)
  304a7a:	61 e3       	mov	r14,r1
  304a7c:	71 d8       	add	#-40,r1
  304a7e:	52 1e       	mov.l	@(56,r1),r2
  304a80:	e1 0f       	mov	#15,r1
  304a82:	32 17       	cmp/gt	r1,r2
  304a84:	8b e8       	bf	304a58 <kmalloc_init_arena+0x188>
	index->classes[size_class(entry_block->size)] = entry_block;
  304a86:	61 e3       	mov	r14,r1
  304a88:	71 d8       	add	#-40,r1
  304a8a:	51 1f       	mov.l	@(60,r1),r1
  304a8c:	62 12       	mov.l	@r1,r2
  304a8e:	d1 21       	mov.l	304b14 <kmalloc_init_arena+0x244>,r1	! ffffff
  304a90:	21 29       	and	r2,r1
  304a92:	62 13       	mov	r1,r2
  304a94:	61 e3       	mov	r14,r1
  304a96:	71 d8       	add	#-40,r1
  304a98:	11 2c       	mov.l	r2,@(48,r1)
	if(size < 64) return (size - 8) >> 2;
  304a9a:	61 e3       	mov	r14,r1
  304a9c:	71 d8       	add	#-40,r1
  304a9e:	52 1c       	mov.l	@(48,r1),r2
  304aa0:	e1 3f       	mov	#63,r1
  304aa2:	32 16       	cmp/hi	r1,r2
  304aa4:	89 06       	bt	304ab4 <kmalloc_init_arena+0x1e4>
  304aa6:	61 e3       	mov	r14,r1
  304aa8:	71 d8       	add	#-40,r1
  304aaa:	51 1c       	mov.l	@(48,r1),r1
  304aac:	71 f8       	add	#-8,r1
  304aae:	41 09       	shlr2	r1
  304ab0:	a0 0a       	bra	304ac8 <kmalloc_init_arena+0x1f8>
  304ab2:	00 09       	nop	
	if(size < 256) return 14;
  304ab4:	61 e3       	mov	r14,r1
  304ab6:	71 d8       	add	#-40,r1
  304ab8:	52 1c       	mov.l	@(48,r1),r2
  304aba:	91 2a       	mov.w	304b12 <kmalloc_init_arena+0x242>,r1	! ff
  304abc:	32 16       	cmp/hi	r1,r2
  304abe:	89 02       	bt	304ac6 <kmalloc_init_arena+0x1f6>
  304ac0:	e1 0e       	mov	#14,r1
  304ac2:	a0 01       	bra	304ac8 <kmalloc_init_arena+0x1f8>
  304ac4:	00 09       	nop	
	return 15;
  304ac6:	e1 0f       	mov	#15,r1
	index->classes[size_class(entry_block->size)] = entry_block;
  304ac8:	62 e3       	mov	r14,r2
  304aca:	72 d8       	add	#-40,r2
  304acc:	52 2d       	mov.l	@(52,r2),r2
  304ace:	41 08       	shll2	r1
  304ad0:	31 2c       	add	r2,r1
  304ad2:	62 e3       	mov	r14,r2
  304ad4:	72 d8       	add	#-40,r2
  304ad6:	52 2f       	mov.l	@(60,r2),r2
  304ad8:	21 22       	mov.l	r2,@r1

	/* Initialize statistics */
	if(index->stats) index->stats->free_memory = entry_block->size;
  304ada:	61 e3       	mov	r14,r1
  304adc:	71 d8       	add	#-40,r1
  304ade:	51 1d       	mov.l	@(52,r1),r1
  304ae0:	71 40       	add	#64,r1
  304ae2:	51 10       	mov.l	@(0,r1),r1
  304ae4:	21 18       	tst	r1,r1
  304ae6:	89 0e       	bt	304b06 <kmalloc_init_arena+0x236>
  304ae8:	61 e3       	mov	r14,r1
  304aea:	71 d8       	add	#-40,r1
  304aec:	51 1f       	mov.l	@(60,r1),r1
  304aee:	62 12       	mov.l	@r1,r2
  304af0:	d1 08       	mov.l	304b14 <kmalloc_init_arena+0x244>,r1	! ffffff
  304af2:	22 19       	and	r1,r2
  304af4:	61 e3       	mov	r14,r1
  304af6:	71 d8       	add	#-40,r1
  304af8:	51 1d       	mov.l	@(52,r1),r1
  304afa:	71 40       	add	#64,r1
  304afc:	51 10       	mov.l	@(0,r1),r1
  304afe:	21 22       	mov.l	r2,@r1
  304b00:	a0 01       	bra	304b06 <kmalloc_init_arena+0x236>
  304b02:	00 09       	nop	
	if(a->end - a->start < 256) return;
  304b04:	00 09       	nop	
}
  304b06:	7e 18       	add	#24,r14
  304b08:	6f e3       	mov	r14,r15
  304b0a:	4f 26       	lds.l	@r15+,pr
  304b0c:	6e f6       	mov.l	@r15+,r14
  304b0e:	00 0b       	rts	
  304b10:	00 09       	nop	
  304b12:	00 ff       	mac.l	@r15+,@r0+
  304b14:	00 ff       	mac.l	@r15+,@r0+
  304b16:	ff ff       	.word 0xffff

00304b18 <kmalloc_get_gint_stats>:
//---
// Introspection and debugging
//---

stats_t *kmalloc_get_gint_stats(kmalloc_arena_t *arena)
{
  304b18:	2f e6       	mov.l	r14,@-r15
  304b1a:	7f f8       	add	#-8,r15
  304b1c:	6e f3       	mov	r15,r14
  304b1e:	61 e3       	mov	r14,r1
  304b20:	71 c8       	add	#-56,r1
  304b22:	11 4e       	mov.l	r4,@(56,r1)
	if(arena->malloc != gint_malloc) return NULL;
  304b24:	61 e3       	mov	r14,r1
  304b26:	71 c8       	add	#-56,r1
  304b28:	51 1e       	mov.l	@(56,r1),r1
  304b2a:	62 12       	mov.l	@r1,r2
  304b2c:	d1 0b       	mov.l	304b5c <kmalloc_get_gint_stats+0x44>,r1	! 303f74 <gint_malloc>
  304b2e:	32 10       	cmp/eq	r1,r2
  304b30:	89 02       	bt	304b38 <kmalloc_get_gint_stats+0x20>
  304b32:	e1 00       	mov	#0,r1
  304b34:	a0 0c       	bra	304b50 <kmalloc_get_gint_stats+0x38>
  304b36:	00 09       	nop	
	index_t *index = arena->data;
  304b38:	61 e3       	mov	r14,r1
  304b3a:	71 c8       	add	#-56,r1
  304b3c:	62 e3       	mov	r14,r2
  304b3e:	72 c8       	add	#-56,r2
  304b40:	52 2e       	mov.l	@(56,r2),r2
  304b42:	52 27       	mov.l	@(28,r2),r2
  304b44:	11 2f       	mov.l	r2,@(60,r1)
	return index->stats;
  304b46:	61 e3       	mov	r14,r1
  304b48:	71 c8       	add	#-56,r1
  304b4a:	51 1f       	mov.l	@(60,r1),r1
  304b4c:	71 40       	add	#64,r1
  304b4e:	51 10       	mov.l	@(0,r1),r1
}
  304b50:	60 13       	mov	r1,r0
  304b52:	7e 08       	add	#8,r14
  304b54:	6f e3       	mov	r14,r15
  304b56:	6e f6       	mov.l	@r15+,r14
  304b58:	00 0b       	rts	
  304b5a:	00 09       	nop	
  304b5c:	00 30       	.word 0x0030
  304b5e:	3f 74       	div1	r7,r15

00304b60 <kmalloc_init>:
/* List of arenas in order of consideration */
static kmalloc_arena_t *arenas[KMALLOC_ARENA_MAX] = { 0 };

/* kmalloc_init(): Initialize the dynamic allocator */
void kmalloc_init(void)
{
  304b60:	2f e6       	mov.l	r14,@-r15
  304b62:	6e f3       	mov	r15,r14
	/* Provide the OS heap */
	extern kmalloc_arena_t kmalloc_arena_osheap;
	arenas[KMALLOC_ARENA_MAX - 1] = &kmalloc_arena_osheap;
  304b64:	d1 03       	mov.l	304b74 <kmalloc_init+0x14>,r1	! 81014e4 <arenas>
  304b66:	d2 04       	mov.l	304b78 <kmalloc_init+0x18>,r2	! 81016b0 <kmalloc_arena_osheap>
  304b68:	11 27       	mov.l	r2,@(28,r1)
}
  304b6a:	00 09       	nop	
  304b6c:	6f e3       	mov	r14,r15
  304b6e:	6e f6       	mov.l	@r15+,r14
  304b70:	00 0b       	rts	
  304b72:	00 09       	nop	
  304b74:	08 10       	.word 0x0810
  304b76:	14 e4       	mov.l	r14,@(16,r4)
  304b78:	08 10       	.word 0x0810
  304b7a:	16 b0       	mov.l	r11,@(0,r6)

00304b7c <kmalloc_get_arena>:
//---
// Allocation functions
//---

kmalloc_arena_t *kmalloc_get_arena(char const *name)
{
  304b7c:	2f e6       	mov.l	r14,@-r15
  304b7e:	4f 22       	sts.l	pr,@-r15
  304b80:	7f f8       	add	#-8,r15
  304b82:	6e f3       	mov	r15,r14
  304b84:	61 e3       	mov	r14,r1
  304b86:	71 c8       	add	#-56,r1
  304b88:	11 4e       	mov.l	r4,@(56,r1)
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  304b8a:	61 e3       	mov	r14,r1
  304b8c:	71 c8       	add	#-56,r1
  304b8e:	e2 00       	mov	#0,r2
  304b90:	11 2f       	mov.l	r2,@(60,r1)
  304b92:	a0 2b       	bra	304bec <kmalloc_get_arena+0x70>
  304b94:	00 09       	nop	
	{
		if(arenas[i] && !strcmp(arenas[i]->name, name))
  304b96:	d2 1c       	mov.l	304c08 <kmalloc_get_arena+0x8c>,r2	! 81014e4 <arenas>
  304b98:	61 e3       	mov	r14,r1
  304b9a:	71 c8       	add	#-56,r1
  304b9c:	51 1f       	mov.l	@(60,r1),r1
  304b9e:	41 08       	shll2	r1
  304ba0:	31 2c       	add	r2,r1
  304ba2:	61 12       	mov.l	@r1,r1
  304ba4:	21 18       	tst	r1,r1
  304ba6:	89 1a       	bt	304bde <kmalloc_get_arena+0x62>
  304ba8:	d2 17       	mov.l	304c08 <kmalloc_get_arena+0x8c>,r2	! 81014e4 <arenas>
  304baa:	61 e3       	mov	r14,r1
  304bac:	71 c8       	add	#-56,r1
  304bae:	51 1f       	mov.l	@(60,r1),r1
  304bb0:	41 08       	shll2	r1
  304bb2:	31 2c       	add	r2,r1
  304bb4:	61 12       	mov.l	@r1,r1
  304bb6:	52 14       	mov.l	@(16,r1),r2
  304bb8:	61 e3       	mov	r14,r1
  304bba:	71 c8       	add	#-56,r1
  304bbc:	55 1e       	mov.l	@(56,r1),r5
  304bbe:	64 23       	mov	r2,r4
  304bc0:	d1 12       	mov.l	304c0c <kmalloc_get_arena+0x90>,r1	! 30ad38 <strcmp>
  304bc2:	41 0b       	jsr	@r1
  304bc4:	00 09       	nop	
  304bc6:	61 03       	mov	r0,r1
  304bc8:	21 18       	tst	r1,r1
  304bca:	8b 08       	bf	304bde <kmalloc_get_arena+0x62>
			return arenas[i];
  304bcc:	d2 0e       	mov.l	304c08 <kmalloc_get_arena+0x8c>,r2	! 81014e4 <arenas>
  304bce:	61 e3       	mov	r14,r1
  304bd0:	71 c8       	add	#-56,r1
  304bd2:	51 1f       	mov.l	@(60,r1),r1
  304bd4:	41 08       	shll2	r1
  304bd6:	31 2c       	add	r2,r1
  304bd8:	61 12       	mov.l	@r1,r1
  304bda:	a0 0e       	bra	304bfa <kmalloc_get_arena+0x7e>
  304bdc:	00 09       	nop	
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  304bde:	61 e3       	mov	r14,r1
  304be0:	71 c8       	add	#-56,r1
  304be2:	62 e3       	mov	r14,r2
  304be4:	72 c8       	add	#-56,r2
  304be6:	52 2f       	mov.l	@(60,r2),r2
  304be8:	72 01       	add	#1,r2
  304bea:	11 2f       	mov.l	r2,@(60,r1)
  304bec:	61 e3       	mov	r14,r1
  304bee:	71 c8       	add	#-56,r1
  304bf0:	52 1f       	mov.l	@(60,r1),r2
  304bf2:	e1 07       	mov	#7,r1
  304bf4:	32 17       	cmp/gt	r1,r2
  304bf6:	8b ce       	bf	304b96 <kmalloc_get_arena+0x1a>
	}
	return NULL;
  304bf8:	e1 00       	mov	#0,r1
}
  304bfa:	60 13       	mov	r1,r0
  304bfc:	7e 08       	add	#8,r14
  304bfe:	6f e3       	mov	r14,r15
  304c00:	4f 26       	lds.l	@r15+,pr
  304c02:	6e f6       	mov.l	@r15+,r14
  304c04:	00 0b       	rts	
  304c06:	00 09       	nop	
  304c08:	08 10       	.word 0x0810
  304c0a:	14 e4       	mov.l	r14,@(16,r4)
  304c0c:	00 30       	.word 0x0030
  304c0e:	ad 38       	bra	304682 <gint_realloc+0x2fa>

00304c10 <arena_owning>:

/* Find the arena that contains a given block */
static kmalloc_arena_t *arena_owning(void *ptr)
{
  304c10:	2f e6       	mov.l	r14,@-r15
  304c12:	7f f4       	add	#-12,r15
  304c14:	6e f3       	mov	r15,r14
  304c16:	61 e3       	mov	r14,r1
  304c18:	71 cc       	add	#-52,r1
  304c1a:	11 4d       	mov.l	r4,@(52,r1)
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  304c1c:	61 e3       	mov	r14,r1
  304c1e:	71 cc       	add	#-52,r1
  304c20:	e2 00       	mov	#0,r2
  304c22:	11 2f       	mov.l	r2,@(60,r1)
  304c24:	a0 3a       	bra	304c9c <arena_owning+0x8c>
  304c26:	00 09       	nop	
	{
		kmalloc_arena_t *a = arenas[i];
  304c28:	61 e3       	mov	r14,r1
  304c2a:	71 cc       	add	#-52,r1
  304c2c:	d3 22       	mov.l	304cb8 <arena_owning+0xa8>,r3	! 81014e4 <arenas>
  304c2e:	62 e3       	mov	r14,r2
  304c30:	72 cc       	add	#-52,r2
  304c32:	52 2f       	mov.l	@(60,r2),r2
  304c34:	42 08       	shll2	r2
  304c36:	32 3c       	add	r3,r2
  304c38:	62 22       	mov.l	@r2,r2
  304c3a:	11 2e       	mov.l	r2,@(56,r1)
		if(!a) continue;
  304c3c:	61 e3       	mov	r14,r1
  304c3e:	71 cc       	add	#-52,r1
  304c40:	51 1e       	mov.l	@(56,r1),r1
  304c42:	21 18       	tst	r1,r1
  304c44:	89 22       	bt	304c8c <arena_owning+0x7c>

		if((a->start <= ptr && ptr < a->end) ||
  304c46:	61 e3       	mov	r14,r1
  304c48:	71 cc       	add	#-52,r1
  304c4a:	51 1e       	mov.l	@(56,r1),r1
  304c4c:	51 15       	mov.l	@(20,r1),r1
  304c4e:	62 e3       	mov	r14,r2
  304c50:	72 cc       	add	#-52,r2
  304c52:	52 2d       	mov.l	@(52,r2),r2
  304c54:	32 12       	cmp/hs	r1,r2
  304c56:	8b 08       	bf	304c6a <arena_owning+0x5a>
  304c58:	61 e3       	mov	r14,r1
  304c5a:	71 cc       	add	#-52,r1
  304c5c:	51 1e       	mov.l	@(56,r1),r1
  304c5e:	51 16       	mov.l	@(24,r1),r1
  304c60:	62 e3       	mov	r14,r2
  304c62:	72 cc       	add	#-52,r2
  304c64:	52 2d       	mov.l	@(52,r2),r2
  304c66:	32 12       	cmp/hs	r1,r2
  304c68:	8b 0b       	bf	304c82 <arena_owning+0x72>
		   (a->start == NULL && a->end == NULL))
  304c6a:	61 e3       	mov	r14,r1
  304c6c:	71 cc       	add	#-52,r1
  304c6e:	51 1e       	mov.l	@(56,r1),r1
  304c70:	51 15       	mov.l	@(20,r1),r1
		if((a->start <= ptr && ptr < a->end) ||
  304c72:	21 18       	tst	r1,r1
  304c74:	8b 0b       	bf	304c8e <arena_owning+0x7e>
		   (a->start == NULL && a->end == NULL))
  304c76:	61 e3       	mov	r14,r1
  304c78:	71 cc       	add	#-52,r1
  304c7a:	51 1e       	mov.l	@(56,r1),r1
  304c7c:	51 16       	mov.l	@(24,r1),r1
  304c7e:	21 18       	tst	r1,r1
  304c80:	8b 05       	bf	304c8e <arena_owning+0x7e>
			return a;
  304c82:	61 e3       	mov	r14,r1
  304c84:	71 cc       	add	#-52,r1
  304c86:	51 1e       	mov.l	@(56,r1),r1
  304c88:	a0 0f       	bra	304caa <arena_owning+0x9a>
  304c8a:	00 09       	nop	
		if(!a) continue;
  304c8c:	00 09       	nop	
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  304c8e:	61 e3       	mov	r14,r1
  304c90:	71 cc       	add	#-52,r1
  304c92:	62 e3       	mov	r14,r2
  304c94:	72 cc       	add	#-52,r2
  304c96:	52 2f       	mov.l	@(60,r2),r2
  304c98:	72 01       	add	#1,r2
  304c9a:	11 2f       	mov.l	r2,@(60,r1)
  304c9c:	61 e3       	mov	r14,r1
  304c9e:	71 cc       	add	#-52,r1
  304ca0:	52 1f       	mov.l	@(60,r1),r2
  304ca2:	e1 07       	mov	#7,r1
  304ca4:	32 17       	cmp/gt	r1,r2
  304ca6:	8b bf       	bf	304c28 <arena_owning+0x18>
	}
	return NULL;
  304ca8:	e1 00       	mov	#0,r1
}
  304caa:	60 13       	mov	r1,r0
  304cac:	7e 0c       	add	#12,r14
  304cae:	6f e3       	mov	r14,r15
  304cb0:	6e f6       	mov.l	@r15+,r14
  304cb2:	00 0b       	rts	
  304cb4:	00 09       	nop	
  304cb6:	00 09       	nop	
  304cb8:	08 10       	.word 0x0810
  304cba:	14 e4       	mov.l	r14,@(16,r4)

00304cbc <kmalloc>:

/* kmalloc(): Allocate memory in one of the available arenas */
void *kmalloc(size_t size, char const *name)
{
  304cbc:	2f 86       	mov.l	r8,@-r15
  304cbe:	2f e6       	mov.l	r14,@-r15
  304cc0:	4f 22       	sts.l	pr,@-r15
  304cc2:	7f e0       	add	#-32,r15
  304cc4:	6e f3       	mov	r15,r14
  304cc6:	61 e3       	mov	r14,r1
  304cc8:	71 e0       	add	#-32,r1
  304cca:	11 49       	mov.l	r4,@(36,r1)
  304ccc:	61 e3       	mov	r14,r1
  304cce:	71 e0       	add	#-32,r1
  304cd0:	11 58       	mov.l	r5,@(32,r1)
	if(size == 0) return NULL;
  304cd2:	61 e3       	mov	r14,r1
  304cd4:	71 e0       	add	#-32,r1
  304cd6:	51 19       	mov.l	@(36,r1),r1
  304cd8:	21 18       	tst	r1,r1
  304cda:	8b 02       	bf	304ce2 <kmalloc+0x26>
  304cdc:	e1 00       	mov	#0,r1
  304cde:	a0 bd       	bra	304e5c <kmalloc+0x1a0>
  304ce0:	00 09       	nop	

	for(int i = 0; i < KMALLOC_ARENA_MAX; i++) if(arenas[i])
  304ce2:	61 e3       	mov	r14,r1
  304ce4:	71 e0       	add	#-32,r1
  304ce6:	e2 00       	mov	#0,r2
  304ce8:	11 2f       	mov.l	r2,@(60,r1)
  304cea:	a0 ae       	bra	304e4a <kmalloc+0x18e>
  304cec:	00 09       	nop	
  304cee:	d2 5f       	mov.l	304e6c <kmalloc+0x1b0>,r2	! 81014e4 <arenas>
  304cf0:	61 e3       	mov	r14,r1
  304cf2:	71 e0       	add	#-32,r1
  304cf4:	51 1f       	mov.l	@(60,r1),r1
  304cf6:	41 08       	shll2	r1
  304cf8:	31 2c       	add	r2,r1
  304cfa:	61 12       	mov.l	@r1,r1
  304cfc:	21 18       	tst	r1,r1
  304cfe:	8b 01       	bf	304d04 <kmalloc+0x48>
  304d00:	a0 9c       	bra	304e3c <kmalloc+0x180>
  304d02:	00 09       	nop	
	{
		kmalloc_arena_t *a = arenas[i];
  304d04:	61 e3       	mov	r14,r1
  304d06:	71 e0       	add	#-32,r1
  304d08:	d3 58       	mov.l	304e6c <kmalloc+0x1b0>,r3	! 81014e4 <arenas>
  304d0a:	62 e3       	mov	r14,r2
  304d0c:	72 e0       	add	#-32,r2
  304d0e:	52 2f       	mov.l	@(60,r2),r2
  304d10:	42 08       	shll2	r2
  304d12:	32 3c       	add	r3,r2
  304d14:	62 22       	mov.l	@r2,r2
  304d16:	11 2e       	mov.l	r2,@(56,r1)
		if(name && strcmp(a->name, name)) continue;
  304d18:	61 e3       	mov	r14,r1
  304d1a:	71 e0       	add	#-32,r1
  304d1c:	51 18       	mov.l	@(32,r1),r1
  304d1e:	21 18       	tst	r1,r1
  304d20:	89 0f       	bt	304d42 <kmalloc+0x86>
  304d22:	61 e3       	mov	r14,r1
  304d24:	71 e0       	add	#-32,r1
  304d26:	51 1e       	mov.l	@(56,r1),r1
  304d28:	52 14       	mov.l	@(16,r1),r2
  304d2a:	61 e3       	mov	r14,r1
  304d2c:	71 e0       	add	#-32,r1
  304d2e:	55 18       	mov.l	@(32,r1),r5
  304d30:	64 23       	mov	r2,r4
  304d32:	d1 4f       	mov.l	304e70 <kmalloc+0x1b4>,r1	! 30ad38 <strcmp>
  304d34:	41 0b       	jsr	@r1
  304d36:	00 09       	nop	
  304d38:	61 03       	mov	r0,r1
  304d3a:	21 18       	tst	r1,r1
  304d3c:	89 01       	bt	304d42 <kmalloc+0x86>
  304d3e:	a0 79       	bra	304e34 <kmalloc+0x178>
  304d40:	00 09       	nop	
		if(!name && !a->is_default) continue;
  304d42:	61 e3       	mov	r14,r1
  304d44:	71 e0       	add	#-32,r1
  304d46:	51 18       	mov.l	@(32,r1),r1
  304d48:	21 18       	tst	r1,r1
  304d4a:	8b 07       	bf	304d5c <kmalloc+0xa0>
  304d4c:	61 e3       	mov	r14,r1
  304d4e:	71 e0       	add	#-32,r1
  304d50:	51 1e       	mov.l	@(56,r1),r1
  304d52:	51 18       	mov.l	@(32,r1),r1
  304d54:	21 18       	tst	r1,r1
  304d56:	8b 01       	bf	304d5c <kmalloc+0xa0>
  304d58:	a0 6f       	bra	304e3a <kmalloc+0x17e>
  304d5a:	00 09       	nop	

		/* Try to allocate in this arena */
		void *rc = a->malloc(size, a->data);
  304d5c:	61 e3       	mov	r14,r1
  304d5e:	71 e0       	add	#-32,r1
  304d60:	51 1e       	mov.l	@(56,r1),r1
  304d62:	61 12       	mov.l	@r1,r1
  304d64:	62 e3       	mov	r14,r2
  304d66:	72 e0       	add	#-32,r2
  304d68:	52 2e       	mov.l	@(56,r2),r2
  304d6a:	53 27       	mov.l	@(28,r2),r3
  304d6c:	68 e3       	mov	r14,r8
  304d6e:	78 e0       	add	#-32,r8
  304d70:	62 e3       	mov	r14,r2
  304d72:	72 e0       	add	#-32,r2
  304d74:	65 33       	mov	r3,r5
  304d76:	54 29       	mov.l	@(36,r2),r4
  304d78:	41 0b       	jsr	@r1
  304d7a:	00 09       	nop	
  304d7c:	61 03       	mov	r0,r1
  304d7e:	18 1d       	mov.l	r1,@(52,r8)

		/* Maintain statistics */
		struct kmalloc_stats *s = &a->stats;
  304d80:	61 e3       	mov	r14,r1
  304d82:	71 e0       	add	#-32,r1
  304d84:	62 e3       	mov	r14,r2
  304d86:	72 e0       	add	#-32,r2
  304d88:	52 2e       	mov.l	@(56,r2),r2
  304d8a:	72 24       	add	#36,r2
  304d8c:	11 2c       	mov.l	r2,@(48,r1)
		if(rc)
  304d8e:	61 e3       	mov	r14,r1
  304d90:	71 e0       	add	#-32,r1
  304d92:	51 1d       	mov.l	@(52,r1),r1
  304d94:	21 18       	tst	r1,r1
  304d96:	89 41       	bt	304e1c <kmalloc+0x160>
		{
			s->live_blocks++;
  304d98:	61 e3       	mov	r14,r1
  304d9a:	71 e0       	add	#-32,r1
  304d9c:	51 1c       	mov.l	@(48,r1),r1
  304d9e:	61 12       	mov.l	@r1,r1
  304da0:	62 13       	mov	r1,r2
  304da2:	72 01       	add	#1,r2
  304da4:	61 e3       	mov	r14,r1
  304da6:	71 e0       	add	#-32,r1
  304da8:	51 1c       	mov.l	@(48,r1),r1
  304daa:	21 22       	mov.l	r2,@r1
			s->peak_live_blocks = max(s->live_blocks,
  304dac:	61 e3       	mov	r14,r1
  304dae:	71 e0       	add	#-32,r1
  304db0:	62 e3       	mov	r14,r2
  304db2:	72 e0       	add	#-32,r2
  304db4:	52 2c       	mov.l	@(48,r2),r2
  304db6:	62 22       	mov.l	@r2,r2
  304db8:	11 2b       	mov.l	r2,@(44,r1)
  304dba:	61 e3       	mov	r14,r1
  304dbc:	71 e0       	add	#-32,r1
  304dbe:	62 e3       	mov	r14,r2
  304dc0:	72 e0       	add	#-32,r2
  304dc2:	52 2c       	mov.l	@(48,r2),r2
  304dc4:	52 21       	mov.l	@(4,r2),r2
  304dc6:	11 2a       	mov.l	r2,@(40,r1)
  304dc8:	61 e3       	mov	r14,r1
  304dca:	71 e0       	add	#-32,r1
  304dcc:	62 e3       	mov	r14,r2
  304dce:	72 e0       	add	#-32,r2
  304dd0:	52 2b       	mov.l	@(44,r2),r2
  304dd2:	51 1a       	mov.l	@(40,r1),r1
  304dd4:	31 23       	cmp/ge	r2,r1
  304dd6:	89 00       	bt	304dda <kmalloc+0x11e>
  304dd8:	61 23       	mov	r2,r1
  304dda:	62 e3       	mov	r14,r2
  304ddc:	72 e0       	add	#-32,r2
  304dde:	52 2c       	mov.l	@(48,r2),r2
  304de0:	12 11       	mov.l	r1,@(4,r2)
				s->peak_live_blocks);
			s->total_volume += size;
  304de2:	61 e3       	mov	r14,r1
  304de4:	71 e0       	add	#-32,r1
  304de6:	51 1c       	mov.l	@(48,r1),r1
  304de8:	51 12       	mov.l	@(8,r1),r1
  304dea:	62 13       	mov	r1,r2
  304dec:	61 e3       	mov	r14,r1
  304dee:	71 e0       	add	#-32,r1
  304df0:	51 19       	mov.l	@(36,r1),r1
  304df2:	31 2c       	add	r2,r1
  304df4:	62 13       	mov	r1,r2
  304df6:	61 e3       	mov	r14,r1
  304df8:	71 e0       	add	#-32,r1
  304dfa:	51 1c       	mov.l	@(48,r1),r1
  304dfc:	11 22       	mov.l	r2,@(8,r1)
			s->total_blocks++;
  304dfe:	61 e3       	mov	r14,r1
  304e00:	71 e0       	add	#-32,r1
  304e02:	51 1c       	mov.l	@(48,r1),r1
  304e04:	51 13       	mov.l	@(12,r1),r1
  304e06:	62 13       	mov	r1,r2
  304e08:	72 01       	add	#1,r2
  304e0a:	61 e3       	mov	r14,r1
  304e0c:	71 e0       	add	#-32,r1
  304e0e:	51 1c       	mov.l	@(48,r1),r1
  304e10:	11 23       	mov.l	r2,@(12,r1)
			return rc;
  304e12:	61 e3       	mov	r14,r1
  304e14:	71 e0       	add	#-32,r1
  304e16:	51 1d       	mov.l	@(52,r1),r1
  304e18:	a0 20       	bra	304e5c <kmalloc+0x1a0>
  304e1a:	00 09       	nop	
		}
		else
		{
			s->total_failures++;
  304e1c:	61 e3       	mov	r14,r1
  304e1e:	71 e0       	add	#-32,r1
  304e20:	51 1c       	mov.l	@(48,r1),r1
  304e22:	51 14       	mov.l	@(16,r1),r1
  304e24:	62 13       	mov	r1,r2
  304e26:	72 01       	add	#1,r2
  304e28:	61 e3       	mov	r14,r1
  304e2a:	71 e0       	add	#-32,r1
  304e2c:	51 1c       	mov.l	@(48,r1),r1
  304e2e:	11 24       	mov.l	r2,@(16,r1)
  304e30:	a0 04       	bra	304e3c <kmalloc+0x180>
  304e32:	00 09       	nop	
		if(name && strcmp(a->name, name)) continue;
  304e34:	00 09       	nop	
  304e36:	a0 01       	bra	304e3c <kmalloc+0x180>
  304e38:	00 09       	nop	
		if(!name && !a->is_default) continue;
  304e3a:	00 09       	nop	
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++) if(arenas[i])
  304e3c:	61 e3       	mov	r14,r1
  304e3e:	71 e0       	add	#-32,r1
  304e40:	62 e3       	mov	r14,r2
  304e42:	72 e0       	add	#-32,r2
  304e44:	52 2f       	mov.l	@(60,r2),r2
  304e46:	72 01       	add	#1,r2
  304e48:	11 2f       	mov.l	r2,@(60,r1)
  304e4a:	61 e3       	mov	r14,r1
  304e4c:	71 e0       	add	#-32,r1
  304e4e:	52 1f       	mov.l	@(60,r1),r2
  304e50:	e1 07       	mov	#7,r1
  304e52:	32 17       	cmp/gt	r1,r2
  304e54:	89 01       	bt	304e5a <kmalloc+0x19e>
  304e56:	af 4a       	bra	304cee <kmalloc+0x32>
  304e58:	00 09       	nop	
		}
	}

	return NULL;
  304e5a:	e1 00       	mov	#0,r1
}
  304e5c:	60 13       	mov	r1,r0
  304e5e:	7e 20       	add	#32,r14
  304e60:	6f e3       	mov	r14,r15
  304e62:	4f 26       	lds.l	@r15+,pr
  304e64:	6e f6       	mov.l	@r15+,r14
  304e66:	68 f6       	mov.l	@r15+,r8
  304e68:	00 0b       	rts	
  304e6a:	00 09       	nop	
  304e6c:	08 10       	.word 0x0810
  304e6e:	14 e4       	mov.l	r14,@(16,r4)
  304e70:	00 30       	.word 0x0030
  304e72:	ad 38       	bra	3048e6 <kmalloc_init_arena+0x16>

00304e74 <krealloc>:

/* krealloc(): Reallocate memory */
void *krealloc(void *ptr, size_t size)
{
  304e74:	2f 86       	mov.l	r8,@-r15
  304e76:	2f e6       	mov.l	r14,@-r15
  304e78:	4f 22       	sts.l	pr,@-r15
  304e7a:	7f f0       	add	#-16,r15
  304e7c:	6e f3       	mov	r15,r14
  304e7e:	61 e3       	mov	r14,r1
  304e80:	71 d0       	add	#-48,r1
  304e82:	11 4d       	mov.l	r4,@(52,r1)
  304e84:	61 e3       	mov	r14,r1
  304e86:	71 d0       	add	#-48,r1
  304e88:	11 5c       	mov.l	r5,@(48,r1)
	if(!ptr)
  304e8a:	61 e3       	mov	r14,r1
  304e8c:	71 d0       	add	#-48,r1
  304e8e:	51 1d       	mov.l	@(52,r1),r1
  304e90:	21 18       	tst	r1,r1
  304e92:	8b 09       	bf	304ea8 <krealloc+0x34>
	{
		return kmalloc(size, NULL);
  304e94:	61 e3       	mov	r14,r1
  304e96:	71 d0       	add	#-48,r1
  304e98:	e5 00       	mov	#0,r5
  304e9a:	54 1c       	mov.l	@(48,r1),r4
  304e9c:	d1 45       	mov.l	304fb4 <krealloc+0x140>,r1	! 304cbc <kmalloc>
  304e9e:	41 0b       	jsr	@r1
  304ea0:	00 09       	nop	
  304ea2:	61 03       	mov	r0,r1
  304ea4:	a0 7d       	bra	304fa2 <krealloc+0x12e>
  304ea6:	00 09       	nop	
	}
	if(!size)
  304ea8:	61 e3       	mov	r14,r1
  304eaa:	71 d0       	add	#-48,r1
  304eac:	51 1c       	mov.l	@(48,r1),r1
  304eae:	21 18       	tst	r1,r1
  304eb0:	8b 08       	bf	304ec4 <krealloc+0x50>
	{
		kfree(ptr);
  304eb2:	61 e3       	mov	r14,r1
  304eb4:	71 d0       	add	#-48,r1
  304eb6:	54 1d       	mov.l	@(52,r1),r4
  304eb8:	d1 3f       	mov.l	304fb8 <krealloc+0x144>,r1	! 304fc4 <kfree>
  304eba:	41 0b       	jsr	@r1
  304ebc:	00 09       	nop	
		return NULL;
  304ebe:	e1 00       	mov	#0,r1
  304ec0:	a0 6f       	bra	304fa2 <krealloc+0x12e>
  304ec2:	00 09       	nop	
	}

	kmalloc_arena_t *a = arena_owning(ptr);
  304ec4:	68 e3       	mov	r14,r8
  304ec6:	78 d0       	add	#-48,r8
  304ec8:	61 e3       	mov	r14,r1
  304eca:	71 d0       	add	#-48,r1
  304ecc:	54 1d       	mov.l	@(52,r1),r4
  304ece:	d1 3b       	mov.l	304fbc <krealloc+0x148>,r1	! 304c10 <arena_owning>
  304ed0:	41 0b       	jsr	@r1
  304ed2:	00 09       	nop	
  304ed4:	61 03       	mov	r0,r1
  304ed6:	18 1e       	mov.l	r1,@(56,r8)
	if(!a) return NULL;
  304ed8:	61 e3       	mov	r14,r1
  304eda:	71 d0       	add	#-48,r1
  304edc:	51 1e       	mov.l	@(56,r1),r1
  304ede:	21 18       	tst	r1,r1
  304ee0:	8b 02       	bf	304ee8 <krealloc+0x74>
  304ee2:	e1 00       	mov	#0,r1
  304ee4:	a0 5d       	bra	304fa2 <krealloc+0x12e>
  304ee6:	00 09       	nop	

	void *rc = a->realloc(ptr, size, a->data);
  304ee8:	61 e3       	mov	r14,r1
  304eea:	71 d0       	add	#-48,r1
  304eec:	51 1e       	mov.l	@(56,r1),r1
  304eee:	51 11       	mov.l	@(4,r1),r1
  304ef0:	62 e3       	mov	r14,r2
  304ef2:	72 d0       	add	#-48,r2
  304ef4:	52 2e       	mov.l	@(56,r2),r2
  304ef6:	57 27       	mov.l	@(28,r2),r7
  304ef8:	68 e3       	mov	r14,r8
  304efa:	78 d0       	add	#-48,r8
  304efc:	63 e3       	mov	r14,r3
  304efe:	73 d0       	add	#-48,r3
  304f00:	62 e3       	mov	r14,r2
  304f02:	72 d0       	add	#-48,r2
  304f04:	66 73       	mov	r7,r6
  304f06:	55 3c       	mov.l	@(48,r3),r5
  304f08:	54 2d       	mov.l	@(52,r2),r4
  304f0a:	41 0b       	jsr	@r1
  304f0c:	00 09       	nop	
  304f0e:	61 03       	mov	r0,r1
  304f10:	18 1f       	mov.l	r1,@(60,r8)

	/* Maintain statistics */
	if(rc)
  304f12:	61 e3       	mov	r14,r1
  304f14:	71 d0       	add	#-48,r1
  304f16:	51 1f       	mov.l	@(60,r1),r1
  304f18:	21 18       	tst	r1,r1
  304f1a:	89 19       	bt	304f50 <krealloc+0xdc>
	{
		a->stats.total_volume += size;
  304f1c:	61 e3       	mov	r14,r1
  304f1e:	71 d0       	add	#-48,r1
  304f20:	51 1e       	mov.l	@(56,r1),r1
  304f22:	51 1b       	mov.l	@(44,r1),r1
  304f24:	62 13       	mov	r1,r2
  304f26:	61 e3       	mov	r14,r1
  304f28:	71 d0       	add	#-48,r1
  304f2a:	51 1c       	mov.l	@(48,r1),r1
  304f2c:	31 2c       	add	r2,r1
  304f2e:	62 13       	mov	r1,r2
  304f30:	61 e3       	mov	r14,r1
  304f32:	71 d0       	add	#-48,r1
  304f34:	51 1e       	mov.l	@(56,r1),r1
  304f36:	11 2b       	mov.l	r2,@(44,r1)
		a->stats.total_blocks++;
  304f38:	61 e3       	mov	r14,r1
  304f3a:	71 d0       	add	#-48,r1
  304f3c:	51 1e       	mov.l	@(56,r1),r1
  304f3e:	51 1c       	mov.l	@(48,r1),r1
  304f40:	62 13       	mov	r1,r2
  304f42:	72 01       	add	#1,r2
  304f44:	61 e3       	mov	r14,r1
  304f46:	71 d0       	add	#-48,r1
  304f48:	51 1e       	mov.l	@(56,r1),r1
  304f4a:	11 2c       	mov.l	r2,@(48,r1)
  304f4c:	a0 26       	bra	304f9c <krealloc+0x128>
  304f4e:	00 09       	nop	
	}
	else
	{
		a->stats.total_failures++;
  304f50:	61 e3       	mov	r14,r1
  304f52:	71 d0       	add	#-48,r1
  304f54:	51 1e       	mov.l	@(56,r1),r1
  304f56:	51 1d       	mov.l	@(52,r1),r1
  304f58:	62 13       	mov	r1,r2
  304f5a:	72 01       	add	#1,r2
  304f5c:	61 e3       	mov	r14,r1
  304f5e:	71 d0       	add	#-48,r1
  304f60:	51 1e       	mov.l	@(56,r1),r1
  304f62:	11 2d       	mov.l	r2,@(52,r1)

		/* If reallocation within the original arena fails, try another
		   one. The memory copy behavior is sub-optimal (we copy the
		   new size which might be more than the original size) but
		   it's all we can do with this arena interface. */
		rc = kmalloc(size, NULL);
  304f64:	68 e3       	mov	r14,r8
  304f66:	78 d0       	add	#-48,r8
  304f68:	61 e3       	mov	r14,r1
  304f6a:	71 d0       	add	#-48,r1
  304f6c:	e5 00       	mov	#0,r5
  304f6e:	54 1c       	mov.l	@(48,r1),r4
  304f70:	d1 10       	mov.l	304fb4 <krealloc+0x140>,r1	! 304cbc <kmalloc>
  304f72:	41 0b       	jsr	@r1
  304f74:	00 09       	nop	
  304f76:	61 03       	mov	r0,r1
  304f78:	18 1f       	mov.l	r1,@(60,r8)
		if(rc)
  304f7a:	61 e3       	mov	r14,r1
  304f7c:	71 d0       	add	#-48,r1
  304f7e:	51 1f       	mov.l	@(60,r1),r1
  304f80:	21 18       	tst	r1,r1
  304f82:	89 0b       	bt	304f9c <krealloc+0x128>
		{
			memcpy(rc, ptr, size);
  304f84:	63 e3       	mov	r14,r3
  304f86:	73 d0       	add	#-48,r3
  304f88:	62 e3       	mov	r14,r2
  304f8a:	72 d0       	add	#-48,r2
  304f8c:	61 e3       	mov	r14,r1
  304f8e:	71 d0       	add	#-48,r1
  304f90:	56 3c       	mov.l	@(48,r3),r6
  304f92:	55 2d       	mov.l	@(52,r2),r5
  304f94:	54 1f       	mov.l	@(60,r1),r4
  304f96:	d1 0a       	mov.l	304fc0 <krealloc+0x14c>,r1	! 30ae40 <memcpy>
  304f98:	41 0b       	jsr	@r1
  304f9a:	00 09       	nop	
		}
	}

	return rc;
  304f9c:	61 e3       	mov	r14,r1
  304f9e:	71 d0       	add	#-48,r1
  304fa0:	51 1f       	mov.l	@(60,r1),r1
}
  304fa2:	60 13       	mov	r1,r0
  304fa4:	7e 10       	add	#16,r14
  304fa6:	6f e3       	mov	r14,r15
  304fa8:	4f 26       	lds.l	@r15+,pr
  304faa:	6e f6       	mov.l	@r15+,r14
  304fac:	68 f6       	mov.l	@r15+,r8
  304fae:	00 0b       	rts	
  304fb0:	00 09       	nop	
  304fb2:	00 09       	nop	
  304fb4:	00 30       	.word 0x0030
  304fb6:	4c bc       	shad	r11,r12
  304fb8:	00 30       	.word 0x0030
  304fba:	4f c4       	.word 0x4fc4
  304fbc:	00 30       	.word 0x0030
  304fbe:	4c 10       	dt	r12
  304fc0:	00 30       	.word 0x0030
  304fc2:	ae 40       	bra	304c46 <arena_owning+0x36>

00304fc4 <kfree>:

/* kfree(): Free memory allocated with kalloc() */
void kfree(void *ptr)
{
  304fc4:	2f 86       	mov.l	r8,@-r15
  304fc6:	2f e6       	mov.l	r14,@-r15
  304fc8:	4f 22       	sts.l	pr,@-r15
  304fca:	7f f8       	add	#-8,r15
  304fcc:	6e f3       	mov	r15,r14
  304fce:	61 e3       	mov	r14,r1
  304fd0:	71 c8       	add	#-56,r1
  304fd2:	11 4e       	mov.l	r4,@(56,r1)
	if(!ptr) return;
  304fd4:	61 e3       	mov	r14,r1
  304fd6:	71 c8       	add	#-56,r1
  304fd8:	51 1e       	mov.l	@(56,r1),r1
  304fda:	21 18       	tst	r1,r1
  304fdc:	89 28       	bt	305030 <kfree+0x6c>

	/* If this condition fails, then the pointer is invalid */
	kmalloc_arena_t *a = arena_owning(ptr);
  304fde:	68 e3       	mov	r14,r8
  304fe0:	78 c8       	add	#-56,r8
  304fe2:	61 e3       	mov	r14,r1
  304fe4:	71 c8       	add	#-56,r1
  304fe6:	54 1e       	mov.l	@(56,r1),r4
  304fe8:	d1 17       	mov.l	305048 <kfree+0x84>,r1	! 304c10 <arena_owning>
  304fea:	41 0b       	jsr	@r1
  304fec:	00 09       	nop	
  304fee:	61 03       	mov	r0,r1
  304ff0:	18 1f       	mov.l	r1,@(60,r8)
	if(!a) return;
  304ff2:	61 e3       	mov	r14,r1
  304ff4:	71 c8       	add	#-56,r1
  304ff6:	51 1f       	mov.l	@(60,r1),r1
  304ff8:	21 18       	tst	r1,r1
  304ffa:	89 1c       	bt	305036 <kfree+0x72>

	a->free(ptr, a->data);
  304ffc:	61 e3       	mov	r14,r1
  304ffe:	71 c8       	add	#-56,r1
  305000:	51 1f       	mov.l	@(60,r1),r1
  305002:	51 12       	mov.l	@(8,r1),r1
  305004:	62 e3       	mov	r14,r2
  305006:	72 c8       	add	#-56,r2
  305008:	52 2f       	mov.l	@(60,r2),r2
  30500a:	53 27       	mov.l	@(28,r2),r3
  30500c:	62 e3       	mov	r14,r2
  30500e:	72 c8       	add	#-56,r2
  305010:	65 33       	mov	r3,r5
  305012:	54 2e       	mov.l	@(56,r2),r4
  305014:	41 0b       	jsr	@r1
  305016:	00 09       	nop	
	/* Maintain statistics */
	a->stats.live_blocks--;
  305018:	61 e3       	mov	r14,r1
  30501a:	71 c8       	add	#-56,r1
  30501c:	51 1f       	mov.l	@(60,r1),r1
  30501e:	51 19       	mov.l	@(36,r1),r1
  305020:	62 13       	mov	r1,r2
  305022:	72 ff       	add	#-1,r2
  305024:	61 e3       	mov	r14,r1
  305026:	71 c8       	add	#-56,r1
  305028:	51 1f       	mov.l	@(60,r1),r1
  30502a:	11 29       	mov.l	r2,@(36,r1)
  30502c:	a0 04       	bra	305038 <kfree+0x74>
  30502e:	00 09       	nop	
	if(!ptr) return;
  305030:	00 09       	nop	
  305032:	a0 01       	bra	305038 <kfree+0x74>
  305034:	00 09       	nop	
	if(!a) return;
  305036:	00 09       	nop	
}
  305038:	7e 08       	add	#8,r14
  30503a:	6f e3       	mov	r14,r15
  30503c:	4f 26       	lds.l	@r15+,pr
  30503e:	6e f6       	mov.l	@r15+,r14
  305040:	68 f6       	mov.l	@r15+,r8
  305042:	00 0b       	rts	
  305044:	00 09       	nop	
  305046:	00 09       	nop	
  305048:	00 30       	.word 0x0030
  30504a:	4c 10       	dt	r12

0030504c <kmalloc_max>:

/* kmalloc_max(): Allocate the largest block available in an arena */
void *kmalloc_max(size_t *size, char const *name)
{
  30504c:	2f e6       	mov.l	r14,@-r15
  30504e:	4f 22       	sts.l	pr,@-r15
  305050:	7f e0       	add	#-32,r15
  305052:	6e f3       	mov	r15,r14
  305054:	61 e3       	mov	r14,r1
  305056:	71 e0       	add	#-32,r1
  305058:	11 49       	mov.l	r4,@(36,r1)
  30505a:	61 e3       	mov	r14,r1
  30505c:	71 e0       	add	#-32,r1
  30505e:	11 58       	mov.l	r5,@(32,r1)
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++) if(arenas[i])
  305060:	61 e3       	mov	r14,r1
  305062:	71 e0       	add	#-32,r1
  305064:	e2 00       	mov	#0,r2
  305066:	11 2f       	mov.l	r2,@(60,r1)
  305068:	a0 a3       	bra	3051b2 <kmalloc_max+0x166>
  30506a:	00 09       	nop	
  30506c:	d2 59       	mov.l	3051d4 <kmalloc_max+0x188>,r2	! 81014e4 <arenas>
  30506e:	61 e3       	mov	r14,r1
  305070:	71 e0       	add	#-32,r1
  305072:	51 1f       	mov.l	@(60,r1),r1
  305074:	41 08       	shll2	r1
  305076:	31 2c       	add	r2,r1
  305078:	61 12       	mov.l	@r1,r1
  30507a:	21 18       	tst	r1,r1
  30507c:	8b 01       	bf	305082 <kmalloc_max+0x36>
  30507e:	a0 91       	bra	3051a4 <kmalloc_max+0x158>
  305080:	00 09       	nop	
	{
		kmalloc_arena_t *a = arenas[i];
  305082:	61 e3       	mov	r14,r1
  305084:	71 e0       	add	#-32,r1
  305086:	d3 53       	mov.l	3051d4 <kmalloc_max+0x188>,r3	! 81014e4 <arenas>
  305088:	62 e3       	mov	r14,r2
  30508a:	72 e0       	add	#-32,r2
  30508c:	52 2f       	mov.l	@(60,r2),r2
  30508e:	42 08       	shll2	r2
  305090:	32 3c       	add	r3,r2
  305092:	62 22       	mov.l	@r2,r2
  305094:	11 2e       	mov.l	r2,@(56,r1)
		if(strcmp(a->name, name)) continue;
  305096:	61 e3       	mov	r14,r1
  305098:	71 e0       	add	#-32,r1
  30509a:	51 1e       	mov.l	@(56,r1),r1
  30509c:	52 14       	mov.l	@(16,r1),r2
  30509e:	61 e3       	mov	r14,r1
  3050a0:	71 e0       	add	#-32,r1
  3050a2:	55 18       	mov.l	@(32,r1),r5
  3050a4:	64 23       	mov	r2,r4
  3050a6:	d1 4c       	mov.l	3051d8 <kmalloc_max+0x18c>,r1	! 30ad38 <strcmp>
  3050a8:	41 0b       	jsr	@r1
  3050aa:	00 09       	nop	
  3050ac:	61 03       	mov	r0,r1
  3050ae:	21 18       	tst	r1,r1
  3050b0:	89 01       	bt	3050b6 <kmalloc_max+0x6a>
  3050b2:	a0 76       	bra	3051a2 <kmalloc_max+0x156>
  3050b4:	00 09       	nop	

		void *rc = a->malloc_max ? a->malloc_max(size, a->data) : NULL;
  3050b6:	61 e3       	mov	r14,r1
  3050b8:	71 e0       	add	#-32,r1
  3050ba:	51 1e       	mov.l	@(56,r1),r1
  3050bc:	51 13       	mov.l	@(12,r1),r1
  3050be:	21 18       	tst	r1,r1
  3050c0:	89 10       	bt	3050e4 <kmalloc_max+0x98>
  3050c2:	61 e3       	mov	r14,r1
  3050c4:	71 e0       	add	#-32,r1
  3050c6:	51 1e       	mov.l	@(56,r1),r1
  3050c8:	51 13       	mov.l	@(12,r1),r1
  3050ca:	62 e3       	mov	r14,r2
  3050cc:	72 e0       	add	#-32,r2
  3050ce:	52 2e       	mov.l	@(56,r2),r2
  3050d0:	53 27       	mov.l	@(28,r2),r3
  3050d2:	62 e3       	mov	r14,r2
  3050d4:	72 e0       	add	#-32,r2
  3050d6:	65 33       	mov	r3,r5
  3050d8:	54 29       	mov.l	@(36,r2),r4
  3050da:	41 0b       	jsr	@r1
  3050dc:	00 09       	nop	
  3050de:	61 03       	mov	r0,r1
  3050e0:	a0 01       	bra	3050e6 <kmalloc_max+0x9a>
  3050e2:	00 09       	nop	
  3050e4:	e1 00       	mov	#0,r1
  3050e6:	62 e3       	mov	r14,r2
  3050e8:	72 e0       	add	#-32,r2
  3050ea:	12 1d       	mov.l	r1,@(52,r2)

		/* Maintain statistics */
		struct kmalloc_stats *s = &a->stats;
  3050ec:	61 e3       	mov	r14,r1
  3050ee:	71 e0       	add	#-32,r1
  3050f0:	62 e3       	mov	r14,r2
  3050f2:	72 e0       	add	#-32,r2
  3050f4:	52 2e       	mov.l	@(56,r2),r2
  3050f6:	72 24       	add	#36,r2
  3050f8:	11 2c       	mov.l	r2,@(48,r1)
		if(rc)
  3050fa:	61 e3       	mov	r14,r1
  3050fc:	71 e0       	add	#-32,r1
  3050fe:	51 1d       	mov.l	@(52,r1),r1
  305100:	21 18       	tst	r1,r1
  305102:	89 42       	bt	30518a <kmalloc_max+0x13e>
		{
			s->live_blocks++;
  305104:	61 e3       	mov	r14,r1
  305106:	71 e0       	add	#-32,r1
  305108:	51 1c       	mov.l	@(48,r1),r1
  30510a:	61 12       	mov.l	@r1,r1
  30510c:	62 13       	mov	r1,r2
  30510e:	72 01       	add	#1,r2
  305110:	61 e3       	mov	r14,r1
  305112:	71 e0       	add	#-32,r1
  305114:	51 1c       	mov.l	@(48,r1),r1
  305116:	21 22       	mov.l	r2,@r1
			s->peak_live_blocks = max(s->live_blocks,
  305118:	61 e3       	mov	r14,r1
  30511a:	71 e0       	add	#-32,r1
  30511c:	62 e3       	mov	r14,r2
  30511e:	72 e0       	add	#-32,r2
  305120:	52 2c       	mov.l	@(48,r2),r2
  305122:	62 22       	mov.l	@r2,r2
  305124:	11 2b       	mov.l	r2,@(44,r1)
  305126:	61 e3       	mov	r14,r1
  305128:	71 e0       	add	#-32,r1
  30512a:	62 e3       	mov	r14,r2
  30512c:	72 e0       	add	#-32,r2
  30512e:	52 2c       	mov.l	@(48,r2),r2
  305130:	52 21       	mov.l	@(4,r2),r2
  305132:	11 2a       	mov.l	r2,@(40,r1)
  305134:	61 e3       	mov	r14,r1
  305136:	71 e0       	add	#-32,r1
  305138:	62 e3       	mov	r14,r2
  30513a:	72 e0       	add	#-32,r2
  30513c:	52 2b       	mov.l	@(44,r2),r2
  30513e:	51 1a       	mov.l	@(40,r1),r1
  305140:	31 23       	cmp/ge	r2,r1
  305142:	89 00       	bt	305146 <kmalloc_max+0xfa>
  305144:	61 23       	mov	r2,r1
  305146:	62 e3       	mov	r14,r2
  305148:	72 e0       	add	#-32,r2
  30514a:	52 2c       	mov.l	@(48,r2),r2
  30514c:	12 11       	mov.l	r1,@(4,r2)
				s->peak_live_blocks);
			s->total_volume += *size;
  30514e:	61 e3       	mov	r14,r1
  305150:	71 e0       	add	#-32,r1
  305152:	51 1c       	mov.l	@(48,r1),r1
  305154:	51 12       	mov.l	@(8,r1),r1
  305156:	62 13       	mov	r1,r2
  305158:	61 e3       	mov	r14,r1
  30515a:	71 e0       	add	#-32,r1
  30515c:	51 19       	mov.l	@(36,r1),r1
  30515e:	61 12       	mov.l	@r1,r1
  305160:	31 2c       	add	r2,r1
  305162:	62 13       	mov	r1,r2
  305164:	61 e3       	mov	r14,r1
  305166:	71 e0       	add	#-32,r1
  305168:	51 1c       	mov.l	@(48,r1),r1
  30516a:	11 22       	mov.l	r2,@(8,r1)
			s->total_blocks++;
  30516c:	61 e3       	mov	r14,r1
  30516e:	71 e0       	add	#-32,r1
  305170:	51 1c       	mov.l	@(48,r1),r1
  305172:	51 13       	mov.l	@(12,r1),r1
  305174:	62 13       	mov	r1,r2
  305176:	72 01       	add	#1,r2
  305178:	61 e3       	mov	r14,r1
  30517a:	71 e0       	add	#-32,r1
  30517c:	51 1c       	mov.l	@(48,r1),r1
  30517e:	11 23       	mov.l	r2,@(12,r1)
			return rc;
  305180:	61 e3       	mov	r14,r1
  305182:	71 e0       	add	#-32,r1
  305184:	51 1d       	mov.l	@(52,r1),r1
  305186:	a0 1d       	bra	3051c4 <kmalloc_max+0x178>
  305188:	00 09       	nop	
		}
		else
		{
			s->total_failures++;
  30518a:	61 e3       	mov	r14,r1
  30518c:	71 e0       	add	#-32,r1
  30518e:	51 1c       	mov.l	@(48,r1),r1
  305190:	51 14       	mov.l	@(16,r1),r1
  305192:	62 13       	mov	r1,r2
  305194:	72 01       	add	#1,r2
  305196:	61 e3       	mov	r14,r1
  305198:	71 e0       	add	#-32,r1
  30519a:	51 1c       	mov.l	@(48,r1),r1
  30519c:	11 24       	mov.l	r2,@(16,r1)
  30519e:	a0 01       	bra	3051a4 <kmalloc_max+0x158>
  3051a0:	00 09       	nop	
		if(strcmp(a->name, name)) continue;
  3051a2:	00 09       	nop	
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++) if(arenas[i])
  3051a4:	61 e3       	mov	r14,r1
  3051a6:	71 e0       	add	#-32,r1
  3051a8:	62 e3       	mov	r14,r2
  3051aa:	72 e0       	add	#-32,r2
  3051ac:	52 2f       	mov.l	@(60,r2),r2
  3051ae:	72 01       	add	#1,r2
  3051b0:	11 2f       	mov.l	r2,@(60,r1)
  3051b2:	61 e3       	mov	r14,r1
  3051b4:	71 e0       	add	#-32,r1
  3051b6:	52 1f       	mov.l	@(60,r1),r2
  3051b8:	e1 07       	mov	#7,r1
  3051ba:	32 17       	cmp/gt	r1,r2
  3051bc:	89 01       	bt	3051c2 <kmalloc_max+0x176>
  3051be:	af 55       	bra	30506c <kmalloc_max+0x20>
  3051c0:	00 09       	nop	
		}
	}

	return NULL;
  3051c2:	e1 00       	mov	#0,r1
}
  3051c4:	60 13       	mov	r1,r0
  3051c6:	7e 20       	add	#32,r14
  3051c8:	6f e3       	mov	r14,r15
  3051ca:	4f 26       	lds.l	@r15+,pr
  3051cc:	6e f6       	mov.l	@r15+,r14
  3051ce:	00 0b       	rts	
  3051d0:	00 09       	nop	
  3051d2:	00 09       	nop	
  3051d4:	08 10       	.word 0x0810
  3051d6:	14 e4       	mov.l	r14,@(16,r4)
  3051d8:	00 30       	.word 0x0030
  3051da:	ad 38       	bra	304c4e <arena_owning+0x3e>

003051dc <kmalloc_add_arena>:

/* kmalloc_add_arena(): Add a new arena to the heap source */
bool kmalloc_add_arena(kmalloc_arena_t *arena)
{
  3051dc:	2f e6       	mov.l	r14,@-r15
  3051de:	7f f8       	add	#-8,r15
  3051e0:	6e f3       	mov	r15,r14
  3051e2:	61 e3       	mov	r14,r1
  3051e4:	71 c8       	add	#-56,r1
  3051e6:	11 4e       	mov.l	r4,@(56,r1)
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  3051e8:	61 e3       	mov	r14,r1
  3051ea:	71 c8       	add	#-56,r1
  3051ec:	e2 00       	mov	#0,r2
  3051ee:	11 2f       	mov.l	r2,@(60,r1)
  3051f0:	a0 1d       	bra	30522e <kmalloc_add_arena+0x52>
  3051f2:	00 09       	nop	
	{
		if(!arenas[i])
  3051f4:	d2 14       	mov.l	305248 <kmalloc_add_arena+0x6c>,r2	! 81014e4 <arenas>
  3051f6:	61 e3       	mov	r14,r1
  3051f8:	71 c8       	add	#-56,r1
  3051fa:	51 1f       	mov.l	@(60,r1),r1
  3051fc:	41 08       	shll2	r1
  3051fe:	31 2c       	add	r2,r1
  305200:	61 12       	mov.l	@r1,r1
  305202:	21 18       	tst	r1,r1
  305204:	8b 0c       	bf	305220 <kmalloc_add_arena+0x44>
		{
			arenas[i] = arena;
  305206:	d2 10       	mov.l	305248 <kmalloc_add_arena+0x6c>,r2	! 81014e4 <arenas>
  305208:	61 e3       	mov	r14,r1
  30520a:	71 c8       	add	#-56,r1
  30520c:	51 1f       	mov.l	@(60,r1),r1
  30520e:	41 08       	shll2	r1
  305210:	31 2c       	add	r2,r1
  305212:	62 e3       	mov	r14,r2
  305214:	72 c8       	add	#-56,r2
  305216:	52 2e       	mov.l	@(56,r2),r2
  305218:	21 22       	mov.l	r2,@r1
			return true;
  30521a:	e1 01       	mov	#1,r1
  30521c:	a0 0e       	bra	30523c <kmalloc_add_arena+0x60>
  30521e:	00 09       	nop	
	for(int i = 0; i < KMALLOC_ARENA_MAX; i++)
  305220:	61 e3       	mov	r14,r1
  305222:	71 c8       	add	#-56,r1
  305224:	62 e3       	mov	r14,r2
  305226:	72 c8       	add	#-56,r2
  305228:	52 2f       	mov.l	@(60,r2),r2
  30522a:	72 01       	add	#1,r2
  30522c:	11 2f       	mov.l	r2,@(60,r1)
  30522e:	61 e3       	mov	r14,r1
  305230:	71 c8       	add	#-56,r1
  305232:	52 1f       	mov.l	@(60,r1),r2
  305234:	e1 07       	mov	#7,r1
  305236:	32 17       	cmp/gt	r1,r2
  305238:	8b dc       	bf	3051f4 <kmalloc_add_arena+0x18>
		}
	}
	return false;
  30523a:	e1 00       	mov	#0,r1
}
  30523c:	60 13       	mov	r1,r0
  30523e:	7e 08       	add	#8,r14
  305240:	6f e3       	mov	r14,r15
  305242:	6e f6       	mov.l	@r15+,r14
  305244:	00 0b       	rts	
  305246:	00 09       	nop	
  305248:	08 10       	.word 0x0810
  30524a:	14 e4       	mov.l	r14,@(16,r4)

0030524c <mmu_translate>:
//	Unified interface
//---

/* mmu_translate(): Get the physical address for a virtual page */
uint32_t mmu_translate(uint32_t page, uint32_t *size)
{
  30524c:	2f e6       	mov.l	r14,@-r15
  30524e:	4f 22       	sts.l	pr,@-r15
  305250:	7f f8       	add	#-8,r15
  305252:	6e f3       	mov	r15,r14
  305254:	61 e3       	mov	r14,r1
  305256:	71 c8       	add	#-56,r1
  305258:	11 4f       	mov.l	r4,@(60,r1)
  30525a:	61 e3       	mov	r14,r1
  30525c:	71 c8       	add	#-56,r1
  30525e:	11 5e       	mov.l	r5,@(56,r1)
	return isSH3() ? tlb_translate(page,size) : utlb_translate(page,size);
  305260:	62 e3       	mov	r14,r2
  305262:	72 c8       	add	#-56,r2
  305264:	61 e3       	mov	r14,r1
  305266:	71 c8       	add	#-56,r1
  305268:	55 2e       	mov.l	@(56,r2),r5
  30526a:	54 1f       	mov.l	@(60,r1),r4
  30526c:	d1 05       	mov.l	305284 <mmu_translate+0x38>,r1	! 305630 <utlb_translate>
  30526e:	41 0b       	jsr	@r1
  305270:	00 09       	nop	
  305272:	61 03       	mov	r0,r1
}
  305274:	60 13       	mov	r1,r0
  305276:	7e 08       	add	#8,r14
  305278:	6f e3       	mov	r14,r15
  30527a:	4f 26       	lds.l	@r15+,pr
  30527c:	6e f6       	mov.l	@r15+,r14
  30527e:	00 0b       	rts	
  305280:	00 09       	nop	
  305282:	00 09       	nop	
  305284:	00 30       	.word 0x0030
  305286:	56 30       	mov.l	@(0,r3),r6

00305288 <mmu_uram>:

/* mmu_uram(): Get pointer to physical start of user RAM */
void *mmu_uram(void)
{
  305288:	2f e6       	mov.l	r14,@-r15
  30528a:	4f 22       	sts.l	pr,@-r15
  30528c:	6e f3       	mov	r15,r14
	/* Use P1 access */
	return (void *)(mmu_translate(0x08100000, NULL) | 0x80000000);
  30528e:	d1 07       	mov.l	3052ac <mmu_uram+0x24>,r1	! 8100000
  305290:	e5 00       	mov	#0,r5
  305292:	64 13       	mov	r1,r4
  305294:	d1 06       	mov.l	3052b0 <mmu_uram+0x28>,r1	! 30524c <mmu_translate>
  305296:	41 0b       	jsr	@r1
  305298:	00 09       	nop	
  30529a:	61 03       	mov	r0,r1
  30529c:	d2 05       	mov.l	3052b4 <mmu_uram+0x2c>,r2	! 80000000
  30529e:	21 2b       	or	r2,r1
}
  3052a0:	60 13       	mov	r1,r0
  3052a2:	6f e3       	mov	r14,r15
  3052a4:	4f 26       	lds.l	@r15+,pr
  3052a6:	6e f6       	mov.l	@r15+,r14
  3052a8:	00 0b       	rts	
  3052aa:	00 09       	nop	
  3052ac:	08 10       	.word 0x0810
  3052ae:	00 00       	.word 0x0000
  3052b0:	00 30       	.word 0x0030
  3052b2:	52 4c       	mov.l	@(48,r4),r2
  3052b4:	80 00       	mov.b	r0,@(0,r0)
	...

003052b8 <mmu_uram_size>:

/* mmu_uram_size(): Get size of user RAM area */
uint32_t mmu_uram_size(void)
{
  3052b8:	2f e6       	mov.l	r14,@-r15
  3052ba:	4f 22       	sts.l	pr,@-r15
  3052bc:	7f f8       	add	#-8,r15
  3052be:	6e f3       	mov	r15,r14
	uint32_t size = 0;
  3052c0:	61 e3       	mov	r14,r1
  3052c2:	71 c8       	add	#-56,r1
  3052c4:	e2 00       	mov	#0,r2
  3052c6:	11 2f       	mov.l	r2,@(60,r1)
	uint32_t pagesize;

	while(mmu_translate(0x08100000 + size, &pagesize) != (uint32_t)-1)
  3052c8:	a0 0a       	bra	3052e0 <mmu_uram_size+0x28>
  3052ca:	00 09       	nop	
	{
		size += pagesize;
  3052cc:	61 e3       	mov	r14,r1
  3052ce:	71 c8       	add	#-56,r1
  3052d0:	52 1e       	mov.l	@(56,r1),r2
  3052d2:	61 e3       	mov	r14,r1
  3052d4:	71 c8       	add	#-56,r1
  3052d6:	63 e3       	mov	r14,r3
  3052d8:	73 c8       	add	#-56,r3
  3052da:	53 3f       	mov.l	@(60,r3),r3
  3052dc:	32 3c       	add	r3,r2
  3052de:	11 2f       	mov.l	r2,@(60,r1)
	while(mmu_translate(0x08100000 + size, &pagesize) != (uint32_t)-1)
  3052e0:	61 e3       	mov	r14,r1
  3052e2:	71 c8       	add	#-56,r1
  3052e4:	51 1f       	mov.l	@(60,r1),r1
  3052e6:	d2 0b       	mov.l	305314 <mmu_uram_size+0x5c>,r2	! 8100000
  3052e8:	31 2c       	add	r2,r1
  3052ea:	62 e3       	mov	r14,r2
  3052ec:	65 23       	mov	r2,r5
  3052ee:	64 13       	mov	r1,r4
  3052f0:	d1 09       	mov.l	305318 <mmu_uram_size+0x60>,r1	! 30524c <mmu_translate>
  3052f2:	41 0b       	jsr	@r1
  3052f4:	00 09       	nop	
  3052f6:	61 03       	mov	r0,r1
  3052f8:	e2 ff       	mov	#-1,r2
  3052fa:	31 20       	cmp/eq	r2,r1
  3052fc:	8b e6       	bf	3052cc <mmu_uram_size+0x14>
	}

	return size;
  3052fe:	61 e3       	mov	r14,r1
  305300:	71 c8       	add	#-56,r1
  305302:	51 1f       	mov.l	@(60,r1),r1
}
  305304:	60 13       	mov	r1,r0
  305306:	7e 08       	add	#8,r14
  305308:	6f e3       	mov	r14,r15
  30530a:	4f 26       	lds.l	@r15+,pr
  30530c:	6e f6       	mov.l	@r15+,r14
  30530e:	00 0b       	rts	
  305310:	00 09       	nop	
  305312:	00 09       	nop	
  305314:	08 10       	.word 0x0810
  305316:	00 00       	.word 0x0000
  305318:	00 30       	.word 0x0030
  30531a:	52 4c       	mov.l	@(48,r4),r2

0030531c <mmu_is_rom>:

/* mmu_is_rom(): Determine if an address points to ROM */
bool mmu_is_rom(void const *ptr)
{
  30531c:	2f e6       	mov.l	r14,@-r15
  30531e:	7f f8       	add	#-8,r15
  305320:	6e f3       	mov	r15,r14
  305322:	61 e3       	mov	r14,r1
  305324:	71 c8       	add	#-56,r1
  305326:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t a = (uint32_t)ptr;
  305328:	61 e3       	mov	r14,r1
  30532a:	71 c8       	add	#-56,r1
  30532c:	62 e3       	mov	r14,r2
  30532e:	72 c8       	add	#-56,r2
  305330:	52 2e       	mov.l	@(56,r2),r2
  305332:	11 2f       	mov.l	r2,@(60,r1)

	if(a >= 0x80000000 && a < 0x88000000)
  305334:	61 e3       	mov	r14,r1
  305336:	71 c8       	add	#-56,r1
  305338:	51 1f       	mov.l	@(60,r1),r1
  30533a:	41 11       	cmp/pz	r1
  30533c:	89 08       	bt	305350 <mmu_is_rom+0x34>
  30533e:	61 e3       	mov	r14,r1
  305340:	71 c8       	add	#-56,r1
  305342:	52 1f       	mov.l	@(60,r1),r2
  305344:	d1 15       	mov.l	30539c <mmu_is_rom+0x80>,r1	! 87ffffff
  305346:	32 16       	cmp/hi	r1,r2
  305348:	89 02       	bt	305350 <mmu_is_rom+0x34>
		return true;
  30534a:	e1 01       	mov	#1,r1
  30534c:	a0 1f       	bra	30538e <mmu_is_rom+0x72>
  30534e:	00 09       	nop	
	if(a >= 0xa0000000 && a < 0xa8000000)
  305350:	61 e3       	mov	r14,r1
  305352:	71 c8       	add	#-56,r1
  305354:	52 1f       	mov.l	@(60,r1),r2
  305356:	d1 12       	mov.l	3053a0 <mmu_is_rom+0x84>,r1	! 9fffffff
  305358:	32 16       	cmp/hi	r1,r2
  30535a:	8b 08       	bf	30536e <mmu_is_rom+0x52>
  30535c:	61 e3       	mov	r14,r1
  30535e:	71 c8       	add	#-56,r1
  305360:	52 1f       	mov.l	@(60,r1),r2
  305362:	d1 10       	mov.l	3053a4 <mmu_is_rom+0x88>,r1	! a7ffffff
  305364:	32 16       	cmp/hi	r1,r2
  305366:	89 02       	bt	30536e <mmu_is_rom+0x52>
		return true;
  305368:	e1 01       	mov	#1,r1
  30536a:	a0 10       	bra	30538e <mmu_is_rom+0x72>
  30536c:	00 09       	nop	
	if(a >= 0x00300000 && a < 0x00800000)
  30536e:	61 e3       	mov	r14,r1
  305370:	71 c8       	add	#-56,r1
  305372:	52 1f       	mov.l	@(60,r1),r2
  305374:	d1 0c       	mov.l	3053a8 <mmu_is_rom+0x8c>,r1	! 2fffff
  305376:	32 16       	cmp/hi	r1,r2
  305378:	8b 08       	bf	30538c <mmu_is_rom+0x70>
  30537a:	61 e3       	mov	r14,r1
  30537c:	71 c8       	add	#-56,r1
  30537e:	52 1f       	mov.l	@(60,r1),r2
  305380:	d1 0a       	mov.l	3053ac <mmu_is_rom+0x90>,r1	! 7fffff
  305382:	32 16       	cmp/hi	r1,r2
  305384:	89 02       	bt	30538c <mmu_is_rom+0x70>
		return true;
  305386:	e1 01       	mov	#1,r1
  305388:	a0 01       	bra	30538e <mmu_is_rom+0x72>
  30538a:	00 09       	nop	

	return false;
  30538c:	e1 00       	mov	#0,r1
}
  30538e:	60 13       	mov	r1,r0
  305390:	7e 08       	add	#8,r14
  305392:	6f e3       	mov	r14,r15
  305394:	6e f6       	mov.l	@r15+,r14
  305396:	00 0b       	rts	
  305398:	00 09       	nop	
  30539a:	00 09       	nop	
  30539c:	87 ff       	.word 0x87ff
  30539e:	ff ff       	.word 0xffff
  3053a0:	9f ff       	mov.w	3055a2 <utlb_mapped_memory+0x172>,r15	! 3f00
  3053a2:	ff ff       	.word 0xffff
  3053a4:	a7 ff       	bra	3063a6 <r61524_display+0x136>
  3053a6:	ff ff       	.word 0xffff
  3053a8:	00 2f       	mac.l	@r2+,@r0+
  3053aa:	ff ff       	.word 0xffff
  3053ac:	00 7f       	mac.l	@r7+,@r0+
  3053ae:	ff ff       	.word 0xffff

003053b0 <utlb_addr>:
//---
//	SH7305 Unified TLB
//---

GINLINE const utlb_addr_t *utlb_addr(uint E)
{
  3053b0:	2f e6       	mov.l	r14,@-r15
  3053b2:	7f f8       	add	#-8,r15
  3053b4:	6e f3       	mov	r15,r14
  3053b6:	61 e3       	mov	r14,r1
  3053b8:	71 c8       	add	#-56,r1
  3053ba:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t addr = 0xf6000000 | ((E & 0x3f) << 8);
  3053bc:	61 e3       	mov	r14,r1
  3053be:	71 c8       	add	#-56,r1
  3053c0:	51 1e       	mov.l	@(56,r1),r1
  3053c2:	62 13       	mov	r1,r2
  3053c4:	42 18       	shll8	r2
  3053c6:	91 0f       	mov.w	3053e8 <utlb_addr+0x38>,r1	! 3f00
  3053c8:	63 23       	mov	r2,r3
  3053ca:	23 19       	and	r1,r3
  3053cc:	61 e3       	mov	r14,r1
  3053ce:	71 c8       	add	#-56,r1
  3053d0:	d2 06       	mov.l	3053ec <utlb_addr+0x3c>,r2	! f6000000
  3053d2:	22 3b       	or	r3,r2
  3053d4:	11 2f       	mov.l	r2,@(60,r1)
	return (void *)addr;
  3053d6:	61 e3       	mov	r14,r1
  3053d8:	71 c8       	add	#-56,r1
  3053da:	51 1f       	mov.l	@(60,r1),r1
}
  3053dc:	60 13       	mov	r1,r0
  3053de:	7e 08       	add	#8,r14
  3053e0:	6f e3       	mov	r14,r15
  3053e2:	6e f6       	mov.l	@r15+,r14
  3053e4:	00 0b       	rts	
  3053e6:	00 09       	nop	
  3053e8:	3f 00       	cmp/eq	r0,r15
  3053ea:	00 09       	nop	
  3053ec:	f6 00       	movs.w	@-r2,0x0
	...

003053f0 <utlb_data>:

GINLINE const utlb_data_t *utlb_data(uint E)
{
  3053f0:	2f e6       	mov.l	r14,@-r15
  3053f2:	7f f8       	add	#-8,r15
  3053f4:	6e f3       	mov	r15,r14
  3053f6:	61 e3       	mov	r14,r1
  3053f8:	71 c8       	add	#-56,r1
  3053fa:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t addr = 0xf7000000 | ((E & 0x3f) << 8);
  3053fc:	61 e3       	mov	r14,r1
  3053fe:	71 c8       	add	#-56,r1
  305400:	51 1e       	mov.l	@(56,r1),r1
  305402:	62 13       	mov	r1,r2
  305404:	42 18       	shll8	r2
  305406:	91 0f       	mov.w	305428 <utlb_data+0x38>,r1	! 3f00
  305408:	63 23       	mov	r2,r3
  30540a:	23 19       	and	r1,r3
  30540c:	61 e3       	mov	r14,r1
  30540e:	71 c8       	add	#-56,r1
  305410:	d2 06       	mov.l	30542c <utlb_data+0x3c>,r2	! f7000000
  305412:	22 3b       	or	r3,r2
  305414:	11 2f       	mov.l	r2,@(60,r1)
	return (void *)addr;
  305416:	61 e3       	mov	r14,r1
  305418:	71 c8       	add	#-56,r1
  30541a:	51 1f       	mov.l	@(60,r1),r1
}
  30541c:	60 13       	mov	r1,r0
  30541e:	7e 08       	add	#8,r14
  305420:	6f e3       	mov	r14,r15
  305422:	6e f6       	mov.l	@r15+,r14
  305424:	00 0b       	rts	
  305426:	00 09       	nop	
  305428:	3f 00       	cmp/eq	r0,r15
  30542a:	00 09       	nop	
  30542c:	f7 00       	movs.w	@-r3,0x0
	...

00305430 <utlb_mapped_memory>:

void utlb_mapped_memory(uint32_t *p_rom, uint32_t *p_ram)
{
  305430:	2f e6       	mov.l	r14,@-r15
  305432:	7f c8       	add	#-56,r15
  305434:	6e f3       	mov	r15,r14
  305436:	61 e3       	mov	r14,r1
  305438:	71 f8       	add	#-8,r1
  30543a:	11 43       	mov.l	r4,@(12,r1)
  30543c:	61 e3       	mov	r14,r1
  30543e:	71 f8       	add	#-8,r1
  305440:	11 52       	mov.l	r5,@(8,r1)
	uint32_t rom = 0, ram = 0;
  305442:	61 e3       	mov	r14,r1
  305444:	71 f8       	add	#-8,r1
  305446:	e2 00       	mov	#0,r2
  305448:	11 2f       	mov.l	r2,@(60,r1)
  30544a:	61 e3       	mov	r14,r1
  30544c:	71 f8       	add	#-8,r1
  30544e:	e2 00       	mov	#0,r2
  305450:	11 2e       	mov.l	r2,@(56,r1)

	for(int E = 0; E < 64; E++)
  305452:	61 e3       	mov	r14,r1
  305454:	71 f8       	add	#-8,r1
  305456:	e2 00       	mov	#0,r2
  305458:	11 2d       	mov.l	r2,@(52,r1)
  30545a:	a0 bb       	bra	3055d4 <utlb_mapped_memory+0x1a4>
  30545c:	00 09       	nop	
	{
		const utlb_addr_t *addr = utlb_addr(E);
  30545e:	61 e3       	mov	r14,r1
  305460:	71 f8       	add	#-8,r1
  305462:	52 1d       	mov.l	@(52,r1),r2
  305464:	61 e3       	mov	r14,r1
  305466:	71 f8       	add	#-8,r1
  305468:	11 25       	mov.l	r2,@(20,r1)
	uint32_t addr = 0xf6000000 | ((E & 0x3f) << 8);
  30546a:	61 e3       	mov	r14,r1
  30546c:	71 f8       	add	#-8,r1
  30546e:	51 15       	mov.l	@(20,r1),r1
  305470:	62 13       	mov	r1,r2
  305472:	42 18       	shll8	r2
  305474:	91 95       	mov.w	3055a2 <utlb_mapped_memory+0x172>,r1	! 3f00
  305476:	63 23       	mov	r2,r3
  305478:	23 19       	and	r1,r3
  30547a:	61 e3       	mov	r14,r1
  30547c:	71 f8       	add	#-8,r1
  30547e:	d2 4a       	mov.l	3055a8 <utlb_mapped_memory+0x178>,r2	! f6000000
  305480:	22 3b       	or	r3,r2
  305482:	11 24       	mov.l	r2,@(16,r1)
	return (void *)addr;
  305484:	61 e3       	mov	r14,r1
  305486:	71 f8       	add	#-8,r1
  305488:	52 14       	mov.l	@(16,r1),r2
		const utlb_addr_t *addr = utlb_addr(E);
  30548a:	61 e3       	mov	r14,r1
  30548c:	71 f8       	add	#-8,r1
  30548e:	11 2c       	mov.l	r2,@(48,r1)
		const utlb_data_t *data = utlb_data(E);
  305490:	61 e3       	mov	r14,r1
  305492:	71 f8       	add	#-8,r1
  305494:	52 1d       	mov.l	@(52,r1),r2
  305496:	61 e3       	mov	r14,r1
  305498:	71 f8       	add	#-8,r1
  30549a:	11 27       	mov.l	r2,@(28,r1)
	uint32_t addr = 0xf7000000 | ((E & 0x3f) << 8);
  30549c:	61 e3       	mov	r14,r1
  30549e:	71 f8       	add	#-8,r1
  3054a0:	51 17       	mov.l	@(28,r1),r1
  3054a2:	62 13       	mov	r1,r2
  3054a4:	42 18       	shll8	r2
  3054a6:	91 7c       	mov.w	3055a2 <utlb_mapped_memory+0x172>,r1	! 3f00
  3054a8:	63 23       	mov	r2,r3
  3054aa:	23 19       	and	r1,r3
  3054ac:	61 e3       	mov	r14,r1
  3054ae:	71 f8       	add	#-8,r1
  3054b0:	d2 3e       	mov.l	3055ac <utlb_mapped_memory+0x17c>,r2	! f7000000
  3054b2:	22 3b       	or	r3,r2
  3054b4:	11 26       	mov.l	r2,@(24,r1)
	return (void *)addr;
  3054b6:	61 e3       	mov	r14,r1
  3054b8:	71 f8       	add	#-8,r1
  3054ba:	52 16       	mov.l	@(24,r1),r2
		const utlb_data_t *data = utlb_data(E);
  3054bc:	61 e3       	mov	r14,r1
  3054be:	71 f8       	add	#-8,r1
  3054c0:	11 2b       	mov.l	r2,@(44,r1)
		if(!addr->V || !data->V) continue;
  3054c2:	61 e3       	mov	r14,r1
  3054c4:	71 f8       	add	#-8,r1
  3054c6:	51 1c       	mov.l	@(48,r1),r1
  3054c8:	62 12       	mov.l	@r1,r2
  3054ca:	91 6b       	mov.w	3055a4 <utlb_mapped_memory+0x174>,r1	! 100
  3054cc:	21 29       	and	r2,r1
  3054ce:	21 18       	tst	r1,r1
  3054d0:	89 07       	bt	3054e2 <utlb_mapped_memory+0xb2>
  3054d2:	61 e3       	mov	r14,r1
  3054d4:	71 f8       	add	#-8,r1
  3054d6:	51 1b       	mov.l	@(44,r1),r1
  3054d8:	62 12       	mov.l	@r1,r2
  3054da:	91 63       	mov.w	3055a4 <utlb_mapped_memory+0x174>,r1	! 100
  3054dc:	21 29       	and	r2,r1
  3054de:	21 18       	tst	r1,r1
  3054e0:	8b 01       	bf	3054e6 <utlb_mapped_memory+0xb6>
  3054e2:	a0 6f       	bra	3055c4 <utlb_mapped_memory+0x194>
  3054e4:	00 09       	nop	

		/* Magic formula to get the size without using an array since
		   this code is used even before global data is initialized */
		int sz = ((data->SZ1 << 1) | data->SZ2) << 3;
  3054e6:	61 e3       	mov	r14,r1
  3054e8:	71 f8       	add	#-8,r1
  3054ea:	51 1b       	mov.l	@(44,r1),r1
  3054ec:	61 12       	mov.l	@r1,r1
  3054ee:	e2 f9       	mov	#-7,r2
  3054f0:	41 2d       	shld	r2,r1
  3054f2:	e3 01       	mov	#1,r3
  3054f4:	21 39       	and	r3,r1
  3054f6:	61 1c       	extu.b	r1,r1
  3054f8:	31 1c       	add	r1,r1
  3054fa:	62 e3       	mov	r14,r2
  3054fc:	72 f8       	add	#-8,r2
  3054fe:	52 2b       	mov.l	@(44,r2),r2
  305500:	62 22       	mov.l	@r2,r2
  305502:	42 09       	shlr2	r2
  305504:	42 09       	shlr2	r2
  305506:	e3 01       	mov	#1,r3
  305508:	22 39       	and	r3,r2
  30550a:	62 2c       	extu.b	r2,r2
  30550c:	21 2b       	or	r2,r1
  30550e:	62 e3       	mov	r14,r2
  305510:	72 f8       	add	#-8,r2
  305512:	41 08       	shll2	r1
  305514:	31 1c       	add	r1,r1
  305516:	12 1a       	mov.l	r1,@(40,r2)
		int size = 1 << ((0x14100c0a >> sz) & 0xff);
  305518:	61 e3       	mov	r14,r1
  30551a:	71 f8       	add	#-8,r1
  30551c:	d2 24       	mov.l	3055b0 <utlb_mapped_memory+0x180>,r2	! 14100c0a
  30551e:	51 1a       	mov.l	@(40,r1),r1
  305520:	61 1b       	neg	r1,r1
  305522:	42 1c       	shad	r1,r2
  305524:	63 2c       	extu.b	r2,r3
  305526:	61 e3       	mov	r14,r1
  305528:	71 f8       	add	#-8,r1
  30552a:	e2 01       	mov	#1,r2
  30552c:	42 3d       	shld	r3,r2
  30552e:	11 29       	mov.l	r2,@(36,r1)

		uint32_t src = addr->VPN << 10;
  305530:	61 e3       	mov	r14,r1
  305532:	71 f8       	add	#-8,r1
  305534:	51 1c       	mov.l	@(48,r1),r1
  305536:	61 12       	mov.l	@r1,r1
  305538:	41 19       	shlr8	r1
  30553a:	41 09       	shlr2	r1
  30553c:	62 e3       	mov	r14,r2
  30553e:	72 f8       	add	#-8,r2
  305540:	41 18       	shll8	r1
  305542:	41 08       	shll2	r1
  305544:	12 18       	mov.l	r1,@(32,r2)
		if(src >= 0x00300000 && src < 0x00700000) rom += size;
  305546:	61 e3       	mov	r14,r1
  305548:	71 f8       	add	#-8,r1
  30554a:	52 18       	mov.l	@(32,r1),r2
  30554c:	d1 19       	mov.l	3055b4 <utlb_mapped_memory+0x184>,r1	! 2fffff
  30554e:	32 16       	cmp/hi	r1,r2
  305550:	8b 0f       	bf	305572 <utlb_mapped_memory+0x142>
  305552:	61 e3       	mov	r14,r1
  305554:	71 f8       	add	#-8,r1
  305556:	52 18       	mov.l	@(32,r1),r2
  305558:	d1 17       	mov.l	3055b8 <utlb_mapped_memory+0x188>,r1	! 6fffff
  30555a:	32 16       	cmp/hi	r1,r2
  30555c:	89 09       	bt	305572 <utlb_mapped_memory+0x142>
  30555e:	61 e3       	mov	r14,r1
  305560:	71 f8       	add	#-8,r1
  305562:	52 19       	mov.l	@(36,r1),r2
  305564:	61 e3       	mov	r14,r1
  305566:	71 f8       	add	#-8,r1
  305568:	63 e3       	mov	r14,r3
  30556a:	73 f8       	add	#-8,r3
  30556c:	53 3f       	mov.l	@(60,r3),r3
  30556e:	32 3c       	add	r3,r2
  305570:	11 2f       	mov.l	r2,@(60,r1)
		if(src >= 0x08100000 && src < 0x08180000) ram += size;
  305572:	61 e3       	mov	r14,r1
  305574:	71 f8       	add	#-8,r1
  305576:	52 18       	mov.l	@(32,r1),r2
  305578:	d1 10       	mov.l	3055bc <utlb_mapped_memory+0x18c>,r1	! 80fffff
  30557a:	32 16       	cmp/hi	r1,r2
  30557c:	8b 23       	bf	3055c6 <utlb_mapped_memory+0x196>
  30557e:	61 e3       	mov	r14,r1
  305580:	71 f8       	add	#-8,r1
  305582:	52 18       	mov.l	@(32,r1),r2
  305584:	d1 0e       	mov.l	3055c0 <utlb_mapped_memory+0x190>,r1	! 817ffff
  305586:	32 16       	cmp/hi	r1,r2
  305588:	89 1d       	bt	3055c6 <utlb_mapped_memory+0x196>
  30558a:	61 e3       	mov	r14,r1
  30558c:	71 f8       	add	#-8,r1
  30558e:	52 19       	mov.l	@(36,r1),r2
  305590:	61 e3       	mov	r14,r1
  305592:	71 f8       	add	#-8,r1
  305594:	63 e3       	mov	r14,r3
  305596:	73 f8       	add	#-8,r3
  305598:	53 3e       	mov.l	@(56,r3),r3
  30559a:	32 3c       	add	r3,r2
  30559c:	11 2e       	mov.l	r2,@(56,r1)
  30559e:	a0 12       	bra	3055c6 <utlb_mapped_memory+0x196>
  3055a0:	00 09       	nop	
  3055a2:	3f 00       	cmp/eq	r0,r15
  3055a4:	01 00       	.word 0x0100
  3055a6:	00 09       	nop	
  3055a8:	f6 00       	movs.w	@-r2,0x0
  3055aa:	00 00       	.word 0x0000
  3055ac:	f7 00       	movs.w	@-r3,0x0
  3055ae:	00 00       	.word 0x0000
  3055b0:	14 10       	mov.l	r1,@(0,r4)
  3055b2:	0c 0a       	sts	mach,r12
  3055b4:	00 2f       	mac.l	@r2+,@r0+
  3055b6:	ff ff       	.word 0xffff
  3055b8:	00 6f       	mac.l	@r6+,@r0+
  3055ba:	ff ff       	.word 0xffff
  3055bc:	08 0f       	mac.l	@r0+,@r8+
  3055be:	ff ff       	.word 0xffff
  3055c0:	08 17       	mul.l	r1,r8
  3055c2:	ff ff       	.word 0xffff
		if(!addr->V || !data->V) continue;
  3055c4:	00 09       	nop	
	for(int E = 0; E < 64; E++)
  3055c6:	61 e3       	mov	r14,r1
  3055c8:	71 f8       	add	#-8,r1
  3055ca:	62 e3       	mov	r14,r2
  3055cc:	72 f8       	add	#-8,r2
  3055ce:	52 2d       	mov.l	@(52,r2),r2
  3055d0:	72 01       	add	#1,r2
  3055d2:	11 2d       	mov.l	r2,@(52,r1)
  3055d4:	61 e3       	mov	r14,r1
  3055d6:	71 f8       	add	#-8,r1
  3055d8:	52 1d       	mov.l	@(52,r1),r2
  3055da:	e1 3f       	mov	#63,r1
  3055dc:	32 17       	cmp/gt	r1,r2
  3055de:	89 01       	bt	3055e4 <utlb_mapped_memory+0x1b4>
  3055e0:	af 3d       	bra	30545e <utlb_mapped_memory+0x2e>
  3055e2:	00 09       	nop	
	}

	if(p_rom) *p_rom = rom;
  3055e4:	61 e3       	mov	r14,r1
  3055e6:	71 f8       	add	#-8,r1
  3055e8:	51 13       	mov.l	@(12,r1),r1
  3055ea:	21 18       	tst	r1,r1
  3055ec:	89 06       	bt	3055fc <utlb_mapped_memory+0x1cc>
  3055ee:	61 e3       	mov	r14,r1
  3055f0:	71 f8       	add	#-8,r1
  3055f2:	51 13       	mov.l	@(12,r1),r1
  3055f4:	62 e3       	mov	r14,r2
  3055f6:	72 f8       	add	#-8,r2
  3055f8:	52 2f       	mov.l	@(60,r2),r2
  3055fa:	21 22       	mov.l	r2,@r1
	if(p_ram) *p_ram = ram;
  3055fc:	61 e3       	mov	r14,r1
  3055fe:	71 f8       	add	#-8,r1
  305600:	51 12       	mov.l	@(8,r1),r1
  305602:	21 18       	tst	r1,r1
  305604:	89 06       	bt	305614 <utlb_mapped_memory+0x1e4>
  305606:	61 e3       	mov	r14,r1
  305608:	71 f8       	add	#-8,r1
  30560a:	51 12       	mov.l	@(8,r1),r1
  30560c:	62 e3       	mov	r14,r2
  30560e:	72 f8       	add	#-8,r2
  305610:	52 2e       	mov.l	@(56,r2),r2
  305612:	21 22       	mov.l	r2,@r1

	gint[HWURAM] = ram;
  305614:	d1 05       	mov.l	30562c <utlb_mapped_memory+0x1fc>,r1	! 81017d0 <gint>
  305616:	62 e3       	mov	r14,r2
  305618:	72 f8       	add	#-8,r2
  30561a:	52 2e       	mov.l	@(56,r2),r2
  30561c:	11 26       	mov.l	r2,@(24,r1)
}
  30561e:	00 09       	nop	
  305620:	7e 38       	add	#56,r14
  305622:	6f e3       	mov	r14,r15
  305624:	6e f6       	mov.l	@r15+,r14
  305626:	00 0b       	rts	
  305628:	00 09       	nop	
  30562a:	00 09       	nop	
  30562c:	08 10       	.word 0x0810
  30562e:	17 d0       	mov.l	r13,@(0,r7)

00305630 <utlb_translate>:

uint32_t utlb_translate(uint32_t page, uint32_t *size)
{
  305630:	2f e6       	mov.l	r14,@-r15
  305632:	7f d8       	add	#-40,r15
  305634:	6e f3       	mov	r15,r14
  305636:	61 e3       	mov	r14,r1
  305638:	71 e8       	add	#-24,r1
  30563a:	11 47       	mov.l	r4,@(28,r1)
  30563c:	61 e3       	mov	r14,r1
  30563e:	71 e8       	add	#-24,r1
  305640:	11 56       	mov.l	r5,@(24,r1)
	for(int E = 0; E < 64; E++)
  305642:	61 e3       	mov	r14,r1
  305644:	71 e8       	add	#-24,r1
  305646:	e2 00       	mov	#0,r2
  305648:	11 2f       	mov.l	r2,@(60,r1)
  30564a:	a0 8e       	bra	30576a <utlb_translate+0x13a>
  30564c:	00 09       	nop	
	{
		const utlb_addr_t *addr = utlb_addr(E);
  30564e:	61 e3       	mov	r14,r1
  305650:	71 e8       	add	#-24,r1
  305652:	52 1f       	mov.l	@(60,r1),r2
  305654:	61 e3       	mov	r14,r1
  305656:	71 e8       	add	#-24,r1
  305658:	11 29       	mov.l	r2,@(36,r1)
	uint32_t addr = 0xf6000000 | ((E & 0x3f) << 8);
  30565a:	61 e3       	mov	r14,r1
  30565c:	71 e8       	add	#-24,r1
  30565e:	51 19       	mov.l	@(36,r1),r1
  305660:	62 13       	mov	r1,r2
  305662:	42 18       	shll8	r2
  305664:	91 90       	mov.w	305788 <utlb_translate+0x158>,r1	! 3f00
  305666:	63 23       	mov	r2,r3
  305668:	23 19       	and	r1,r3
  30566a:	61 e3       	mov	r14,r1
  30566c:	71 e8       	add	#-24,r1
  30566e:	d2 47       	mov.l	30578c <utlb_translate+0x15c>,r2	! f6000000
  305670:	22 3b       	or	r3,r2
  305672:	11 28       	mov.l	r2,@(32,r1)
	return (void *)addr;
  305674:	61 e3       	mov	r14,r1
  305676:	71 e8       	add	#-24,r1
  305678:	52 18       	mov.l	@(32,r1),r2
		const utlb_addr_t *addr = utlb_addr(E);
  30567a:	61 e3       	mov	r14,r1
  30567c:	71 e8       	add	#-24,r1
  30567e:	11 2e       	mov.l	r2,@(56,r1)
		const utlb_data_t *data = utlb_data(E);
  305680:	61 e3       	mov	r14,r1
  305682:	71 e8       	add	#-24,r1
  305684:	52 1f       	mov.l	@(60,r1),r2
  305686:	61 e3       	mov	r14,r1
  305688:	71 e8       	add	#-24,r1
  30568a:	11 2b       	mov.l	r2,@(44,r1)
	uint32_t addr = 0xf7000000 | ((E & 0x3f) << 8);
  30568c:	61 e3       	mov	r14,r1
  30568e:	71 e8       	add	#-24,r1
  305690:	51 1b       	mov.l	@(44,r1),r1
  305692:	62 13       	mov	r1,r2
  305694:	42 18       	shll8	r2
  305696:	91 77       	mov.w	305788 <utlb_translate+0x158>,r1	! 3f00
  305698:	63 23       	mov	r2,r3
  30569a:	23 19       	and	r1,r3
  30569c:	61 e3       	mov	r14,r1
  30569e:	71 e8       	add	#-24,r1
  3056a0:	d2 3b       	mov.l	305790 <utlb_translate+0x160>,r2	! f7000000
  3056a2:	22 3b       	or	r3,r2
  3056a4:	11 2a       	mov.l	r2,@(40,r1)
	return (void *)addr;
  3056a6:	61 e3       	mov	r14,r1
  3056a8:	71 e8       	add	#-24,r1
  3056aa:	52 1a       	mov.l	@(40,r1),r2
		const utlb_data_t *data = utlb_data(E);
  3056ac:	61 e3       	mov	r14,r1
  3056ae:	71 e8       	add	#-24,r1
  3056b0:	11 2d       	mov.l	r2,@(52,r1)
		if(!addr->V || !data->V) continue;
  3056b2:	61 e3       	mov	r14,r1
  3056b4:	71 e8       	add	#-24,r1
  3056b6:	51 1e       	mov.l	@(56,r1),r1
  3056b8:	62 12       	mov.l	@r1,r2
  3056ba:	91 66       	mov.w	30578a <utlb_translate+0x15a>,r1	! 100
  3056bc:	21 29       	and	r2,r1
  3056be:	21 18       	tst	r1,r1
  3056c0:	89 4b       	bt	30575a <utlb_translate+0x12a>
  3056c2:	61 e3       	mov	r14,r1
  3056c4:	71 e8       	add	#-24,r1
  3056c6:	51 1d       	mov.l	@(52,r1),r1
  3056c8:	62 12       	mov.l	@r1,r2
  3056ca:	91 5e       	mov.w	30578a <utlb_translate+0x15a>,r1	! 100
  3056cc:	21 29       	and	r2,r1
  3056ce:	21 18       	tst	r1,r1
  3056d0:	89 43       	bt	30575a <utlb_translate+0x12a>

		if((uint32_t)addr->VPN << 10 == page)
  3056d2:	61 e3       	mov	r14,r1
  3056d4:	71 e8       	add	#-24,r1
  3056d6:	51 1e       	mov.l	@(56,r1),r1
  3056d8:	61 12       	mov.l	@r1,r1
  3056da:	41 19       	shlr8	r1
  3056dc:	41 09       	shlr2	r1
  3056de:	41 18       	shll8	r1
  3056e0:	41 08       	shll2	r1
  3056e2:	62 e3       	mov	r14,r2
  3056e4:	72 e8       	add	#-24,r2
  3056e6:	52 27       	mov.l	@(28,r2),r2
  3056e8:	32 10       	cmp/eq	r1,r2
  3056ea:	8b 37       	bf	30575c <utlb_translate+0x12c>
		{
			/* Same magic formula as utlb_mapped_memory() */
			int sz = ((data->SZ1 << 1) | data->SZ2) << 3;
  3056ec:	61 e3       	mov	r14,r1
  3056ee:	71 e8       	add	#-24,r1
  3056f0:	51 1d       	mov.l	@(52,r1),r1
  3056f2:	61 12       	mov.l	@r1,r1
  3056f4:	e2 f9       	mov	#-7,r2
  3056f6:	41 2d       	shld	r2,r1
  3056f8:	e3 01       	mov	#1,r3
  3056fa:	21 39       	and	r3,r1
  3056fc:	61 1c       	extu.b	r1,r1
  3056fe:	31 1c       	add	r1,r1
  305700:	62 e3       	mov	r14,r2
  305702:	72 e8       	add	#-24,r2
  305704:	52 2d       	mov.l	@(52,r2),r2
  305706:	62 22       	mov.l	@r2,r2
  305708:	42 09       	shlr2	r2
  30570a:	42 09       	shlr2	r2
  30570c:	e3 01       	mov	#1,r3
  30570e:	22 39       	and	r3,r2
  305710:	62 2c       	extu.b	r2,r2
  305712:	21 2b       	or	r2,r1
  305714:	62 e3       	mov	r14,r2
  305716:	72 e8       	add	#-24,r2
  305718:	41 08       	shll2	r1
  30571a:	31 1c       	add	r1,r1
  30571c:	12 1c       	mov.l	r1,@(48,r2)
			if(size) *size = 1 << ((0x14100c0a >> sz) & 0xff);
  30571e:	61 e3       	mov	r14,r1
  305720:	71 e8       	add	#-24,r1
  305722:	51 16       	mov.l	@(24,r1),r1
  305724:	21 18       	tst	r1,r1
  305726:	89 0c       	bt	305742 <utlb_translate+0x112>
  305728:	61 e3       	mov	r14,r1
  30572a:	71 e8       	add	#-24,r1
  30572c:	d2 19       	mov.l	305794 <utlb_translate+0x164>,r2	! 14100c0a
  30572e:	51 1c       	mov.l	@(48,r1),r1
  305730:	61 1b       	neg	r1,r1
  305732:	42 1c       	shad	r1,r2
  305734:	61 2c       	extu.b	r2,r1
  305736:	e2 01       	mov	#1,r2
  305738:	42 1d       	shld	r1,r2
  30573a:	61 e3       	mov	r14,r1
  30573c:	71 e8       	add	#-24,r1
  30573e:	51 16       	mov.l	@(24,r1),r1
  305740:	21 22       	mov.l	r2,@r1

			return data->PPN << 10;
  305742:	61 e3       	mov	r14,r1
  305744:	71 e8       	add	#-24,r1
  305746:	51 1d       	mov.l	@(52,r1),r1
  305748:	61 12       	mov.l	@r1,r1
  30574a:	41 19       	shlr8	r1
  30574c:	41 09       	shlr2	r1
  30574e:	d2 12       	mov.l	305798 <utlb_translate+0x168>,r2	! 7ffff
  305750:	21 29       	and	r2,r1
  305752:	41 18       	shll8	r1
  305754:	41 08       	shll2	r1
  305756:	a0 11       	bra	30577c <utlb_translate+0x14c>
  305758:	00 09       	nop	
		if(!addr->V || !data->V) continue;
  30575a:	00 09       	nop	
	for(int E = 0; E < 64; E++)
  30575c:	61 e3       	mov	r14,r1
  30575e:	71 e8       	add	#-24,r1
  305760:	62 e3       	mov	r14,r2
  305762:	72 e8       	add	#-24,r2
  305764:	52 2f       	mov.l	@(60,r2),r2
  305766:	72 01       	add	#1,r2
  305768:	11 2f       	mov.l	r2,@(60,r1)
  30576a:	61 e3       	mov	r14,r1
  30576c:	71 e8       	add	#-24,r1
  30576e:	52 1f       	mov.l	@(60,r1),r2
  305770:	e1 3f       	mov	#63,r1
  305772:	32 17       	cmp/gt	r1,r2
  305774:	89 01       	bt	30577a <utlb_translate+0x14a>
  305776:	af 6a       	bra	30564e <utlb_translate+0x1e>
  305778:	00 09       	nop	
		}
	}
	return -1;
  30577a:	e1 ff       	mov	#-1,r1
}
  30577c:	60 13       	mov	r1,r0
  30577e:	7e 28       	add	#40,r14
  305780:	6f e3       	mov	r14,r15
  305782:	6e f6       	mov.l	@r15+,r14
  305784:	00 0b       	rts	
  305786:	00 09       	nop	
  305788:	3f 00       	cmp/eq	r0,r15
  30578a:	01 00       	.word 0x0100
  30578c:	f6 00       	movs.w	@-r2,0x0
  30578e:	00 00       	.word 0x0000
  305790:	f7 00       	movs.w	@-r3,0x0
  305792:	00 00       	.word 0x0000
  305794:	14 10       	mov.l	r1,@(0,r4)
  305796:	0c 0a       	sts	mach,r12
  305798:	00 07       	mul.l	r0,r0
  30579a:	ff ff       	.word 0xffff

0030579c <itlb_addr>:

itlb_addr_t const *itlb_addr(uint E)
{
  30579c:	2f e6       	mov.l	r14,@-r15
  30579e:	7f f8       	add	#-8,r15
  3057a0:	6e f3       	mov	r15,r14
  3057a2:	61 e3       	mov	r14,r1
  3057a4:	71 c8       	add	#-56,r1
  3057a6:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t addr = 0xf2000000 | ((E & 3) << 8);
  3057a8:	61 e3       	mov	r14,r1
  3057aa:	71 c8       	add	#-56,r1
  3057ac:	51 1e       	mov.l	@(56,r1),r1
  3057ae:	62 13       	mov	r1,r2
  3057b0:	42 18       	shll8	r2
  3057b2:	91 0f       	mov.w	3057d4 <itlb_addr+0x38>,r1	! 300
  3057b4:	63 23       	mov	r2,r3
  3057b6:	23 19       	and	r1,r3
  3057b8:	61 e3       	mov	r14,r1
  3057ba:	71 c8       	add	#-56,r1
  3057bc:	d2 06       	mov.l	3057d8 <itlb_addr+0x3c>,r2	! f2000000
  3057be:	22 3b       	or	r3,r2
  3057c0:	11 2f       	mov.l	r2,@(60,r1)
	return (void *)addr;
  3057c2:	61 e3       	mov	r14,r1
  3057c4:	71 c8       	add	#-56,r1
  3057c6:	51 1f       	mov.l	@(60,r1),r1
}
  3057c8:	60 13       	mov	r1,r0
  3057ca:	7e 08       	add	#8,r14
  3057cc:	6f e3       	mov	r14,r15
  3057ce:	6e f6       	mov.l	@r15+,r14
  3057d0:	00 0b       	rts	
  3057d2:	00 09       	nop	
  3057d4:	03 00       	.word 0x0300
  3057d6:	00 09       	nop	
  3057d8:	f2 00       	.word 0xf200
	...

003057dc <itlb_data>:

itlb_data_t const *itlb_data(uint E)
{
  3057dc:	2f e6       	mov.l	r14,@-r15
  3057de:	7f f8       	add	#-8,r15
  3057e0:	6e f3       	mov	r15,r14
  3057e2:	61 e3       	mov	r14,r1
  3057e4:	71 c8       	add	#-56,r1
  3057e6:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t addr = 0xf3000000 | ((E & 3) << 8);
  3057e8:	61 e3       	mov	r14,r1
  3057ea:	71 c8       	add	#-56,r1
  3057ec:	51 1e       	mov.l	@(56,r1),r1
  3057ee:	62 13       	mov	r1,r2
  3057f0:	42 18       	shll8	r2
  3057f2:	91 0f       	mov.w	305814 <itlb_data+0x38>,r1	! 300
  3057f4:	63 23       	mov	r2,r3
  3057f6:	23 19       	and	r1,r3
  3057f8:	61 e3       	mov	r14,r1
  3057fa:	71 c8       	add	#-56,r1
  3057fc:	d2 06       	mov.l	305818 <itlb_data+0x3c>,r2	! f3000000
  3057fe:	22 3b       	or	r3,r2
  305800:	11 2f       	mov.l	r2,@(60,r1)
	return (void *)addr;
  305802:	61 e3       	mov	r14,r1
  305804:	71 c8       	add	#-56,r1
  305806:	51 1f       	mov.l	@(60,r1),r1
}
  305808:	60 13       	mov	r1,r0
  30580a:	7e 08       	add	#8,r14
  30580c:	6f e3       	mov	r14,r15
  30580e:	6e f6       	mov.l	@r15+,r14
  305810:	00 0b       	rts	
  305812:	00 09       	nop	
  305814:	03 00       	.word 0x0300
  305816:	00 09       	nop	
  305818:	f3 00       	.word 0xf300
	...

0030581c <configure>:

static void configure(void)
{
  30581c:	2f e6       	mov.l	r14,@-r15
  30581e:	6e f3       	mov	r15,r14
	/* Make writes to the control register area synchronous; this is needed
	   for the SPU to operate properly */
	if(isSH4()) SH7305_MMU.PASCR.UBC = 1;
  305820:	d1 06       	mov.l	30583c <configure+0x20>,r1	! ff000000
  305822:	62 13       	mov	r1,r2
  305824:	72 40       	add	#64,r2
  305826:	51 2c       	mov.l	@(48,r2),r1
  305828:	93 06       	mov.w	305838 <configure+0x1c>,r3	! 80 <silram>
  30582a:	21 3b       	or	r3,r1
  30582c:	12 1c       	mov.l	r1,@(48,r2)
}
  30582e:	00 09       	nop	
  305830:	6f e3       	mov	r14,r15
  305832:	6e f6       	mov.l	@r15+,r14
  305834:	00 0b       	rts	
  305836:	00 09       	nop	
  305838:	00 80       	.word 0x0080
  30583a:	00 09       	nop	
  30583c:	ff 00       	.word 0xff00
	...

00305840 <hsave>:
//---
// State and driver metadata
//---

static void hsave(mmu_state_t *s)
{
  305840:	2f e6       	mov.l	r14,@-r15
  305842:	7f fc       	add	#-4,r15
  305844:	6e f3       	mov	r15,r14
  305846:	61 e3       	mov	r14,r1
  305848:	71 c4       	add	#-60,r1
  30584a:	11 4f       	mov.l	r4,@(60,r1)
	if(isSH3()) return;
	s->PASCR = SH7305_MMU.PASCR.lword;
  30584c:	d1 09       	mov.l	305874 <hsave+0x34>,r1	! ff000000
  30584e:	71 40       	add	#64,r1
  305850:	52 1c       	mov.l	@(48,r1),r2
  305852:	61 e3       	mov	r14,r1
  305854:	71 c4       	add	#-60,r1
  305856:	51 1f       	mov.l	@(60,r1),r1
  305858:	21 22       	mov.l	r2,@r1
	s->IRMCR = SH7305_MMU.IRMCR.lword;
  30585a:	d1 06       	mov.l	305874 <hsave+0x34>,r1	! ff000000
  30585c:	71 40       	add	#64,r1
  30585e:	52 1e       	mov.l	@(56,r1),r2
  305860:	61 e3       	mov	r14,r1
  305862:	71 c4       	add	#-60,r1
  305864:	51 1f       	mov.l	@(60,r1),r1
  305866:	11 21       	mov.l	r2,@(4,r1)
}
  305868:	7e 04       	add	#4,r14
  30586a:	6f e3       	mov	r14,r15
  30586c:	6e f6       	mov.l	@r15+,r14
  30586e:	00 0b       	rts	
  305870:	00 09       	nop	
  305872:	00 09       	nop	
  305874:	ff 00       	.word 0xff00
	...

00305878 <hrestore>:

static void hrestore(mmu_state_t const *s)
{
  305878:	2f e6       	mov.l	r14,@-r15
  30587a:	7f fc       	add	#-4,r15
  30587c:	6e f3       	mov	r15,r14
  30587e:	61 e3       	mov	r14,r1
  305880:	71 c4       	add	#-60,r1
  305882:	11 4f       	mov.l	r4,@(60,r1)
	if(isSH3()) return;
	SH7305_MMU.PASCR.lword = s->PASCR;
  305884:	d1 09       	mov.l	3058ac <hrestore+0x34>,r1	! ff000000
  305886:	62 e3       	mov	r14,r2
  305888:	72 c4       	add	#-60,r2
  30588a:	52 2f       	mov.l	@(60,r2),r2
  30588c:	62 22       	mov.l	@r2,r2
  30588e:	71 40       	add	#64,r1
  305890:	11 2c       	mov.l	r2,@(48,r1)
	SH7305_MMU.IRMCR.lword = s->IRMCR;
  305892:	d1 06       	mov.l	3058ac <hrestore+0x34>,r1	! ff000000
  305894:	62 e3       	mov	r14,r2
  305896:	72 c4       	add	#-60,r2
  305898:	52 2f       	mov.l	@(60,r2),r2
  30589a:	52 21       	mov.l	@(4,r2),r2
  30589c:	71 40       	add	#64,r1
  30589e:	11 2e       	mov.l	r2,@(56,r1)
}
  3058a0:	7e 04       	add	#4,r14
  3058a2:	6f e3       	mov	r14,r15
  3058a4:	6e f6       	mov.l	@r15+,r14
  3058a6:	00 0b       	rts	
  3058a8:	00 09       	nop	
  3058aa:	00 09       	nop	
  3058ac:	ff 00       	.word 0xff00
	...

003058b0 <GINT_CALL_SET_function>:
{
  3058b0:	2f e6       	mov.l	r14,@-r15
  3058b2:	7f fc       	add	#-4,r15
  3058b4:	6e f3       	mov	r15,r14
  3058b6:	61 e3       	mov	r14,r1
  3058b8:	71 c4       	add	#-60,r1
  3058ba:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3058bc:	61 e3       	mov	r14,r1
  3058be:	71 c4       	add	#-60,r1
  3058c0:	51 1f       	mov.l	@(60,r1),r1
  3058c2:	e2 01       	mov	#1,r2
  3058c4:	21 22       	mov.l	r2,@r1
	return 0;
  3058c6:	e1 00       	mov	#0,r1
}
  3058c8:	60 13       	mov	r1,r0
  3058ca:	7e 04       	add	#4,r14
  3058cc:	6f e3       	mov	r14,r15
  3058ce:	6e f6       	mov.l	@r15+,r14
  3058d0:	00 0b       	rts	
  3058d2:	00 09       	nop	

003058d4 <GINT_CALL_INC_function>:
{
  3058d4:	2f e6       	mov.l	r14,@-r15
  3058d6:	7f fc       	add	#-4,r15
  3058d8:	6e f3       	mov	r15,r14
  3058da:	61 e3       	mov	r14,r1
  3058dc:	71 c4       	add	#-60,r1
  3058de:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3058e0:	61 e3       	mov	r14,r1
  3058e2:	71 c4       	add	#-60,r1
  3058e4:	51 1f       	mov.l	@(60,r1),r1
  3058e6:	61 12       	mov.l	@r1,r1
  3058e8:	62 13       	mov	r1,r2
  3058ea:	72 01       	add	#1,r2
  3058ec:	61 e3       	mov	r14,r1
  3058ee:	71 c4       	add	#-60,r1
  3058f0:	51 1f       	mov.l	@(60,r1),r1
  3058f2:	21 22       	mov.l	r2,@r1
	return 0;
  3058f4:	e1 00       	mov	#0,r1
}
  3058f6:	60 13       	mov	r1,r0
  3058f8:	7e 04       	add	#4,r14
  3058fa:	6f e3       	mov	r14,r15
  3058fc:	6e f6       	mov.l	@r15+,r14
  3058fe:	00 0b       	rts	
  305900:	00 09       	nop	

00305902 <GINT_CALL_SET_STOP_function>:
{
  305902:	2f e6       	mov.l	r14,@-r15
  305904:	7f fc       	add	#-4,r15
  305906:	6e f3       	mov	r15,r14
  305908:	61 e3       	mov	r14,r1
  30590a:	71 c4       	add	#-60,r1
  30590c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30590e:	61 e3       	mov	r14,r1
  305910:	71 c4       	add	#-60,r1
  305912:	51 1f       	mov.l	@(60,r1),r1
  305914:	e2 01       	mov	#1,r2
  305916:	21 22       	mov.l	r2,@r1
	return 1;
  305918:	e1 01       	mov	#1,r1
}
  30591a:	60 13       	mov	r1,r0
  30591c:	7e 04       	add	#4,r14
  30591e:	6f e3       	mov	r14,r15
  305920:	6e f6       	mov.l	@r15+,r14
  305922:	00 0b       	rts	
  305924:	00 09       	nop	

00305926 <GINT_CALL_INC_STOP_function>:
{
  305926:	2f e6       	mov.l	r14,@-r15
  305928:	7f fc       	add	#-4,r15
  30592a:	6e f3       	mov	r15,r14
  30592c:	61 e3       	mov	r14,r1
  30592e:	71 c4       	add	#-60,r1
  305930:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  305932:	61 e3       	mov	r14,r1
  305934:	71 c4       	add	#-60,r1
  305936:	51 1f       	mov.l	@(60,r1),r1
  305938:	61 12       	mov.l	@r1,r1
  30593a:	62 13       	mov	r1,r2
  30593c:	72 01       	add	#1,r2
  30593e:	61 e3       	mov	r14,r1
  305940:	71 c4       	add	#-60,r1
  305942:	51 1f       	mov.l	@(60,r1),r1
  305944:	21 22       	mov.l	r2,@r1
	return 1;
  305946:	e1 01       	mov	#1,r1
}
  305948:	60 13       	mov	r1,r0
  30594a:	7e 04       	add	#4,r14
  30594c:	6f e3       	mov	r14,r15
  30594e:	6e f6       	mov.l	@r15+,r14
  305950:	00 0b       	rts	
  305952:	00 09       	nop	

00305954 <dupdate_set_hook>:
/* Hook to be called after each dupdate(). */
static gint_call_t hook = GINT_CALL_NULL;

/* dupdate_set_hook(): Define a function to be called after each dupdate() */
void dupdate_set_hook(gint_call_t function)
{
  305954:	7f f0       	add	#-16,r15
  305956:	2f e6       	mov.l	r14,@-r15
  305958:	6e f3       	mov	r15,r14
  30595a:	1e 41       	mov.l	r4,@(4,r14)
  30595c:	1e 52       	mov.l	r5,@(8,r14)
  30595e:	1e 63       	mov.l	r6,@(12,r14)
  305960:	1e 74       	mov.l	r7,@(16,r14)
	hook = function;
  305962:	d2 0c       	mov.l	305994 <dupdate_set_hook+0x40>,r2	! 8101504 <hook>
  305964:	61 e3       	mov	r14,r1
  305966:	71 04       	add	#4,r1
  305968:	63 12       	mov.l	@r1,r3
  30596a:	22 32       	mov.l	r3,@r2
  30596c:	71 04       	add	#4,r1
  30596e:	63 12       	mov.l	@r1,r3
  305970:	12 31       	mov.l	r3,@(4,r2)
  305972:	71 04       	add	#4,r1
  305974:	63 12       	mov.l	@r1,r3
  305976:	12 32       	mov.l	r3,@(8,r2)
  305978:	71 04       	add	#4,r1
  30597a:	63 12       	mov.l	@r1,r3
  30597c:	12 33       	mov.l	r3,@(12,r2)
  30597e:	71 04       	add	#4,r1
  305980:	63 12       	mov.l	@r1,r3
  305982:	12 34       	mov.l	r3,@(16,r2)
  305984:	71 04       	add	#4,r1
}
  305986:	00 09       	nop	
  305988:	6f e3       	mov	r14,r15
  30598a:	6e f6       	mov.l	@r15+,r14
  30598c:	7f 10       	add	#16,r15
  30598e:	00 0b       	rts	
  305990:	00 09       	nop	
  305992:	00 09       	nop	
  305994:	08 10       	.word 0x0810
  305996:	15 04       	mov.l	r0,@(16,r5)

00305998 <dupdate_get_hook>:

/* dupdate_get_hook(): Get a copy of the dupdate() hook */
gint_call_t dupdate_get_hook(void)
{
  305998:	2f e6       	mov.l	r14,@-r15
  30599a:	6e f3       	mov	r15,r14
	return hook;
  30599c:	d1 0a       	mov.l	3059c8 <dupdate_get_hook+0x30>,r1	! 8101504 <hook>
  30599e:	63 12       	mov.l	@r1,r3
  3059a0:	22 32       	mov.l	r3,@r2
  3059a2:	71 04       	add	#4,r1
  3059a4:	63 12       	mov.l	@r1,r3
  3059a6:	12 31       	mov.l	r3,@(4,r2)
  3059a8:	71 04       	add	#4,r1
  3059aa:	63 12       	mov.l	@r1,r3
  3059ac:	12 32       	mov.l	r3,@(8,r2)
  3059ae:	71 04       	add	#4,r1
  3059b0:	63 12       	mov.l	@r1,r3
  3059b2:	12 33       	mov.l	r3,@(12,r2)
  3059b4:	71 04       	add	#4,r1
  3059b6:	63 12       	mov.l	@r1,r3
  3059b8:	12 34       	mov.l	r3,@(16,r2)
  3059ba:	71 04       	add	#4,r1
}
  3059bc:	60 23       	mov	r2,r0
  3059be:	6f e3       	mov	r14,r15
  3059c0:	6e f6       	mov.l	@r15+,r14
  3059c2:	00 0b       	rts	
  3059c4:	00 09       	nop	
  3059c6:	00 09       	nop	
  3059c8:	08 10       	.word 0x0810
  3059ca:	15 04       	mov.l	r0,@(16,r5)

003059cc <GINT_CALL_SET_function>:
{
  3059cc:	2f e6       	mov.l	r14,@-r15
  3059ce:	7f fc       	add	#-4,r15
  3059d0:	6e f3       	mov	r15,r14
  3059d2:	61 e3       	mov	r14,r1
  3059d4:	71 c4       	add	#-60,r1
  3059d6:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3059d8:	61 e3       	mov	r14,r1
  3059da:	71 c4       	add	#-60,r1
  3059dc:	51 1f       	mov.l	@(60,r1),r1
  3059de:	e2 01       	mov	#1,r2
  3059e0:	21 22       	mov.l	r2,@r1
	return 0;
  3059e2:	e1 00       	mov	#0,r1
}
  3059e4:	60 13       	mov	r1,r0
  3059e6:	7e 04       	add	#4,r14
  3059e8:	6f e3       	mov	r14,r15
  3059ea:	6e f6       	mov.l	@r15+,r14
  3059ec:	00 0b       	rts	
  3059ee:	00 09       	nop	

003059f0 <GINT_CALL_INC_function>:
{
  3059f0:	2f e6       	mov.l	r14,@-r15
  3059f2:	7f fc       	add	#-4,r15
  3059f4:	6e f3       	mov	r15,r14
  3059f6:	61 e3       	mov	r14,r1
  3059f8:	71 c4       	add	#-60,r1
  3059fa:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3059fc:	61 e3       	mov	r14,r1
  3059fe:	71 c4       	add	#-60,r1
  305a00:	51 1f       	mov.l	@(60,r1),r1
  305a02:	61 12       	mov.l	@r1,r1
  305a04:	62 13       	mov	r1,r2
  305a06:	72 01       	add	#1,r2
  305a08:	61 e3       	mov	r14,r1
  305a0a:	71 c4       	add	#-60,r1
  305a0c:	51 1f       	mov.l	@(60,r1),r1
  305a0e:	21 22       	mov.l	r2,@r1
	return 0;
  305a10:	e1 00       	mov	#0,r1
}
  305a12:	60 13       	mov	r1,r0
  305a14:	7e 04       	add	#4,r14
  305a16:	6f e3       	mov	r14,r15
  305a18:	6e f6       	mov.l	@r15+,r14
  305a1a:	00 0b       	rts	
  305a1c:	00 09       	nop	

00305a1e <GINT_CALL_SET_STOP_function>:
{
  305a1e:	2f e6       	mov.l	r14,@-r15
  305a20:	7f fc       	add	#-4,r15
  305a22:	6e f3       	mov	r15,r14
  305a24:	61 e3       	mov	r14,r1
  305a26:	71 c4       	add	#-60,r1
  305a28:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  305a2a:	61 e3       	mov	r14,r1
  305a2c:	71 c4       	add	#-60,r1
  305a2e:	51 1f       	mov.l	@(60,r1),r1
  305a30:	e2 01       	mov	#1,r2
  305a32:	21 22       	mov.l	r2,@r1
	return 1;
  305a34:	e1 01       	mov	#1,r1
}
  305a36:	60 13       	mov	r1,r0
  305a38:	7e 04       	add	#4,r14
  305a3a:	6f e3       	mov	r14,r15
  305a3c:	6e f6       	mov.l	@r15+,r14
  305a3e:	00 0b       	rts	
  305a40:	00 09       	nop	

00305a42 <GINT_CALL_INC_STOP_function>:
{
  305a42:	2f e6       	mov.l	r14,@-r15
  305a44:	7f fc       	add	#-4,r15
  305a46:	6e f3       	mov	r15,r14
  305a48:	61 e3       	mov	r14,r1
  305a4a:	71 c4       	add	#-60,r1
  305a4c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  305a4e:	61 e3       	mov	r14,r1
  305a50:	71 c4       	add	#-60,r1
  305a52:	51 1f       	mov.l	@(60,r1),r1
  305a54:	61 12       	mov.l	@r1,r1
  305a56:	62 13       	mov	r1,r2
  305a58:	72 01       	add	#1,r2
  305a5a:	61 e3       	mov	r14,r1
  305a5c:	71 c4       	add	#-60,r1
  305a5e:	51 1f       	mov.l	@(60,r1),r1
  305a60:	21 22       	mov.l	r2,@r1
	return 1;
  305a62:	e1 01       	mov	#1,r1
}
  305a64:	60 13       	mov	r1,r0
  305a66:	7e 04       	add	#4,r14
  305a68:	6f e3       	mov	r14,r15
  305a6a:	6e f6       	mov.l	@r15+,r14
  305a6c:	00 0b       	rts	
  305a6e:	00 09       	nop	

00305a70 <dwindow_set>:
	.right = DWIDTH,
	.bottom = DHEIGHT,
};

struct dwindow dwindow_set(struct dwindow m)
{
  305a70:	2f e6       	mov.l	r14,@-r15
  305a72:	7f b0       	add	#-80,r15
  305a74:	6e f3       	mov	r15,r14
  305a76:	61 e3       	mov	r14,r1
  305a78:	21 42       	mov.l	r4,@r1
  305a7a:	11 51       	mov.l	r5,@(4,r1)
  305a7c:	11 62       	mov.l	r6,@(8,r1)
  305a7e:	11 73       	mov.l	r7,@(12,r1)
	m.left = max(m.left, 0);
  305a80:	61 e3       	mov	r14,r1
  305a82:	71 10       	add	#16,r1
  305a84:	63 e3       	mov	r14,r3
  305a86:	63 32       	mov.l	@r3,r3
  305a88:	11 3f       	mov.l	r3,@(60,r1)
  305a8a:	61 e3       	mov	r14,r1
  305a8c:	71 10       	add	#16,r1
  305a8e:	e3 00       	mov	#0,r3
  305a90:	11 3e       	mov.l	r3,@(56,r1)
  305a92:	61 e3       	mov	r14,r1
  305a94:	71 10       	add	#16,r1
  305a96:	63 e3       	mov	r14,r3
  305a98:	73 10       	add	#16,r3
  305a9a:	53 3f       	mov.l	@(60,r3),r3
  305a9c:	51 1e       	mov.l	@(56,r1),r1
  305a9e:	31 33       	cmp/ge	r3,r1
  305aa0:	89 00       	bt	305aa4 <dwindow_set+0x34>
  305aa2:	61 33       	mov	r3,r1
  305aa4:	63 e3       	mov	r14,r3
  305aa6:	23 12       	mov.l	r1,@r3
	m.top = max(m.top, 0);
  305aa8:	61 e3       	mov	r14,r1
  305aaa:	71 10       	add	#16,r1
  305aac:	63 e3       	mov	r14,r3
  305aae:	53 31       	mov.l	@(4,r3),r3
  305ab0:	11 3d       	mov.l	r3,@(52,r1)
  305ab2:	61 e3       	mov	r14,r1
  305ab4:	71 10       	add	#16,r1
  305ab6:	e3 00       	mov	#0,r3
  305ab8:	11 3c       	mov.l	r3,@(48,r1)
  305aba:	61 e3       	mov	r14,r1
  305abc:	71 10       	add	#16,r1
  305abe:	63 e3       	mov	r14,r3
  305ac0:	73 10       	add	#16,r3
  305ac2:	53 3d       	mov.l	@(52,r3),r3
  305ac4:	51 1c       	mov.l	@(48,r1),r1
  305ac6:	31 33       	cmp/ge	r3,r1
  305ac8:	89 00       	bt	305acc <dwindow_set+0x5c>
  305aca:	61 33       	mov	r3,r1
  305acc:	63 e3       	mov	r14,r3
  305ace:	13 11       	mov.l	r1,@(4,r3)
	m.right = max(m.left, min(m.right, DWIDTH));
  305ad0:	61 e3       	mov	r14,r1
  305ad2:	71 10       	add	#16,r1
  305ad4:	63 e3       	mov	r14,r3
  305ad6:	63 32       	mov.l	@r3,r3
  305ad8:	11 3b       	mov.l	r3,@(44,r1)
  305ada:	61 e3       	mov	r14,r1
  305adc:	71 10       	add	#16,r1
  305ade:	63 e3       	mov	r14,r3
  305ae0:	53 32       	mov.l	@(8,r3),r3
  305ae2:	11 3a       	mov.l	r3,@(40,r1)
  305ae4:	61 e3       	mov	r14,r1
  305ae6:	71 10       	add	#16,r1
  305ae8:	93 6d       	mov.w	305bc6 <dwindow_set+0x156>,r3	! 18c
  305aea:	11 39       	mov.l	r3,@(36,r1)
  305aec:	61 e3       	mov	r14,r1
  305aee:	71 10       	add	#16,r1
  305af0:	63 e3       	mov	r14,r3
  305af2:	73 10       	add	#16,r3
  305af4:	53 3a       	mov.l	@(40,r3),r3
  305af6:	51 19       	mov.l	@(36,r1),r1
  305af8:	31 37       	cmp/gt	r3,r1
  305afa:	8b 00       	bf	305afe <dwindow_set+0x8e>
  305afc:	61 33       	mov	r3,r1
  305afe:	63 e3       	mov	r14,r3
  305b00:	73 10       	add	#16,r3
  305b02:	13 18       	mov.l	r1,@(32,r3)
  305b04:	61 e3       	mov	r14,r1
  305b06:	71 10       	add	#16,r1
  305b08:	63 e3       	mov	r14,r3
  305b0a:	73 10       	add	#16,r3
  305b0c:	53 3b       	mov.l	@(44,r3),r3
  305b0e:	51 18       	mov.l	@(32,r1),r1
  305b10:	31 33       	cmp/ge	r3,r1
  305b12:	89 00       	bt	305b16 <dwindow_set+0xa6>
  305b14:	61 33       	mov	r3,r1
  305b16:	63 e3       	mov	r14,r3
  305b18:	13 12       	mov.l	r1,@(8,r3)
	m.bottom = max(m.top, min(m.bottom, DHEIGHT));
  305b1a:	61 e3       	mov	r14,r1
  305b1c:	71 10       	add	#16,r1
  305b1e:	63 e3       	mov	r14,r3
  305b20:	53 31       	mov.l	@(4,r3),r3
  305b22:	11 37       	mov.l	r3,@(28,r1)
  305b24:	61 e3       	mov	r14,r1
  305b26:	71 10       	add	#16,r1
  305b28:	63 e3       	mov	r14,r3
  305b2a:	53 33       	mov.l	@(12,r3),r3
  305b2c:	11 36       	mov.l	r3,@(24,r1)
  305b2e:	61 e3       	mov	r14,r1
  305b30:	71 10       	add	#16,r1
  305b32:	93 49       	mov.w	305bc8 <dwindow_set+0x158>,r3	! e0
  305b34:	11 35       	mov.l	r3,@(20,r1)
  305b36:	61 e3       	mov	r14,r1
  305b38:	71 10       	add	#16,r1
  305b3a:	63 e3       	mov	r14,r3
  305b3c:	73 10       	add	#16,r3
  305b3e:	53 36       	mov.l	@(24,r3),r3
  305b40:	51 15       	mov.l	@(20,r1),r1
  305b42:	31 37       	cmp/gt	r3,r1
  305b44:	8b 00       	bf	305b48 <dwindow_set+0xd8>
  305b46:	61 33       	mov	r3,r1
  305b48:	63 e3       	mov	r14,r3
  305b4a:	73 10       	add	#16,r3
  305b4c:	13 14       	mov.l	r1,@(16,r3)
  305b4e:	61 e3       	mov	r14,r1
  305b50:	71 10       	add	#16,r1
  305b52:	63 e3       	mov	r14,r3
  305b54:	73 10       	add	#16,r3
  305b56:	53 37       	mov.l	@(28,r3),r3
  305b58:	51 14       	mov.l	@(16,r1),r1
  305b5a:	31 33       	cmp/ge	r3,r1
  305b5c:	89 00       	bt	305b60 <dwindow_set+0xf0>
  305b5e:	61 33       	mov	r3,r1
  305b60:	63 e3       	mov	r14,r3
  305b62:	13 13       	mov.l	r1,@(12,r3)

	struct dwindow old_mode = dwindow;
  305b64:	63 e3       	mov	r14,r3
  305b66:	73 10       	add	#16,r3
  305b68:	d1 18       	mov.l	305bcc <dwindow_set+0x15c>,r1	! 8101690 <dwindow>
  305b6a:	67 12       	mov.l	@r1,r7
  305b6c:	23 72       	mov.l	r7,@r3
  305b6e:	71 04       	add	#4,r1
  305b70:	67 12       	mov.l	@r1,r7
  305b72:	13 71       	mov.l	r7,@(4,r3)
  305b74:	71 04       	add	#4,r1
  305b76:	67 12       	mov.l	@r1,r7
  305b78:	13 72       	mov.l	r7,@(8,r3)
  305b7a:	71 04       	add	#4,r1
  305b7c:	67 12       	mov.l	@r1,r7
  305b7e:	13 73       	mov.l	r7,@(12,r3)
  305b80:	71 04       	add	#4,r1
	dwindow = m;
  305b82:	d3 12       	mov.l	305bcc <dwindow_set+0x15c>,r3	! 8101690 <dwindow>
  305b84:	61 e3       	mov	r14,r1
  305b86:	67 12       	mov.l	@r1,r7
  305b88:	23 72       	mov.l	r7,@r3
  305b8a:	71 04       	add	#4,r1
  305b8c:	67 12       	mov.l	@r1,r7
  305b8e:	13 71       	mov.l	r7,@(4,r3)
  305b90:	71 04       	add	#4,r1
  305b92:	67 12       	mov.l	@r1,r7
  305b94:	13 72       	mov.l	r7,@(8,r3)
  305b96:	71 04       	add	#4,r1
  305b98:	67 12       	mov.l	@r1,r7
  305b9a:	13 73       	mov.l	r7,@(12,r3)
  305b9c:	71 04       	add	#4,r1
	return old_mode;
  305b9e:	61 e3       	mov	r14,r1
  305ba0:	71 10       	add	#16,r1
  305ba2:	63 12       	mov.l	@r1,r3
  305ba4:	22 32       	mov.l	r3,@r2
  305ba6:	71 04       	add	#4,r1
  305ba8:	63 12       	mov.l	@r1,r3
  305baa:	12 31       	mov.l	r3,@(4,r2)
  305bac:	71 04       	add	#4,r1
  305bae:	63 12       	mov.l	@r1,r3
  305bb0:	12 32       	mov.l	r3,@(8,r2)
  305bb2:	71 04       	add	#4,r1
  305bb4:	63 12       	mov.l	@r1,r3
  305bb6:	12 33       	mov.l	r3,@(12,r2)
  305bb8:	71 04       	add	#4,r1
}
  305bba:	60 23       	mov	r2,r0
  305bbc:	7e 50       	add	#80,r14
  305bbe:	6f e3       	mov	r14,r15
  305bc0:	6e f6       	mov.l	@r15+,r14
  305bc2:	00 0b       	rts	
  305bc4:	00 09       	nop	
  305bc6:	01 8c       	mov.b	@(r0,r8),r1
  305bc8:	00 e0       	.word 0x00e0
  305bca:	00 09       	nop	
  305bcc:	08 10       	.word 0x0810
  305bce:	16 90       	mov.l	r9,@(0,r6)

00305bd0 <GINT_CALL_SET_function>:
{
  305bd0:	2f e6       	mov.l	r14,@-r15
  305bd2:	7f fc       	add	#-4,r15
  305bd4:	6e f3       	mov	r15,r14
  305bd6:	61 e3       	mov	r14,r1
  305bd8:	71 c4       	add	#-60,r1
  305bda:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  305bdc:	61 e3       	mov	r14,r1
  305bde:	71 c4       	add	#-60,r1
  305be0:	51 1f       	mov.l	@(60,r1),r1
  305be2:	e2 01       	mov	#1,r2
  305be4:	21 22       	mov.l	r2,@r1
	return 0;
  305be6:	e1 00       	mov	#0,r1
}
  305be8:	60 13       	mov	r1,r0
  305bea:	7e 04       	add	#4,r14
  305bec:	6f e3       	mov	r14,r15
  305bee:	6e f6       	mov.l	@r15+,r14
  305bf0:	00 0b       	rts	
  305bf2:	00 09       	nop	

00305bf4 <GINT_CALL_INC_function>:
{
  305bf4:	2f e6       	mov.l	r14,@-r15
  305bf6:	7f fc       	add	#-4,r15
  305bf8:	6e f3       	mov	r15,r14
  305bfa:	61 e3       	mov	r14,r1
  305bfc:	71 c4       	add	#-60,r1
  305bfe:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  305c00:	61 e3       	mov	r14,r1
  305c02:	71 c4       	add	#-60,r1
  305c04:	51 1f       	mov.l	@(60,r1),r1
  305c06:	61 12       	mov.l	@r1,r1
  305c08:	62 13       	mov	r1,r2
  305c0a:	72 01       	add	#1,r2
  305c0c:	61 e3       	mov	r14,r1
  305c0e:	71 c4       	add	#-60,r1
  305c10:	51 1f       	mov.l	@(60,r1),r1
  305c12:	21 22       	mov.l	r2,@r1
	return 0;
  305c14:	e1 00       	mov	#0,r1
}
  305c16:	60 13       	mov	r1,r0
  305c18:	7e 04       	add	#4,r14
  305c1a:	6f e3       	mov	r14,r15
  305c1c:	6e f6       	mov.l	@r15+,r14
  305c1e:	00 0b       	rts	
  305c20:	00 09       	nop	

00305c22 <GINT_CALL_SET_STOP_function>:
{
  305c22:	2f e6       	mov.l	r14,@-r15
  305c24:	7f fc       	add	#-4,r15
  305c26:	6e f3       	mov	r15,r14
  305c28:	61 e3       	mov	r14,r1
  305c2a:	71 c4       	add	#-60,r1
  305c2c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  305c2e:	61 e3       	mov	r14,r1
  305c30:	71 c4       	add	#-60,r1
  305c32:	51 1f       	mov.l	@(60,r1),r1
  305c34:	e2 01       	mov	#1,r2
  305c36:	21 22       	mov.l	r2,@r1
	return 1;
  305c38:	e1 01       	mov	#1,r1
}
  305c3a:	60 13       	mov	r1,r0
  305c3c:	7e 04       	add	#4,r14
  305c3e:	6f e3       	mov	r14,r15
  305c40:	6e f6       	mov.l	@r15+,r14
  305c42:	00 0b       	rts	
  305c44:	00 09       	nop	

00305c46 <GINT_CALL_INC_STOP_function>:
{
  305c46:	2f e6       	mov.l	r14,@-r15
  305c48:	7f fc       	add	#-4,r15
  305c4a:	6e f3       	mov	r15,r14
  305c4c:	61 e3       	mov	r14,r1
  305c4e:	71 c4       	add	#-60,r1
  305c50:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  305c52:	61 e3       	mov	r14,r1
  305c54:	71 c4       	add	#-60,r1
  305c56:	51 1f       	mov.l	@(60,r1),r1
  305c58:	61 12       	mov.l	@r1,r1
  305c5a:	62 13       	mov	r1,r2
  305c5c:	72 01       	add	#1,r2
  305c5e:	61 e3       	mov	r14,r1
  305c60:	71 c4       	add	#-60,r1
  305c62:	51 1f       	mov.l	@(60,r1),r1
  305c64:	21 22       	mov.l	r2,@r1
	return 1;
  305c66:	e1 01       	mov	#1,r1
}
  305c68:	60 13       	mov	r1,r0
  305c6a:	7e 04       	add	#4,r14
  305c6c:	6f e3       	mov	r14,r15
  305c6e:	6e f6       	mov.l	@r15+,r14
  305c70:	00 0b       	rts	
  305c72:	00 09       	nop	

00305c74 <r61524_get>:
{
	*intf = data;
}

uint16_t r61524_get(int ID)
{
  305c74:	2f e6       	mov.l	r14,@-r15
  305c76:	7f f8       	add	#-8,r15
  305c78:	6e f3       	mov	r15,r14
  305c7a:	61 e3       	mov	r14,r1
  305c7c:	71 c8       	add	#-56,r1
  305c7e:	11 4e       	mov.l	r4,@(56,r1)
	select(ID);
  305c80:	61 e3       	mov	r14,r1
  305c82:	71 c8       	add	#-56,r1
  305c84:	51 1e       	mov.l	@(56,r1),r1
  305c86:	61 1d       	extu.w	r1,r1
  305c88:	62 13       	mov	r1,r2
  305c8a:	61 e3       	mov	r14,r1
  305c8c:	71 e8       	add	#-24,r1
  305c8e:	60 23       	mov	r2,r0
  305c90:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  305c92:	d1 14       	mov.l	305ce4 <r61524_get+0x70>,r1	! 81016a4 <PRDR>
  305c94:	61 12       	mov.l	@r1,r1
  305c96:	61 10       	mov.b	@r1,r1
  305c98:	63 1c       	extu.b	r1,r3
  305c9a:	d1 12       	mov.l	305ce4 <r61524_get+0x70>,r1	! 81016a4 <PRDR>
  305c9c:	61 12       	mov.l	@r1,r1
  305c9e:	e2 ef       	mov	#-17,r2
  305ca0:	22 39       	and	r3,r2
  305ca2:	62 2c       	extu.b	r2,r2
  305ca4:	21 20       	mov.b	r2,@r1
  305ca6:	00 ab       	synco	
	*intf = reg;
  305ca8:	d1 0f       	mov.l	305ce8 <r61524_get+0x74>,r1	! 81016a0 <intf>
  305caa:	61 12       	mov.l	@r1,r1
  305cac:	62 e3       	mov	r14,r2
  305cae:	72 e8       	add	#-24,r2
  305cb0:	85 2f       	mov.w	@(30,r2),r0
  305cb2:	62 03       	mov	r0,r2
  305cb4:	21 21       	mov.w	r2,@r1
  305cb6:	00 ab       	synco	
	*PRDR |= 0x10;
  305cb8:	d1 0a       	mov.l	305ce4 <r61524_get+0x70>,r1	! 81016a4 <PRDR>
  305cba:	61 12       	mov.l	@r1,r1
  305cbc:	61 10       	mov.b	@r1,r1
  305cbe:	62 1c       	extu.b	r1,r2
  305cc0:	d1 08       	mov.l	305ce4 <r61524_get+0x70>,r1	! 81016a4 <PRDR>
  305cc2:	61 12       	mov.l	@r1,r1
  305cc4:	e3 10       	mov	#16,r3
  305cc6:	22 3b       	or	r3,r2
  305cc8:	62 2c       	extu.b	r2,r2
  305cca:	21 20       	mov.b	r2,@r1
  305ccc:	00 ab       	synco	
}
  305cce:	00 09       	nop	
	return *intf;
  305cd0:	d1 05       	mov.l	305ce8 <r61524_get+0x74>,r1	! 81016a0 <intf>
  305cd2:	61 12       	mov.l	@r1,r1
  305cd4:	61 11       	mov.w	@r1,r1
  305cd6:	61 1d       	extu.w	r1,r1
	return read();
}
  305cd8:	60 13       	mov	r1,r0
  305cda:	7e 08       	add	#8,r14
  305cdc:	6f e3       	mov	r14,r15
  305cde:	6e f6       	mov.l	@r15+,r14
  305ce0:	00 0b       	rts	
  305ce2:	00 09       	nop	
  305ce4:	08 10       	.word 0x0810
  305ce6:	16 a4       	mov.l	r10,@(16,r6)
  305ce8:	08 10       	.word 0x0810
  305cea:	16 a0       	mov.l	r10,@(0,r6)

00305cec <r61524_set>:

void r61524_set(int ID, uint16_t value)
{
  305cec:	2f e6       	mov.l	r14,@-r15
  305cee:	7f f4       	add	#-12,r15
  305cf0:	6e f3       	mov	r15,r14
  305cf2:	61 e3       	mov	r14,r1
  305cf4:	71 cc       	add	#-52,r1
  305cf6:	11 4e       	mov.l	r4,@(56,r1)
  305cf8:	62 53       	mov	r5,r2
  305cfa:	61 e3       	mov	r14,r1
  305cfc:	71 ec       	add	#-20,r1
  305cfe:	60 23       	mov	r2,r0
  305d00:	81 1a       	mov.w	r0,@(20,r1)
	select(ID);
  305d02:	61 e3       	mov	r14,r1
  305d04:	71 cc       	add	#-52,r1
  305d06:	51 1e       	mov.l	@(56,r1),r1
  305d08:	61 1d       	extu.w	r1,r1
  305d0a:	62 13       	mov	r1,r2
  305d0c:	61 e3       	mov	r14,r1
  305d0e:	71 ec       	add	#-20,r1
  305d10:	60 23       	mov	r2,r0
  305d12:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  305d14:	d1 1a       	mov.l	305d80 <r61524_set+0x94>,r1	! 81016a4 <PRDR>
  305d16:	61 12       	mov.l	@r1,r1
  305d18:	61 10       	mov.b	@r1,r1
  305d1a:	63 1c       	extu.b	r1,r3
  305d1c:	d1 18       	mov.l	305d80 <r61524_set+0x94>,r1	! 81016a4 <PRDR>
  305d1e:	61 12       	mov.l	@r1,r1
  305d20:	e2 ef       	mov	#-17,r2
  305d22:	22 39       	and	r3,r2
  305d24:	62 2c       	extu.b	r2,r2
  305d26:	21 20       	mov.b	r2,@r1
  305d28:	00 ab       	synco	
	*intf = reg;
  305d2a:	d1 16       	mov.l	305d84 <r61524_set+0x98>,r1	! 81016a0 <intf>
  305d2c:	61 12       	mov.l	@r1,r1
  305d2e:	62 e3       	mov	r14,r2
  305d30:	72 ec       	add	#-20,r2
  305d32:	85 2e       	mov.w	@(28,r2),r0
  305d34:	62 03       	mov	r0,r2
  305d36:	21 21       	mov.w	r2,@r1
  305d38:	00 ab       	synco	
	*PRDR |= 0x10;
  305d3a:	d1 11       	mov.l	305d80 <r61524_set+0x94>,r1	! 81016a4 <PRDR>
  305d3c:	61 12       	mov.l	@r1,r1
  305d3e:	61 10       	mov.b	@r1,r1
  305d40:	62 1c       	extu.b	r1,r2
  305d42:	d1 0f       	mov.l	305d80 <r61524_set+0x94>,r1	! 81016a4 <PRDR>
  305d44:	61 12       	mov.l	@r1,r1
  305d46:	e3 10       	mov	#16,r3
  305d48:	22 3b       	or	r3,r2
  305d4a:	62 2c       	extu.b	r2,r2
  305d4c:	21 20       	mov.b	r2,@r1
  305d4e:	00 ab       	synco	
}
  305d50:	00 09       	nop	
	write(value);
  305d52:	61 e3       	mov	r14,r1
  305d54:	71 ec       	add	#-20,r1
  305d56:	85 1a       	mov.w	@(20,r1),r0
  305d58:	61 03       	mov	r0,r1
  305d5a:	62 1d       	extu.w	r1,r2
  305d5c:	61 e3       	mov	r14,r1
  305d5e:	71 ec       	add	#-20,r1
  305d60:	60 23       	mov	r2,r0
  305d62:	81 1f       	mov.w	r0,@(30,r1)
	*intf = data;
  305d64:	d1 07       	mov.l	305d84 <r61524_set+0x98>,r1	! 81016a0 <intf>
  305d66:	61 12       	mov.l	@r1,r1
  305d68:	62 e3       	mov	r14,r2
  305d6a:	72 ec       	add	#-20,r2
  305d6c:	85 2f       	mov.w	@(30,r2),r0
  305d6e:	62 03       	mov	r0,r2
  305d70:	21 21       	mov.w	r2,@r1
}
  305d72:	00 09       	nop	
}
  305d74:	00 09       	nop	
  305d76:	7e 0c       	add	#12,r14
  305d78:	6f e3       	mov	r14,r15
  305d7a:	6e f6       	mov.l	@r15+,r14
  305d7c:	00 0b       	rts	
  305d7e:	00 09       	nop	
  305d80:	08 10       	.word 0x0810
  305d82:	16 a4       	mov.l	r10,@(16,r6)
  305d84:	08 10       	.word 0x0810
  305d86:	16 a0       	mov.l	r10,@(0,r6)

00305d88 <r61524_win_get>:
//---
//	Window management
//---

void r61524_win_get(uint16_t *HSA, uint16_t *HEA, uint16_t *VSA, uint16_t *VEA)
{
  305d88:	2f e6       	mov.l	r14,@-r15
  305d8a:	7f e8       	add	#-24,r15
  305d8c:	6e f3       	mov	r15,r14
  305d8e:	61 e3       	mov	r14,r1
  305d90:	71 d8       	add	#-40,r1
  305d92:	11 4d       	mov.l	r4,@(52,r1)
  305d94:	61 e3       	mov	r14,r1
  305d96:	71 d8       	add	#-40,r1
  305d98:	11 5c       	mov.l	r5,@(48,r1)
  305d9a:	61 e3       	mov	r14,r1
  305d9c:	71 d8       	add	#-40,r1
  305d9e:	11 6b       	mov.l	r6,@(44,r1)
  305da0:	61 e3       	mov	r14,r1
  305da2:	71 d8       	add	#-40,r1
  305da4:	11 7a       	mov.l	r7,@(40,r1)
  305da6:	61 e3       	mov	r14,r1
  305da8:	71 f8       	add	#-8,r1
  305daa:	92 b2       	mov.w	305f12 <r61524_win_get+0x18a>,r2	! 210
  305dac:	60 23       	mov	r2,r0
  305dae:	81 1c       	mov.w	r0,@(24,r1)
	*PRDR &= ~0x10;
  305db0:	d1 5a       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305db2:	61 12       	mov.l	@r1,r1
  305db4:	61 10       	mov.b	@r1,r1
  305db6:	63 1c       	extu.b	r1,r3
  305db8:	d1 58       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305dba:	61 12       	mov.l	@r1,r1
  305dbc:	e2 ef       	mov	#-17,r2
  305dbe:	22 39       	and	r3,r2
  305dc0:	62 2c       	extu.b	r2,r2
  305dc2:	21 20       	mov.b	r2,@r1
  305dc4:	00 ab       	synco	
	*intf = reg;
  305dc6:	d1 56       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305dc8:	61 12       	mov.l	@r1,r1
  305dca:	62 e3       	mov	r14,r2
  305dcc:	72 f8       	add	#-8,r2
  305dce:	85 2c       	mov.w	@(24,r2),r0
  305dd0:	62 03       	mov	r0,r2
  305dd2:	21 21       	mov.w	r2,@r1
  305dd4:	00 ab       	synco	
	*PRDR |= 0x10;
  305dd6:	d1 51       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305dd8:	61 12       	mov.l	@r1,r1
  305dda:	61 10       	mov.b	@r1,r1
  305ddc:	62 1c       	extu.b	r1,r2
  305dde:	d1 4f       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305de0:	61 12       	mov.l	@r1,r1
  305de2:	e3 10       	mov	#16,r3
  305de4:	22 3b       	or	r3,r2
  305de6:	62 2c       	extu.b	r2,r2
  305de8:	21 20       	mov.b	r2,@r1
  305dea:	00 ab       	synco	
}
  305dec:	00 09       	nop	
	return *intf;
  305dee:	d1 4c       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305df0:	61 12       	mov.l	@r1,r1
  305df2:	61 11       	mov.w	@r1,r1
  305df4:	62 1d       	extu.w	r1,r2
	select(horizontal_ram_start);
	*HSA = read();
  305df6:	61 e3       	mov	r14,r1
  305df8:	71 d8       	add	#-40,r1
  305dfa:	51 1d       	mov.l	@(52,r1),r1
  305dfc:	21 21       	mov.w	r2,@r1
  305dfe:	61 e3       	mov	r14,r1
  305e00:	71 f8       	add	#-8,r1
  305e02:	92 87       	mov.w	305f14 <r61524_win_get+0x18c>,r2	! 211
  305e04:	60 23       	mov	r2,r0
  305e06:	81 1d       	mov.w	r0,@(26,r1)
	*PRDR &= ~0x10;
  305e08:	d1 44       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e0a:	61 12       	mov.l	@r1,r1
  305e0c:	61 10       	mov.b	@r1,r1
  305e0e:	63 1c       	extu.b	r1,r3
  305e10:	d1 42       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e12:	61 12       	mov.l	@r1,r1
  305e14:	e2 ef       	mov	#-17,r2
  305e16:	22 39       	and	r3,r2
  305e18:	62 2c       	extu.b	r2,r2
  305e1a:	21 20       	mov.b	r2,@r1
  305e1c:	00 ab       	synco	
	*intf = reg;
  305e1e:	d1 40       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305e20:	61 12       	mov.l	@r1,r1
  305e22:	62 e3       	mov	r14,r2
  305e24:	72 f8       	add	#-8,r2
  305e26:	85 2d       	mov.w	@(26,r2),r0
  305e28:	62 03       	mov	r0,r2
  305e2a:	21 21       	mov.w	r2,@r1
  305e2c:	00 ab       	synco	
	*PRDR |= 0x10;
  305e2e:	d1 3b       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e30:	61 12       	mov.l	@r1,r1
  305e32:	61 10       	mov.b	@r1,r1
  305e34:	62 1c       	extu.b	r1,r2
  305e36:	d1 39       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e38:	61 12       	mov.l	@r1,r1
  305e3a:	e3 10       	mov	#16,r3
  305e3c:	22 3b       	or	r3,r2
  305e3e:	62 2c       	extu.b	r2,r2
  305e40:	21 20       	mov.b	r2,@r1
  305e42:	00 ab       	synco	
}
  305e44:	00 09       	nop	
	return *intf;
  305e46:	d1 36       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305e48:	61 12       	mov.l	@r1,r1
  305e4a:	61 11       	mov.w	@r1,r1
  305e4c:	62 1d       	extu.w	r1,r2
	select(horizontal_ram_end);
	*HEA = read();
  305e4e:	61 e3       	mov	r14,r1
  305e50:	71 d8       	add	#-40,r1
  305e52:	51 1c       	mov.l	@(48,r1),r1
  305e54:	21 21       	mov.w	r2,@r1
  305e56:	61 e3       	mov	r14,r1
  305e58:	71 f8       	add	#-8,r1
  305e5a:	92 5c       	mov.w	305f16 <r61524_win_get+0x18e>,r2	! 212
  305e5c:	60 23       	mov	r2,r0
  305e5e:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  305e60:	d1 2e       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e62:	61 12       	mov.l	@r1,r1
  305e64:	61 10       	mov.b	@r1,r1
  305e66:	63 1c       	extu.b	r1,r3
  305e68:	d1 2c       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e6a:	61 12       	mov.l	@r1,r1
  305e6c:	e2 ef       	mov	#-17,r2
  305e6e:	22 39       	and	r3,r2
  305e70:	62 2c       	extu.b	r2,r2
  305e72:	21 20       	mov.b	r2,@r1
  305e74:	00 ab       	synco	
	*intf = reg;
  305e76:	d1 2a       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305e78:	61 12       	mov.l	@r1,r1
  305e7a:	62 e3       	mov	r14,r2
  305e7c:	72 f8       	add	#-8,r2
  305e7e:	85 2e       	mov.w	@(28,r2),r0
  305e80:	62 03       	mov	r0,r2
  305e82:	21 21       	mov.w	r2,@r1
  305e84:	00 ab       	synco	
	*PRDR |= 0x10;
  305e86:	d1 25       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e88:	61 12       	mov.l	@r1,r1
  305e8a:	61 10       	mov.b	@r1,r1
  305e8c:	62 1c       	extu.b	r1,r2
  305e8e:	d1 23       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305e90:	61 12       	mov.l	@r1,r1
  305e92:	e3 10       	mov	#16,r3
  305e94:	22 3b       	or	r3,r2
  305e96:	62 2c       	extu.b	r2,r2
  305e98:	21 20       	mov.b	r2,@r1
  305e9a:	00 ab       	synco	
}
  305e9c:	00 09       	nop	
	return *intf;
  305e9e:	d1 20       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305ea0:	61 12       	mov.l	@r1,r1
  305ea2:	61 11       	mov.w	@r1,r1
  305ea4:	62 1d       	extu.w	r1,r2

	select(vertical_ram_start);
	*VSA = read();
  305ea6:	61 e3       	mov	r14,r1
  305ea8:	71 d8       	add	#-40,r1
  305eaa:	51 1b       	mov.l	@(44,r1),r1
  305eac:	21 21       	mov.w	r2,@r1
  305eae:	61 e3       	mov	r14,r1
  305eb0:	71 f8       	add	#-8,r1
  305eb2:	92 31       	mov.w	305f18 <r61524_win_get+0x190>,r2	! 213
  305eb4:	60 23       	mov	r2,r0
  305eb6:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  305eb8:	d1 18       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305eba:	61 12       	mov.l	@r1,r1
  305ebc:	61 10       	mov.b	@r1,r1
  305ebe:	63 1c       	extu.b	r1,r3
  305ec0:	d1 16       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305ec2:	61 12       	mov.l	@r1,r1
  305ec4:	e2 ef       	mov	#-17,r2
  305ec6:	22 39       	and	r3,r2
  305ec8:	62 2c       	extu.b	r2,r2
  305eca:	21 20       	mov.b	r2,@r1
  305ecc:	00 ab       	synco	
	*intf = reg;
  305ece:	d1 14       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305ed0:	61 12       	mov.l	@r1,r1
  305ed2:	62 e3       	mov	r14,r2
  305ed4:	72 f8       	add	#-8,r2
  305ed6:	85 2f       	mov.w	@(30,r2),r0
  305ed8:	62 03       	mov	r0,r2
  305eda:	21 21       	mov.w	r2,@r1
  305edc:	00 ab       	synco	
	*PRDR |= 0x10;
  305ede:	d1 0f       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305ee0:	61 12       	mov.l	@r1,r1
  305ee2:	61 10       	mov.b	@r1,r1
  305ee4:	62 1c       	extu.b	r1,r2
  305ee6:	d1 0d       	mov.l	305f1c <r61524_win_get+0x194>,r1	! 81016a4 <PRDR>
  305ee8:	61 12       	mov.l	@r1,r1
  305eea:	e3 10       	mov	#16,r3
  305eec:	22 3b       	or	r3,r2
  305eee:	62 2c       	extu.b	r2,r2
  305ef0:	21 20       	mov.b	r2,@r1
  305ef2:	00 ab       	synco	
}
  305ef4:	00 09       	nop	
	return *intf;
  305ef6:	d1 0a       	mov.l	305f20 <r61524_win_get+0x198>,r1	! 81016a0 <intf>
  305ef8:	61 12       	mov.l	@r1,r1
  305efa:	61 11       	mov.w	@r1,r1
  305efc:	62 1d       	extu.w	r1,r2
	select(vertical_ram_end);
	*VEA = read();
  305efe:	61 e3       	mov	r14,r1
  305f00:	71 d8       	add	#-40,r1
  305f02:	51 1a       	mov.l	@(40,r1),r1
  305f04:	21 21       	mov.w	r2,@r1
}
  305f06:	00 09       	nop	
  305f08:	7e 18       	add	#24,r14
  305f0a:	6f e3       	mov	r14,r15
  305f0c:	6e f6       	mov.l	@r15+,r14
  305f0e:	00 0b       	rts	
  305f10:	00 09       	nop	
  305f12:	02 10       	.word 0x0210
  305f14:	02 11       	.word 0x0211
  305f16:	02 12       	stc	gbr,r2
  305f18:	02 13       	.word 0x0213
  305f1a:	00 09       	nop	
  305f1c:	08 10       	.word 0x0810
  305f1e:	16 a4       	mov.l	r10,@(16,r6)
  305f20:	08 10       	.word 0x0810
  305f22:	16 a0       	mov.l	r10,@(0,r6)

00305f24 <r61524_win_set>:

void r61524_win_set(uint16_t HSA, uint16_t HEA, uint16_t VSA, uint16_t VEA)
{
  305f24:	2f e6       	mov.l	r14,@-r15
  305f26:	7f e0       	add	#-32,r15
  305f28:	6e f3       	mov	r15,r14
  305f2a:	62 43       	mov	r4,r2
  305f2c:	63 73       	mov	r7,r3
  305f2e:	61 e3       	mov	r14,r1
  305f30:	60 23       	mov	r2,r0
  305f32:	81 16       	mov.w	r0,@(12,r1)
  305f34:	61 e3       	mov	r14,r1
  305f36:	62 53       	mov	r5,r2
  305f38:	60 23       	mov	r2,r0
  305f3a:	81 14       	mov.w	r0,@(8,r1)
  305f3c:	61 e3       	mov	r14,r1
  305f3e:	62 63       	mov	r6,r2
  305f40:	60 23       	mov	r2,r0
  305f42:	81 12       	mov.w	r0,@(4,r1)
  305f44:	61 e3       	mov	r14,r1
  305f46:	62 33       	mov	r3,r2
  305f48:	21 21       	mov.w	r2,@r1
  305f4a:	61 e3       	mov	r14,r1
  305f4c:	92 c2       	mov.w	3060d4 <r61524_win_set+0x1b0>,r2	! 210
  305f4e:	60 23       	mov	r2,r0
  305f50:	81 18       	mov.w	r0,@(16,r1)
	*PRDR &= ~0x10;
  305f52:	d1 62       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305f54:	61 12       	mov.l	@r1,r1
  305f56:	61 10       	mov.b	@r1,r1
  305f58:	63 1c       	extu.b	r1,r3
  305f5a:	d1 60       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305f5c:	61 12       	mov.l	@r1,r1
  305f5e:	e2 ef       	mov	#-17,r2
  305f60:	22 39       	and	r3,r2
  305f62:	62 2c       	extu.b	r2,r2
  305f64:	21 20       	mov.b	r2,@r1
  305f66:	00 ab       	synco	
	*intf = reg;
  305f68:	d1 5d       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  305f6a:	61 12       	mov.l	@r1,r1
  305f6c:	62 e3       	mov	r14,r2
  305f6e:	85 28       	mov.w	@(16,r2),r0
  305f70:	62 03       	mov	r0,r2
  305f72:	21 21       	mov.w	r2,@r1
  305f74:	00 ab       	synco	
	*PRDR |= 0x10;
  305f76:	d1 59       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305f78:	61 12       	mov.l	@r1,r1
  305f7a:	61 10       	mov.b	@r1,r1
  305f7c:	62 1c       	extu.b	r1,r2
  305f7e:	d1 57       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305f80:	61 12       	mov.l	@r1,r1
  305f82:	e3 10       	mov	#16,r3
  305f84:	22 3b       	or	r3,r2
  305f86:	62 2c       	extu.b	r2,r2
  305f88:	21 20       	mov.b	r2,@r1
  305f8a:	00 ab       	synco	
}
  305f8c:	00 09       	nop	
	select(horizontal_ram_start);
	write(HSA);
  305f8e:	61 e3       	mov	r14,r1
  305f90:	85 16       	mov.w	@(12,r1),r0
  305f92:	61 03       	mov	r0,r1
  305f94:	62 1d       	extu.w	r1,r2
  305f96:	61 e3       	mov	r14,r1
  305f98:	60 23       	mov	r2,r0
  305f9a:	81 19       	mov.w	r0,@(18,r1)
	*intf = data;
  305f9c:	d1 50       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  305f9e:	61 12       	mov.l	@r1,r1
  305fa0:	62 e3       	mov	r14,r2
  305fa2:	85 29       	mov.w	@(18,r2),r0
  305fa4:	62 03       	mov	r0,r2
  305fa6:	21 21       	mov.w	r2,@r1
}
  305fa8:	00 09       	nop	
  305faa:	61 e3       	mov	r14,r1
  305fac:	92 93       	mov.w	3060d6 <r61524_win_set+0x1b2>,r2	! 211
  305fae:	60 23       	mov	r2,r0
  305fb0:	81 1a       	mov.w	r0,@(20,r1)
	*PRDR &= ~0x10;
  305fb2:	d1 4a       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305fb4:	61 12       	mov.l	@r1,r1
  305fb6:	61 10       	mov.b	@r1,r1
  305fb8:	63 1c       	extu.b	r1,r3
  305fba:	d1 48       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305fbc:	61 12       	mov.l	@r1,r1
  305fbe:	e2 ef       	mov	#-17,r2
  305fc0:	22 39       	and	r3,r2
  305fc2:	62 2c       	extu.b	r2,r2
  305fc4:	21 20       	mov.b	r2,@r1
  305fc6:	00 ab       	synco	
	*intf = reg;
  305fc8:	d1 45       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  305fca:	61 12       	mov.l	@r1,r1
  305fcc:	62 e3       	mov	r14,r2
  305fce:	85 2a       	mov.w	@(20,r2),r0
  305fd0:	62 03       	mov	r0,r2
  305fd2:	21 21       	mov.w	r2,@r1
  305fd4:	00 ab       	synco	
	*PRDR |= 0x10;
  305fd6:	d1 41       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305fd8:	61 12       	mov.l	@r1,r1
  305fda:	61 10       	mov.b	@r1,r1
  305fdc:	62 1c       	extu.b	r1,r2
  305fde:	d1 3f       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  305fe0:	61 12       	mov.l	@r1,r1
  305fe2:	e3 10       	mov	#16,r3
  305fe4:	22 3b       	or	r3,r2
  305fe6:	62 2c       	extu.b	r2,r2
  305fe8:	21 20       	mov.b	r2,@r1
  305fea:	00 ab       	synco	
}
  305fec:	00 09       	nop	
	select(horizontal_ram_end);
	write(HEA);
  305fee:	61 e3       	mov	r14,r1
  305ff0:	85 14       	mov.w	@(8,r1),r0
  305ff2:	61 03       	mov	r0,r1
  305ff4:	62 1d       	extu.w	r1,r2
  305ff6:	61 e3       	mov	r14,r1
  305ff8:	60 23       	mov	r2,r0
  305ffa:	81 1b       	mov.w	r0,@(22,r1)
	*intf = data;
  305ffc:	d1 38       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  305ffe:	61 12       	mov.l	@r1,r1
  306000:	62 e3       	mov	r14,r2
  306002:	85 2b       	mov.w	@(22,r2),r0
  306004:	62 03       	mov	r0,r2
  306006:	21 21       	mov.w	r2,@r1
}
  306008:	00 09       	nop	
  30600a:	61 e3       	mov	r14,r1
  30600c:	92 64       	mov.w	3060d8 <r61524_win_set+0x1b4>,r2	! 212
  30600e:	60 23       	mov	r2,r0
  306010:	81 1c       	mov.w	r0,@(24,r1)
	*PRDR &= ~0x10;
  306012:	d1 32       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  306014:	61 12       	mov.l	@r1,r1
  306016:	61 10       	mov.b	@r1,r1
  306018:	63 1c       	extu.b	r1,r3
  30601a:	d1 30       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  30601c:	61 12       	mov.l	@r1,r1
  30601e:	e2 ef       	mov	#-17,r2
  306020:	22 39       	and	r3,r2
  306022:	62 2c       	extu.b	r2,r2
  306024:	21 20       	mov.b	r2,@r1
  306026:	00 ab       	synco	
	*intf = reg;
  306028:	d1 2d       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  30602a:	61 12       	mov.l	@r1,r1
  30602c:	62 e3       	mov	r14,r2
  30602e:	85 2c       	mov.w	@(24,r2),r0
  306030:	62 03       	mov	r0,r2
  306032:	21 21       	mov.w	r2,@r1
  306034:	00 ab       	synco	
	*PRDR |= 0x10;
  306036:	d1 29       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  306038:	61 12       	mov.l	@r1,r1
  30603a:	61 10       	mov.b	@r1,r1
  30603c:	62 1c       	extu.b	r1,r2
  30603e:	d1 27       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  306040:	61 12       	mov.l	@r1,r1
  306042:	e3 10       	mov	#16,r3
  306044:	22 3b       	or	r3,r2
  306046:	62 2c       	extu.b	r2,r2
  306048:	21 20       	mov.b	r2,@r1
  30604a:	00 ab       	synco	
}
  30604c:	00 09       	nop	

	select(vertical_ram_start);
	write(VSA);
  30604e:	61 e3       	mov	r14,r1
  306050:	85 12       	mov.w	@(4,r1),r0
  306052:	61 03       	mov	r0,r1
  306054:	62 1d       	extu.w	r1,r2
  306056:	61 e3       	mov	r14,r1
  306058:	60 23       	mov	r2,r0
  30605a:	81 1d       	mov.w	r0,@(26,r1)
	*intf = data;
  30605c:	d1 20       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  30605e:	61 12       	mov.l	@r1,r1
  306060:	62 e3       	mov	r14,r2
  306062:	85 2d       	mov.w	@(26,r2),r0
  306064:	62 03       	mov	r0,r2
  306066:	21 21       	mov.w	r2,@r1
}
  306068:	00 09       	nop	
  30606a:	61 e3       	mov	r14,r1
  30606c:	92 35       	mov.w	3060da <r61524_win_set+0x1b6>,r2	! 213
  30606e:	60 23       	mov	r2,r0
  306070:	81 1e       	mov.w	r0,@(28,r1)
	*PRDR &= ~0x10;
  306072:	d1 1a       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  306074:	61 12       	mov.l	@r1,r1
  306076:	61 10       	mov.b	@r1,r1
  306078:	63 1c       	extu.b	r1,r3
  30607a:	d1 18       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  30607c:	61 12       	mov.l	@r1,r1
  30607e:	e2 ef       	mov	#-17,r2
  306080:	22 39       	and	r3,r2
  306082:	62 2c       	extu.b	r2,r2
  306084:	21 20       	mov.b	r2,@r1
  306086:	00 ab       	synco	
	*intf = reg;
  306088:	d1 15       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  30608a:	61 12       	mov.l	@r1,r1
  30608c:	62 e3       	mov	r14,r2
  30608e:	85 2e       	mov.w	@(28,r2),r0
  306090:	62 03       	mov	r0,r2
  306092:	21 21       	mov.w	r2,@r1
  306094:	00 ab       	synco	
	*PRDR |= 0x10;
  306096:	d1 11       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  306098:	61 12       	mov.l	@r1,r1
  30609a:	61 10       	mov.b	@r1,r1
  30609c:	62 1c       	extu.b	r1,r2
  30609e:	d1 0f       	mov.l	3060dc <r61524_win_set+0x1b8>,r1	! 81016a4 <PRDR>
  3060a0:	61 12       	mov.l	@r1,r1
  3060a2:	e3 10       	mov	#16,r3
  3060a4:	22 3b       	or	r3,r2
  3060a6:	62 2c       	extu.b	r2,r2
  3060a8:	21 20       	mov.b	r2,@r1
  3060aa:	00 ab       	synco	
}
  3060ac:	00 09       	nop	
	select(vertical_ram_end);
	write(VEA);
  3060ae:	61 e3       	mov	r14,r1
  3060b0:	61 11       	mov.w	@r1,r1
  3060b2:	62 1d       	extu.w	r1,r2
  3060b4:	61 e3       	mov	r14,r1
  3060b6:	60 23       	mov	r2,r0
  3060b8:	81 1f       	mov.w	r0,@(30,r1)
	*intf = data;
  3060ba:	d1 09       	mov.l	3060e0 <r61524_win_set+0x1bc>,r1	! 81016a0 <intf>
  3060bc:	61 12       	mov.l	@r1,r1
  3060be:	62 e3       	mov	r14,r2
  3060c0:	85 2f       	mov.w	@(30,r2),r0
  3060c2:	62 03       	mov	r0,r2
  3060c4:	21 21       	mov.w	r2,@r1
}
  3060c6:	00 09       	nop	
}
  3060c8:	00 09       	nop	
  3060ca:	7e 20       	add	#32,r14
  3060cc:	6f e3       	mov	r14,r15
  3060ce:	6e f6       	mov.l	@r15+,r14
  3060d0:	00 0b       	rts	
  3060d2:	00 09       	nop	
  3060d4:	02 10       	.word 0x0210
  3060d6:	02 11       	.word 0x0211
  3060d8:	02 12       	stc	gbr,r2
  3060da:	02 13       	.word 0x0213
  3060dc:	08 10       	.word 0x0810
  3060de:	16 a4       	mov.l	r10,@(16,r6)
  3060e0:	08 10       	.word 0x0810
  3060e2:	16 a0       	mov.l	r10,@(0,r6)

003060e4 <r61524_start_frame>:
//---

/* TODO: r61524: update, backlight, brightness, gamma */

void r61524_start_frame(int xmin, int xmax, int ymin, int ymax)
{
  3060e4:	2f e6       	mov.l	r14,@-r15
  3060e6:	4f 22       	sts.l	pr,@-r15
  3060e8:	7f e4       	add	#-28,r15
  3060ea:	6e f3       	mov	r15,r14
  3060ec:	61 e3       	mov	r14,r1
  3060ee:	71 dc       	add	#-36,r1
  3060f0:	11 4c       	mov.l	r4,@(48,r1)
  3060f2:	61 e3       	mov	r14,r1
  3060f4:	71 dc       	add	#-36,r1
  3060f6:	11 5b       	mov.l	r5,@(44,r1)
  3060f8:	61 e3       	mov	r14,r1
  3060fa:	71 dc       	add	#-36,r1
  3060fc:	11 6a       	mov.l	r6,@(40,r1)
  3060fe:	61 e3       	mov	r14,r1
  306100:	71 dc       	add	#-36,r1
  306102:	11 79       	mov.l	r7,@(36,r1)
	/* Move the window to the desired region, then select address 0 */
	r61524_win_set(395-xmax, 395-xmin, ymin, ymax);
  306104:	61 e3       	mov	r14,r1
  306106:	71 dc       	add	#-36,r1
  306108:	51 1b       	mov.l	@(44,r1),r1
  30610a:	62 1d       	extu.w	r1,r2
  30610c:	91 a6       	mov.w	30625c <r61524_start_frame+0x178>,r1	! 18b
  30610e:	31 28       	sub	r2,r1
  306110:	61 1d       	extu.w	r1,r1
  306112:	63 13       	mov	r1,r3
  306114:	61 e3       	mov	r14,r1
  306116:	71 dc       	add	#-36,r1
  306118:	51 1c       	mov.l	@(48,r1),r1
  30611a:	62 1d       	extu.w	r1,r2
  30611c:	91 9e       	mov.w	30625c <r61524_start_frame+0x178>,r1	! 18b
  30611e:	31 28       	sub	r2,r1
  306120:	61 1d       	extu.w	r1,r1
  306122:	62 13       	mov	r1,r2
  306124:	61 e3       	mov	r14,r1
  306126:	71 dc       	add	#-36,r1
  306128:	51 1a       	mov.l	@(40,r1),r1
  30612a:	61 1d       	extu.w	r1,r1
  30612c:	66 13       	mov	r1,r6
  30612e:	61 e3       	mov	r14,r1
  306130:	71 dc       	add	#-36,r1
  306132:	51 19       	mov.l	@(36,r1),r1
  306134:	61 1d       	extu.w	r1,r1
  306136:	67 13       	mov	r1,r7
  306138:	65 23       	mov	r2,r5
  30613a:	64 33       	mov	r3,r4
  30613c:	d1 49       	mov.l	306264 <r61524_start_frame+0x180>,r1	! 305f24 <r61524_win_set>
  30613e:	41 0b       	jsr	@r1
  306140:	00 09       	nop	
  306142:	61 e3       	mov	r14,r1
  306144:	71 fc       	add	#-4,r1
  306146:	92 8a       	mov.w	30625e <r61524_start_frame+0x17a>,r2	! 200
  306148:	60 23       	mov	r2,r0
  30614a:	81 1b       	mov.w	r0,@(22,r1)
	*PRDR &= ~0x10;
  30614c:	d1 46       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  30614e:	61 12       	mov.l	@r1,r1
  306150:	61 10       	mov.b	@r1,r1
  306152:	63 1c       	extu.b	r1,r3
  306154:	d1 44       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  306156:	61 12       	mov.l	@r1,r1
  306158:	e2 ef       	mov	#-17,r2
  30615a:	22 39       	and	r3,r2
  30615c:	62 2c       	extu.b	r2,r2
  30615e:	21 20       	mov.b	r2,@r1
  306160:	00 ab       	synco	
	*intf = reg;
  306162:	d1 42       	mov.l	30626c <r61524_start_frame+0x188>,r1	! 81016a0 <intf>
  306164:	61 12       	mov.l	@r1,r1
  306166:	62 e3       	mov	r14,r2
  306168:	72 fc       	add	#-4,r2
  30616a:	85 2b       	mov.w	@(22,r2),r0
  30616c:	62 03       	mov	r0,r2
  30616e:	21 21       	mov.w	r2,@r1
  306170:	00 ab       	synco	
	*PRDR |= 0x10;
  306172:	d1 3d       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  306174:	61 12       	mov.l	@r1,r1
  306176:	61 10       	mov.b	@r1,r1
  306178:	62 1c       	extu.b	r1,r2
  30617a:	d1 3b       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  30617c:	61 12       	mov.l	@r1,r1
  30617e:	e3 10       	mov	#16,r3
  306180:	22 3b       	or	r3,r2
  306182:	62 2c       	extu.b	r2,r2
  306184:	21 20       	mov.b	r2,@r1
  306186:	00 ab       	synco	
}
  306188:	00 09       	nop	
  30618a:	61 e3       	mov	r14,r1
  30618c:	71 fc       	add	#-4,r1
  30618e:	e2 00       	mov	#0,r2
  306190:	60 23       	mov	r2,r0
  306192:	81 1c       	mov.w	r0,@(24,r1)
	*intf = data;
  306194:	d1 35       	mov.l	30626c <r61524_start_frame+0x188>,r1	! 81016a0 <intf>
  306196:	61 12       	mov.l	@r1,r1
  306198:	62 e3       	mov	r14,r2
  30619a:	72 fc       	add	#-4,r2
  30619c:	85 2c       	mov.w	@(24,r2),r0
  30619e:	62 03       	mov	r0,r2
  3061a0:	21 21       	mov.w	r2,@r1
}
  3061a2:	00 09       	nop	
  3061a4:	61 e3       	mov	r14,r1
  3061a6:	71 fc       	add	#-4,r1
  3061a8:	92 5a       	mov.w	306260 <r61524_start_frame+0x17c>,r2	! 201
  3061aa:	60 23       	mov	r2,r0
  3061ac:	81 1d       	mov.w	r0,@(26,r1)
	*PRDR &= ~0x10;
  3061ae:	d1 2e       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  3061b0:	61 12       	mov.l	@r1,r1
  3061b2:	61 10       	mov.b	@r1,r1
  3061b4:	63 1c       	extu.b	r1,r3
  3061b6:	d1 2c       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  3061b8:	61 12       	mov.l	@r1,r1
  3061ba:	e2 ef       	mov	#-17,r2
  3061bc:	22 39       	and	r3,r2
  3061be:	62 2c       	extu.b	r2,r2
  3061c0:	21 20       	mov.b	r2,@r1
  3061c2:	00 ab       	synco	
	*intf = reg;
  3061c4:	d1 29       	mov.l	30626c <r61524_start_frame+0x188>,r1	! 81016a0 <intf>
  3061c6:	61 12       	mov.l	@r1,r1
  3061c8:	62 e3       	mov	r14,r2
  3061ca:	72 fc       	add	#-4,r2
  3061cc:	85 2d       	mov.w	@(26,r2),r0
  3061ce:	62 03       	mov	r0,r2
  3061d0:	21 21       	mov.w	r2,@r1
  3061d2:	00 ab       	synco	
	*PRDR |= 0x10;
  3061d4:	d1 24       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  3061d6:	61 12       	mov.l	@r1,r1
  3061d8:	61 10       	mov.b	@r1,r1
  3061da:	62 1c       	extu.b	r1,r2
  3061dc:	d1 22       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  3061de:	61 12       	mov.l	@r1,r1
  3061e0:	e3 10       	mov	#16,r3
  3061e2:	22 3b       	or	r3,r2
  3061e4:	62 2c       	extu.b	r2,r2
  3061e6:	21 20       	mov.b	r2,@r1
  3061e8:	00 ab       	synco	
}
  3061ea:	00 09       	nop	
  3061ec:	61 e3       	mov	r14,r1
  3061ee:	71 fc       	add	#-4,r1
  3061f0:	e2 00       	mov	#0,r2
  3061f2:	60 23       	mov	r2,r0
  3061f4:	81 1e       	mov.w	r0,@(28,r1)
	*intf = data;
  3061f6:	d1 1d       	mov.l	30626c <r61524_start_frame+0x188>,r1	! 81016a0 <intf>
  3061f8:	61 12       	mov.l	@r1,r1
  3061fa:	62 e3       	mov	r14,r2
  3061fc:	72 fc       	add	#-4,r2
  3061fe:	85 2e       	mov.w	@(28,r2),r0
  306200:	62 03       	mov	r0,r2
  306202:	21 21       	mov.w	r2,@r1
}
  306204:	00 09       	nop	
  306206:	61 e3       	mov	r14,r1
  306208:	71 fc       	add	#-4,r1
  30620a:	92 2a       	mov.w	306262 <r61524_start_frame+0x17e>,r2	! 202
  30620c:	60 23       	mov	r2,r0
  30620e:	81 1f       	mov.w	r0,@(30,r1)
	*PRDR &= ~0x10;
  306210:	d1 15       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  306212:	61 12       	mov.l	@r1,r1
  306214:	61 10       	mov.b	@r1,r1
  306216:	63 1c       	extu.b	r1,r3
  306218:	d1 13       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  30621a:	61 12       	mov.l	@r1,r1
  30621c:	e2 ef       	mov	#-17,r2
  30621e:	22 39       	and	r3,r2
  306220:	62 2c       	extu.b	r2,r2
  306222:	21 20       	mov.b	r2,@r1
  306224:	00 ab       	synco	
	*intf = reg;
  306226:	d1 11       	mov.l	30626c <r61524_start_frame+0x188>,r1	! 81016a0 <intf>
  306228:	61 12       	mov.l	@r1,r1
  30622a:	62 e3       	mov	r14,r2
  30622c:	72 fc       	add	#-4,r2
  30622e:	85 2f       	mov.w	@(30,r2),r0
  306230:	62 03       	mov	r0,r2
  306232:	21 21       	mov.w	r2,@r1
  306234:	00 ab       	synco	
	*PRDR |= 0x10;
  306236:	d1 0c       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  306238:	61 12       	mov.l	@r1,r1
  30623a:	61 10       	mov.b	@r1,r1
  30623c:	62 1c       	extu.b	r1,r2
  30623e:	d1 0a       	mov.l	306268 <r61524_start_frame+0x184>,r1	! 81016a4 <PRDR>
  306240:	61 12       	mov.l	@r1,r1
  306242:	e3 10       	mov	#16,r3
  306244:	22 3b       	or	r3,r2
  306246:	62 2c       	extu.b	r2,r2
  306248:	21 20       	mov.b	r2,@r1
  30624a:	00 ab       	synco	
}
  30624c:	00 09       	nop	
	select(ram_address_vertical);
	write(0);

	/* Bind address 0xb4000000 to the data write command */
	select(write_data);
}
  30624e:	00 09       	nop	
  306250:	7e 1c       	add	#28,r14
  306252:	6f e3       	mov	r14,r15
  306254:	4f 26       	lds.l	@r15+,pr
  306256:	6e f6       	mov.l	@r15+,r14
  306258:	00 0b       	rts	
  30625a:	00 09       	nop	
  30625c:	01 8b       	.word 0x018b
  30625e:	02 00       	.word 0x0200
  306260:	02 01       	.word 0x0201
  306262:	02 02       	stc	sr,r2
  306264:	00 30       	.word 0x0030
  306266:	5f 24       	mov.l	@(16,r2),r15
  306268:	08 10       	.word 0x0810
  30626a:	16 a4       	mov.l	r10,@(16,r6)
  30626c:	08 10       	.word 0x0810
  30626e:	16 a0       	mov.l	r10,@(0,r6)

00306270 <r61524_display>:

void r61524_display(uint16_t *vram, int start, int height, int method)
{
  306270:	2f e6       	mov.l	r14,@-r15
  306272:	4f 22       	sts.l	pr,@-r15
  306274:	7f a8       	add	#-88,r15
  306276:	6e f3       	mov	r15,r14
  306278:	61 e3       	mov	r14,r1
  30627a:	71 18       	add	#24,r1
  30627c:	11 45       	mov.l	r4,@(20,r1)
  30627e:	61 e3       	mov	r14,r1
  306280:	71 18       	add	#24,r1
  306282:	11 54       	mov.l	r5,@(16,r1)
  306284:	61 e3       	mov	r14,r1
  306286:	71 18       	add	#24,r1
  306288:	11 63       	mov.l	r6,@(12,r1)
  30628a:	61 e3       	mov	r14,r1
  30628c:	71 18       	add	#24,r1
  30628e:	11 72       	mov.l	r7,@(8,r1)
	/* Wait for any transfer to finish before using the screen, otherwise
	   the DMA might write data *while* we're sending commands! */
	dma_transfer_wait(0);
  306290:	e4 00       	mov	#0,r4
  306292:	d1 66       	mov.l	30642c <r61524_display+0x1bc>,r1	! 307ec8 <dma_transfer_wait>
  306294:	41 0b       	jsr	@r1
  306296:	00 09       	nop	

	r61524_start_frame(0, 395, start, start + height - 1);
  306298:	62 e3       	mov	r14,r2
  30629a:	72 18       	add	#24,r2
  30629c:	61 e3       	mov	r14,r1
  30629e:	71 18       	add	#24,r1
  3062a0:	52 24       	mov.l	@(16,r2),r2
  3062a2:	51 13       	mov.l	@(12,r1),r1
  3062a4:	31 2c       	add	r2,r1
  3062a6:	63 13       	mov	r1,r3
  3062a8:	73 ff       	add	#-1,r3
  3062aa:	61 e3       	mov	r14,r1
  3062ac:	71 18       	add	#24,r1
  3062ae:	92 b9       	mov.w	306424 <r61524_display+0x1b4>,r2	! 18b
  3062b0:	67 33       	mov	r3,r7
  3062b2:	56 14       	mov.l	@(16,r1),r6
  3062b4:	65 23       	mov	r2,r5
  3062b6:	e4 00       	mov	#0,r4
  3062b8:	d1 5d       	mov.l	306430 <r61524_display+0x1c0>,r1	! 3060e4 <r61524_start_frame>
  3062ba:	41 0b       	jsr	@r1
  3062bc:	00 09       	nop	

	if(method == R61524_CPU)
  3062be:	61 e3       	mov	r14,r1
  3062c0:	71 18       	add	#24,r1
  3062c2:	52 12       	mov.l	@(8,r1),r2
  3062c4:	e1 02       	mov	#2,r1
  3062c6:	32 10       	cmp/eq	r1,r2
  3062c8:	8b 37       	bf	30633a <r61524_display+0xca>
	{
		for(int i = 0; i < 396 * height; i++)
  3062ca:	61 e3       	mov	r14,r1
  3062cc:	71 18       	add	#24,r1
  3062ce:	e2 00       	mov	#0,r2
  3062d0:	11 2f       	mov.l	r2,@(60,r1)
  3062d2:	a0 25       	bra	306320 <r61524_display+0xb0>
  3062d4:	00 09       	nop	
			write(vram[i + 396 * start]);
  3062d6:	61 e3       	mov	r14,r1
  3062d8:	71 18       	add	#24,r1
  3062da:	52 14       	mov.l	@(16,r1),r2
  3062dc:	91 a3       	mov.w	306426 <r61524_display+0x1b6>,r1	! 18c
  3062de:	02 17       	mul.l	r1,r2
  3062e0:	02 1a       	sts	macl,r2
  3062e2:	61 e3       	mov	r14,r1
  3062e4:	71 18       	add	#24,r1
  3062e6:	51 1f       	mov.l	@(60,r1),r1
  3062e8:	31 2c       	add	r2,r1
  3062ea:	31 1c       	add	r1,r1
  3062ec:	62 e3       	mov	r14,r2
  3062ee:	72 18       	add	#24,r2
  3062f0:	52 25       	mov.l	@(20,r2),r2
  3062f2:	31 2c       	add	r2,r1
  3062f4:	61 11       	mov.w	@r1,r1
  3062f6:	61 1d       	extu.w	r1,r1
  3062f8:	62 13       	mov	r1,r2
  3062fa:	61 e3       	mov	r14,r1
  3062fc:	71 38       	add	#56,r1
  3062fe:	60 23       	mov	r2,r0
  306300:	81 17       	mov.w	r0,@(14,r1)
	*intf = data;
  306302:	d1 4c       	mov.l	306434 <r61524_display+0x1c4>,r1	! 81016a0 <intf>
  306304:	61 12       	mov.l	@r1,r1
  306306:	62 e3       	mov	r14,r2
  306308:	72 38       	add	#56,r2
  30630a:	85 27       	mov.w	@(14,r2),r0
  30630c:	62 03       	mov	r0,r2
  30630e:	21 21       	mov.w	r2,@r1
}
  306310:	00 09       	nop	
		for(int i = 0; i < 396 * height; i++)
  306312:	61 e3       	mov	r14,r1
  306314:	71 18       	add	#24,r1
  306316:	62 e3       	mov	r14,r2
  306318:	72 18       	add	#24,r2
  30631a:	52 2f       	mov.l	@(60,r2),r2
  30631c:	72 01       	add	#1,r2
  30631e:	11 2f       	mov.l	r2,@(60,r1)
  306320:	61 e3       	mov	r14,r1
  306322:	71 18       	add	#24,r1
  306324:	52 13       	mov.l	@(12,r1),r2
  306326:	91 7e       	mov.w	306426 <r61524_display+0x1b6>,r1	! 18c
  306328:	02 17       	mul.l	r1,r2
  30632a:	02 1a       	sts	macl,r2
  30632c:	61 e3       	mov	r14,r1
  30632e:	71 18       	add	#24,r1
  306330:	51 1f       	mov.l	@(60,r1),r1
  306332:	31 23       	cmp/ge	r2,r1
  306334:	8b cf       	bf	3062d6 <r61524_display+0x66>
		return;
  306336:	a0 6f       	bra	306418 <r61524_display+0x1a8>
  306338:	00 09       	nop	
	}

	void *src = (void *)vram + start * 396*2;
  30633a:	61 e3       	mov	r14,r1
  30633c:	71 18       	add	#24,r1
  30633e:	52 14       	mov.l	@(16,r1),r2
  306340:	91 72       	mov.w	306428 <r61524_display+0x1b8>,r1	! 318
  306342:	02 17       	mul.l	r1,r2
  306344:	01 1a       	sts	macl,r1
  306346:	63 13       	mov	r1,r3
  306348:	61 e3       	mov	r14,r1
  30634a:	71 18       	add	#24,r1
  30634c:	62 e3       	mov	r14,r2
  30634e:	72 18       	add	#24,r2
  306350:	52 25       	mov.l	@(20,r2),r2
  306352:	32 3c       	add	r3,r2
  306354:	11 2e       	mov.l	r2,@(56,r1)
	void *dst = (void *)0xb4000000;
  306356:	61 e3       	mov	r14,r1
  306358:	71 18       	add	#24,r1
  30635a:	d2 37       	mov.l	306438 <r61524_display+0x1c8>,r2	! b4000000
  30635c:	11 2d       	mov.l	r2,@(52,r1)

	/* The amount of data sent per row, 396*2, is not a multiple of 32. For
	   now I assume [height] is a multiple of 4, which makes the factor 32
	   appear. */
	int blocks = 99 * (height >> 2);
  30635e:	61 e3       	mov	r14,r1
  306360:	71 18       	add	#24,r1
  306362:	51 13       	mov.l	@(12,r1),r1
  306364:	41 21       	shar	r1
  306366:	41 21       	shar	r1
  306368:	63 13       	mov	r1,r3
  30636a:	62 e3       	mov	r14,r2
  30636c:	72 18       	add	#24,r2
  30636e:	61 33       	mov	r3,r1
  306370:	31 1c       	add	r1,r1
  306372:	31 3c       	add	r3,r1
  306374:	e7 05       	mov	#5,r7
  306376:	63 13       	mov	r1,r3
  306378:	43 7d       	shld	r7,r3
  30637a:	31 3c       	add	r3,r1
  30637c:	12 1c       	mov.l	r1,@(48,r2)

	if(method == R61524_DMA) {
  30637e:	61 e3       	mov	r14,r1
  306380:	71 18       	add	#24,r1
  306382:	51 12       	mov.l	@(8,r1),r1
  306384:	21 18       	tst	r1,r1
  306386:	8b 33       	bf	3063f0 <r61524_display+0x180>
		dma_transfer_async(0, DMA_32B, blocks, src, DMA_INC, dst,
  306388:	61 e3       	mov	r14,r1
  30638a:	71 18       	add	#24,r1
  30638c:	56 1c       	mov.l	@(48,r1),r6
			DMA_FIXED, GINT_CALL_NULL);
  30638e:	61 e3       	mov	r14,r1
  306390:	71 30       	add	#48,r1
  306392:	e2 00       	mov	#0,r2
  306394:	21 22       	mov.l	r2,@r1
  306396:	e2 00       	mov	#0,r2
  306398:	11 21       	mov.l	r2,@(4,r1)
  30639a:	e2 00       	mov	#0,r2
  30639c:	11 22       	mov.l	r2,@(8,r1)
  30639e:	e2 00       	mov	#0,r2
  3063a0:	11 23       	mov.l	r2,@(12,r1)
  3063a2:	e2 00       	mov	#0,r2
  3063a4:	11 24       	mov.l	r2,@(16,r1)
		dma_transfer_async(0, DMA_32B, blocks, src, DMA_INC, dst,
  3063a6:	63 e3       	mov	r14,r3
  3063a8:	73 18       	add	#24,r3
  3063aa:	61 e3       	mov	r14,r1
  3063ac:	71 30       	add	#48,r1
  3063ae:	62 f3       	mov	r15,r2
  3063b0:	72 0c       	add	#12,r2
  3063b2:	67 12       	mov.l	@r1,r7
  3063b4:	22 72       	mov.l	r7,@r2
  3063b6:	71 04       	add	#4,r1
  3063b8:	67 12       	mov.l	@r1,r7
  3063ba:	12 71       	mov.l	r7,@(4,r2)
  3063bc:	71 04       	add	#4,r1
  3063be:	67 12       	mov.l	@r1,r7
  3063c0:	12 72       	mov.l	r7,@(8,r2)
  3063c2:	71 04       	add	#4,r1
  3063c4:	67 12       	mov.l	@r1,r7
  3063c6:	12 73       	mov.l	r7,@(12,r2)
  3063c8:	71 04       	add	#4,r1
  3063ca:	67 12       	mov.l	@r1,r7
  3063cc:	12 74       	mov.l	r7,@(16,r2)
  3063ce:	71 04       	add	#4,r1
  3063d0:	e1 00       	mov	#0,r1
  3063d2:	1f 12       	mov.l	r1,@(8,r15)
  3063d4:	61 e3       	mov	r14,r1
  3063d6:	71 18       	add	#24,r1
  3063d8:	51 1d       	mov.l	@(52,r1),r1
  3063da:	1f 11       	mov.l	r1,@(4,r15)
  3063dc:	e1 01       	mov	#1,r1
  3063de:	2f 12       	mov.l	r1,@r15
  3063e0:	57 3e       	mov.l	@(56,r3),r7
  3063e2:	e5 04       	mov	#4,r5
  3063e4:	e4 00       	mov	#0,r4
  3063e6:	d1 15       	mov.l	30643c <r61524_display+0x1cc>,r1	! 307bd0 <dma_transfer_async>
  3063e8:	41 0b       	jsr	@r1
  3063ea:	00 09       	nop	
  3063ec:	a0 14       	bra	306418 <r61524_display+0x1a8>
  3063ee:	00 09       	nop	
	}
	else {
		/* Transfer atomically */
		dma_transfer_atomic(0, DMA_32B, blocks, src, DMA_INC, dst,
  3063f0:	61 e3       	mov	r14,r1
  3063f2:	71 18       	add	#24,r1
  3063f4:	53 1c       	mov.l	@(48,r1),r3
  3063f6:	61 e3       	mov	r14,r1
  3063f8:	71 18       	add	#24,r1
  3063fa:	e2 00       	mov	#0,r2
  3063fc:	1f 22       	mov.l	r2,@(8,r15)
  3063fe:	62 e3       	mov	r14,r2
  306400:	72 18       	add	#24,r2
  306402:	52 2d       	mov.l	@(52,r2),r2
  306404:	1f 21       	mov.l	r2,@(4,r15)
  306406:	e2 01       	mov	#1,r2
  306408:	2f 22       	mov.l	r2,@r15
  30640a:	57 1e       	mov.l	@(56,r1),r7
  30640c:	66 33       	mov	r3,r6
  30640e:	e5 04       	mov	#4,r5
  306410:	e4 00       	mov	#0,r4
  306412:	d1 0b       	mov.l	306440 <r61524_display+0x1d0>,r1	! 307fc4 <dma_transfer_atomic>
  306414:	41 0b       	jsr	@r1
  306416:	00 09       	nop	
			DMA_FIXED);
	}
}
  306418:	7e 58       	add	#88,r14
  30641a:	6f e3       	mov	r14,r15
  30641c:	4f 26       	lds.l	@r15+,pr
  30641e:	6e f6       	mov.l	@r15+,r14
  306420:	00 0b       	rts	
  306422:	00 09       	nop	
  306424:	01 8b       	.word 0x018b
  306426:	01 8c       	mov.b	@(r0,r8),r1
  306428:	03 18       	.word 0x0318
  30642a:	00 09       	nop	
  30642c:	00 30       	.word 0x0030
  30642e:	7e c8       	add	#-56,r14
  306430:	00 30       	.word 0x0030
  306432:	60 e4       	mov.b	@r14+,r0
  306434:	08 10       	.word 0x0810
  306436:	16 a0       	mov.l	r10,@(0,r6)
  306438:	b4 00       	bsr	306c3c <gint_image_mkcmd+0x1d2>
  30643a:	00 00       	.word 0x0000
  30643c:	00 30       	.word 0x0030
  30643e:	7b d0       	add	#-48,r11
  306440:	00 30       	.word 0x0030
  306442:	7f c4       	add	#-60,r15

00306444 <r61524_display_rect>:

void r61524_display_rect(uint16_t *vram, int xmin, int xmax, int ymin,
	int ymax)
{
  306444:	2f e6       	mov.l	r14,@-r15
  306446:	4f 22       	sts.l	pr,@-r15
  306448:	7f e4       	add	#-28,r15
  30644a:	6e f3       	mov	r15,r14
  30644c:	61 e3       	mov	r14,r1
  30644e:	71 dc       	add	#-36,r1
  306450:	11 4c       	mov.l	r4,@(48,r1)
  306452:	61 e3       	mov	r14,r1
  306454:	71 dc       	add	#-36,r1
  306456:	11 5b       	mov.l	r5,@(44,r1)
  306458:	61 e3       	mov	r14,r1
  30645a:	71 dc       	add	#-36,r1
  30645c:	11 6a       	mov.l	r6,@(40,r1)
  30645e:	61 e3       	mov	r14,r1
  306460:	71 dc       	add	#-36,r1
  306462:	11 79       	mov.l	r7,@(36,r1)
	// dma_transfer_wait(0);
	r61524_start_frame(xmin, xmax, ymin, ymax);
  306464:	63 e3       	mov	r14,r3
  306466:	73 dc       	add	#-36,r3
  306468:	62 e3       	mov	r14,r2
  30646a:	72 dc       	add	#-36,r2
  30646c:	61 e3       	mov	r14,r1
  30646e:	71 dc       	add	#-36,r1
  306470:	57 e9       	mov.l	@(36,r14),r7
  306472:	56 39       	mov.l	@(36,r3),r6
  306474:	55 2a       	mov.l	@(40,r2),r5
  306476:	54 1b       	mov.l	@(44,r1),r4
  306478:	d1 37       	mov.l	306558 <r61524_display_rect+0x114>,r1	! 3060e4 <r61524_start_frame>
  30647a:	41 0b       	jsr	@r1
  30647c:	00 09       	nop	

	vram += 396 * ymin + xmin;
  30647e:	61 e3       	mov	r14,r1
  306480:	71 dc       	add	#-36,r1
  306482:	52 19       	mov.l	@(36,r1),r2
  306484:	91 65       	mov.w	306552 <r61524_display_rect+0x10e>,r1	! 18c
  306486:	02 17       	mul.l	r1,r2
  306488:	02 1a       	sts	macl,r2
  30648a:	61 e3       	mov	r14,r1
  30648c:	71 dc       	add	#-36,r1
  30648e:	51 1b       	mov.l	@(44,r1),r1
  306490:	31 2c       	add	r2,r1
  306492:	62 13       	mov	r1,r2
  306494:	32 2c       	add	r2,r2
  306496:	61 e3       	mov	r14,r1
  306498:	71 dc       	add	#-36,r1
  30649a:	63 e3       	mov	r14,r3
  30649c:	73 dc       	add	#-36,r3
  30649e:	53 3c       	mov.l	@(48,r3),r3
  3064a0:	32 3c       	add	r3,r2
  3064a2:	11 2c       	mov.l	r2,@(48,r1)

	for(int y = 0; y < ymax - ymin + 1; y++) {
  3064a4:	61 e3       	mov	r14,r1
  3064a6:	71 dc       	add	#-36,r1
  3064a8:	e2 00       	mov	#0,r2
  3064aa:	11 2f       	mov.l	r2,@(60,r1)
  3064ac:	a0 3f       	bra	30652e <r61524_display_rect+0xea>
  3064ae:	00 09       	nop	
		for(int x = 0; x < xmax - xmin + 1; x++)
  3064b0:	61 e3       	mov	r14,r1
  3064b2:	71 dc       	add	#-36,r1
  3064b4:	e2 00       	mov	#0,r2
  3064b6:	11 2e       	mov.l	r2,@(56,r1)
  3064b8:	a0 1e       	bra	3064f8 <r61524_display_rect+0xb4>
  3064ba:	00 09       	nop	
			write(vram[x]);
  3064bc:	61 e3       	mov	r14,r1
  3064be:	71 dc       	add	#-36,r1
  3064c0:	51 1e       	mov.l	@(56,r1),r1
  3064c2:	31 1c       	add	r1,r1
  3064c4:	62 e3       	mov	r14,r2
  3064c6:	72 dc       	add	#-36,r2
  3064c8:	52 2c       	mov.l	@(48,r2),r2
  3064ca:	31 2c       	add	r2,r1
  3064cc:	61 11       	mov.w	@r1,r1
  3064ce:	61 1d       	extu.w	r1,r1
  3064d0:	62 13       	mov	r1,r2
  3064d2:	61 e3       	mov	r14,r1
  3064d4:	71 fc       	add	#-4,r1
  3064d6:	60 23       	mov	r2,r0
  3064d8:	81 1b       	mov.w	r0,@(22,r1)
	*intf = data;
  3064da:	d1 20       	mov.l	30655c <r61524_display_rect+0x118>,r1	! 81016a0 <intf>
  3064dc:	61 12       	mov.l	@r1,r1
  3064de:	62 e3       	mov	r14,r2
  3064e0:	72 fc       	add	#-4,r2
  3064e2:	85 2b       	mov.w	@(22,r2),r0
  3064e4:	62 03       	mov	r0,r2
  3064e6:	21 21       	mov.w	r2,@r1
}
  3064e8:	00 09       	nop	
		for(int x = 0; x < xmax - xmin + 1; x++)
  3064ea:	61 e3       	mov	r14,r1
  3064ec:	71 dc       	add	#-36,r1
  3064ee:	62 e3       	mov	r14,r2
  3064f0:	72 dc       	add	#-36,r2
  3064f2:	52 2e       	mov.l	@(56,r2),r2
  3064f4:	72 01       	add	#1,r2
  3064f6:	11 2e       	mov.l	r2,@(56,r1)
  3064f8:	61 e3       	mov	r14,r1
  3064fa:	71 dc       	add	#-36,r1
  3064fc:	62 e3       	mov	r14,r2
  3064fe:	72 dc       	add	#-36,r2
  306500:	51 1a       	mov.l	@(40,r1),r1
  306502:	52 2b       	mov.l	@(44,r2),r2
  306504:	31 28       	sub	r2,r1
  306506:	62 e3       	mov	r14,r2
  306508:	72 dc       	add	#-36,r2
  30650a:	52 2e       	mov.l	@(56,r2),r2
  30650c:	32 17       	cmp/gt	r1,r2
  30650e:	8b d5       	bf	3064bc <r61524_display_rect+0x78>
		vram += 396;
  306510:	61 e3       	mov	r14,r1
  306512:	71 dc       	add	#-36,r1
  306514:	62 e3       	mov	r14,r2
  306516:	72 dc       	add	#-36,r2
  306518:	52 2c       	mov.l	@(48,r2),r2
  30651a:	93 1b       	mov.w	306554 <r61524_display_rect+0x110>,r3	! 318
  30651c:	32 3c       	add	r3,r2
  30651e:	11 2c       	mov.l	r2,@(48,r1)
	for(int y = 0; y < ymax - ymin + 1; y++) {
  306520:	61 e3       	mov	r14,r1
  306522:	71 dc       	add	#-36,r1
  306524:	62 e3       	mov	r14,r2
  306526:	72 dc       	add	#-36,r2
  306528:	52 2f       	mov.l	@(60,r2),r2
  30652a:	72 01       	add	#1,r2
  30652c:	11 2f       	mov.l	r2,@(60,r1)
  30652e:	62 e3       	mov	r14,r2
  306530:	72 dc       	add	#-36,r2
  306532:	51 e9       	mov.l	@(36,r14),r1
  306534:	52 29       	mov.l	@(36,r2),r2
  306536:	31 28       	sub	r2,r1
  306538:	62 e3       	mov	r14,r2
  30653a:	72 dc       	add	#-36,r2
  30653c:	52 2f       	mov.l	@(60,r2),r2
  30653e:	32 17       	cmp/gt	r1,r2
  306540:	8b b6       	bf	3064b0 <r61524_display_rect+0x6c>
	}
}
  306542:	00 09       	nop	
  306544:	00 09       	nop	
  306546:	7e 1c       	add	#28,r14
  306548:	6f e3       	mov	r14,r15
  30654a:	4f 26       	lds.l	@r15+,pr
  30654c:	6e f6       	mov.l	@r15+,r14
  30654e:	00 0b       	rts	
  306550:	00 09       	nop	
  306552:	01 8c       	mov.b	@(r0,r8),r1
  306554:	03 18       	.word 0x0318
  306556:	00 09       	nop	
  306558:	00 30       	.word 0x0030
  30655a:	60 e4       	mov.b	@r14+,r0
  30655c:	08 10       	.word 0x0810
  30655e:	16 a0       	mov.l	r10,@(0,r6)

00306560 <hsave>:
//---
// State and driver metadata
//---

static void hsave(r61524_state_t *s)
{
  306560:	2f e6       	mov.l	r14,@-r15
  306562:	4f 22       	sts.l	pr,@-r15
  306564:	7f fc       	add	#-4,r15
  306566:	6e f3       	mov	r15,r14
  306568:	61 e3       	mov	r14,r1
  30656a:	71 c4       	add	#-60,r1
  30656c:	11 4f       	mov.l	r4,@(60,r1)
	r61524_win_get(&s->HSA, &s->HEA, &s->VSA, &s->VEA);
  30656e:	61 e3       	mov	r14,r1
  306570:	71 c4       	add	#-60,r1
  306572:	52 1f       	mov.l	@(60,r1),r2
  306574:	61 e3       	mov	r14,r1
  306576:	71 c4       	add	#-60,r1
  306578:	51 1f       	mov.l	@(60,r1),r1
  30657a:	63 13       	mov	r1,r3
  30657c:	73 02       	add	#2,r3
  30657e:	61 e3       	mov	r14,r1
  306580:	71 c4       	add	#-60,r1
  306582:	51 1f       	mov.l	@(60,r1),r1
  306584:	66 13       	mov	r1,r6
  306586:	76 04       	add	#4,r6
  306588:	61 e3       	mov	r14,r1
  30658a:	71 c4       	add	#-60,r1
  30658c:	51 1f       	mov.l	@(60,r1),r1
  30658e:	71 06       	add	#6,r1
  306590:	67 13       	mov	r1,r7
  306592:	65 33       	mov	r3,r5
  306594:	64 23       	mov	r2,r4
  306596:	d1 05       	mov.l	3065ac <hsave+0x4c>,r1	! 305d88 <r61524_win_get>
  306598:	41 0b       	jsr	@r1
  30659a:	00 09       	nop	
}
  30659c:	00 09       	nop	
  30659e:	7e 04       	add	#4,r14
  3065a0:	6f e3       	mov	r14,r15
  3065a2:	4f 26       	lds.l	@r15+,pr
  3065a4:	6e f6       	mov.l	@r15+,r14
  3065a6:	00 0b       	rts	
  3065a8:	00 09       	nop	
  3065aa:	00 09       	nop	
  3065ac:	00 30       	.word 0x0030
  3065ae:	5d 88       	mov.l	@(32,r8),r13

003065b0 <hrestore>:

static void hrestore(r61524_state_t const *s)
{
  3065b0:	2f e6       	mov.l	r14,@-r15
  3065b2:	4f 22       	sts.l	pr,@-r15
  3065b4:	7f fc       	add	#-4,r15
  3065b6:	6e f3       	mov	r15,r14
  3065b8:	61 e3       	mov	r14,r1
  3065ba:	71 c4       	add	#-60,r1
  3065bc:	11 4f       	mov.l	r4,@(60,r1)
	r61524_win_set(s->HSA, s->HEA, s->VSA, s->VEA);
  3065be:	61 e3       	mov	r14,r1
  3065c0:	71 c4       	add	#-60,r1
  3065c2:	51 1f       	mov.l	@(60,r1),r1
  3065c4:	61 11       	mov.w	@r1,r1
  3065c6:	61 1d       	extu.w	r1,r1
  3065c8:	62 13       	mov	r1,r2
  3065ca:	61 e3       	mov	r14,r1
  3065cc:	71 c4       	add	#-60,r1
  3065ce:	51 1f       	mov.l	@(60,r1),r1
  3065d0:	85 11       	mov.w	@(2,r1),r0
  3065d2:	61 03       	mov	r0,r1
  3065d4:	61 1d       	extu.w	r1,r1
  3065d6:	63 13       	mov	r1,r3
  3065d8:	61 e3       	mov	r14,r1
  3065da:	71 c4       	add	#-60,r1
  3065dc:	51 1f       	mov.l	@(60,r1),r1
  3065de:	85 12       	mov.w	@(4,r1),r0
  3065e0:	61 03       	mov	r0,r1
  3065e2:	61 1d       	extu.w	r1,r1
  3065e4:	66 13       	mov	r1,r6
  3065e6:	61 e3       	mov	r14,r1
  3065e8:	71 c4       	add	#-60,r1
  3065ea:	51 1f       	mov.l	@(60,r1),r1
  3065ec:	85 13       	mov.w	@(6,r1),r0
  3065ee:	61 03       	mov	r0,r1
  3065f0:	61 1d       	extu.w	r1,r1
  3065f2:	67 13       	mov	r1,r7
  3065f4:	65 33       	mov	r3,r5
  3065f6:	64 23       	mov	r2,r4
  3065f8:	d1 04       	mov.l	30660c <hrestore+0x5c>,r1	! 305f24 <r61524_win_set>
  3065fa:	41 0b       	jsr	@r1
  3065fc:	00 09       	nop	
}
  3065fe:	00 09       	nop	
  306600:	7e 04       	add	#4,r14
  306602:	6f e3       	mov	r14,r15
  306604:	4f 26       	lds.l	@r15+,pr
  306606:	6e f6       	mov.l	@r15+,r14
  306608:	00 0b       	rts	
  30660a:	00 09       	nop	
  30660c:	00 30       	.word 0x0030
  30660e:	5f 24       	mov.l	@(16,r2),r15

00306610 <image_alpha>:
#include <gint/image.h>

int image_alpha(int format)
{
  306610:	2f e6       	mov.l	r14,@-r15
  306612:	7f fc       	add	#-4,r15
  306614:	6e f3       	mov	r15,r14
  306616:	61 e3       	mov	r14,r1
  306618:	71 c4       	add	#-60,r1
  30661a:	11 4f       	mov.l	r4,@(60,r1)
    switch(format) {
  30661c:	61 e3       	mov	r14,r1
  30661e:	71 c4       	add	#-60,r1
  306620:	52 1f       	mov.l	@(60,r1),r2
  306622:	e1 05       	mov	#5,r1
  306624:	32 10       	cmp/eq	r1,r2
  306626:	89 16       	bt	306656 <image_alpha+0x46>
  306628:	61 e3       	mov	r14,r1
  30662a:	71 c4       	add	#-60,r1
  30662c:	52 1f       	mov.l	@(60,r1),r2
  30662e:	e1 05       	mov	#5,r1
  306630:	32 17       	cmp/gt	r1,r2
  306632:	89 16       	bt	306662 <image_alpha+0x52>
  306634:	61 e3       	mov	r14,r1
  306636:	71 c4       	add	#-60,r1
  306638:	52 1f       	mov.l	@(60,r1),r2
  30663a:	e1 01       	mov	#1,r1
  30663c:	32 10       	cmp/eq	r1,r2
  30663e:	89 07       	bt	306650 <image_alpha+0x40>
  306640:	61 e3       	mov	r14,r1
  306642:	71 c4       	add	#-60,r1
  306644:	52 1f       	mov.l	@(60,r1),r2
  306646:	e1 03       	mov	#3,r1
  306648:	32 10       	cmp/eq	r1,r2
  30664a:	89 07       	bt	30665c <image_alpha+0x4c>
  30664c:	a0 09       	bra	306662 <image_alpha+0x52>
  30664e:	00 09       	nop	
    case IMAGE_RGB565A:
        return 0x0001;
  306650:	e1 01       	mov	#1,r1
  306652:	a0 07       	bra	306664 <image_alpha+0x54>
  306654:	00 09       	nop	
    case IMAGE_P8_RGB565A:
        return -128;
  306656:	e1 80       	mov	#-128,r1
  306658:	a0 04       	bra	306664 <image_alpha+0x54>
  30665a:	00 09       	nop	
    case IMAGE_P4_RGB565A:
        return 0;
  30665c:	e1 00       	mov	#0,r1
  30665e:	a0 01       	bra	306664 <image_alpha+0x54>
  306660:	00 09       	nop	
    default:
        /* A value that cannot be found in any pixel of any format */
        return 0x10000;
  306662:	d1 03       	mov.l	306670 <image_alpha+0x60>,r1	! 10000
    }
}
  306664:	60 13       	mov	r1,r0
  306666:	7e 04       	add	#4,r14
  306668:	6f e3       	mov	r14,r15
  30666a:	6e f6       	mov.l	@r15+,r14
  30666c:	00 0b       	rts	
  30666e:	00 09       	nop	
  306670:	00 01       	.word 0x0001
	...

00306674 <GINT_CALL_SET_function>:
{
  306674:	2f e6       	mov.l	r14,@-r15
  306676:	7f fc       	add	#-4,r15
  306678:	6e f3       	mov	r15,r14
  30667a:	61 e3       	mov	r14,r1
  30667c:	71 c4       	add	#-60,r1
  30667e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  306680:	61 e3       	mov	r14,r1
  306682:	71 c4       	add	#-60,r1
  306684:	51 1f       	mov.l	@(60,r1),r1
  306686:	e2 01       	mov	#1,r2
  306688:	21 22       	mov.l	r2,@r1
	return 0;
  30668a:	e1 00       	mov	#0,r1
}
  30668c:	60 13       	mov	r1,r0
  30668e:	7e 04       	add	#4,r14
  306690:	6f e3       	mov	r14,r15
  306692:	6e f6       	mov.l	@r15+,r14
  306694:	00 0b       	rts	
  306696:	00 09       	nop	

00306698 <GINT_CALL_INC_function>:
{
  306698:	2f e6       	mov.l	r14,@-r15
  30669a:	7f fc       	add	#-4,r15
  30669c:	6e f3       	mov	r15,r14
  30669e:	61 e3       	mov	r14,r1
  3066a0:	71 c4       	add	#-60,r1
  3066a2:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3066a4:	61 e3       	mov	r14,r1
  3066a6:	71 c4       	add	#-60,r1
  3066a8:	51 1f       	mov.l	@(60,r1),r1
  3066aa:	61 12       	mov.l	@r1,r1
  3066ac:	62 13       	mov	r1,r2
  3066ae:	72 01       	add	#1,r2
  3066b0:	61 e3       	mov	r14,r1
  3066b2:	71 c4       	add	#-60,r1
  3066b4:	51 1f       	mov.l	@(60,r1),r1
  3066b6:	21 22       	mov.l	r2,@r1
	return 0;
  3066b8:	e1 00       	mov	#0,r1
}
  3066ba:	60 13       	mov	r1,r0
  3066bc:	7e 04       	add	#4,r14
  3066be:	6f e3       	mov	r14,r15
  3066c0:	6e f6       	mov.l	@r15+,r14
  3066c2:	00 0b       	rts	
  3066c4:	00 09       	nop	

003066c6 <GINT_CALL_SET_STOP_function>:
{
  3066c6:	2f e6       	mov.l	r14,@-r15
  3066c8:	7f fc       	add	#-4,r15
  3066ca:	6e f3       	mov	r15,r14
  3066cc:	61 e3       	mov	r14,r1
  3066ce:	71 c4       	add	#-60,r1
  3066d0:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3066d2:	61 e3       	mov	r14,r1
  3066d4:	71 c4       	add	#-60,r1
  3066d6:	51 1f       	mov.l	@(60,r1),r1
  3066d8:	e2 01       	mov	#1,r2
  3066da:	21 22       	mov.l	r2,@r1
	return 1;
  3066dc:	e1 01       	mov	#1,r1
}
  3066de:	60 13       	mov	r1,r0
  3066e0:	7e 04       	add	#4,r14
  3066e2:	6f e3       	mov	r14,r15
  3066e4:	6e f6       	mov.l	@r15+,r14
  3066e6:	00 0b       	rts	
  3066e8:	00 09       	nop	

003066ea <GINT_CALL_INC_STOP_function>:
{
  3066ea:	2f e6       	mov.l	r14,@-r15
  3066ec:	7f fc       	add	#-4,r15
  3066ee:	6e f3       	mov	r15,r14
  3066f0:	61 e3       	mov	r14,r1
  3066f2:	71 c4       	add	#-60,r1
  3066f4:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3066f6:	61 e3       	mov	r14,r1
  3066f8:	71 c4       	add	#-60,r1
  3066fa:	51 1f       	mov.l	@(60,r1),r1
  3066fc:	61 12       	mov.l	@r1,r1
  3066fe:	62 13       	mov	r1,r2
  306700:	72 01       	add	#1,r2
  306702:	61 e3       	mov	r14,r1
  306704:	71 c4       	add	#-60,r1
  306706:	51 1f       	mov.l	@(60,r1),r1
  306708:	21 22       	mov.l	r2,@r1
	return 1;
  30670a:	e1 01       	mov	#1,r1
}
  30670c:	60 13       	mov	r1,r0
  30670e:	7e 04       	add	#4,r14
  306710:	6f e3       	mov	r14,r15
  306712:	6e f6       	mov.l	@r15+,r14
  306714:	00 0b       	rts	
  306716:	00 09       	nop	

00306718 <gint_image_clip_input>:
#include <gint/display.h>
#include <gint/defs/util.h>

bool gint_image_clip_input(image_t const *img, struct gint_image_box *b,
	struct dwindow const *window)
{
  306718:	2f e6       	mov.l	r14,@-r15
  30671a:	7f f4       	add	#-12,r15
  30671c:	6e f3       	mov	r15,r14
  30671e:	61 e3       	mov	r14,r1
  306720:	71 cc       	add	#-52,r1
  306722:	11 4f       	mov.l	r4,@(60,r1)
  306724:	61 e3       	mov	r14,r1
  306726:	71 cc       	add	#-52,r1
  306728:	11 5e       	mov.l	r5,@(56,r1)
  30672a:	61 e3       	mov	r14,r1
  30672c:	71 cc       	add	#-52,r1
  30672e:	11 6d       	mov.l	r6,@(52,r1)
	/* Adjust the bounding box of the input image */
	if(b->left < 0) b->w += b->left, b->x -= b->left, b->left = 0;
  306730:	61 e3       	mov	r14,r1
  306732:	71 cc       	add	#-52,r1
  306734:	51 1e       	mov.l	@(56,r1),r1
  306736:	51 14       	mov.l	@(16,r1),r1
  306738:	41 11       	cmp/pz	r1
  30673a:	89 1e       	bt	30677a <gint_image_clip_input+0x62>
  30673c:	61 e3       	mov	r14,r1
  30673e:	71 cc       	add	#-52,r1
  306740:	51 1e       	mov.l	@(56,r1),r1
  306742:	52 12       	mov.l	@(8,r1),r2
  306744:	61 e3       	mov	r14,r1
  306746:	71 cc       	add	#-52,r1
  306748:	51 1e       	mov.l	@(56,r1),r1
  30674a:	51 14       	mov.l	@(16,r1),r1
  30674c:	32 1c       	add	r1,r2
  30674e:	61 e3       	mov	r14,r1
  306750:	71 cc       	add	#-52,r1
  306752:	51 1e       	mov.l	@(56,r1),r1
  306754:	11 22       	mov.l	r2,@(8,r1)
  306756:	61 e3       	mov	r14,r1
  306758:	71 cc       	add	#-52,r1
  30675a:	51 1e       	mov.l	@(56,r1),r1
  30675c:	62 12       	mov.l	@r1,r2
  30675e:	61 e3       	mov	r14,r1
  306760:	71 cc       	add	#-52,r1
  306762:	51 1e       	mov.l	@(56,r1),r1
  306764:	51 14       	mov.l	@(16,r1),r1
  306766:	32 18       	sub	r1,r2
  306768:	61 e3       	mov	r14,r1
  30676a:	71 cc       	add	#-52,r1
  30676c:	51 1e       	mov.l	@(56,r1),r1
  30676e:	21 22       	mov.l	r2,@r1
  306770:	61 e3       	mov	r14,r1
  306772:	71 cc       	add	#-52,r1
  306774:	51 1e       	mov.l	@(56,r1),r1
  306776:	e2 00       	mov	#0,r2
  306778:	11 24       	mov.l	r2,@(16,r1)
	if(b->top  < 0) b->h += b->top,  b->y -= b->top,  b->top  = 0;
  30677a:	61 e3       	mov	r14,r1
  30677c:	71 cc       	add	#-52,r1
  30677e:	51 1e       	mov.l	@(56,r1),r1
  306780:	51 15       	mov.l	@(20,r1),r1
  306782:	41 11       	cmp/pz	r1
  306784:	89 1e       	bt	3067c4 <gint_image_clip_input+0xac>
  306786:	61 e3       	mov	r14,r1
  306788:	71 cc       	add	#-52,r1
  30678a:	51 1e       	mov.l	@(56,r1),r1
  30678c:	52 13       	mov.l	@(12,r1),r2
  30678e:	61 e3       	mov	r14,r1
  306790:	71 cc       	add	#-52,r1
  306792:	51 1e       	mov.l	@(56,r1),r1
  306794:	51 15       	mov.l	@(20,r1),r1
  306796:	32 1c       	add	r1,r2
  306798:	61 e3       	mov	r14,r1
  30679a:	71 cc       	add	#-52,r1
  30679c:	51 1e       	mov.l	@(56,r1),r1
  30679e:	11 23       	mov.l	r2,@(12,r1)
  3067a0:	61 e3       	mov	r14,r1
  3067a2:	71 cc       	add	#-52,r1
  3067a4:	51 1e       	mov.l	@(56,r1),r1
  3067a6:	52 11       	mov.l	@(4,r1),r2
  3067a8:	61 e3       	mov	r14,r1
  3067aa:	71 cc       	add	#-52,r1
  3067ac:	51 1e       	mov.l	@(56,r1),r1
  3067ae:	51 15       	mov.l	@(20,r1),r1
  3067b0:	32 18       	sub	r1,r2
  3067b2:	61 e3       	mov	r14,r1
  3067b4:	71 cc       	add	#-52,r1
  3067b6:	51 1e       	mov.l	@(56,r1),r1
  3067b8:	11 21       	mov.l	r2,@(4,r1)
  3067ba:	61 e3       	mov	r14,r1
  3067bc:	71 cc       	add	#-52,r1
  3067be:	51 1e       	mov.l	@(56,r1),r1
  3067c0:	e2 00       	mov	#0,r2
  3067c2:	11 25       	mov.l	r2,@(20,r1)
	if(b->left + b->w > img->width)  b->w = img->width  - b->left;
  3067c4:	61 e3       	mov	r14,r1
  3067c6:	71 cc       	add	#-52,r1
  3067c8:	51 1e       	mov.l	@(56,r1),r1
  3067ca:	52 14       	mov.l	@(16,r1),r2
  3067cc:	61 e3       	mov	r14,r1
  3067ce:	71 cc       	add	#-52,r1
  3067d0:	51 1e       	mov.l	@(56,r1),r1
  3067d2:	51 12       	mov.l	@(8,r1),r1
  3067d4:	31 2c       	add	r2,r1
  3067d6:	62 e3       	mov	r14,r2
  3067d8:	72 cc       	add	#-52,r2
  3067da:	52 2f       	mov.l	@(60,r2),r2
  3067dc:	85 22       	mov.w	@(4,r2),r0
  3067de:	62 03       	mov	r0,r2
  3067e0:	62 2d       	extu.w	r2,r2
  3067e2:	31 27       	cmp/gt	r2,r1
  3067e4:	8b 0f       	bf	306806 <gint_image_clip_input+0xee>
  3067e6:	61 e3       	mov	r14,r1
  3067e8:	71 cc       	add	#-52,r1
  3067ea:	51 1f       	mov.l	@(60,r1),r1
  3067ec:	85 12       	mov.w	@(4,r1),r0
  3067ee:	61 03       	mov	r0,r1
  3067f0:	61 1d       	extu.w	r1,r1
  3067f2:	62 13       	mov	r1,r2
  3067f4:	61 e3       	mov	r14,r1
  3067f6:	71 cc       	add	#-52,r1
  3067f8:	51 1e       	mov.l	@(56,r1),r1
  3067fa:	51 14       	mov.l	@(16,r1),r1
  3067fc:	32 18       	sub	r1,r2
  3067fe:	61 e3       	mov	r14,r1
  306800:	71 cc       	add	#-52,r1
  306802:	51 1e       	mov.l	@(56,r1),r1
  306804:	11 22       	mov.l	r2,@(8,r1)
	if(b->top  + b->h > img->height) b->h = img->height - b->top;
  306806:	61 e3       	mov	r14,r1
  306808:	71 cc       	add	#-52,r1
  30680a:	51 1e       	mov.l	@(56,r1),r1
  30680c:	52 15       	mov.l	@(20,r1),r2
  30680e:	61 e3       	mov	r14,r1
  306810:	71 cc       	add	#-52,r1
  306812:	51 1e       	mov.l	@(56,r1),r1
  306814:	51 13       	mov.l	@(12,r1),r1
  306816:	31 2c       	add	r2,r1
  306818:	62 e3       	mov	r14,r2
  30681a:	72 cc       	add	#-52,r2
  30681c:	52 2f       	mov.l	@(60,r2),r2
  30681e:	85 23       	mov.w	@(6,r2),r0
  306820:	62 03       	mov	r0,r2
  306822:	62 2d       	extu.w	r2,r2
  306824:	31 27       	cmp/gt	r2,r1
  306826:	8b 0f       	bf	306848 <gint_image_clip_input+0x130>
  306828:	61 e3       	mov	r14,r1
  30682a:	71 cc       	add	#-52,r1
  30682c:	51 1f       	mov.l	@(60,r1),r1
  30682e:	85 13       	mov.w	@(6,r1),r0
  306830:	61 03       	mov	r0,r1
  306832:	61 1d       	extu.w	r1,r1
  306834:	62 13       	mov	r1,r2
  306836:	61 e3       	mov	r14,r1
  306838:	71 cc       	add	#-52,r1
  30683a:	51 1e       	mov.l	@(56,r1),r1
  30683c:	51 15       	mov.l	@(20,r1),r1
  30683e:	32 18       	sub	r1,r2
  306840:	61 e3       	mov	r14,r1
  306842:	71 cc       	add	#-52,r1
  306844:	51 1e       	mov.l	@(56,r1),r1
  306846:	11 23       	mov.l	r2,@(12,r1)

	/* Check whether the box intersects the screen */
	if(b->w <= 0 || b->h <= 0)
  306848:	61 e3       	mov	r14,r1
  30684a:	71 cc       	add	#-52,r1
  30684c:	51 1e       	mov.l	@(56,r1),r1
  30684e:	51 12       	mov.l	@(8,r1),r1
  306850:	41 15       	cmp/pl	r1
  306852:	8b 05       	bf	306860 <gint_image_clip_input+0x148>
  306854:	61 e3       	mov	r14,r1
  306856:	71 cc       	add	#-52,r1
  306858:	51 1e       	mov.l	@(56,r1),r1
  30685a:	51 13       	mov.l	@(12,r1),r1
  30685c:	41 15       	cmp/pl	r1
  30685e:	89 02       	bt	306866 <gint_image_clip_input+0x14e>
		return false;
  306860:	e1 00       	mov	#0,r1
  306862:	a0 39       	bra	3068d8 <gint_image_clip_input+0x1c0>
  306864:	00 09       	nop	
	if(b->x + b->w <= window->left || b->x >= window->right)
  306866:	61 e3       	mov	r14,r1
  306868:	71 cc       	add	#-52,r1
  30686a:	51 1e       	mov.l	@(56,r1),r1
  30686c:	62 12       	mov.l	@r1,r2
  30686e:	61 e3       	mov	r14,r1
  306870:	71 cc       	add	#-52,r1
  306872:	51 1e       	mov.l	@(56,r1),r1
  306874:	51 12       	mov.l	@(8,r1),r1
  306876:	32 1c       	add	r1,r2
  306878:	61 e3       	mov	r14,r1
  30687a:	71 cc       	add	#-52,r1
  30687c:	51 1d       	mov.l	@(52,r1),r1
  30687e:	61 12       	mov.l	@r1,r1
  306880:	32 17       	cmp/gt	r1,r2
  306882:	8b 09       	bf	306898 <gint_image_clip_input+0x180>
  306884:	61 e3       	mov	r14,r1
  306886:	71 cc       	add	#-52,r1
  306888:	51 1e       	mov.l	@(56,r1),r1
  30688a:	62 12       	mov.l	@r1,r2
  30688c:	61 e3       	mov	r14,r1
  30688e:	71 cc       	add	#-52,r1
  306890:	51 1d       	mov.l	@(52,r1),r1
  306892:	51 12       	mov.l	@(8,r1),r1
  306894:	32 13       	cmp/ge	r1,r2
  306896:	8b 02       	bf	30689e <gint_image_clip_input+0x186>
		return false;
  306898:	e1 00       	mov	#0,r1
  30689a:	a0 1d       	bra	3068d8 <gint_image_clip_input+0x1c0>
  30689c:	00 09       	nop	
	if(b->y + b->h <= window->top || b->y >= window->bottom)
  30689e:	61 e3       	mov	r14,r1
  3068a0:	71 cc       	add	#-52,r1
  3068a2:	51 1e       	mov.l	@(56,r1),r1
  3068a4:	52 11       	mov.l	@(4,r1),r2
  3068a6:	61 e3       	mov	r14,r1
  3068a8:	71 cc       	add	#-52,r1
  3068aa:	51 1e       	mov.l	@(56,r1),r1
  3068ac:	51 13       	mov.l	@(12,r1),r1
  3068ae:	32 1c       	add	r1,r2
  3068b0:	61 e3       	mov	r14,r1
  3068b2:	71 cc       	add	#-52,r1
  3068b4:	51 1d       	mov.l	@(52,r1),r1
  3068b6:	51 11       	mov.l	@(4,r1),r1
  3068b8:	32 17       	cmp/gt	r1,r2
  3068ba:	8b 09       	bf	3068d0 <gint_image_clip_input+0x1b8>
  3068bc:	61 e3       	mov	r14,r1
  3068be:	71 cc       	add	#-52,r1
  3068c0:	51 1e       	mov.l	@(56,r1),r1
  3068c2:	52 11       	mov.l	@(4,r1),r2
  3068c4:	61 e3       	mov	r14,r1
  3068c6:	71 cc       	add	#-52,r1
  3068c8:	51 1d       	mov.l	@(52,r1),r1
  3068ca:	51 13       	mov.l	@(12,r1),r1
  3068cc:	32 13       	cmp/ge	r1,r2
  3068ce:	8b 02       	bf	3068d6 <gint_image_clip_input+0x1be>
		return false;
  3068d0:	e1 00       	mov	#0,r1
  3068d2:	a0 01       	bra	3068d8 <gint_image_clip_input+0x1c0>
  3068d4:	00 09       	nop	

	return true;
  3068d6:	e1 01       	mov	#1,r1
}
  3068d8:	60 13       	mov	r1,r0
  3068da:	7e 0c       	add	#12,r14
  3068dc:	6f e3       	mov	r14,r15
  3068de:	6e f6       	mov.l	@r15+,r14
  3068e0:	00 0b       	rts	
  3068e2:	00 09       	nop	

003068e4 <gint_image_clip_output>:

void gint_image_clip_output(struct gint_image_box *b,
	struct dwindow const *window)
{
  3068e4:	2f e6       	mov.l	r14,@-r15
  3068e6:	7f e0       	add	#-32,r15
  3068e8:	6e f3       	mov	r15,r14
  3068ea:	61 e3       	mov	r14,r1
  3068ec:	71 e0       	add	#-32,r1
  3068ee:	11 49       	mov.l	r4,@(36,r1)
  3068f0:	61 e3       	mov	r14,r1
  3068f2:	71 e0       	add	#-32,r1
  3068f4:	11 58       	mov.l	r5,@(32,r1)
	/* Intersect with the bounding box on-screen */

	if(b->y < window->top) {
  3068f6:	61 e3       	mov	r14,r1
  3068f8:	71 e0       	add	#-32,r1
  3068fa:	51 19       	mov.l	@(36,r1),r1
  3068fc:	52 11       	mov.l	@(4,r1),r2
  3068fe:	61 e3       	mov	r14,r1
  306900:	71 e0       	add	#-32,r1
  306902:	51 18       	mov.l	@(32,r1),r1
  306904:	51 11       	mov.l	@(4,r1),r1
  306906:	32 13       	cmp/ge	r1,r2
  306908:	89 2f       	bt	30696a <gint_image_clip_output+0x86>
		int d = window->top - b->y; /* > 0 */
  30690a:	61 e3       	mov	r14,r1
  30690c:	71 e0       	add	#-32,r1
  30690e:	51 18       	mov.l	@(32,r1),r1
  306910:	52 11       	mov.l	@(4,r1),r2
  306912:	61 e3       	mov	r14,r1
  306914:	71 e0       	add	#-32,r1
  306916:	51 19       	mov.l	@(36,r1),r1
  306918:	53 11       	mov.l	@(4,r1),r3
  30691a:	61 e3       	mov	r14,r1
  30691c:	71 e0       	add	#-32,r1
  30691e:	32 38       	sub	r3,r2
  306920:	11 2f       	mov.l	r2,@(60,r1)
		b->top += d;
  306922:	61 e3       	mov	r14,r1
  306924:	71 e0       	add	#-32,r1
  306926:	51 19       	mov.l	@(36,r1),r1
  306928:	52 15       	mov.l	@(20,r1),r2
  30692a:	61 e3       	mov	r14,r1
  30692c:	71 e0       	add	#-32,r1
  30692e:	51 1f       	mov.l	@(60,r1),r1
  306930:	32 1c       	add	r1,r2
  306932:	61 e3       	mov	r14,r1
  306934:	71 e0       	add	#-32,r1
  306936:	51 19       	mov.l	@(36,r1),r1
  306938:	11 25       	mov.l	r2,@(20,r1)
		b->h -= d;
  30693a:	61 e3       	mov	r14,r1
  30693c:	71 e0       	add	#-32,r1
  30693e:	51 19       	mov.l	@(36,r1),r1
  306940:	52 13       	mov.l	@(12,r1),r2
  306942:	61 e3       	mov	r14,r1
  306944:	71 e0       	add	#-32,r1
  306946:	51 1f       	mov.l	@(60,r1),r1
  306948:	32 18       	sub	r1,r2
  30694a:	61 e3       	mov	r14,r1
  30694c:	71 e0       	add	#-32,r1
  30694e:	51 19       	mov.l	@(36,r1),r1
  306950:	11 23       	mov.l	r2,@(12,r1)
		b->y += d;
  306952:	61 e3       	mov	r14,r1
  306954:	71 e0       	add	#-32,r1
  306956:	51 19       	mov.l	@(36,r1),r1
  306958:	52 11       	mov.l	@(4,r1),r2
  30695a:	61 e3       	mov	r14,r1
  30695c:	71 e0       	add	#-32,r1
  30695e:	51 1f       	mov.l	@(60,r1),r1
  306960:	32 1c       	add	r1,r2
  306962:	61 e3       	mov	r14,r1
  306964:	71 e0       	add	#-32,r1
  306966:	51 19       	mov.l	@(36,r1),r1
  306968:	11 21       	mov.l	r2,@(4,r1)
	}
	b->h = min(b->h, window->bottom - b->y);
  30696a:	61 e3       	mov	r14,r1
  30696c:	71 e0       	add	#-32,r1
  30696e:	62 e3       	mov	r14,r2
  306970:	72 e0       	add	#-32,r2
  306972:	52 29       	mov.l	@(36,r2),r2
  306974:	52 23       	mov.l	@(12,r2),r2
  306976:	11 2e       	mov.l	r2,@(56,r1)
  306978:	61 e3       	mov	r14,r1
  30697a:	71 e0       	add	#-32,r1
  30697c:	51 18       	mov.l	@(32,r1),r1
  30697e:	52 13       	mov.l	@(12,r1),r2
  306980:	61 e3       	mov	r14,r1
  306982:	71 e0       	add	#-32,r1
  306984:	51 19       	mov.l	@(36,r1),r1
  306986:	53 11       	mov.l	@(4,r1),r3
  306988:	61 e3       	mov	r14,r1
  30698a:	71 e0       	add	#-32,r1
  30698c:	32 38       	sub	r3,r2
  30698e:	11 2d       	mov.l	r2,@(52,r1)
  306990:	61 e3       	mov	r14,r1
  306992:	71 e0       	add	#-32,r1
  306994:	62 e3       	mov	r14,r2
  306996:	72 e0       	add	#-32,r2
  306998:	52 2e       	mov.l	@(56,r2),r2
  30699a:	51 1d       	mov.l	@(52,r1),r1
  30699c:	31 27       	cmp/gt	r2,r1
  30699e:	8b 00       	bf	3069a2 <gint_image_clip_output+0xbe>
  3069a0:	61 23       	mov	r2,r1
  3069a2:	62 e3       	mov	r14,r2
  3069a4:	72 e0       	add	#-32,r2
  3069a6:	52 29       	mov.l	@(36,r2),r2
  3069a8:	12 13       	mov.l	r1,@(12,r2)

	if(b->x < window->left) {
  3069aa:	61 e3       	mov	r14,r1
  3069ac:	71 e0       	add	#-32,r1
  3069ae:	51 19       	mov.l	@(36,r1),r1
  3069b0:	62 12       	mov.l	@r1,r2
  3069b2:	61 e3       	mov	r14,r1
  3069b4:	71 e0       	add	#-32,r1
  3069b6:	51 18       	mov.l	@(32,r1),r1
  3069b8:	61 12       	mov.l	@r1,r1
  3069ba:	32 13       	cmp/ge	r1,r2
  3069bc:	89 2f       	bt	306a1e <gint_image_clip_output+0x13a>
		int d = window->left - b->x; /* > 0 */
  3069be:	61 e3       	mov	r14,r1
  3069c0:	71 e0       	add	#-32,r1
  3069c2:	51 18       	mov.l	@(32,r1),r1
  3069c4:	62 12       	mov.l	@r1,r2
  3069c6:	61 e3       	mov	r14,r1
  3069c8:	71 e0       	add	#-32,r1
  3069ca:	51 19       	mov.l	@(36,r1),r1
  3069cc:	63 12       	mov.l	@r1,r3
  3069ce:	61 e3       	mov	r14,r1
  3069d0:	71 e0       	add	#-32,r1
  3069d2:	32 38       	sub	r3,r2
  3069d4:	11 2c       	mov.l	r2,@(48,r1)
		b->left += d;
  3069d6:	61 e3       	mov	r14,r1
  3069d8:	71 e0       	add	#-32,r1
  3069da:	51 19       	mov.l	@(36,r1),r1
  3069dc:	52 14       	mov.l	@(16,r1),r2
  3069de:	61 e3       	mov	r14,r1
  3069e0:	71 e0       	add	#-32,r1
  3069e2:	51 1c       	mov.l	@(48,r1),r1
  3069e4:	32 1c       	add	r1,r2
  3069e6:	61 e3       	mov	r14,r1
  3069e8:	71 e0       	add	#-32,r1
  3069ea:	51 19       	mov.l	@(36,r1),r1
  3069ec:	11 24       	mov.l	r2,@(16,r1)
		b->w -= d;
  3069ee:	61 e3       	mov	r14,r1
  3069f0:	71 e0       	add	#-32,r1
  3069f2:	51 19       	mov.l	@(36,r1),r1
  3069f4:	52 12       	mov.l	@(8,r1),r2
  3069f6:	61 e3       	mov	r14,r1
  3069f8:	71 e0       	add	#-32,r1
  3069fa:	51 1c       	mov.l	@(48,r1),r1
  3069fc:	32 18       	sub	r1,r2
  3069fe:	61 e3       	mov	r14,r1
  306a00:	71 e0       	add	#-32,r1
  306a02:	51 19       	mov.l	@(36,r1),r1
  306a04:	11 22       	mov.l	r2,@(8,r1)
		b->x += d;
  306a06:	61 e3       	mov	r14,r1
  306a08:	71 e0       	add	#-32,r1
  306a0a:	51 19       	mov.l	@(36,r1),r1
  306a0c:	62 12       	mov.l	@r1,r2
  306a0e:	61 e3       	mov	r14,r1
  306a10:	71 e0       	add	#-32,r1
  306a12:	51 1c       	mov.l	@(48,r1),r1
  306a14:	32 1c       	add	r1,r2
  306a16:	61 e3       	mov	r14,r1
  306a18:	71 e0       	add	#-32,r1
  306a1a:	51 19       	mov.l	@(36,r1),r1
  306a1c:	21 22       	mov.l	r2,@r1
	}
	b->w = min(b->w, window->right - b->x);
  306a1e:	61 e3       	mov	r14,r1
  306a20:	71 e0       	add	#-32,r1
  306a22:	62 e3       	mov	r14,r2
  306a24:	72 e0       	add	#-32,r2
  306a26:	52 29       	mov.l	@(36,r2),r2
  306a28:	52 22       	mov.l	@(8,r2),r2
  306a2a:	11 2b       	mov.l	r2,@(44,r1)
  306a2c:	61 e3       	mov	r14,r1
  306a2e:	71 e0       	add	#-32,r1
  306a30:	51 18       	mov.l	@(32,r1),r1
  306a32:	52 12       	mov.l	@(8,r1),r2
  306a34:	61 e3       	mov	r14,r1
  306a36:	71 e0       	add	#-32,r1
  306a38:	51 19       	mov.l	@(36,r1),r1
  306a3a:	63 12       	mov.l	@r1,r3
  306a3c:	61 e3       	mov	r14,r1
  306a3e:	71 e0       	add	#-32,r1
  306a40:	32 38       	sub	r3,r2
  306a42:	11 2a       	mov.l	r2,@(40,r1)
  306a44:	61 e3       	mov	r14,r1
  306a46:	71 e0       	add	#-32,r1
  306a48:	62 e3       	mov	r14,r2
  306a4a:	72 e0       	add	#-32,r2
  306a4c:	52 2b       	mov.l	@(44,r2),r2
  306a4e:	51 1a       	mov.l	@(40,r1),r1
  306a50:	31 27       	cmp/gt	r2,r1
  306a52:	8b 00       	bf	306a56 <gint_image_clip_output+0x172>
  306a54:	61 23       	mov	r2,r1
  306a56:	62 e3       	mov	r14,r2
  306a58:	72 e0       	add	#-32,r2
  306a5a:	52 29       	mov.l	@(36,r2),r2
  306a5c:	12 12       	mov.l	r1,@(8,r2)
}
  306a5e:	00 09       	nop	
  306a60:	7e 20       	add	#32,r14
  306a62:	6f e3       	mov	r14,r15
  306a64:	6e f6       	mov.l	@r15+,r14
  306a66:	00 0b       	rts	
  306a68:	00 09       	nop	

00306a6a <gint_image_mkcmd>:

bool gint_image_mkcmd(struct gint_image_box *box, image_t const *img,
	int effects, bool left_edge, bool right_edge,
	struct gint_image_cmd *cmd, struct dwindow const *window)
{
  306a6a:	2f e6       	mov.l	r14,@-r15
  306a6c:	4f 22       	sts.l	pr,@-r15
  306a6e:	7f e4       	add	#-28,r15
  306a70:	6e f3       	mov	r15,r14
  306a72:	61 e3       	mov	r14,r1
  306a74:	71 dc       	add	#-36,r1
  306a76:	11 4d       	mov.l	r4,@(52,r1)
  306a78:	61 e3       	mov	r14,r1
  306a7a:	71 dc       	add	#-36,r1
  306a7c:	11 5c       	mov.l	r5,@(48,r1)
  306a7e:	61 e3       	mov	r14,r1
  306a80:	71 dc       	add	#-36,r1
  306a82:	11 6b       	mov.l	r6,@(44,r1)
  306a84:	63 73       	mov	r7,r3
  306a86:	52 e9       	mov.l	@(36,r14),r2
  306a88:	61 e3       	mov	r14,r1
  306a8a:	71 fc       	add	#-4,r1
  306a8c:	60 33       	mov	r3,r0
  306a8e:	80 18       	mov.b	r0,@(8,r1)
  306a90:	61 e3       	mov	r14,r1
  306a92:	71 fc       	add	#-4,r1
  306a94:	60 23       	mov	r2,r0
  306a96:	80 14       	mov.b	r0,@(4,r1)
	/* Convert the old DIMAGE_NOCLIP flag */
	if(effects & DIMAGE_NOCLIP)
  306a98:	61 e3       	mov	r14,r1
  306a9a:	71 dc       	add	#-36,r1
  306a9c:	51 1b       	mov.l	@(44,r1),r1
  306a9e:	e2 01       	mov	#1,r2
  306aa0:	21 29       	and	r2,r1
  306aa2:	21 18       	tst	r1,r1
  306aa4:	89 07       	bt	306ab6 <gint_image_mkcmd+0x4c>
		effects |= IMAGE_NOCLIP;
  306aa6:	61 e3       	mov	r14,r1
  306aa8:	71 dc       	add	#-36,r1
  306aaa:	62 e3       	mov	r14,r2
  306aac:	72 dc       	add	#-36,r2
  306aae:	52 2b       	mov.l	@(44,r2),r2
  306ab0:	e3 0c       	mov	#12,r3
  306ab2:	22 3b       	or	r3,r2
  306ab4:	11 2b       	mov.l	r2,@(44,r1)

	if(!(effects & IMAGE_NOCLIP_INPUT)) {
  306ab6:	61 e3       	mov	r14,r1
  306ab8:	71 dc       	add	#-36,r1
  306aba:	51 1b       	mov.l	@(44,r1),r1
  306abc:	e0 04       	mov	#4,r0
  306abe:	21 09       	and	r0,r1
  306ac0:	21 18       	tst	r1,r1
  306ac2:	8b 12       	bf	306aea <gint_image_mkcmd+0x80>
		if(!gint_image_clip_input(img, box, window))
  306ac4:	62 e3       	mov	r14,r2
  306ac6:	72 dc       	add	#-36,r2
  306ac8:	61 e3       	mov	r14,r1
  306aca:	71 dc       	add	#-36,r1
  306acc:	56 eb       	mov.l	@(44,r14),r6
  306ace:	55 2d       	mov.l	@(52,r2),r5
  306ad0:	54 1c       	mov.l	@(48,r1),r4
  306ad2:	d1 63       	mov.l	306c60 <gint_image_mkcmd+0x1f6>,r1	! 306718 <gint_image_clip_input>
  306ad4:	41 0b       	jsr	@r1
  306ad6:	00 09       	nop	
  306ad8:	61 03       	mov	r0,r1
  306ada:	e2 01       	mov	#1,r2
  306adc:	21 2a       	xor	r2,r1
  306ade:	61 1c       	extu.b	r1,r1
  306ae0:	21 18       	tst	r1,r1
  306ae2:	89 02       	bt	306aea <gint_image_mkcmd+0x80>
			return false;
  306ae4:	e1 00       	mov	#0,r1
  306ae6:	a1 88       	bra	306dfa <gint_image_mkcmd+0x390>
  306ae8:	00 09       	nop	
	}
	if(!(effects & IMAGE_NOCLIP_OUTPUT))
  306aea:	61 e3       	mov	r14,r1
  306aec:	71 dc       	add	#-36,r1
  306aee:	51 1b       	mov.l	@(44,r1),r1
  306af0:	e3 08       	mov	#8,r3
  306af2:	21 39       	and	r3,r1
  306af4:	21 18       	tst	r1,r1
  306af6:	8b 06       	bf	306b06 <gint_image_mkcmd+0x9c>
		gint_image_clip_output(box, window);
  306af8:	61 e3       	mov	r14,r1
  306afa:	71 dc       	add	#-36,r1
  306afc:	55 eb       	mov.l	@(44,r14),r5
  306afe:	54 1d       	mov.l	@(52,r1),r4
  306b00:	d1 58       	mov.l	306c64 <gint_image_mkcmd+0x1fa>,r1	! 3068e4 <gint_image_clip_output>
  306b02:	41 0b       	jsr	@r1
  306b04:	00 09       	nop	

	cmd->effect = (effects & (IMAGE_VFLIP | IMAGE_HFLIP)) >> 8;
  306b06:	61 e3       	mov	r14,r1
  306b08:	71 dc       	add	#-36,r1
  306b0a:	51 1b       	mov.l	@(44,r1),r1
  306b0c:	e2 f8       	mov	#-8,r2
  306b0e:	41 2c       	shad	r2,r1
  306b10:	61 1c       	extu.b	r1,r1
  306b12:	e0 03       	mov	#3,r0
  306b14:	21 09       	and	r0,r1
  306b16:	62 1c       	extu.b	r1,r2
  306b18:	51 ea       	mov.l	@(40,r14),r1
  306b1a:	60 23       	mov	r2,r0
  306b1c:	80 11       	mov.b	r0,@(1,r1)
	cmd->columns = box->w;
  306b1e:	61 e3       	mov	r14,r1
  306b20:	71 dc       	add	#-36,r1
  306b22:	51 1d       	mov.l	@(52,r1),r1
  306b24:	51 12       	mov.l	@(8,r1),r1
  306b26:	62 1f       	exts.w	r1,r2
  306b28:	51 ea       	mov.l	@(40,r14),r1
  306b2a:	60 23       	mov	r2,r0
  306b2c:	81 11       	mov.w	r0,@(2,r1)
	cmd->input_stride = img->stride;
  306b2e:	61 e3       	mov	r14,r1
  306b30:	71 dc       	add	#-36,r1
  306b32:	51 1c       	mov.l	@(48,r1),r1
  306b34:	51 12       	mov.l	@(8,r1),r1
  306b36:	62 1f       	exts.w	r1,r2
  306b38:	51 ea       	mov.l	@(40,r14),r1
  306b3a:	60 23       	mov	r2,r0
  306b3c:	81 12       	mov.w	r0,@(4,r1)
	cmd->x = box->x;
  306b3e:	61 e3       	mov	r14,r1
  306b40:	71 dc       	add	#-36,r1
  306b42:	51 1d       	mov.l	@(52,r1),r1
  306b44:	61 12       	mov.l	@r1,r1
  306b46:	62 1f       	exts.w	r1,r2
  306b48:	51 ea       	mov.l	@(40,r14),r1
  306b4a:	71 20       	add	#32,r1
  306b4c:	21 21       	mov.w	r2,@r1
	cmd->edge_1 = -1;
  306b4e:	51 ea       	mov.l	@(40,r14),r1
  306b50:	e2 ff       	mov	#-1,r2
  306b52:	60 23       	mov	r2,r0
  306b54:	80 17       	mov.b	r0,@(7,r1)
	cmd->edge_2 = -1;
  306b56:	51 ea       	mov.l	@(40,r14),r1
  306b58:	e2 ff       	mov	#-1,r2
  306b5a:	60 23       	mov	r2,r0
  306b5c:	81 1c       	mov.w	r0,@(24,r1)

	int f = img->format;
  306b5e:	61 e3       	mov	r14,r1
  306b60:	71 dc       	add	#-36,r1
  306b62:	51 1c       	mov.l	@(48,r1),r1
  306b64:	61 10       	mov.b	@r1,r1
  306b66:	62 1c       	extu.b	r1,r2
  306b68:	61 e3       	mov	r14,r1
  306b6a:	71 dc       	add	#-36,r1
  306b6c:	11 2f       	mov.l	r2,@(60,r1)
	int input_row = (effects & IMAGE_VFLIP) ? box->top+box->h-1 : box->top;
  306b6e:	61 e3       	mov	r14,r1
  306b70:	71 dc       	add	#-36,r1
  306b72:	52 1b       	mov.l	@(44,r1),r2
  306b74:	91 72       	mov.w	306c5c <gint_image_mkcmd+0x1f2>,r1	! 100
  306b76:	21 29       	and	r2,r1
  306b78:	21 18       	tst	r1,r1
  306b7a:	89 0b       	bt	306b94 <gint_image_mkcmd+0x12a>
  306b7c:	61 e3       	mov	r14,r1
  306b7e:	71 dc       	add	#-36,r1
  306b80:	51 1d       	mov.l	@(52,r1),r1
  306b82:	52 15       	mov.l	@(20,r1),r2
  306b84:	61 e3       	mov	r14,r1
  306b86:	71 dc       	add	#-36,r1
  306b88:	51 1d       	mov.l	@(52,r1),r1
  306b8a:	51 13       	mov.l	@(12,r1),r1
  306b8c:	31 2c       	add	r2,r1
  306b8e:	71 ff       	add	#-1,r1
  306b90:	a0 04       	bra	306b9c <gint_image_mkcmd+0x132>
  306b92:	00 09       	nop	
  306b94:	61 e3       	mov	r14,r1
  306b96:	71 dc       	add	#-36,r1
  306b98:	51 1d       	mov.l	@(52,r1),r1
  306b9a:	51 15       	mov.l	@(20,r1),r1
  306b9c:	62 e3       	mov	r14,r2
  306b9e:	72 dc       	add	#-36,r2
  306ba0:	12 1e       	mov.l	r1,@(56,r2)

	if(IMAGE_IS_RGB16(f)) {
  306ba2:	61 e3       	mov	r14,r1
  306ba4:	71 dc       	add	#-36,r1
  306ba6:	51 1f       	mov.l	@(60,r1),r1
  306ba8:	21 18       	tst	r1,r1
  306baa:	89 05       	bt	306bb8 <gint_image_mkcmd+0x14e>
  306bac:	61 e3       	mov	r14,r1
  306bae:	71 dc       	add	#-36,r1
  306bb0:	52 1f       	mov.l	@(60,r1),r2
  306bb2:	e1 01       	mov	#1,r1
  306bb4:	32 10       	cmp/eq	r1,r2
  306bb6:	8b 25       	bf	306c04 <gint_image_mkcmd+0x19a>
		cmd->input_stride += (cmd->input_stride & 1);
  306bb8:	51 ea       	mov.l	@(40,r14),r1
  306bba:	85 12       	mov.w	@(4,r1),r0
  306bbc:	61 03       	mov	r0,r1
  306bbe:	61 1d       	extu.w	r1,r1
  306bc0:	71 01       	add	#1,r1
  306bc2:	61 1d       	extu.w	r1,r1
  306bc4:	62 1f       	exts.w	r1,r2
  306bc6:	e1 fe       	mov	#-2,r1
  306bc8:	21 29       	and	r2,r1
  306bca:	62 1f       	exts.w	r1,r2
  306bcc:	51 ea       	mov.l	@(40,r14),r1
  306bce:	60 23       	mov	r2,r0
  306bd0:	81 12       	mov.w	r0,@(4,r1)
		cmd->input = (void *)img->data +
  306bd2:	61 e3       	mov	r14,r1
  306bd4:	71 dc       	add	#-36,r1
  306bd6:	51 1c       	mov.l	@(48,r1),r1
  306bd8:	52 13       	mov.l	@(12,r1),r2
			input_row * img->stride + (box->left * 2);
  306bda:	61 e3       	mov	r14,r1
  306bdc:	71 dc       	add	#-36,r1
  306bde:	51 1c       	mov.l	@(48,r1),r1
  306be0:	53 12       	mov.l	@(8,r1),r3
  306be2:	61 e3       	mov	r14,r1
  306be4:	71 dc       	add	#-36,r1
  306be6:	51 1e       	mov.l	@(56,r1),r1
  306be8:	03 17       	mul.l	r1,r3
  306bea:	01 1a       	sts	macl,r1
  306bec:	63 13       	mov	r1,r3
  306bee:	61 e3       	mov	r14,r1
  306bf0:	71 dc       	add	#-36,r1
  306bf2:	51 1d       	mov.l	@(52,r1),r1
  306bf4:	51 14       	mov.l	@(16,r1),r1
  306bf6:	31 1c       	add	r1,r1
  306bf8:	31 3c       	add	r3,r1
  306bfa:	32 1c       	add	r1,r2
		cmd->input = (void *)img->data +
  306bfc:	51 ea       	mov.l	@(40,r14),r1
  306bfe:	11 24       	mov.l	r2,@(16,r1)
  306c00:	a0 63       	bra	306cca <gint_image_mkcmd+0x260>
  306c02:	00 09       	nop	
	}
	else if(IMAGE_IS_P8(f)) {
  306c04:	61 e3       	mov	r14,r1
  306c06:	71 dc       	add	#-36,r1
  306c08:	52 1f       	mov.l	@(60,r1),r2
  306c0a:	e1 04       	mov	#4,r1
  306c0c:	32 10       	cmp/eq	r1,r2
  306c0e:	89 05       	bt	306c1c <gint_image_mkcmd+0x1b2>
  306c10:	61 e3       	mov	r14,r1
  306c12:	71 dc       	add	#-36,r1
  306c14:	52 1f       	mov.l	@(60,r1),r2
  306c16:	e1 05       	mov	#5,r1
  306c18:	32 10       	cmp/eq	r1,r2
  306c1a:	8b 25       	bf	306c68 <gint_image_mkcmd+0x1fe>
		cmd->input = (void *)img->data +
  306c1c:	61 e3       	mov	r14,r1
  306c1e:	71 dc       	add	#-36,r1
  306c20:	51 1c       	mov.l	@(48,r1),r1
  306c22:	52 13       	mov.l	@(12,r1),r2
			(input_row * img->stride) + box->left;
  306c24:	61 e3       	mov	r14,r1
  306c26:	71 dc       	add	#-36,r1
  306c28:	51 1c       	mov.l	@(48,r1),r1
  306c2a:	53 12       	mov.l	@(8,r1),r3
  306c2c:	61 e3       	mov	r14,r1
  306c2e:	71 dc       	add	#-36,r1
  306c30:	51 1e       	mov.l	@(56,r1),r1
  306c32:	03 17       	mul.l	r1,r3
  306c34:	01 1a       	sts	macl,r1
  306c36:	63 13       	mov	r1,r3
  306c38:	61 e3       	mov	r14,r1
  306c3a:	71 dc       	add	#-36,r1
  306c3c:	51 1d       	mov.l	@(52,r1),r1
  306c3e:	51 14       	mov.l	@(16,r1),r1
  306c40:	31 3c       	add	r3,r1
  306c42:	32 1c       	add	r1,r2
		cmd->input = (void *)img->data +
  306c44:	51 ea       	mov.l	@(40,r14),r1
  306c46:	11 24       	mov.l	r2,@(16,r1)
		cmd->palette = (void *)img->palette + 256;
  306c48:	61 e3       	mov	r14,r1
  306c4a:	71 dc       	add	#-36,r1
  306c4c:	51 1c       	mov.l	@(48,r1),r1
  306c4e:	51 14       	mov.l	@(16,r1),r1
  306c50:	92 04       	mov.w	306c5c <gint_image_mkcmd+0x1f2>,r2	! 100
  306c52:	32 1c       	add	r1,r2
  306c54:	51 ea       	mov.l	@(40,r14),r1
  306c56:	11 25       	mov.l	r2,@(20,r1)
  306c58:	a0 37       	bra	306cca <gint_image_mkcmd+0x260>
  306c5a:	00 09       	nop	
  306c5c:	01 00       	.word 0x0100
  306c5e:	00 09       	nop	
  306c60:	00 30       	.word 0x0030
  306c62:	67 18       	swap.b	r1,r7
  306c64:	00 30       	.word 0x0030
  306c66:	68 e4       	mov.b	@r14+,r8
	}
	else {
		cmd->input = (void *)img->data +
  306c68:	61 e3       	mov	r14,r1
  306c6a:	71 dc       	add	#-36,r1
  306c6c:	51 1c       	mov.l	@(48,r1),r1
  306c6e:	52 13       	mov.l	@(12,r1),r2
			input_row * img->stride + (box->left >> 1);
  306c70:	61 e3       	mov	r14,r1
  306c72:	71 dc       	add	#-36,r1
  306c74:	51 1c       	mov.l	@(48,r1),r1
  306c76:	53 12       	mov.l	@(8,r1),r3
  306c78:	61 e3       	mov	r14,r1
  306c7a:	71 dc       	add	#-36,r1
  306c7c:	51 1e       	mov.l	@(56,r1),r1
  306c7e:	03 17       	mul.l	r1,r3
  306c80:	01 1a       	sts	macl,r1
  306c82:	63 13       	mov	r1,r3
  306c84:	61 e3       	mov	r14,r1
  306c86:	71 dc       	add	#-36,r1
  306c88:	51 1d       	mov.l	@(52,r1),r1
  306c8a:	51 14       	mov.l	@(16,r1),r1
  306c8c:	41 21       	shar	r1
  306c8e:	31 3c       	add	r3,r1
  306c90:	32 1c       	add	r1,r2
		cmd->input = (void *)img->data +
  306c92:	51 ea       	mov.l	@(40,r14),r1
  306c94:	11 24       	mov.l	r2,@(16,r1)
		cmd->palette = (void *)img->palette;
  306c96:	61 e3       	mov	r14,r1
  306c98:	71 dc       	add	#-36,r1
  306c9a:	51 1c       	mov.l	@(48,r1),r1
  306c9c:	52 14       	mov.l	@(16,r1),r2
  306c9e:	51 ea       	mov.l	@(40,r14),r1
  306ca0:	11 25       	mov.l	r2,@(20,r1)
		/* By default, use edge_1 to indicate (box->left & 1), so that
		   functions that don't use edge_1 can still work properly */
		if(!left_edge)
  306ca2:	61 e3       	mov	r14,r1
  306ca4:	71 fc       	add	#-4,r1
  306ca6:	84 18       	mov.b	@(8,r1),r0
  306ca8:	61 03       	mov	r0,r1
  306caa:	e2 01       	mov	#1,r2
  306cac:	21 2a       	xor	r2,r1
  306cae:	61 1c       	extu.b	r1,r1
  306cb0:	21 18       	tst	r1,r1
  306cb2:	89 0a       	bt	306cca <gint_image_mkcmd+0x260>
			cmd->edge_1 = (box->left & 1);
  306cb4:	61 e3       	mov	r14,r1
  306cb6:	71 dc       	add	#-36,r1
  306cb8:	51 1d       	mov.l	@(52,r1),r1
  306cba:	51 14       	mov.l	@(16,r1),r1
  306cbc:	61 1e       	exts.b	r1,r1
  306cbe:	e3 01       	mov	#1,r3
  306cc0:	21 39       	and	r3,r1
  306cc2:	62 1e       	exts.b	r1,r2
  306cc4:	51 ea       	mov.l	@(40,r14),r1
  306cc6:	60 23       	mov	r2,r0
  306cc8:	80 17       	mov.b	r0,@(7,r1)
	}

	if(left_edge && (box->left & 1)) {
  306cca:	61 e3       	mov	r14,r1
  306ccc:	71 fc       	add	#-4,r1
  306cce:	84 18       	mov.b	@(8,r1),r0
  306cd0:	61 03       	mov	r0,r1
  306cd2:	61 1c       	extu.b	r1,r1
  306cd4:	21 18       	tst	r1,r1
  306cd6:	89 2f       	bt	306d38 <gint_image_mkcmd+0x2ce>
  306cd8:	61 e3       	mov	r14,r1
  306cda:	71 dc       	add	#-36,r1
  306cdc:	51 1d       	mov.l	@(52,r1),r1
  306cde:	51 14       	mov.l	@(16,r1),r1
  306ce0:	e2 01       	mov	#1,r2
  306ce2:	21 29       	and	r2,r1
  306ce4:	21 18       	tst	r1,r1
  306ce6:	89 27       	bt	306d38 <gint_image_mkcmd+0x2ce>
		if(effects & IMAGE_HFLIP) {
  306ce8:	61 e3       	mov	r14,r1
  306cea:	71 dc       	add	#-36,r1
  306cec:	52 1b       	mov.l	@(44,r1),r2
  306cee:	91 8b       	mov.w	306e08 <gint_image_mkcmd+0x39e>,r1	! 200
  306cf0:	21 29       	and	r2,r1
  306cf2:	21 18       	tst	r1,r1
  306cf4:	89 08       	bt	306d08 <gint_image_mkcmd+0x29e>
			cmd->edge_1 = cmd->columns;
  306cf6:	51 ea       	mov.l	@(40,r14),r1
  306cf8:	85 11       	mov.w	@(2,r1),r0
  306cfa:	61 03       	mov	r0,r1
  306cfc:	62 1e       	exts.b	r1,r2
  306cfe:	51 ea       	mov.l	@(40,r14),r1
  306d00:	60 23       	mov	r2,r0
  306d02:	80 17       	mov.b	r0,@(7,r1)
  306d04:	a0 0e       	bra	306d24 <gint_image_mkcmd+0x2ba>
  306d06:	00 09       	nop	
		}
		else {
			cmd->x--;
  306d08:	51 ea       	mov.l	@(40,r14),r1
  306d0a:	71 20       	add	#32,r1
  306d0c:	61 11       	mov.w	@r1,r1
  306d0e:	61 1d       	extu.w	r1,r1
  306d10:	71 ff       	add	#-1,r1
  306d12:	61 1d       	extu.w	r1,r1
  306d14:	62 1f       	exts.w	r1,r2
  306d16:	51 ea       	mov.l	@(40,r14),r1
  306d18:	71 20       	add	#32,r1
  306d1a:	21 21       	mov.w	r2,@r1
			cmd->edge_1 = 0;
  306d1c:	51 ea       	mov.l	@(40,r14),r1
  306d1e:	e2 00       	mov	#0,r2
  306d20:	60 23       	mov	r2,r0
  306d22:	80 17       	mov.b	r0,@(7,r1)
		}
		cmd->columns++;
  306d24:	51 ea       	mov.l	@(40,r14),r1
  306d26:	85 11       	mov.w	@(2,r1),r0
  306d28:	61 03       	mov	r0,r1
  306d2a:	61 1d       	extu.w	r1,r1
  306d2c:	71 01       	add	#1,r1
  306d2e:	61 1d       	extu.w	r1,r1
  306d30:	62 1f       	exts.w	r1,r2
  306d32:	51 ea       	mov.l	@(40,r14),r1
  306d34:	60 23       	mov	r2,r0
  306d36:	81 11       	mov.w	r0,@(2,r1)
	}
	if(right_edge && (cmd->columns & 1)) {
  306d38:	61 e3       	mov	r14,r1
  306d3a:	71 fc       	add	#-4,r1
  306d3c:	84 14       	mov.b	@(4,r1),r0
  306d3e:	61 03       	mov	r0,r1
  306d40:	61 1c       	extu.b	r1,r1
  306d42:	21 18       	tst	r1,r1
  306d44:	89 37       	bt	306db6 <gint_image_mkcmd+0x34c>
  306d46:	51 ea       	mov.l	@(40,r14),r1
  306d48:	85 11       	mov.w	@(2,r1),r0
  306d4a:	61 03       	mov	r0,r1
  306d4c:	e2 01       	mov	#1,r2
  306d4e:	21 29       	and	r2,r1
  306d50:	21 18       	tst	r1,r1
  306d52:	89 30       	bt	306db6 <gint_image_mkcmd+0x34c>
		if(effects & IMAGE_HFLIP) {
  306d54:	61 e3       	mov	r14,r1
  306d56:	71 dc       	add	#-36,r1
  306d58:	52 1b       	mov.l	@(44,r1),r2
  306d5a:	91 55       	mov.w	306e08 <gint_image_mkcmd+0x39e>,r1	! 200
  306d5c:	21 29       	and	r2,r1
  306d5e:	21 18       	tst	r1,r1
  306d60:	89 19       	bt	306d96 <gint_image_mkcmd+0x32c>
			cmd->x--;
  306d62:	51 ea       	mov.l	@(40,r14),r1
  306d64:	71 20       	add	#32,r1
  306d66:	61 11       	mov.w	@r1,r1
  306d68:	61 1d       	extu.w	r1,r1
  306d6a:	71 ff       	add	#-1,r1
  306d6c:	61 1d       	extu.w	r1,r1
  306d6e:	62 1f       	exts.w	r1,r2
  306d70:	51 ea       	mov.l	@(40,r14),r1
  306d72:	71 20       	add	#32,r1
  306d74:	21 21       	mov.w	r2,@r1
			cmd->edge_1++;
  306d76:	51 ea       	mov.l	@(40,r14),r1
  306d78:	84 17       	mov.b	@(7,r1),r0
  306d7a:	61 03       	mov	r0,r1
  306d7c:	61 1c       	extu.b	r1,r1
  306d7e:	71 01       	add	#1,r1
  306d80:	61 1c       	extu.b	r1,r1
  306d82:	62 1e       	exts.b	r1,r2
  306d84:	51 ea       	mov.l	@(40,r14),r1
  306d86:	60 23       	mov	r2,r0
  306d88:	80 17       	mov.b	r0,@(7,r1)
			cmd->edge_2 = 0;
  306d8a:	51 ea       	mov.l	@(40,r14),r1
  306d8c:	e2 00       	mov	#0,r2
  306d8e:	60 23       	mov	r2,r0
  306d90:	81 1c       	mov.w	r0,@(24,r1)
  306d92:	a0 06       	bra	306da2 <gint_image_mkcmd+0x338>
  306d94:	00 09       	nop	
		}
		else {
			cmd->edge_2 = cmd->columns;
  306d96:	51 ea       	mov.l	@(40,r14),r1
  306d98:	85 11       	mov.w	@(2,r1),r0
  306d9a:	62 03       	mov	r0,r2
  306d9c:	51 ea       	mov.l	@(40,r14),r1
  306d9e:	60 23       	mov	r2,r0
  306da0:	81 1c       	mov.w	r0,@(24,r1)
		}
		cmd->columns++;
  306da2:	51 ea       	mov.l	@(40,r14),r1
  306da4:	85 11       	mov.w	@(2,r1),r0
  306da6:	61 03       	mov	r0,r1
  306da8:	61 1d       	extu.w	r1,r1
  306daa:	71 01       	add	#1,r1
  306dac:	61 1d       	extu.w	r1,r1
  306dae:	62 1f       	exts.w	r1,r2
  306db0:	51 ea       	mov.l	@(40,r14),r1
  306db2:	60 23       	mov	r2,r0
  306db4:	81 11       	mov.w	r0,@(2,r1)
	}

	/* Settings for further updates */
	cmd->height = box->h;
  306db6:	61 e3       	mov	r14,r1
  306db8:	71 dc       	add	#-36,r1
  306dba:	51 1d       	mov.l	@(52,r1),r1
  306dbc:	51 13       	mov.l	@(12,r1),r1
  306dbe:	62 1f       	exts.w	r1,r2
  306dc0:	51 ea       	mov.l	@(40,r14),r1
  306dc2:	60 23       	mov	r2,r0
  306dc4:	81 1f       	mov.w	r0,@(30,r1)

	/* This is the default for gint, but Azur overwrites it */
	cmd->lines = box->h;
  306dc6:	61 e3       	mov	r14,r1
  306dc8:	71 dc       	add	#-36,r1
  306dca:	51 1d       	mov.l	@(52,r1),r1
  306dcc:	51 13       	mov.l	@(12,r1),r1
  306dce:	62 1c       	extu.b	r1,r2
  306dd0:	51 ea       	mov.l	@(40,r14),r1
  306dd2:	60 23       	mov	r2,r0
  306dd4:	80 16       	mov.b	r0,@(6,r1)
	cmd->output = (void *)gint_vram + (DWIDTH * box->y + cmd->x) * 2;
  306dd6:	d1 0d       	mov.l	306e0c <gint_image_mkcmd+0x3a2>,r1	! 810143c <gint_vram>
  306dd8:	61 12       	mov.l	@r1,r1
  306dda:	62 e3       	mov	r14,r2
  306ddc:	72 dc       	add	#-36,r2
  306dde:	52 2d       	mov.l	@(52,r2),r2
  306de0:	53 21       	mov.l	@(4,r2),r3
  306de2:	92 12       	mov.w	306e0a <gint_image_mkcmd+0x3a0>,r2	! 18c
  306de4:	03 27       	mul.l	r2,r3
  306de6:	03 1a       	sts	macl,r3
  306de8:	52 ea       	mov.l	@(40,r14),r2
  306dea:	72 20       	add	#32,r2
  306dec:	62 21       	mov.w	@r2,r2
  306dee:	32 3c       	add	r3,r2
  306df0:	32 2c       	add	r2,r2
  306df2:	32 1c       	add	r1,r2
  306df4:	51 ea       	mov.l	@(40,r14),r1
  306df6:	11 23       	mov.l	r2,@(12,r1)
	return true;
  306df8:	e1 01       	mov	#1,r1
}
  306dfa:	60 13       	mov	r1,r0
  306dfc:	7e 1c       	add	#28,r14
  306dfe:	6f e3       	mov	r14,r15
  306e00:	4f 26       	lds.l	@r15+,pr
  306e02:	6e f6       	mov.l	@r15+,r14
  306e04:	00 0b       	rts	
  306e06:	00 09       	nop	
  306e08:	02 00       	.word 0x0200
  306e0a:	01 8c       	mov.b	@(r0,r8),r1
  306e0c:	08 10       	.word 0x0810
  306e0e:	14 3c       	mov.l	r3,@(48,r4)

00306e10 <gint_image_rgb16_loop>:
  306e10:	84 51       	mov.b	@(1,r5),r0
  306e12:	75 02       	add	#2,r5
  306e14:	2f 86       	mov.l	r8,@-r15
  306e16:	66 43       	mov	r4,r6
  306e18:	62 55       	mov.w	@r5+,r2
  306e1a:	68 53       	mov	r5,r8
  306e1c:	2f 96       	mov.l	r9,@-r15
  306e1e:	40 01       	shlr	r0
  306e20:	64 85       	mov.w	@r8+,r4
  306e22:	36 28       	sub	r2,r6
  306e24:	61 84       	mov.b	@r8+,r1
  306e26:	36 6c       	add	r6,r6
  306e28:	69 84       	mov.b	@r8+,r9
  306e2a:	00 09       	nop	
  306e2c:	69 86       	mov.l	@r8+,r9
  306e2e:	61 1c       	extu.b	r1,r1
  306e30:	65 86       	mov.l	@r8+,r5
  306e32:	00 09       	nop	
  306e34:	63 86       	mov.l	@r8+,r3
  306e36:	78 04       	add	#4,r8
  306e38:	8f 02       	bf.s	306e40 <NO_VFLIP>
  306e3a:	44 01       	shlr	r4

00306e3c <VFLIP>:
  306e3c:	64 4b       	neg	r4,r4
  306e3e:	00 09       	nop	

00306e40 <NO_VFLIP>:
  306e40:	34 28       	sub	r2,r4
  306e42:	00 09       	nop	
  306e44:	49 2b       	jmp	@r9
  306e46:	34 4c       	add	r4,r4

00306e48 <gint_image_rgb16_normal>:
  306e48:	c8 01       	tst	#1,r0
  306e4a:	e0 08       	mov	#8,r0
  306e4c:	8f 04       	bf.s	306e58 <.BACKWARD>
  306e4e:	30 23       	cmp/ge	r2,r0

00306e50 <.FORWARD>:
  306e50:	89 0a       	bt	306e68 <FORWARD_WORD_COPY>
  306e52:	00 09       	nop	
  306e54:	a0 24       	bra	306ea0 <FORWARD_LONG_COPY>
  306e56:	00 09       	nop	

00306e58 <.BACKWARD>:
  306e58:	60 23       	mov	r2,r0
  306e5a:	30 0c       	add	r0,r0
  306e5c:	35 0c       	add	r0,r5
  306e5e:	30 0c       	add	r0,r0
  306e60:	8d 10       	bt.s	306e84 <BACKWARD_WORD_COPY>
  306e62:	36 0c       	add	r0,r6
  306e64:	a0 79       	bra	306f5a <BACKWARD_LONG_COPY>
  306e66:	00 09       	nop	

00306e68 <FORWARD_WORD_COPY>:
  306e68:	8c 02       	ldrs	306e70 <FORWARD_WORD_COPY+0x8>	! f788
  306e6a:	8e 02       	ldre	306e72 <FORWARD_WORD_COPY+0xa>	! f589
  306e6c:	42 34       	ldrc	r2
  306e6e:	00 09       	nop	
  306e70:	f7 88       	movs.w	@r3+,x0
  306e72:	f5 89       	movs.w	x0,@r5+
  306e74:	41 10       	dt	r1
  306e76:	33 4c       	add	r4,r3
  306e78:	8f f8       	bf.s	306e6c <FORWARD_WORD_COPY+0x4>
  306e7a:	35 6c       	add	r6,r5
  306e7c:	69 f6       	mov.l	@r15+,r9
  306e7e:	60 33       	mov	r3,r0
  306e80:	00 0b       	rts	
  306e82:	68 f6       	mov.l	@r15+,r8

00306e84 <BACKWARD_WORD_COPY>:
  306e84:	8c 02       	ldrs	306e8c <BACKWARD_WORD_COPY+0x8>	! f788
  306e86:	8e 02       	ldre	306e8e <BACKWARD_WORD_COPY+0xa>	! f581
  306e88:	42 34       	ldrc	r2
  306e8a:	00 09       	nop	
  306e8c:	f7 88       	movs.w	@r3+,x0
  306e8e:	f5 81       	movs.w	x0,@-r5
  306e90:	41 10       	dt	r1
  306e92:	33 4c       	add	r4,r3
  306e94:	8f f8       	bf.s	306e88 <BACKWARD_WORD_COPY+0x4>
  306e96:	35 6c       	add	r6,r5
  306e98:	69 f6       	mov.l	@r15+,r9
  306e9a:	60 33       	mov	r3,r0
  306e9c:	00 0b       	rts	
  306e9e:	68 f6       	mov.l	@r15+,r8

00306ea0 <FORWARD_LONG_COPY>:
  306ea0:	42 01       	shlr	r2
  306ea2:	e0 02       	mov	#2,r0
  306ea4:	89 2d       	bt	306f02 <.F_w1>
  306ea6:	00 09       	nop	

00306ea8 <.F_w2>:
  306ea8:	25 08       	tst	r0,r5
  306eaa:	8b 11       	bf	306ed0 <.F_w2o2>

00306eac <.F_w2o4>:
  306eac:	8c 02       	ldrs	306eb4 <.F_w2o4+0x8>	! 6035
  306eae:	8e 06       	ldre	306ebe <.F_w2o4+0x12>	! 7504
  306eb0:	42 34       	ldrc	r2
  306eb2:	00 09       	nop	
  306eb4:	60 35       	mov.w	@r3+,r0
  306eb6:	67 35       	mov.w	@r3+,r7
  306eb8:	47 28       	shll16	r7
  306eba:	27 0d       	xtrct	r0,r7
  306ebc:	25 72       	mov.l	r7,@r5
  306ebe:	75 04       	add	#4,r5
  306ec0:	41 10       	dt	r1
  306ec2:	33 4c       	add	r4,r3
  306ec4:	8f f4       	bf.s	306eb0 <.F_w2o4+0x4>
  306ec6:	35 6c       	add	r6,r5
  306ec8:	69 f6       	mov.l	@r15+,r9
  306eca:	60 33       	mov	r3,r0
  306ecc:	00 0b       	rts	
  306ece:	68 f6       	mov.l	@r15+,r8

00306ed0 <.F_w2o2>:
  306ed0:	72 ff       	add	#-1,r2
  306ed2:	8c 05       	ldrs	306ee0 <.F_w2o2+0x10>	! 6035
  306ed4:	8e 09       	ldre	306eea <.F_w2o2+0x1a>	! 7504
  306ed6:	42 34       	ldrc	r2
  306ed8:	00 09       	nop	
  306eda:	60 35       	mov.w	@r3+,r0
  306edc:	25 01       	mov.w	r0,@r5
  306ede:	75 02       	add	#2,r5
  306ee0:	60 35       	mov.w	@r3+,r0
  306ee2:	67 35       	mov.w	@r3+,r7
  306ee4:	47 28       	shll16	r7
  306ee6:	27 0d       	xtrct	r0,r7
  306ee8:	25 72       	mov.l	r7,@r5
  306eea:	75 04       	add	#4,r5
  306eec:	60 35       	mov.w	@r3+,r0
  306eee:	25 01       	mov.w	r0,@r5
  306ef0:	75 02       	add	#2,r5
  306ef2:	41 10       	dt	r1
  306ef4:	33 4c       	add	r4,r3
  306ef6:	8f ee       	bf.s	306ed6 <.F_w2o2+0x6>
  306ef8:	35 6c       	add	r6,r5
  306efa:	69 f6       	mov.l	@r15+,r9
  306efc:	60 33       	mov	r3,r0
  306efe:	00 0b       	rts	
  306f00:	68 f6       	mov.l	@r15+,r8

00306f02 <.F_w1>:
  306f02:	25 08       	tst	r0,r5
  306f04:	8b 14       	bf	306f30 <.F_w1o2>

00306f06 <.F_w1o4>:
  306f06:	8c 02       	ldrs	306f0e <.F_w1o4+0x8>	! 6035
  306f08:	8e 06       	ldre	306f18 <.F_w1o4+0x12>	! 7504
  306f0a:	42 34       	ldrc	r2
  306f0c:	00 09       	nop	
  306f0e:	60 35       	mov.w	@r3+,r0
  306f10:	67 35       	mov.w	@r3+,r7
  306f12:	47 28       	shll16	r7
  306f14:	27 0d       	xtrct	r0,r7
  306f16:	25 72       	mov.l	r7,@r5
  306f18:	75 04       	add	#4,r5
  306f1a:	60 35       	mov.w	@r3+,r0
  306f1c:	25 01       	mov.w	r0,@r5
  306f1e:	75 02       	add	#2,r5
  306f20:	41 10       	dt	r1
  306f22:	33 4c       	add	r4,r3
  306f24:	8f f1       	bf.s	306f0a <.F_w1o4+0x4>
  306f26:	35 6c       	add	r6,r5
  306f28:	69 f6       	mov.l	@r15+,r9
  306f2a:	60 33       	mov	r3,r0
  306f2c:	00 0b       	rts	
  306f2e:	68 f6       	mov.l	@r15+,r8

00306f30 <.F_w1o2>:
  306f30:	8c 05       	ldrs	306f3e <.F_w1o2+0xe>	! 6035
  306f32:	8e 09       	ldre	306f48 <.F_w1o2+0x18>	! 7504
  306f34:	42 34       	ldrc	r2
  306f36:	00 09       	nop	
  306f38:	60 35       	mov.w	@r3+,r0
  306f3a:	25 01       	mov.w	r0,@r5
  306f3c:	75 02       	add	#2,r5
  306f3e:	60 35       	mov.w	@r3+,r0
  306f40:	67 35       	mov.w	@r3+,r7
  306f42:	47 28       	shll16	r7
  306f44:	27 0d       	xtrct	r0,r7
  306f46:	25 72       	mov.l	r7,@r5
  306f48:	75 04       	add	#4,r5
  306f4a:	41 10       	dt	r1
  306f4c:	33 4c       	add	r4,r3
  306f4e:	8f f1       	bf.s	306f34 <.F_w1o2+0x4>
  306f50:	35 6c       	add	r6,r5
  306f52:	69 f6       	mov.l	@r15+,r9
  306f54:	60 33       	mov	r3,r0
  306f56:	00 0b       	rts	
  306f58:	68 f6       	mov.l	@r15+,r8

00306f5a <BACKWARD_LONG_COPY>:
  306f5a:	42 01       	shlr	r2
  306f5c:	e0 02       	mov	#2,r0
  306f5e:	89 29       	bt	306fb4 <.B_w1>
  306f60:	00 09       	nop	

00306f62 <.B_w2>:
  306f62:	25 08       	tst	r0,r5
  306f64:	8b 10       	bf	306f88 <.B_w2o2>

00306f66 <.B_w2o4>:
  306f66:	8c 02       	ldrs	306f6e <.B_w2o4+0x8>	! 6035
  306f68:	8e 05       	ldre	306f76 <.B_w2o4+0x10>	! 2506
  306f6a:	42 34       	ldrc	r2
  306f6c:	00 09       	nop	
  306f6e:	60 35       	mov.w	@r3+,r0
  306f70:	67 35       	mov.w	@r3+,r7
  306f72:	40 28       	shll16	r0
  306f74:	20 7d       	xtrct	r7,r0
  306f76:	25 06       	mov.l	r0,@-r5
  306f78:	41 10       	dt	r1
  306f7a:	33 4c       	add	r4,r3
  306f7c:	8f f5       	bf.s	306f6a <.B_w2o4+0x4>
  306f7e:	35 6c       	add	r6,r5
  306f80:	69 f6       	mov.l	@r15+,r9
  306f82:	60 33       	mov	r3,r0
  306f84:	00 0b       	rts	
  306f86:	68 f6       	mov.l	@r15+,r8

00306f88 <.B_w2o2>:
  306f88:	72 ff       	add	#-1,r2
  306f8a:	8c 04       	ldrs	306f96 <.B_w2o2+0xe>	! 6035
  306f8c:	8e 07       	ldre	306f9e <.B_w2o2+0x16>	! 2506
  306f8e:	42 34       	ldrc	r2
  306f90:	00 09       	nop	
  306f92:	60 35       	mov.w	@r3+,r0
  306f94:	25 05       	mov.w	r0,@-r5
  306f96:	60 35       	mov.w	@r3+,r0
  306f98:	67 35       	mov.w	@r3+,r7
  306f9a:	40 28       	shll16	r0
  306f9c:	20 7d       	xtrct	r7,r0
  306f9e:	25 06       	mov.l	r0,@-r5
  306fa0:	60 35       	mov.w	@r3+,r0
  306fa2:	25 05       	mov.w	r0,@-r5
  306fa4:	41 10       	dt	r1
  306fa6:	33 4c       	add	r4,r3
  306fa8:	8f f1       	bf.s	306f8e <.B_w2o2+0x6>
  306faa:	35 6c       	add	r6,r5
  306fac:	69 f6       	mov.l	@r15+,r9
  306fae:	60 33       	mov	r3,r0
  306fb0:	00 0b       	rts	
  306fb2:	68 f6       	mov.l	@r15+,r8

00306fb4 <.B_w1>:
  306fb4:	25 08       	tst	r0,r5
  306fb6:	8b 12       	bf	306fde <.B_w1o2>

00306fb8 <.B_w1o4>:
  306fb8:	8c 02       	ldrs	306fc0 <.B_w1o4+0x8>	! 6035
  306fba:	8e 05       	ldre	306fc8 <.B_w1o4+0x10>	! 2506
  306fbc:	42 34       	ldrc	r2
  306fbe:	00 09       	nop	
  306fc0:	60 35       	mov.w	@r3+,r0
  306fc2:	67 35       	mov.w	@r3+,r7
  306fc4:	40 28       	shll16	r0
  306fc6:	20 7d       	xtrct	r7,r0
  306fc8:	25 06       	mov.l	r0,@-r5
  306fca:	60 35       	mov.w	@r3+,r0
  306fcc:	25 05       	mov.w	r0,@-r5
  306fce:	41 10       	dt	r1
  306fd0:	33 4c       	add	r4,r3
  306fd2:	8f f3       	bf.s	306fbc <.B_w1o4+0x4>
  306fd4:	35 6c       	add	r6,r5
  306fd6:	69 f6       	mov.l	@r15+,r9
  306fd8:	60 33       	mov	r3,r0
  306fda:	00 0b       	rts	
  306fdc:	68 f6       	mov.l	@r15+,r8

00306fde <.B_w1o2>:
  306fde:	8c 04       	ldrs	306fea <.B_w1o2+0xc>	! 6035
  306fe0:	8e 07       	ldre	306ff2 <.B_w1o2+0x14>	! 2506
  306fe2:	42 34       	ldrc	r2
  306fe4:	00 09       	nop	
  306fe6:	60 35       	mov.w	@r3+,r0
  306fe8:	25 05       	mov.w	r0,@-r5
  306fea:	60 35       	mov.w	@r3+,r0
  306fec:	67 35       	mov.w	@r3+,r7
  306fee:	40 28       	shll16	r0
  306ff0:	20 7d       	xtrct	r7,r0
  306ff2:	25 06       	mov.l	r0,@-r5
  306ff4:	41 10       	dt	r1
  306ff6:	33 4c       	add	r4,r3
  306ff8:	8f f3       	bf.s	306fe2 <.B_w1o2+0x4>
  306ffa:	35 6c       	add	r6,r5
  306ffc:	69 f6       	mov.l	@r15+,r9
  306ffe:	60 33       	mov	r3,r0
  307000:	00 0b       	rts	
  307002:	68 f6       	mov.l	@r15+,r8

00307004 <gint_image_rgb16_clearbg>:
  307004:	c8 01       	tst	#1,r0
  307006:	8b 12       	bf	30702e <gint_image_rgb16_clearbg+0x2a>
  307008:	60 85       	mov.w	@r8+,r0
  30700a:	69 85       	mov.w	@r8+,r9
  30700c:	60 85       	mov.w	@r8+,r0
  30700e:	68 23       	mov	r2,r8
  307010:	60 35       	mov.w	@r3+,r0
  307012:	39 00       	cmp/eq	r0,r9
  307014:	89 00       	bt	307018 <gint_image_rgb16_clearbg+0x14>
  307016:	25 01       	mov.w	r0,@r5
  307018:	48 10       	dt	r8
  30701a:	8f f9       	bf.s	307010 <gint_image_rgb16_clearbg+0xc>
  30701c:	75 02       	add	#2,r5
  30701e:	41 10       	dt	r1
  307020:	33 4c       	add	r4,r3
  307022:	8f f4       	bf.s	30700e <gint_image_rgb16_clearbg+0xa>
  307024:	35 6c       	add	r6,r5
  307026:	69 f6       	mov.l	@r15+,r9
  307028:	60 33       	mov	r3,r0
  30702a:	00 0b       	rts	
  30702c:	68 f6       	mov.l	@r15+,r8
  30702e:	60 85       	mov.w	@r8+,r0
  307030:	69 85       	mov.w	@r8+,r9
  307032:	60 85       	mov.w	@r8+,r0
  307034:	75 fe       	add	#-2,r5
  307036:	68 23       	mov	r2,r8
  307038:	48 00       	shll	r8
  30703a:	35 8c       	add	r8,r5
  30703c:	48 00       	shll	r8
  30703e:	36 8c       	add	r8,r6
  307040:	68 23       	mov	r2,r8
  307042:	60 35       	mov.w	@r3+,r0
  307044:	39 00       	cmp/eq	r0,r9
  307046:	89 00       	bt	30704a <gint_image_rgb16_clearbg+0x46>
  307048:	25 01       	mov.w	r0,@r5
  30704a:	48 10       	dt	r8
  30704c:	8f f9       	bf.s	307042 <gint_image_rgb16_clearbg+0x3e>
  30704e:	75 fe       	add	#-2,r5
  307050:	41 10       	dt	r1
  307052:	33 4c       	add	r4,r3
  307054:	8f f4       	bf.s	307040 <gint_image_rgb16_clearbg+0x3c>
  307056:	35 6c       	add	r6,r5
  307058:	69 f6       	mov.l	@r15+,r9
  30705a:	60 33       	mov	r3,r0
  30705c:	00 0b       	rts	
  30705e:	68 f6       	mov.l	@r15+,r8

00307060 <gint_image_rgb16_dye>:
  307060:	c8 01       	tst	#1,r0
  307062:	8b 12       	bf	30708a <gint_image_rgb16_dye+0x2a>
  307064:	60 85       	mov.w	@r8+,r0
  307066:	69 85       	mov.w	@r8+,r9
  307068:	60 85       	mov.w	@r8+,r0
  30706a:	68 23       	mov	r2,r8
  30706c:	67 35       	mov.w	@r3+,r7
  30706e:	39 70       	cmp/eq	r7,r9
  307070:	89 00       	bt	307074 <gint_image_rgb16_dye+0x14>
  307072:	25 01       	mov.w	r0,@r5
  307074:	48 10       	dt	r8
  307076:	8f f9       	bf.s	30706c <gint_image_rgb16_dye+0xc>
  307078:	75 02       	add	#2,r5
  30707a:	41 10       	dt	r1
  30707c:	33 4c       	add	r4,r3
  30707e:	8f f4       	bf.s	30706a <gint_image_rgb16_dye+0xa>
  307080:	35 6c       	add	r6,r5
  307082:	69 f6       	mov.l	@r15+,r9
  307084:	60 33       	mov	r3,r0
  307086:	00 0b       	rts	
  307088:	68 f6       	mov.l	@r15+,r8
  30708a:	60 85       	mov.w	@r8+,r0
  30708c:	69 85       	mov.w	@r8+,r9
  30708e:	60 85       	mov.w	@r8+,r0
  307090:	75 fe       	add	#-2,r5
  307092:	68 23       	mov	r2,r8
  307094:	48 00       	shll	r8
  307096:	35 8c       	add	r8,r5
  307098:	48 00       	shll	r8
  30709a:	36 8c       	add	r8,r6
  30709c:	68 23       	mov	r2,r8
  30709e:	67 35       	mov.w	@r3+,r7
  3070a0:	39 70       	cmp/eq	r7,r9
  3070a2:	89 00       	bt	3070a6 <gint_image_rgb16_dye+0x46>
  3070a4:	25 01       	mov.w	r0,@r5
  3070a6:	48 10       	dt	r8
  3070a8:	8f f9       	bf.s	30709e <gint_image_rgb16_dye+0x3e>
  3070aa:	75 fe       	add	#-2,r5
  3070ac:	41 10       	dt	r1
  3070ae:	33 4c       	add	r4,r3
  3070b0:	8f f4       	bf.s	30709c <gint_image_rgb16_dye+0x3c>
  3070b2:	35 6c       	add	r6,r5
  3070b4:	69 f6       	mov.l	@r15+,r9
  3070b6:	60 33       	mov	r3,r0
  3070b8:	00 0b       	rts	
  3070ba:	68 f6       	mov.l	@r15+,r8

003070bc <gint_image_p8_loop>:
  3070bc:	84 51       	mov.b	@(1,r5),r0
  3070be:	75 02       	add	#2,r5
  3070c0:	2f 86       	mov.l	r8,@-r15
  3070c2:	66 43       	mov	r4,r6
  3070c4:	62 55       	mov.w	@r5+,r2
  3070c6:	68 53       	mov	r5,r8
  3070c8:	2f 96       	mov.l	r9,@-r15
  3070ca:	40 01       	shlr	r0
  3070cc:	64 85       	mov.w	@r8+,r4
  3070ce:	36 28       	sub	r2,r6
  3070d0:	61 84       	mov.b	@r8+,r1
  3070d2:	36 6c       	add	r6,r6
  3070d4:	69 84       	mov.b	@r8+,r9
  3070d6:	00 09       	nop	
  3070d8:	69 86       	mov.l	@r8+,r9
  3070da:	61 1c       	extu.b	r1,r1
  3070dc:	65 86       	mov.l	@r8+,r5
  3070de:	00 09       	nop	
  3070e0:	8f 02       	bf.s	3070e8 <NO_VFLIP>
  3070e2:	63 86       	mov.l	@r8+,r3

003070e4 <VFLIP>:
  3070e4:	64 4b       	neg	r4,r4
  3070e6:	00 09       	nop	

003070e8 <NO_VFLIP>:
  3070e8:	49 2b       	jmp	@r9
  3070ea:	34 28       	sub	r2,r4

003070ec <gint_image_p8_normal>:
  3070ec:	c8 01       	tst	#1,r0
  3070ee:	8b 10       	bf	307112 <gint_image_p8_normal+0x26>
  3070f0:	69 86       	mov.l	@r8+,r9
  3070f2:	68 23       	mov	r2,r8
  3070f4:	60 34       	mov.b	@r3+,r0
  3070f6:	40 00       	shll	r0
  3070f8:	00 9d       	mov.w	@(r0,r9),r0
  3070fa:	25 01       	mov.w	r0,@r5
  3070fc:	48 10       	dt	r8
  3070fe:	8f f9       	bf.s	3070f4 <gint_image_p8_normal+0x8>
  307100:	75 02       	add	#2,r5
  307102:	41 10       	dt	r1
  307104:	33 4c       	add	r4,r3
  307106:	8f f4       	bf.s	3070f2 <gint_image_p8_normal+0x6>
  307108:	35 6c       	add	r6,r5
  30710a:	69 f6       	mov.l	@r15+,r9
  30710c:	60 33       	mov	r3,r0
  30710e:	00 0b       	rts	
  307110:	68 f6       	mov.l	@r15+,r8
  307112:	69 86       	mov.l	@r8+,r9
  307114:	75 fe       	add	#-2,r5
  307116:	60 23       	mov	r2,r0
  307118:	40 00       	shll	r0
  30711a:	35 0c       	add	r0,r5
  30711c:	40 00       	shll	r0
  30711e:	36 0c       	add	r0,r6
  307120:	68 23       	mov	r2,r8
  307122:	60 34       	mov.b	@r3+,r0
  307124:	40 00       	shll	r0
  307126:	00 9d       	mov.w	@(r0,r9),r0
  307128:	25 01       	mov.w	r0,@r5
  30712a:	48 10       	dt	r8
  30712c:	8f f9       	bf.s	307122 <gint_image_p8_normal+0x36>
  30712e:	75 fe       	add	#-2,r5
  307130:	41 10       	dt	r1
  307132:	33 4c       	add	r4,r3
  307134:	8f f4       	bf.s	307120 <gint_image_p8_normal+0x34>
  307136:	35 6c       	add	r6,r5
  307138:	69 f6       	mov.l	@r15+,r9
  30713a:	60 33       	mov	r3,r0
  30713c:	00 0b       	rts	
  30713e:	68 f6       	mov.l	@r15+,r8

00307140 <gint_image_p8_clearbg>:
  307140:	c8 01       	tst	#1,r0
  307142:	8b 44       	bf	3071ce <gint_image_p8_clearbg+0x8e>
  307144:	69 86       	mov.l	@r8+,r9
  307146:	42 01       	shlr	r2
  307148:	67 85       	mov.w	@r8+,r7
  30714a:	60 23       	mov	r2,r0
  30714c:	2f c6       	mov.l	r12,@-r15
  30714e:	40 08       	shll2	r0
  307150:	2f a6       	mov.l	r10,@-r15
  307152:	47 00       	shll	r7
  307154:	2f b6       	mov.l	r11,@-r15
  307156:	37 5c       	add	r5,r7
  307158:	6c 03       	mov	r0,r12
  30715a:	3c 6c       	add	r6,r12
  30715c:	2f d6       	mov.l	r13,@-r15
  30715e:	75 fc       	add	#-4,r5
  307160:	2f e6       	mov.l	r14,@-r15
  307162:	74 fe       	add	#-2,r4
  307164:	68 81       	mov.w	@r8,r8
  307166:	eb 00       	mov	#0,r11
  307168:	68 8e       	exts.b	r8,r8
  30716a:	00 09       	nop	
  30716c:	8c 0a       	ldrs	307184 <gint_image_p8_clearbg+0x44>	! eaff
  30716e:	8e 1c       	ldre	3071aa <gint_image_p8_clearbg+0x6a>	! 3eec
  307170:	42 34       	ldrc	r2
  307172:	00 09       	nop	
  307174:	6e 34       	mov.b	@r3+,r14
  307176:	00 09       	nop	
  307178:	60 71       	mov.w	@r7,r0
  30717a:	00 09       	nop	
  30717c:	2f 06       	mov.l	r0,@-r15
  30717e:	38 e0       	cmp/eq	r14,r8
  307180:	6d 34       	mov.b	@r3+,r13
  307182:	3e ec       	add	r14,r14
  307184:	ea ff       	mov	#-1,r10
  307186:	3a be       	addc	r11,r10
  307188:	2a 59       	and	r5,r10
  30718a:	60 e3       	mov	r14,r0
  30718c:	38 d0       	cmp/eq	r13,r8
  30718e:	00 9d       	mov.w	@(r0,r9),r0
  307190:	81 a2       	mov.w	r0,@(4,r10)
  307192:	75 04       	add	#4,r5
  307194:	6e 34       	mov.b	@r3+,r14
  307196:	00 09       	nop	
  307198:	ea ff       	mov	#-1,r10
  30719a:	3a be       	addc	r11,r10
  30719c:	3d dc       	add	r13,r13
  30719e:	60 d3       	mov	r13,r0
  3071a0:	6d 34       	mov.b	@r3+,r13
  3071a2:	2a 59       	and	r5,r10
  3071a4:	00 9d       	mov.w	@(r0,r9),r0
  3071a6:	38 e0       	cmp/eq	r14,r8
  3071a8:	81 a1       	mov.w	r0,@(2,r10)
  3071aa:	3e ec       	add	r14,r14
  3071ac:	60 f6       	mov.l	@r15+,r0
  3071ae:	00 09       	nop	
  3071b0:	27 01       	mov.w	r0,@r7
  3071b2:	37 cc       	add	r12,r7
  3071b4:	41 10       	dt	r1
  3071b6:	33 4c       	add	r4,r3
  3071b8:	8f da       	bf.s	307170 <gint_image_p8_clearbg+0x30>
  3071ba:	35 6c       	add	r6,r5
  3071bc:	6e f6       	mov.l	@r15+,r14
  3071be:	6d f6       	mov.l	@r15+,r13
  3071c0:	6b f6       	mov.l	@r15+,r11
  3071c2:	6a f6       	mov.l	@r15+,r10
  3071c4:	6c f6       	mov.l	@r15+,r12
  3071c6:	69 f6       	mov.l	@r15+,r9
  3071c8:	60 33       	mov	r3,r0
  3071ca:	00 0b       	rts	
  3071cc:	68 f6       	mov.l	@r15+,r8
  3071ce:	69 86       	mov.l	@r8+,r9
  3071d0:	42 01       	shlr	r2
  3071d2:	67 85       	mov.w	@r8+,r7
  3071d4:	60 23       	mov	r2,r0
  3071d6:	2f c6       	mov.l	r12,@-r15
  3071d8:	40 08       	shll2	r0
  3071da:	2f a6       	mov.l	r10,@-r15
  3071dc:	47 00       	shll	r7
  3071de:	2f b6       	mov.l	r11,@-r15
  3071e0:	37 5c       	add	r5,r7
  3071e2:	6c 03       	mov	r0,r12
  3071e4:	3c 6c       	add	r6,r12
  3071e6:	2f d6       	mov.l	r13,@-r15
  3071e8:	75 fc       	add	#-4,r5
  3071ea:	2f e6       	mov.l	r14,@-r15
  3071ec:	74 fe       	add	#-2,r4
  3071ee:	68 81       	mov.w	@r8,r8
  3071f0:	eb 00       	mov	#0,r11
  3071f2:	35 0c       	add	r0,r5
  3071f4:	00 09       	nop	
  3071f6:	40 00       	shll	r0
  3071f8:	00 09       	nop	
  3071fa:	36 0c       	add	r0,r6
  3071fc:	00 09       	nop	
  3071fe:	68 8e       	exts.b	r8,r8
  307200:	00 09       	nop	
  307202:	8c 0a       	ldrs	30721a <gint_image_p8_clearbg+0xda>	! eaff
  307204:	8e 1c       	ldre	307240 <gint_image_p8_clearbg+0x100>	! 3eec
  307206:	42 34       	ldrc	r2
  307208:	00 09       	nop	
  30720a:	6e 34       	mov.b	@r3+,r14
  30720c:	00 09       	nop	
  30720e:	60 71       	mov.w	@r7,r0
  307210:	00 09       	nop	
  307212:	2f 06       	mov.l	r0,@-r15
  307214:	38 e0       	cmp/eq	r14,r8
  307216:	6d 34       	mov.b	@r3+,r13
  307218:	3e ec       	add	r14,r14
  30721a:	ea ff       	mov	#-1,r10
  30721c:	3a be       	addc	r11,r10
  30721e:	2a 59       	and	r5,r10
  307220:	60 e3       	mov	r14,r0
  307222:	38 d0       	cmp/eq	r13,r8
  307224:	00 9d       	mov.w	@(r0,r9),r0
  307226:	81 a1       	mov.w	r0,@(2,r10)
  307228:	75 fc       	add	#-4,r5
  30722a:	6e 34       	mov.b	@r3+,r14
  30722c:	00 09       	nop	
  30722e:	ea ff       	mov	#-1,r10
  307230:	3a be       	addc	r11,r10
  307232:	3d dc       	add	r13,r13
  307234:	60 d3       	mov	r13,r0
  307236:	6d 34       	mov.b	@r3+,r13
  307238:	2a 59       	and	r5,r10
  30723a:	00 9d       	mov.w	@(r0,r9),r0
  30723c:	38 e0       	cmp/eq	r14,r8
  30723e:	81 a2       	mov.w	r0,@(4,r10)
  307240:	3e ec       	add	r14,r14
  307242:	60 f6       	mov.l	@r15+,r0
  307244:	00 09       	nop	
  307246:	27 01       	mov.w	r0,@r7
  307248:	37 cc       	add	r12,r7
  30724a:	41 10       	dt	r1
  30724c:	33 4c       	add	r4,r3
  30724e:	8f da       	bf.s	307206 <gint_image_p8_clearbg+0xc6>
  307250:	35 6c       	add	r6,r5
  307252:	6e f6       	mov.l	@r15+,r14
  307254:	6d f6       	mov.l	@r15+,r13
  307256:	6b f6       	mov.l	@r15+,r11
  307258:	6a f6       	mov.l	@r15+,r10
  30725a:	6c f6       	mov.l	@r15+,r12
  30725c:	69 f6       	mov.l	@r15+,r9
  30725e:	60 33       	mov	r3,r0
  307260:	00 0b       	rts	
  307262:	68 f6       	mov.l	@r15+,r8

00307264 <gint_image_p4_loop>:
  307264:	84 51       	mov.b	@(1,r5),r0
  307266:	75 02       	add	#2,r5
  307268:	62 55       	mov.w	@r5+,r2
  30726a:	66 43       	mov	r4,r6
  30726c:	2f 86       	mov.l	r8,@-r15
  30726e:	68 53       	mov	r5,r8
  307270:	2f 96       	mov.l	r9,@-r15
  307272:	36 28       	sub	r2,r6
  307274:	64 85       	mov.w	@r8+,r4
  307276:	36 6c       	add	r6,r6
  307278:	61 84       	mov.b	@r8+,r1
  30727a:	00 09       	nop	
  30727c:	2f a6       	mov.l	r10,@-r15
  30727e:	61 1c       	extu.b	r1,r1
  307280:	6a 84       	mov.b	@r8+,r10
  307282:	00 09       	nop	
  307284:	69 86       	mov.l	@r8+,r9
  307286:	40 01       	shlr	r0
  307288:	65 86       	mov.l	@r8+,r5
  30728a:	00 09       	nop	
  30728c:	8f 02       	bf.s	307294 <NO_VFLIP>
  30728e:	63 86       	mov.l	@r8+,r3

00307290 <VFLIP>:
  307290:	64 4b       	neg	r4,r4
  307292:	00 09       	nop	

00307294 <NO_VFLIP>:
  307294:	67 23       	mov	r2,r7
  307296:	47 01       	shlr	r7
  307298:	49 2b       	jmp	@r9
  30729a:	34 7a       	subc	r7,r4

0030729c <gint_image_p4_normal>:
  30729c:	c8 01       	tst	#1,r0
  30729e:	8b 31       	bf	307304 <gint_image_p4_normal+0x68>
  3072a0:	69 86       	mov.l	@r8+,r9
  3072a2:	75 fc       	add	#-4,r5
  3072a4:	60 23       	mov	r2,r0
  3072a6:	ca 01       	xor	#1,r0
  3072a8:	67 85       	mov.w	@r8+,r7
  3072aa:	20 a9       	and	r10,r0
  3072ac:	2f b6       	mov.l	r11,@-r15
  3072ae:	34 08       	sub	r0,r4
  3072b0:	68 23       	mov	r2,r8
  3072b2:	2a a8       	tst	r10,r10
  3072b4:	89 08       	bt	3072c8 <gint_image_p4_normal+0x2c>
  3072b6:	00 09       	nop	
  3072b8:	60 34       	mov.b	@r3+,r0
  3072ba:	40 00       	shll	r0
  3072bc:	c9 1e       	and	#30,r0
  3072be:	00 9d       	mov.w	@(r0,r9),r0
  3072c0:	48 10       	dt	r8
  3072c2:	81 52       	mov.w	r0,@(4,r5)
  3072c4:	8d 14       	bt.s	3072f0 <gint_image_p4_normal+0x54>
  3072c6:	75 02       	add	#2,r5
  3072c8:	67 34       	mov.b	@r3+,r7
  3072ca:	eb fc       	mov	#-4,r11
  3072cc:	47 00       	shll	r7
  3072ce:	60 73       	mov	r7,r0
  3072d0:	40 bd       	shld	r11,r0
  3072d2:	00 09       	nop	
  3072d4:	c9 1e       	and	#30,r0
  3072d6:	eb 1e       	mov	#30,r11
  3072d8:	00 9d       	mov.w	@(r0,r9),r0
  3072da:	27 b9       	and	r11,r7
  3072dc:	48 10       	dt	r8
  3072de:	81 52       	mov.w	r0,@(4,r5)
  3072e0:	8d 06       	bt.s	3072f0 <gint_image_p4_normal+0x54>
  3072e2:	75 02       	add	#2,r5
  3072e4:	60 73       	mov	r7,r0
  3072e6:	75 02       	add	#2,r5
  3072e8:	48 10       	dt	r8
  3072ea:	00 9d       	mov.w	@(r0,r9),r0
  3072ec:	8f ec       	bf.s	3072c8 <gint_image_p4_normal+0x2c>
  3072ee:	81 51       	mov.w	r0,@(2,r5)
  3072f0:	41 10       	dt	r1
  3072f2:	33 4c       	add	r4,r3
  3072f4:	8f dc       	bf.s	3072b0 <gint_image_p4_normal+0x14>
  3072f6:	35 6c       	add	r6,r5
  3072f8:	6b f6       	mov.l	@r15+,r11
  3072fa:	6a f6       	mov.l	@r15+,r10
  3072fc:	69 f6       	mov.l	@r15+,r9
  3072fe:	60 33       	mov	r3,r0
  307300:	00 0b       	rts	
  307302:	68 f6       	mov.l	@r15+,r8
  307304:	69 86       	mov.l	@r8+,r9
  307306:	75 fc       	add	#-4,r5
  307308:	60 23       	mov	r2,r0
  30730a:	ca 01       	xor	#1,r0
  30730c:	67 85       	mov.w	@r8+,r7
  30730e:	20 a9       	and	r10,r0
  307310:	2f b6       	mov.l	r11,@-r15
  307312:	34 08       	sub	r0,r4
  307314:	60 23       	mov	r2,r0
  307316:	40 00       	shll	r0
  307318:	35 0c       	add	r0,r5
  30731a:	00 09       	nop	
  30731c:	40 00       	shll	r0
  30731e:	00 09       	nop	
  307320:	36 0c       	add	r0,r6
  307322:	00 09       	nop	
  307324:	68 23       	mov	r2,r8
  307326:	2a a8       	tst	r10,r10
  307328:	89 08       	bt	30733c <gint_image_p4_normal+0xa0>
  30732a:	00 09       	nop	
  30732c:	60 34       	mov.b	@r3+,r0
  30732e:	40 00       	shll	r0
  307330:	c9 1e       	and	#30,r0
  307332:	00 9d       	mov.w	@(r0,r9),r0
  307334:	48 10       	dt	r8
  307336:	81 51       	mov.w	r0,@(2,r5)
  307338:	8d 14       	bt.s	307364 <gint_image_p4_normal+0xc8>
  30733a:	75 fe       	add	#-2,r5
  30733c:	67 34       	mov.b	@r3+,r7
  30733e:	eb fc       	mov	#-4,r11
  307340:	47 00       	shll	r7
  307342:	60 73       	mov	r7,r0
  307344:	40 bd       	shld	r11,r0
  307346:	00 09       	nop	
  307348:	c9 1e       	and	#30,r0
  30734a:	eb 1e       	mov	#30,r11
  30734c:	00 9d       	mov.w	@(r0,r9),r0
  30734e:	27 b9       	and	r11,r7
  307350:	48 10       	dt	r8
  307352:	81 51       	mov.w	r0,@(2,r5)
  307354:	8d 06       	bt.s	307364 <gint_image_p4_normal+0xc8>
  307356:	75 fe       	add	#-2,r5
  307358:	60 73       	mov	r7,r0
  30735a:	75 fe       	add	#-2,r5
  30735c:	48 10       	dt	r8
  30735e:	00 9d       	mov.w	@(r0,r9),r0
  307360:	8f ec       	bf.s	30733c <gint_image_p4_normal+0xa0>
  307362:	81 52       	mov.w	r0,@(4,r5)
  307364:	41 10       	dt	r1
  307366:	33 4c       	add	r4,r3
  307368:	8f dc       	bf.s	307324 <gint_image_p4_normal+0x88>
  30736a:	35 6c       	add	r6,r5
  30736c:	6b f6       	mov.l	@r15+,r11
  30736e:	6a f6       	mov.l	@r15+,r10
  307370:	69 f6       	mov.l	@r15+,r9
  307372:	60 33       	mov	r3,r0
  307374:	00 0b       	rts	
  307376:	68 f6       	mov.l	@r15+,r8

00307378 <gint_image_p4_clearbg>:
  307378:	c8 01       	tst	#1,r0
  30737a:	8b 2e       	bf	3073da <gint_image_p4_clearbg+0x62>
  30737c:	69 86       	mov.l	@r8+,r9
  30737e:	67 23       	mov	r2,r7
  307380:	47 01       	shlr	r7
  307382:	34 7e       	addc	r7,r4
  307384:	67 85       	mov.w	@r8+,r7
  307386:	00 09       	nop	
  307388:	68 81       	mov.w	@r8,r8
  30738a:	00 09       	nop	
  30738c:	2f b6       	mov.l	r11,@-r15
  30738e:	48 00       	shll	r8
  307390:	2f c6       	mov.l	r12,@-r15
  307392:	ec fd       	mov	#-3,r12
  307394:	6b 23       	mov	r2,r11
  307396:	67 a3       	mov	r10,r7
  307398:	60 73       	mov	r7,r0
  30739a:	40 01       	shlr	r0
  30739c:	00 3c       	mov.b	@(r0,r3),r0
  30739e:	00 09       	nop	
  3073a0:	8d 07       	bt.s	3073b2 <gint_image_p4_clearbg+0x3a>
  3073a2:	77 01       	add	#1,r7
  3073a4:	40 cd       	shld	r12,r0
  3073a6:	c9 1e       	and	#30,r0
  3073a8:	38 00       	cmp/eq	r0,r8
  3073aa:	89 08       	bt	3073be <gint_image_p4_clearbg+0x46>
  3073ac:	00 9d       	mov.w	@(r0,r9),r0
  3073ae:	a0 06       	bra	3073be <gint_image_p4_clearbg+0x46>
  3073b0:	25 01       	mov.w	r0,@r5
  3073b2:	40 00       	shll	r0
  3073b4:	c9 1e       	and	#30,r0
  3073b6:	38 00       	cmp/eq	r0,r8
  3073b8:	89 01       	bt	3073be <gint_image_p4_clearbg+0x46>
  3073ba:	00 9d       	mov.w	@(r0,r9),r0
  3073bc:	25 01       	mov.w	r0,@r5
  3073be:	4b 10       	dt	r11
  3073c0:	8f ea       	bf.s	307398 <gint_image_p4_clearbg+0x20>
  3073c2:	75 02       	add	#2,r5
  3073c4:	41 10       	dt	r1
  3073c6:	33 4c       	add	r4,r3
  3073c8:	8f e4       	bf.s	307394 <gint_image_p4_clearbg+0x1c>
  3073ca:	35 6c       	add	r6,r5
  3073cc:	6c f6       	mov.l	@r15+,r12
  3073ce:	6b f6       	mov.l	@r15+,r11
  3073d0:	6a f6       	mov.l	@r15+,r10
  3073d2:	69 f6       	mov.l	@r15+,r9
  3073d4:	60 33       	mov	r3,r0
  3073d6:	00 0b       	rts	
  3073d8:	68 f6       	mov.l	@r15+,r8
  3073da:	69 86       	mov.l	@r8+,r9
  3073dc:	67 23       	mov	r2,r7
  3073de:	47 01       	shlr	r7
  3073e0:	34 7e       	addc	r7,r4
  3073e2:	67 85       	mov.w	@r8+,r7
  3073e4:	00 09       	nop	
  3073e6:	68 81       	mov.w	@r8,r8
  3073e8:	00 09       	nop	
  3073ea:	2f b6       	mov.l	r11,@-r15
  3073ec:	48 00       	shll	r8
  3073ee:	2f c6       	mov.l	r12,@-r15
  3073f0:	ec fd       	mov	#-3,r12
  3073f2:	75 fe       	add	#-2,r5
  3073f4:	60 23       	mov	r2,r0
  3073f6:	40 00       	shll	r0
  3073f8:	35 0c       	add	r0,r5
  3073fa:	40 00       	shll	r0
  3073fc:	36 0c       	add	r0,r6
  3073fe:	6b 23       	mov	r2,r11
  307400:	67 a3       	mov	r10,r7
  307402:	60 73       	mov	r7,r0
  307404:	40 01       	shlr	r0
  307406:	00 3c       	mov.b	@(r0,r3),r0
  307408:	00 09       	nop	
  30740a:	8d 07       	bt.s	30741c <gint_image_p4_clearbg+0xa4>
  30740c:	77 01       	add	#1,r7
  30740e:	40 cd       	shld	r12,r0
  307410:	c9 1e       	and	#30,r0
  307412:	38 00       	cmp/eq	r0,r8
  307414:	89 08       	bt	307428 <gint_image_p4_clearbg+0xb0>
  307416:	00 9d       	mov.w	@(r0,r9),r0
  307418:	a0 06       	bra	307428 <gint_image_p4_clearbg+0xb0>
  30741a:	25 01       	mov.w	r0,@r5
  30741c:	40 00       	shll	r0
  30741e:	c9 1e       	and	#30,r0
  307420:	38 00       	cmp/eq	r0,r8
  307422:	89 01       	bt	307428 <gint_image_p4_clearbg+0xb0>
  307424:	00 9d       	mov.w	@(r0,r9),r0
  307426:	25 01       	mov.w	r0,@r5
  307428:	4b 10       	dt	r11
  30742a:	8f ea       	bf.s	307402 <gint_image_p4_clearbg+0x8a>
  30742c:	75 fe       	add	#-2,r5
  30742e:	41 10       	dt	r1
  307430:	33 4c       	add	r4,r3
  307432:	8f e4       	bf.s	3073fe <gint_image_p4_clearbg+0x86>
  307434:	35 6c       	add	r6,r5
  307436:	6c f6       	mov.l	@r15+,r12
  307438:	6b f6       	mov.l	@r15+,r11
  30743a:	6a f6       	mov.l	@r15+,r10
  30743c:	69 f6       	mov.l	@r15+,r9
  30743e:	60 33       	mov	r3,r0
  307440:	00 0b       	rts	
  307442:	68 f6       	mov.l	@r15+,r8

00307444 <cpu_atomic_start>:
static int saved_IMASK = 0;
/* Number of atomic mode levels */
static unsigned int atomic_level = 0;

void cpu_atomic_start(void)
{
  307444:	2f e6       	mov.l	r14,@-r15
  307446:	4f 22       	sts.l	pr,@-r15
  307448:	7f f8       	add	#-8,r15
  30744a:	6e f3       	mov	r15,r14
	/* There is no access problem to IMASK here because interrupts must
	   preserve and restore it */
	cpu_sr_t SR = cpu_getSR();
  30744c:	d1 1b       	mov.l	3074bc <cpu_atomic_start+0x78>,r1	! 3076e4 <cpu_getSR>
  30744e:	41 0b       	jsr	@r1
  307450:	00 09       	nop	
  307452:	61 03       	mov	r0,r1
  307454:	62 13       	mov	r1,r2
  307456:	61 e3       	mov	r14,r1
  307458:	71 c8       	add	#-56,r1
  30745a:	11 2f       	mov.l	r2,@(60,r1)
	cpu_sr_t SR2 = SR;
  30745c:	61 e3       	mov	r14,r1
  30745e:	71 c8       	add	#-56,r1
  307460:	62 e3       	mov	r14,r2
  307462:	72 c8       	add	#-56,r2
  307464:	52 2f       	mov.l	@(60,r2),r2
  307466:	11 2e       	mov.l	r2,@(56,r1)
	SR2.IMASK = 15;
  307468:	61 e3       	mov	r14,r1
  30746a:	71 c8       	add	#-56,r1
  30746c:	52 1e       	mov.l	@(56,r1),r2
  30746e:	93 23       	mov.w	3074b8 <cpu_atomic_start+0x74>,r3	! f0
  307470:	22 3b       	or	r3,r2
  307472:	11 2e       	mov.l	r2,@(56,r1)
	cpu_setSR(SR2);
  307474:	61 e3       	mov	r14,r1
  307476:	71 c8       	add	#-56,r1
  307478:	54 1e       	mov.l	@(56,r1),r4
  30747a:	d1 11       	mov.l	3074c0 <cpu_atomic_start+0x7c>,r1	! 3076ea <cpu_setSR>
  30747c:	41 0b       	jsr	@r1
  30747e:	00 09       	nop	

	/* Now that we're alone, atomically update the atomic level */
	if(atomic_level == 0) saved_IMASK = SR.IMASK;
  307480:	d1 10       	mov.l	3074c4 <cpu_atomic_start+0x80>,r1	! 810151c <atomic_level>
  307482:	61 12       	mov.l	@r1,r1
  307484:	21 18       	tst	r1,r1
  307486:	8b 0a       	bf	30749e <cpu_atomic_start+0x5a>
  307488:	61 e3       	mov	r14,r1
  30748a:	71 c8       	add	#-56,r1
  30748c:	51 1f       	mov.l	@(60,r1),r1
  30748e:	41 09       	shlr2	r1
  307490:	41 09       	shlr2	r1
  307492:	e2 0f       	mov	#15,r2
  307494:	21 29       	and	r2,r1
  307496:	61 1c       	extu.b	r1,r1
  307498:	62 13       	mov	r1,r2
  30749a:	d1 0b       	mov.l	3074c8 <cpu_atomic_start+0x84>,r1	! 8101518 <saved_IMASK>
  30749c:	21 22       	mov.l	r2,@r1
	atomic_level++;
  30749e:	d1 09       	mov.l	3074c4 <cpu_atomic_start+0x80>,r1	! 810151c <atomic_level>
  3074a0:	61 12       	mov.l	@r1,r1
  3074a2:	62 13       	mov	r1,r2
  3074a4:	72 01       	add	#1,r2
  3074a6:	d1 07       	mov.l	3074c4 <cpu_atomic_start+0x80>,r1	! 810151c <atomic_level>
  3074a8:	21 22       	mov.l	r2,@r1
}
  3074aa:	00 09       	nop	
  3074ac:	7e 08       	add	#8,r14
  3074ae:	6f e3       	mov	r14,r15
  3074b0:	4f 26       	lds.l	@r15+,pr
  3074b2:	6e f6       	mov.l	@r15+,r14
  3074b4:	00 0b       	rts	
  3074b6:	00 09       	nop	
  3074b8:	00 f0       	.word 0x00f0
  3074ba:	00 09       	nop	
  3074bc:	00 30       	.word 0x0030
  3074be:	76 e4       	add	#-28,r6
  3074c0:	00 30       	.word 0x0030
  3074c2:	76 ea       	add	#-22,r6
  3074c4:	08 10       	.word 0x0810
  3074c6:	15 1c       	mov.l	r1,@(48,r5)
  3074c8:	08 10       	.word 0x0810
  3074ca:	15 18       	mov.l	r1,@(32,r5)

003074cc <cpu_atomic_end>:

void cpu_atomic_end(void)
{
  3074cc:	2f e6       	mov.l	r14,@-r15
  3074ce:	4f 22       	sts.l	pr,@-r15
  3074d0:	7f fc       	add	#-4,r15
  3074d2:	6e f3       	mov	r15,r14
	cpu_sr_t SR = cpu_getSR();
  3074d4:	d1 19       	mov.l	30753c <cpu_atomic_end+0x70>,r1	! 3076e4 <cpu_getSR>
  3074d6:	41 0b       	jsr	@r1
  3074d8:	00 09       	nop	
  3074da:	61 03       	mov	r0,r1
  3074dc:	62 13       	mov	r1,r2
  3074de:	61 e3       	mov	r14,r1
  3074e0:	71 c4       	add	#-60,r1
  3074e2:	11 2f       	mov.l	r2,@(60,r1)

	/* Update atomic_level before restoring interrupts */
	atomic_level--;
  3074e4:	d1 16       	mov.l	307540 <cpu_atomic_end+0x74>,r1	! 810151c <atomic_level>
  3074e6:	61 12       	mov.l	@r1,r1
  3074e8:	62 13       	mov	r1,r2
  3074ea:	72 ff       	add	#-1,r2
  3074ec:	d1 14       	mov.l	307540 <cpu_atomic_end+0x74>,r1	! 810151c <atomic_level>
  3074ee:	21 22       	mov.l	r2,@r1
	if(atomic_level == 0) {
  3074f0:	d1 13       	mov.l	307540 <cpu_atomic_end+0x74>,r1	! 810151c <atomic_level>
  3074f2:	61 12       	mov.l	@r1,r1
  3074f4:	21 18       	tst	r1,r1
  3074f6:	8b 12       	bf	30751e <cpu_atomic_end+0x52>
		SR.IMASK = saved_IMASK;
  3074f8:	d1 12       	mov.l	307544 <cpu_atomic_end+0x78>,r1	! 8101518 <saved_IMASK>
  3074fa:	61 12       	mov.l	@r1,r1
  3074fc:	e2 0f       	mov	#15,r2
  3074fe:	21 29       	and	r2,r1
  307500:	61 1c       	extu.b	r1,r1
  307502:	62 e3       	mov	r14,r2
  307504:	72 c4       	add	#-60,r2
  307506:	e3 0f       	mov	#15,r3
  307508:	21 39       	and	r3,r1
  30750a:	41 08       	shll2	r1
  30750c:	41 08       	shll2	r1
  30750e:	57 2f       	mov.l	@(60,r2),r7
  307510:	93 12       	mov.w	307538 <cpu_atomic_end+0x6c>,r3	! ff0f
  307512:	23 79       	and	r7,r3
  307514:	21 3b       	or	r3,r1
  307516:	12 1f       	mov.l	r1,@(60,r2)
		saved_IMASK = 0;
  307518:	d1 0a       	mov.l	307544 <cpu_atomic_end+0x78>,r1	! 8101518 <saved_IMASK>
  30751a:	e2 00       	mov	#0,r2
  30751c:	21 22       	mov.l	r2,@r1
	}

	cpu_setSR(SR);
  30751e:	61 e3       	mov	r14,r1
  307520:	71 c4       	add	#-60,r1
  307522:	54 1f       	mov.l	@(60,r1),r4
  307524:	d1 08       	mov.l	307548 <cpu_atomic_end+0x7c>,r1	! 3076ea <cpu_setSR>
  307526:	41 0b       	jsr	@r1
  307528:	00 09       	nop	
}
  30752a:	00 09       	nop	
  30752c:	7e 04       	add	#4,r14
  30752e:	6f e3       	mov	r14,r15
  307530:	4f 26       	lds.l	@r15+,pr
  307532:	6e f6       	mov.l	@r15+,r14
  307534:	00 0b       	rts	
  307536:	00 09       	nop	
  307538:	ff 0f       	.word 0xff0f
  30753a:	00 09       	nop	
  30753c:	00 30       	.word 0x0030
  30753e:	76 e4       	add	#-28,r6
  307540:	08 10       	.word 0x0810
  307542:	15 1c       	mov.l	r1,@(48,r5)
  307544:	08 10       	.word 0x0810
  307546:	15 18       	mov.l	r1,@(32,r5)
  307548:	00 30       	.word 0x0030
  30754a:	76 ea       	add	#-22,r6

0030754c <cpu_configure_VBR>:

/* VBR address to be used in the next world's configure() */
static uint32_t configure_VBR = 0;

void cpu_configure_VBR(uint32_t VBR)
{
  30754c:	2f e6       	mov.l	r14,@-r15
  30754e:	7f fc       	add	#-4,r15
  307550:	6e f3       	mov	r15,r14
  307552:	61 e3       	mov	r14,r1
  307554:	71 c4       	add	#-60,r1
  307556:	11 4f       	mov.l	r4,@(60,r1)
	configure_VBR = VBR;
  307558:	d1 05       	mov.l	307570 <cpu_configure_VBR+0x24>,r1	! 8101520 <configure_VBR>
  30755a:	62 e3       	mov	r14,r2
  30755c:	72 c4       	add	#-60,r2
  30755e:	52 2f       	mov.l	@(60,r2),r2
  307560:	21 22       	mov.l	r2,@r1
}
  307562:	00 09       	nop	
  307564:	7e 04       	add	#4,r14
  307566:	6f e3       	mov	r14,r15
  307568:	6e f6       	mov.l	@r15+,r14
  30756a:	00 0b       	rts	
  30756c:	00 09       	nop	
  30756e:	00 09       	nop	
  307570:	08 10       	.word 0x0810
  307572:	15 20       	mov.l	r2,@(0,r5)

00307574 <configure>:

static void configure(void)
{
  307574:	2f e6       	mov.l	r14,@-r15
  307576:	4f 22       	sts.l	pr,@-r15
  307578:	7f fc       	add	#-4,r15
  30757a:	6e f3       	mov	r15,r14
	cpu_setVBR(configure_VBR);
  30757c:	d1 17       	mov.l	3075dc <configure+0x68>,r1	! 8101520 <configure_VBR>
  30757e:	61 12       	mov.l	@r1,r1
  307580:	64 13       	mov	r1,r4
  307582:	d1 17       	mov.l	3075e0 <configure+0x6c>,r1	! 3076b0 <cpu_setVBR>
  307584:	41 0b       	jsr	@r1
  307586:	00 09       	nop	
	configure_VBR = 0;
  307588:	d1 14       	mov.l	3075dc <configure+0x68>,r1	! 8101520 <configure_VBR>
  30758a:	e2 00       	mov	#0,r2
  30758c:	21 22       	mov.l	r2,@r1

	if(isSH4()) {
		/* Set CPUOPM.INTMU. On the fx-CG 50 emulator it is available but
		   ignored by the emulator, so additional checks still need to be done
		   in interrupt handlers. */
		cpu_setCPUOPM(cpu_getCPUOPM() | 0x00000008);
  30758e:	d1 15       	mov.l	3075e4 <configure+0x70>,r1	! 3076ce <cpu_getCPUOPM>
  307590:	41 0b       	jsr	@r1
  307592:	00 09       	nop	
  307594:	61 03       	mov	r0,r1
  307596:	e2 08       	mov	#8,r2
  307598:	21 2b       	or	r2,r1
  30759a:	64 13       	mov	r1,r4
  30759c:	d1 12       	mov.l	3075e8 <configure+0x74>,r1	! 3076bc <cpu_setCPUOPM>
  30759e:	41 0b       	jsr	@r1
  3075a0:	00 09       	nop	

		/* Enable DSP instructions */
		cpu_sr_t SR = cpu_getSR();
  3075a2:	d1 12       	mov.l	3075ec <configure+0x78>,r1	! 3076e4 <cpu_getSR>
  3075a4:	41 0b       	jsr	@r1
  3075a6:	00 09       	nop	
  3075a8:	61 03       	mov	r0,r1
  3075aa:	62 13       	mov	r1,r2
  3075ac:	61 e3       	mov	r14,r1
  3075ae:	71 c4       	add	#-60,r1
  3075b0:	11 2f       	mov.l	r2,@(60,r1)
		SR.DSP = 1;
  3075b2:	61 e3       	mov	r14,r1
  3075b4:	71 c4       	add	#-60,r1
  3075b6:	53 1f       	mov.l	@(60,r1),r3
  3075b8:	92 0e       	mov.w	3075d8 <configure+0x64>,r2	! 1000
  3075ba:	22 3b       	or	r3,r2
  3075bc:	11 2f       	mov.l	r2,@(60,r1)
		cpu_setSR(SR);
  3075be:	61 e3       	mov	r14,r1
  3075c0:	71 c4       	add	#-60,r1
  3075c2:	54 1f       	mov.l	@(60,r1),r4
  3075c4:	d1 0a       	mov.l	3075f0 <configure+0x7c>,r1	! 3076ea <cpu_setSR>
  3075c6:	41 0b       	jsr	@r1
  3075c8:	00 09       	nop	
	}
}
  3075ca:	00 09       	nop	
  3075cc:	7e 04       	add	#4,r14
  3075ce:	6f e3       	mov	r14,r15
  3075d0:	4f 26       	lds.l	@r15+,pr
  3075d2:	6e f6       	mov.l	@r15+,r14
  3075d4:	00 0b       	rts	
  3075d6:	00 09       	nop	
  3075d8:	10 00       	mov.l	r0,@(0,r0)
  3075da:	00 09       	nop	
  3075dc:	08 10       	.word 0x0810
  3075de:	15 20       	mov.l	r2,@(0,r5)
  3075e0:	00 30       	.word 0x0030
  3075e2:	76 b0       	add	#-80,r6
  3075e4:	00 30       	.word 0x0030
  3075e6:	76 ce       	add	#-50,r6
  3075e8:	00 30       	.word 0x0030
  3075ea:	76 bc       	add	#-68,r6
  3075ec:	00 30       	.word 0x0030
  3075ee:	76 e4       	add	#-28,r6
  3075f0:	00 30       	.word 0x0030
  3075f2:	76 ea       	add	#-22,r6

003075f4 <hsave>:
//---
// Device state and driver metadata
//---

static void hsave(cpu_state_t *s)
{
  3075f4:	2f e6       	mov.l	r14,@-r15
  3075f6:	4f 22       	sts.l	pr,@-r15
  3075f8:	7f fc       	add	#-4,r15
  3075fa:	6e f3       	mov	r15,r14
  3075fc:	61 e3       	mov	r14,r1
  3075fe:	71 c4       	add	#-60,r1
  307600:	11 4f       	mov.l	r4,@(60,r1)
	s->VBR = cpu_getVBR();
  307602:	d1 10       	mov.l	307644 <hsave+0x50>,r1	! 3076b6 <cpu_getVBR>
  307604:	41 0b       	jsr	@r1
  307606:	00 09       	nop	
  307608:	61 03       	mov	r0,r1
  30760a:	62 e3       	mov	r14,r2
  30760c:	72 c4       	add	#-60,r2
  30760e:	52 2f       	mov.l	@(60,r2),r2
  307610:	12 11       	mov.l	r1,@(4,r2)

	if(isSH4()) {
		s->CPUOPM = cpu_getCPUOPM();
  307612:	d1 0d       	mov.l	307648 <hsave+0x54>,r1	! 3076ce <cpu_getCPUOPM>
  307614:	41 0b       	jsr	@r1
  307616:	00 09       	nop	
  307618:	61 03       	mov	r0,r1
  30761a:	62 e3       	mov	r14,r2
  30761c:	72 c4       	add	#-60,r2
  30761e:	52 2f       	mov.l	@(60,r2),r2
  307620:	12 12       	mov.l	r1,@(8,r2)
		s->SR = cpu_getSR().lword;
  307622:	d1 0a       	mov.l	30764c <hsave+0x58>,r1	! 3076e4 <cpu_getSR>
  307624:	41 0b       	jsr	@r1
  307626:	00 09       	nop	
  307628:	61 03       	mov	r0,r1
  30762a:	62 13       	mov	r1,r2
  30762c:	61 e3       	mov	r14,r1
  30762e:	71 c4       	add	#-60,r1
  307630:	51 1f       	mov.l	@(60,r1),r1
  307632:	21 22       	mov.l	r2,@r1
	}
}
  307634:	00 09       	nop	
  307636:	7e 04       	add	#4,r14
  307638:	6f e3       	mov	r14,r15
  30763a:	4f 26       	lds.l	@r15+,pr
  30763c:	6e f6       	mov.l	@r15+,r14
  30763e:	00 0b       	rts	
  307640:	00 09       	nop	
  307642:	00 09       	nop	
  307644:	00 30       	.word 0x0030
  307646:	76 b6       	add	#-74,r6
  307648:	00 30       	.word 0x0030
  30764a:	76 ce       	add	#-50,r6
  30764c:	00 30       	.word 0x0030
  30764e:	76 e4       	add	#-28,r6

00307650 <hrestore>:

static void hrestore(cpu_state_t const *s)
{
  307650:	2f e6       	mov.l	r14,@-r15
  307652:	4f 22       	sts.l	pr,@-r15
  307654:	7f fc       	add	#-4,r15
  307656:	6e f3       	mov	r15,r14
  307658:	61 e3       	mov	r14,r1
  30765a:	71 c4       	add	#-60,r1
  30765c:	11 4f       	mov.l	r4,@(60,r1)
	cpu_setVBR(s->VBR);
  30765e:	61 e3       	mov	r14,r1
  307660:	71 c4       	add	#-60,r1
  307662:	51 1f       	mov.l	@(60,r1),r1
  307664:	51 11       	mov.l	@(4,r1),r1
  307666:	64 13       	mov	r1,r4
  307668:	d1 0c       	mov.l	30769c <hrestore+0x4c>,r1	! 3076b0 <cpu_setVBR>
  30766a:	41 0b       	jsr	@r1
  30766c:	00 09       	nop	

	if(isSH4()) {
		cpu_setCPUOPM(s->CPUOPM);
  30766e:	61 e3       	mov	r14,r1
  307670:	71 c4       	add	#-60,r1
  307672:	51 1f       	mov.l	@(60,r1),r1
  307674:	51 12       	mov.l	@(8,r1),r1
  307676:	64 13       	mov	r1,r4
  307678:	d1 09       	mov.l	3076a0 <hrestore+0x50>,r1	! 3076bc <cpu_setCPUOPM>
  30767a:	41 0b       	jsr	@r1
  30767c:	00 09       	nop	
		cpu_setSR((cpu_sr_t)s->SR);
  30767e:	61 e3       	mov	r14,r1
  307680:	71 c4       	add	#-60,r1
  307682:	51 1f       	mov.l	@(60,r1),r1
  307684:	61 12       	mov.l	@r1,r1
  307686:	64 13       	mov	r1,r4
  307688:	d1 06       	mov.l	3076a4 <hrestore+0x54>,r1	! 3076ea <cpu_setSR>
  30768a:	41 0b       	jsr	@r1
  30768c:	00 09       	nop	
	}
}
  30768e:	00 09       	nop	
  307690:	7e 04       	add	#4,r14
  307692:	6f e3       	mov	r14,r15
  307694:	4f 26       	lds.l	@r15+,pr
  307696:	6e f6       	mov.l	@r15+,r14
  307698:	00 0b       	rts	
  30769a:	00 09       	nop	
  30769c:	00 30       	.word 0x0030
  30769e:	76 b0       	add	#-80,r6
  3076a0:	00 30       	.word 0x0030
  3076a2:	76 bc       	add	#-68,r6
  3076a4:	00 30       	.word 0x0030
  3076a6:	76 ea       	add	#-22,r6
	...

003076b0 <cpu_setVBR>:
  3076b0:	44 2e       	ldc	r4,vbr
  3076b2:	00 0b       	rts	
  3076b4:	00 09       	nop	

003076b6 <cpu_getVBR>:
  3076b6:	00 22       	stc	vbr,r0
  3076b8:	00 0b       	rts	
  3076ba:	00 09       	nop	

003076bc <cpu_setCPUOPM>:
  3076bc:	d0 08       	mov.l	3076e0 <cpu_getCPUOPM+0x12>,r0	! ff2f0000
  3076be:	20 42       	mov.l	r4,@r0
  3076c0:	65 02       	mov.l	@r0,r5
  3076c2:	e0 a0       	mov	#-96,r0
  3076c4:	40 28       	shll16	r0
  3076c6:	40 18       	shll8	r0
  3076c8:	00 e3       	icbi	@r0
  3076ca:	00 0b       	rts	
  3076cc:	00 09       	nop	

003076ce <cpu_getCPUOPM>:
  3076ce:	d0 04       	mov.l	3076e0 <cpu_getCPUOPM+0x12>,r0	! ff2f0000
  3076d0:	00 0b       	rts	
  3076d2:	60 02       	mov.l	@r0,r0
  3076d4:	00 09       	nop	
  3076d6:	00 09       	nop	
  3076d8:	00 09       	nop	
  3076da:	00 09       	nop	
  3076dc:	00 09       	nop	
  3076de:	00 09       	nop	
  3076e0:	ff 2f       	.word 0xff2f
	...

003076e4 <cpu_getSR>:
  3076e4:	00 02       	stc	sr,r0
  3076e6:	00 0b       	rts	
  3076e8:	00 09       	nop	

003076ea <cpu_setSR>:
  3076ea:	d0 05       	mov.l	307700 <cpu_setSR+0x16>,r0	! 700010f0
  3076ec:	61 07       	not	r0,r1
  3076ee:	02 02       	stc	sr,r2
  3076f0:	22 19       	and	r1,r2
  3076f2:	24 09       	and	r0,r4
  3076f4:	22 4b       	or	r4,r2
  3076f6:	42 0e       	ldc	r2,sr
  3076f8:	00 0b       	rts	
  3076fa:	00 09       	nop	
  3076fc:	00 09       	nop	
  3076fe:	00 09       	nop	
  307700:	70 00       	add	#0,r0
  307702:	10 f0       	mov.l	r15,@(0,r0)
  307704:	00 09       	nop	
  307706:	00 09       	nop	
  307708:	00 09       	nop	
  30770a:	00 09       	nop	
  30770c:	00 09       	nop	
  30770e:	00 09       	nop	

00307710 <GINT_CALL_SET_function>:
{
  307710:	2f e6       	mov.l	r14,@-r15
  307712:	7f fc       	add	#-4,r15
  307714:	6e f3       	mov	r15,r14
  307716:	61 e3       	mov	r14,r1
  307718:	71 c4       	add	#-60,r1
  30771a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30771c:	61 e3       	mov	r14,r1
  30771e:	71 c4       	add	#-60,r1
  307720:	51 1f       	mov.l	@(60,r1),r1
  307722:	e2 01       	mov	#1,r2
  307724:	21 22       	mov.l	r2,@r1
	return 0;
  307726:	e1 00       	mov	#0,r1
}
  307728:	60 13       	mov	r1,r0
  30772a:	7e 04       	add	#4,r14
  30772c:	6f e3       	mov	r14,r15
  30772e:	6e f6       	mov.l	@r15+,r14
  307730:	00 0b       	rts	
  307732:	00 09       	nop	

00307734 <GINT_CALL_INC_function>:
{
  307734:	2f e6       	mov.l	r14,@-r15
  307736:	7f fc       	add	#-4,r15
  307738:	6e f3       	mov	r15,r14
  30773a:	61 e3       	mov	r14,r1
  30773c:	71 c4       	add	#-60,r1
  30773e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  307740:	61 e3       	mov	r14,r1
  307742:	71 c4       	add	#-60,r1
  307744:	51 1f       	mov.l	@(60,r1),r1
  307746:	61 12       	mov.l	@r1,r1
  307748:	62 13       	mov	r1,r2
  30774a:	72 01       	add	#1,r2
  30774c:	61 e3       	mov	r14,r1
  30774e:	71 c4       	add	#-60,r1
  307750:	51 1f       	mov.l	@(60,r1),r1
  307752:	21 22       	mov.l	r2,@r1
	return 0;
  307754:	e1 00       	mov	#0,r1
}
  307756:	60 13       	mov	r1,r0
  307758:	7e 04       	add	#4,r14
  30775a:	6f e3       	mov	r14,r15
  30775c:	6e f6       	mov.l	@r15+,r14
  30775e:	00 0b       	rts	
  307760:	00 09       	nop	

00307762 <GINT_CALL_SET_STOP_function>:
{
  307762:	2f e6       	mov.l	r14,@-r15
  307764:	7f fc       	add	#-4,r15
  307766:	6e f3       	mov	r15,r14
  307768:	61 e3       	mov	r14,r1
  30776a:	71 c4       	add	#-60,r1
  30776c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30776e:	61 e3       	mov	r14,r1
  307770:	71 c4       	add	#-60,r1
  307772:	51 1f       	mov.l	@(60,r1),r1
  307774:	e2 01       	mov	#1,r2
  307776:	21 22       	mov.l	r2,@r1
	return 1;
  307778:	e1 01       	mov	#1,r1
}
  30777a:	60 13       	mov	r1,r0
  30777c:	7e 04       	add	#4,r14
  30777e:	6f e3       	mov	r14,r15
  307780:	6e f6       	mov.l	@r15+,r14
  307782:	00 0b       	rts	
  307784:	00 09       	nop	

00307786 <GINT_CALL_INC_STOP_function>:
{
  307786:	2f e6       	mov.l	r14,@-r15
  307788:	7f fc       	add	#-4,r15
  30778a:	6e f3       	mov	r15,r14
  30778c:	61 e3       	mov	r14,r1
  30778e:	71 c4       	add	#-60,r1
  307790:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  307792:	61 e3       	mov	r14,r1
  307794:	71 c4       	add	#-60,r1
  307796:	51 1f       	mov.l	@(60,r1),r1
  307798:	61 12       	mov.l	@r1,r1
  30779a:	62 13       	mov	r1,r2
  30779c:	72 01       	add	#1,r2
  30779e:	61 e3       	mov	r14,r1
  3077a0:	71 c4       	add	#-60,r1
  3077a2:	51 1f       	mov.l	@(60,r1),r1
  3077a4:	21 22       	mov.l	r2,@r1
	return 1;
  3077a6:	e1 01       	mov	#1,r1
}
  3077a8:	60 13       	mov	r1,r0
  3077aa:	7e 04       	add	#4,r14
  3077ac:	6f e3       	mov	r14,r15
  3077ae:	6e f6       	mov.l	@r15+,r14
  3077b0:	00 0b       	rts	
  3077b2:	00 09       	nop	

003077b4 <dma_channel>:
/* ICS for dma_channel_wait() for all channels */
static cpu_csleep_t *dma_wait_ics[6] = { 0 };

/* dma_channel(): Get address of a DMA channel */
static channel_t *dma_channel(int channel)
{
  3077b4:	2f e6       	mov.l	r14,@-r15
  3077b6:	7f e4       	add	#-28,r15
  3077b8:	6e f3       	mov	r15,r14
  3077ba:	61 e3       	mov	r14,r1
  3077bc:	71 dc       	add	#-36,r1
  3077be:	11 49       	mov.l	r4,@(36,r1)
	channel_t *addr[6] = {
  3077c0:	61 e3       	mov	r14,r1
  3077c2:	71 04       	add	#4,r1
  3077c4:	d2 16       	mov.l	307820 <dma_channel+0x6c>,r2	! fe008020
  3077c6:	21 22       	mov.l	r2,@r1
  3077c8:	61 e3       	mov	r14,r1
  3077ca:	71 04       	add	#4,r1
  3077cc:	d2 15       	mov.l	307824 <dma_channel+0x70>,r2	! fe008030
  3077ce:	11 21       	mov.l	r2,@(4,r1)
  3077d0:	61 e3       	mov	r14,r1
  3077d2:	71 04       	add	#4,r1
  3077d4:	d2 14       	mov.l	307828 <dma_channel+0x74>,r2	! fe008040
  3077d6:	11 22       	mov.l	r2,@(8,r1)
  3077d8:	61 e3       	mov	r14,r1
  3077da:	71 04       	add	#4,r1
  3077dc:	d2 13       	mov.l	30782c <dma_channel+0x78>,r2	! fe008050
  3077de:	11 23       	mov.l	r2,@(12,r1)
  3077e0:	61 e3       	mov	r14,r1
  3077e2:	71 04       	add	#4,r1
  3077e4:	d2 12       	mov.l	307830 <dma_channel+0x7c>,r2	! fe008070
  3077e6:	11 24       	mov.l	r2,@(16,r1)
  3077e8:	61 e3       	mov	r14,r1
  3077ea:	71 04       	add	#4,r1
  3077ec:	d2 11       	mov.l	307834 <dma_channel+0x80>,r2	! fe008080
  3077ee:	11 25       	mov.l	r2,@(20,r1)
		&DMA.DMA0, &DMA.DMA1, &DMA.DMA2,
		&DMA.DMA3, &DMA.DMA4, &DMA.DMA5,
	};

	return ((uint)channel >= 6 ? NULL : addr[channel]);
  3077f0:	61 e3       	mov	r14,r1
  3077f2:	71 dc       	add	#-36,r1
  3077f4:	52 19       	mov.l	@(36,r1),r2
  3077f6:	e1 05       	mov	#5,r1
  3077f8:	32 16       	cmp/hi	r1,r2
  3077fa:	89 09       	bt	307810 <dma_channel+0x5c>
  3077fc:	62 e3       	mov	r14,r2
  3077fe:	72 04       	add	#4,r2
  307800:	61 e3       	mov	r14,r1
  307802:	71 dc       	add	#-36,r1
  307804:	51 19       	mov.l	@(36,r1),r1
  307806:	41 08       	shll2	r1
  307808:	31 2c       	add	r2,r1
  30780a:	61 12       	mov.l	@r1,r1
  30780c:	a0 01       	bra	307812 <dma_channel+0x5e>
  30780e:	00 09       	nop	
  307810:	e1 00       	mov	#0,r1
}
  307812:	60 13       	mov	r1,r0
  307814:	7e 1c       	add	#28,r14
  307816:	6f e3       	mov	r14,r15
  307818:	6e f6       	mov.l	@r15+,r14
  30781a:	00 0b       	rts	
  30781c:	00 09       	nop	
  30781e:	00 09       	nop	
  307820:	fe 00       	.word 0xfe00
  307822:	80 20       	mov.b	r0,@(0,r2)
  307824:	fe 00       	.word 0xfe00
  307826:	80 30       	mov.b	r0,@(0,r3)
  307828:	fe 00       	.word 0xfe00
  30782a:	80 40       	mov.b	r0,@(0,r4)
  30782c:	fe 00       	.word 0xfe00
  30782e:	80 50       	mov.b	r0,@(0,r5)
  307830:	fe 00       	.word 0xfe00
  307832:	80 70       	mov.b	r0,@(0,r7)
  307834:	fe 00       	.word 0xfe00
  307836:	80 80       	mov.b	r0,@(0,r8)

00307838 <dma_translate>:

/* dma_translate(): Translate virtual address to DMA-suitable form */
static uint32_t dma_translate(void const *address)
{
  307838:	2f e6       	mov.l	r14,@-r15
  30783a:	7f f8       	add	#-8,r15
  30783c:	6e f3       	mov	r15,r14
  30783e:	61 e3       	mov	r14,r1
  307840:	71 c8       	add	#-56,r1
  307842:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t a = (uint32_t)address;
  307844:	61 e3       	mov	r14,r1
  307846:	71 c8       	add	#-56,r1
  307848:	62 e3       	mov	r14,r2
  30784a:	72 c8       	add	#-56,r2
  30784c:	52 2e       	mov.l	@(56,r2),r2
  30784e:	11 2f       	mov.l	r2,@(60,r1)

	/* Preserve RS addresses (as of SH7724 Reference, 11.2.2) */
	if(a >= 0xfd800000 && a < 0xfd800800)
  307850:	61 e3       	mov	r14,r1
  307852:	71 c8       	add	#-56,r1
  307854:	52 1f       	mov.l	@(60,r1),r2
  307856:	d1 2e       	mov.l	307910 <dma_translate+0xd8>,r1	! fd7fffff
  307858:	32 16       	cmp/hi	r1,r2
  30785a:	8b 0a       	bf	307872 <dma_translate+0x3a>
  30785c:	61 e3       	mov	r14,r1
  30785e:	71 c8       	add	#-56,r1
  307860:	52 1f       	mov.l	@(60,r1),r2
  307862:	d1 2c       	mov.l	307914 <dma_translate+0xdc>,r1	! fd8007ff
  307864:	32 16       	cmp/hi	r1,r2
  307866:	89 04       	bt	307872 <dma_translate+0x3a>
		return a;
  307868:	61 e3       	mov	r14,r1
  30786a:	71 c8       	add	#-56,r1
  30786c:	51 1f       	mov.l	@(60,r1),r1
  30786e:	a0 48       	bra	307902 <dma_translate+0xca>
  307870:	00 09       	nop	

	/* Translate virtual addresses to IL memory to physical addresses; the
	   same address is used (as of SH7724 Reference, 10.3.3) */
	if(a >= 0xe5200000 && a < 0xe5204000)
  307872:	61 e3       	mov	r14,r1
  307874:	71 c8       	add	#-56,r1
  307876:	52 1f       	mov.l	@(60,r1),r2
  307878:	d1 27       	mov.l	307918 <dma_translate+0xe0>,r1	! e51fffff
  30787a:	32 16       	cmp/hi	r1,r2
  30787c:	8b 0a       	bf	307894 <dma_translate+0x5c>
  30787e:	61 e3       	mov	r14,r1
  307880:	71 c8       	add	#-56,r1
  307882:	52 1f       	mov.l	@(60,r1),r2
  307884:	d1 25       	mov.l	30791c <dma_translate+0xe4>,r1	! e5203fff
  307886:	32 16       	cmp/hi	r1,r2
  307888:	89 04       	bt	307894 <dma_translate+0x5c>
		return a;
  30788a:	61 e3       	mov	r14,r1
  30788c:	71 c8       	add	#-56,r1
  30788e:	51 1f       	mov.l	@(60,r1),r1
  307890:	a0 37       	bra	307902 <dma_translate+0xca>
  307892:	00 09       	nop	

	/* First additional on-chip memory area (XRAM) */
	if(a >= 0xe5007000 && a < 0xe5009000)
  307894:	61 e3       	mov	r14,r1
  307896:	71 c8       	add	#-56,r1
  307898:	52 1f       	mov.l	@(60,r1),r2
  30789a:	d1 21       	mov.l	307920 <dma_translate+0xe8>,r1	! e5006fff
  30789c:	32 16       	cmp/hi	r1,r2
  30789e:	8b 0a       	bf	3078b6 <dma_translate+0x7e>
  3078a0:	61 e3       	mov	r14,r1
  3078a2:	71 c8       	add	#-56,r1
  3078a4:	52 1f       	mov.l	@(60,r1),r2
  3078a6:	d1 1f       	mov.l	307924 <dma_translate+0xec>,r1	! e5008fff
  3078a8:	32 16       	cmp/hi	r1,r2
  3078aa:	89 04       	bt	3078b6 <dma_translate+0x7e>
		return a;
  3078ac:	61 e3       	mov	r14,r1
  3078ae:	71 c8       	add	#-56,r1
  3078b0:	51 1f       	mov.l	@(60,r1),r1
  3078b2:	a0 26       	bra	307902 <dma_translate+0xca>
  3078b4:	00 09       	nop	

	/* Second on-chip memory area (YRAM) */
	if(a >= 0xe5017000 && a < 0xe5019000)
  3078b6:	61 e3       	mov	r14,r1
  3078b8:	71 c8       	add	#-56,r1
  3078ba:	52 1f       	mov.l	@(60,r1),r2
  3078bc:	d1 1a       	mov.l	307928 <dma_translate+0xf0>,r1	! e5016fff
  3078be:	32 16       	cmp/hi	r1,r2
  3078c0:	8b 0a       	bf	3078d8 <dma_translate+0xa0>
  3078c2:	61 e3       	mov	r14,r1
  3078c4:	71 c8       	add	#-56,r1
  3078c6:	52 1f       	mov.l	@(60,r1),r2
  3078c8:	d1 18       	mov.l	30792c <dma_translate+0xf4>,r1	! e5018fff
  3078ca:	32 16       	cmp/hi	r1,r2
  3078cc:	89 04       	bt	3078d8 <dma_translate+0xa0>
		return a;
  3078ce:	61 e3       	mov	r14,r1
  3078d0:	71 c8       	add	#-56,r1
  3078d2:	51 1f       	mov.l	@(60,r1),r1
  3078d4:	a0 15       	bra	307902 <dma_translate+0xca>
  3078d6:	00 09       	nop	

	/* Translate P1 and P2 addresses to ROM and RAM to physical form */
	if(a >= 0x80000000 && a < 0xc0000000)
  3078d8:	61 e3       	mov	r14,r1
  3078da:	71 c8       	add	#-56,r1
  3078dc:	51 1f       	mov.l	@(60,r1),r1
  3078de:	41 11       	cmp/pz	r1
  3078e0:	89 0c       	bt	3078fc <dma_translate+0xc4>
  3078e2:	61 e3       	mov	r14,r1
  3078e4:	71 c8       	add	#-56,r1
  3078e6:	52 1f       	mov.l	@(60,r1),r2
  3078e8:	d1 11       	mov.l	307930 <dma_translate+0xf8>,r1	! bfffffff
  3078ea:	32 16       	cmp/hi	r1,r2
  3078ec:	89 06       	bt	3078fc <dma_translate+0xc4>
		return a & 0x1fffffff;
  3078ee:	61 e3       	mov	r14,r1
  3078f0:	71 c8       	add	#-56,r1
  3078f2:	52 1f       	mov.l	@(60,r1),r2
  3078f4:	d1 0f       	mov.l	307934 <dma_translate+0xfc>,r1	! 1fffffff
  3078f6:	21 29       	and	r2,r1
  3078f8:	a0 03       	bra	307902 <dma_translate+0xca>
  3078fa:	00 09       	nop	

	/* By default: I don't know what this is, let's preserve it */
	return a;
  3078fc:	61 e3       	mov	r14,r1
  3078fe:	71 c8       	add	#-56,r1
  307900:	51 1f       	mov.l	@(60,r1),r1
}
  307902:	60 13       	mov	r1,r0
  307904:	7e 08       	add	#8,r14
  307906:	6f e3       	mov	r14,r15
  307908:	6e f6       	mov.l	@r15+,r14
  30790a:	00 0b       	rts	
  30790c:	00 09       	nop	
  30790e:	00 09       	nop	
  307910:	fd 7f       	.word 0xfd7f
  307912:	ff ff       	.word 0xffff
  307914:	fd 80       	.word 0xfd80
  307916:	07 ff       	mac.l	@r15+,@r7+
  307918:	e5 1f       	mov	#31,r5
  30791a:	ff ff       	.word 0xffff
  30791c:	e5 20       	mov	#32,r5
  30791e:	3f ff       	addv	r15,r15
  307920:	e5 00       	mov	#0,r5
  307922:	6f ff       	exts.w	r15,r15
  307924:	e5 00       	mov	#0,r5
  307926:	8f ff       	bf.s	307928 <dma_translate+0xf0>
  307928:	e5 01       	mov	#1,r5
  30792a:	6f ff       	exts.w	r15,r15
  30792c:	e5 01       	mov	#1,r5
  30792e:	8f ff       	bf.s	307930 <dma_translate+0xf8>
  307930:	bf ff       	bsr	307932 <dma_translate+0xfa>
  307932:	ff ff       	.word 0xffff
  307934:	1f ff       	mov.l	r15,@(60,r15)
  307936:	ff ff       	.word 0xffff

00307938 <dma_setup>:
   Returns non-zero if the DMA is busy or a configuration error occurs. */
static int dma_setup(int channel, dma_size_t size, uint blocks,
	void const *src, dma_address_t src_mode,
	void *dst, dma_address_t dst_mode,
	int interrupts)
{
  307938:	2f 86       	mov.l	r8,@-r15
  30793a:	2f e6       	mov.l	r14,@-r15
  30793c:	4f 22       	sts.l	pr,@-r15
  30793e:	7f ec       	add	#-20,r15
  307940:	6e f3       	mov	r15,r14
  307942:	61 e3       	mov	r14,r1
  307944:	71 d4       	add	#-44,r1
  307946:	11 4e       	mov.l	r4,@(56,r1)
  307948:	61 e3       	mov	r14,r1
  30794a:	71 d4       	add	#-44,r1
  30794c:	11 5d       	mov.l	r5,@(52,r1)
  30794e:	61 e3       	mov	r14,r1
  307950:	71 d4       	add	#-44,r1
  307952:	11 6c       	mov.l	r6,@(48,r1)
  307954:	61 e3       	mov	r14,r1
  307956:	71 d4       	add	#-44,r1
  307958:	11 7b       	mov.l	r7,@(44,r1)
	channel_t *ch = dma_channel(channel);
  30795a:	68 e3       	mov	r14,r8
  30795c:	78 d4       	add	#-44,r8
  30795e:	61 e3       	mov	r14,r1
  307960:	71 d4       	add	#-44,r1
  307962:	54 1e       	mov.l	@(56,r1),r4
  307964:	d1 0c       	mov.l	307998 <dma_setup+0x60>,r1	! 3077b4 <dma_channel>
  307966:	41 0b       	jsr	@r1
  307968:	00 09       	nop	
  30796a:	61 03       	mov	r0,r1
  30796c:	18 1f       	mov.l	r1,@(60,r8)
	if(!ch) return 1;
  30796e:	61 e3       	mov	r14,r1
  307970:	71 d4       	add	#-44,r1
  307972:	51 1f       	mov.l	@(60,r1),r1
  307974:	21 18       	tst	r1,r1
  307976:	8b 02       	bf	30797e <dma_setup+0x46>
  307978:	e1 01       	mov	#1,r1
  30797a:	a1 1b       	bra	307bb4 <dma_setup+0x27c>
  30797c:	00 09       	nop	

	/* Safety guard: only start a transfer if there's not one running */
	if(ch->CHCR.DE) return 1;
  30797e:	61 e3       	mov	r14,r1
  307980:	71 d4       	add	#-44,r1
  307982:	51 1f       	mov.l	@(60,r1),r1
  307984:	51 13       	mov.l	@(12,r1),r1
  307986:	e2 01       	mov	#1,r2
  307988:	21 29       	and	r2,r1
  30798a:	61 1c       	extu.b	r1,r1
  30798c:	21 18       	tst	r1,r1
  30798e:	89 05       	bt	30799c <dma_setup+0x64>
  307990:	e1 01       	mov	#1,r1
  307992:	a1 0f       	bra	307bb4 <dma_setup+0x27c>
  307994:	00 09       	nop	
  307996:	00 09       	nop	
  307998:	00 30       	.word 0x0030
  30799a:	77 b4       	add	#-76,r7

	/* Disable channel and disable the master DMA switch */
	ch->CHCR.DE = 0;
  30799c:	61 e3       	mov	r14,r1
  30799e:	71 d4       	add	#-44,r1
  3079a0:	52 1f       	mov.l	@(60,r1),r2
  3079a2:	51 23       	mov.l	@(12,r2),r1
  3079a4:	e3 fe       	mov	#-2,r3
  3079a6:	21 39       	and	r3,r1
  3079a8:	12 13       	mov.l	r1,@(12,r2)
	DMA.OR.DME = 0;
  3079aa:	d1 70       	mov.l	307b6c <dma_setup+0x234>,r1	! fe008020
  3079ac:	62 13       	mov	r1,r2
  3079ae:	72 40       	add	#64,r2
  3079b0:	61 21       	mov.w	@r2,r1
  3079b2:	e3 fe       	mov	#-2,r3
  3079b4:	21 39       	and	r3,r1
  3079b6:	22 11       	mov.w	r1,@r2

	/* Set DMA source and target address */
	ch->SAR = dma_translate(src);
  3079b8:	61 e3       	mov	r14,r1
  3079ba:	71 d4       	add	#-44,r1
  3079bc:	54 1b       	mov.l	@(44,r1),r4
  3079be:	d1 6c       	mov.l	307b70 <dma_setup+0x238>,r1	! 307838 <dma_translate>
  3079c0:	41 0b       	jsr	@r1
  3079c2:	00 09       	nop	
  3079c4:	61 03       	mov	r0,r1
  3079c6:	62 e3       	mov	r14,r2
  3079c8:	72 d4       	add	#-44,r2
  3079ca:	52 2f       	mov.l	@(60,r2),r2
  3079cc:	22 12       	mov.l	r1,@r2
	ch->DAR = dma_translate(dst);
  3079ce:	54 e9       	mov.l	@(36,r14),r4
  3079d0:	d1 67       	mov.l	307b70 <dma_setup+0x238>,r1	! 307838 <dma_translate>
  3079d2:	41 0b       	jsr	@r1
  3079d4:	00 09       	nop	
  3079d6:	61 03       	mov	r0,r1
  3079d8:	62 e3       	mov	r14,r2
  3079da:	72 d4       	add	#-44,r2
  3079dc:	52 2f       	mov.l	@(60,r2),r2
  3079de:	12 11       	mov.l	r1,@(4,r2)

	/* Set the number of blocks to be transferred */
	ch->TCR = blocks;
  3079e0:	61 e3       	mov	r14,r1
  3079e2:	71 d4       	add	#-44,r1
  3079e4:	51 1f       	mov.l	@(60,r1),r1
  3079e6:	62 e3       	mov	r14,r2
  3079e8:	72 d4       	add	#-44,r2
  3079ea:	52 2c       	mov.l	@(48,r2),r2
  3079ec:	11 22       	mov.l	r2,@(8,r1)

	/* Fill in CHCR. Set RS=0100 (auto-request) and the user-provided
	   values for TS (transfer size), DM and SM (address modes) */
	ch->CHCR.lword = 0x00000400;
  3079ee:	61 e3       	mov	r14,r1
  3079f0:	71 d4       	add	#-44,r1
  3079f2:	51 1f       	mov.l	@(60,r1),r1
  3079f4:	92 b7       	mov.w	307b66 <dma_setup+0x22e>,r2	! 400
  3079f6:	11 23       	mov.l	r2,@(12,r1)
	ch->CHCR.TS_32 = (size >> 2);
  3079f8:	61 e3       	mov	r14,r1
  3079fa:	71 d4       	add	#-44,r1
  3079fc:	51 1d       	mov.l	@(52,r1),r1
  3079fe:	41 09       	shlr2	r1
  307a00:	e3 03       	mov	#3,r3
  307a02:	21 39       	and	r3,r1
  307a04:	63 1c       	extu.b	r1,r3
  307a06:	61 e3       	mov	r14,r1
  307a08:	71 d4       	add	#-44,r1
  307a0a:	52 1f       	mov.l	@(60,r1),r2
  307a0c:	51 23       	mov.l	@(12,r2),r1
  307a0e:	e7 03       	mov	#3,r7
  307a10:	23 79       	and	r7,r3
  307a12:	e7 14       	mov	#20,r7
  307a14:	43 7d       	shld	r7,r3
  307a16:	d7 57       	mov.l	307b74 <dma_setup+0x23c>,r7	! ffcfffff
  307a18:	21 79       	and	r7,r1
  307a1a:	21 3b       	or	r3,r1
  307a1c:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.TS_10 = (size & 3);
  307a1e:	61 e3       	mov	r14,r1
  307a20:	71 d4       	add	#-44,r1
  307a22:	51 1d       	mov.l	@(52,r1),r1
  307a24:	e2 03       	mov	#3,r2
  307a26:	21 29       	and	r2,r1
  307a28:	61 1c       	extu.b	r1,r1
  307a2a:	62 e3       	mov	r14,r2
  307a2c:	72 d4       	add	#-44,r2
  307a2e:	53 2f       	mov.l	@(60,r2),r3
  307a30:	52 33       	mov.l	@(12,r3),r2
  307a32:	e7 03       	mov	#3,r7
  307a34:	21 79       	and	r7,r1
  307a36:	41 08       	shll2	r1
  307a38:	31 1c       	add	r1,r1
  307a3a:	e7 e7       	mov	#-25,r7
  307a3c:	22 79       	and	r7,r2
  307a3e:	21 2b       	or	r2,r1
  307a40:	62 13       	mov	r1,r2
  307a42:	13 23       	mov.l	r2,@(12,r3)
	ch->CHCR.DM = dst_mode;
  307a44:	51 ea       	mov.l	@(40,r14),r1
  307a46:	e2 03       	mov	#3,r2
  307a48:	21 29       	and	r2,r1
  307a4a:	63 1c       	extu.b	r1,r3
  307a4c:	61 e3       	mov	r14,r1
  307a4e:	71 d4       	add	#-44,r1
  307a50:	52 1f       	mov.l	@(60,r1),r2
  307a52:	51 23       	mov.l	@(12,r2),r1
  307a54:	e7 03       	mov	#3,r7
  307a56:	23 79       	and	r7,r3
  307a58:	e7 0e       	mov	#14,r7
  307a5a:	43 7d       	shld	r7,r3
  307a5c:	d7 46       	mov.l	307b78 <dma_setup+0x240>,r7	! ffff3fff
  307a5e:	21 79       	and	r7,r1
  307a60:	21 3b       	or	r3,r1
  307a62:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.SM = src_mode;
  307a64:	51 e8       	mov.l	@(32,r14),r1
  307a66:	e2 03       	mov	#3,r2
  307a68:	21 29       	and	r2,r1
  307a6a:	63 1c       	extu.b	r1,r3
  307a6c:	61 e3       	mov	r14,r1
  307a6e:	71 d4       	add	#-44,r1
  307a70:	52 1f       	mov.l	@(60,r1),r2
  307a72:	51 23       	mov.l	@(12,r2),r1
  307a74:	e7 03       	mov	#3,r7
  307a76:	23 79       	and	r7,r3
  307a78:	e7 0c       	mov	#12,r7
  307a7a:	43 7d       	shld	r7,r3
  307a7c:	97 74       	mov.w	307b68 <dma_setup+0x230>,r7	! cfff
  307a7e:	21 79       	and	r7,r1
  307a80:	21 3b       	or	r3,r1
  307a82:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.IE = !!interrupts;
  307a84:	51 eb       	mov.l	@(44,r14),r1
  307a86:	21 18       	tst	r1,r1
  307a88:	e1 ff       	mov	#-1,r1
  307a8a:	61 1a       	negc	r1,r1
  307a8c:	63 1c       	extu.b	r1,r3
  307a8e:	61 e3       	mov	r14,r1
  307a90:	71 d4       	add	#-44,r1
  307a92:	52 1f       	mov.l	@(60,r1),r2
  307a94:	51 23       	mov.l	@(12,r2),r1
  307a96:	e7 01       	mov	#1,r7
  307a98:	23 79       	and	r7,r3
  307a9a:	43 08       	shll2	r3
  307a9c:	e7 fb       	mov	#-5,r7
  307a9e:	21 79       	and	r7,r1
  307aa0:	21 3b       	or	r3,r1
  307aa2:	12 13       	mov.l	r1,@(12,r2)

	/* Prepare DMAOR by enabling the master switch and clearing the
	   blocking flags. */
	DMA.OR.DME = 1;
  307aa4:	d1 31       	mov.l	307b6c <dma_setup+0x234>,r1	! fe008020
  307aa6:	62 13       	mov	r1,r2
  307aa8:	72 40       	add	#64,r2
  307aaa:	61 21       	mov.w	@r2,r1
  307aac:	e3 01       	mov	#1,r3
  307aae:	21 3b       	or	r3,r1
  307ab0:	22 11       	mov.w	r1,@r2
	DMA.OR.AE = 0;
  307ab2:	d1 2e       	mov.l	307b6c <dma_setup+0x234>,r1	! fe008020
  307ab4:	62 13       	mov	r1,r2
  307ab6:	72 40       	add	#64,r2
  307ab8:	61 21       	mov.w	@r2,r1
  307aba:	e3 fb       	mov	#-5,r3
  307abc:	21 39       	and	r3,r1
  307abe:	22 11       	mov.w	r1,@r2
	DMA.OR.NMIF = 0;
  307ac0:	d1 2a       	mov.l	307b6c <dma_setup+0x234>,r1	! fe008020
  307ac2:	62 13       	mov	r1,r2
  307ac4:	72 40       	add	#64,r2
  307ac6:	61 21       	mov.w	@r2,r1
  307ac8:	e3 fd       	mov	#-3,r3
  307aca:	21 39       	and	r3,r1
  307acc:	22 11       	mov.w	r1,@r2

	/* Block sleep when the transfer involves on-chip memory */
	dma_sleep_blocking[channel] = false;
  307ace:	d2 2b       	mov.l	307b7c <dma_setup+0x244>,r2	! 810159c <dma_sleep_blocking>
  307ad0:	61 e3       	mov	r14,r1
  307ad2:	71 d4       	add	#-44,r1
  307ad4:	51 1e       	mov.l	@(56,r1),r1
  307ad6:	31 2c       	add	r2,r1
  307ad8:	e2 00       	mov	#0,r2
  307ada:	21 20       	mov.b	r2,@r1

	if(ch->SAR >= 0xe5007000 && ch->SAR <= 0xe5204000)
  307adc:	61 e3       	mov	r14,r1
  307ade:	71 d4       	add	#-44,r1
  307ae0:	51 1f       	mov.l	@(60,r1),r1
  307ae2:	62 12       	mov.l	@r1,r2
  307ae4:	d1 26       	mov.l	307b80 <dma_setup+0x248>,r1	! e5006fff
  307ae6:	32 16       	cmp/hi	r1,r2
  307ae8:	8b 0d       	bf	307b06 <dma_setup+0x1ce>
  307aea:	61 e3       	mov	r14,r1
  307aec:	71 d4       	add	#-44,r1
  307aee:	51 1f       	mov.l	@(60,r1),r1
  307af0:	62 12       	mov.l	@r1,r2
  307af2:	d1 24       	mov.l	307b84 <dma_setup+0x24c>,r1	! e5204000
  307af4:	32 16       	cmp/hi	r1,r2
  307af6:	89 06       	bt	307b06 <dma_setup+0x1ce>
		dma_sleep_blocking[channel] = true;
  307af8:	d2 20       	mov.l	307b7c <dma_setup+0x244>,r2	! 810159c <dma_sleep_blocking>
  307afa:	61 e3       	mov	r14,r1
  307afc:	71 d4       	add	#-44,r1
  307afe:	51 1e       	mov.l	@(56,r1),r1
  307b00:	31 2c       	add	r2,r1
  307b02:	e2 01       	mov	#1,r2
  307b04:	21 20       	mov.b	r2,@r1
	if(ch->DAR >= 0xe5007000 && ch->DAR <= 0xe5204000)
  307b06:	61 e3       	mov	r14,r1
  307b08:	71 d4       	add	#-44,r1
  307b0a:	51 1f       	mov.l	@(60,r1),r1
  307b0c:	52 11       	mov.l	@(4,r1),r2
  307b0e:	d1 1c       	mov.l	307b80 <dma_setup+0x248>,r1	! e5006fff
  307b10:	32 16       	cmp/hi	r1,r2
  307b12:	8b 0d       	bf	307b30 <dma_setup+0x1f8>
  307b14:	61 e3       	mov	r14,r1
  307b16:	71 d4       	add	#-44,r1
  307b18:	51 1f       	mov.l	@(60,r1),r1
  307b1a:	52 11       	mov.l	@(4,r1),r2
  307b1c:	d1 19       	mov.l	307b84 <dma_setup+0x24c>,r1	! e5204000
  307b1e:	32 16       	cmp/hi	r1,r2
  307b20:	89 06       	bt	307b30 <dma_setup+0x1f8>
		dma_sleep_blocking[channel] = true;
  307b22:	d2 16       	mov.l	307b7c <dma_setup+0x244>,r2	! 810159c <dma_sleep_blocking>
  307b24:	61 e3       	mov	r14,r1
  307b26:	71 d4       	add	#-44,r1
  307b28:	51 1e       	mov.l	@(56,r1),r1
  307b2a:	31 2c       	add	r2,r1
  307b2c:	e2 01       	mov	#1,r2
  307b2e:	21 20       	mov.b	r2,@r1

	if(ch->SAR >= 0xfe200000 && ch->SAR <= 0xfe3fffff)
  307b30:	61 e3       	mov	r14,r1
  307b32:	71 d4       	add	#-44,r1
  307b34:	51 1f       	mov.l	@(60,r1),r1
  307b36:	62 12       	mov.l	@r1,r2
  307b38:	d1 13       	mov.l	307b88 <dma_setup+0x250>,r1	! fe1fffff
  307b3a:	32 16       	cmp/hi	r1,r2
  307b3c:	8b 0d       	bf	307b5a <dma_setup+0x222>
  307b3e:	61 e3       	mov	r14,r1
  307b40:	71 d4       	add	#-44,r1
  307b42:	51 1f       	mov.l	@(60,r1),r1
  307b44:	62 12       	mov.l	@r1,r2
  307b46:	d1 11       	mov.l	307b8c <dma_setup+0x254>,r1	! fe3fffff
  307b48:	32 16       	cmp/hi	r1,r2
  307b4a:	89 06       	bt	307b5a <dma_setup+0x222>
		dma_sleep_blocking[channel] = true;
  307b4c:	d2 0b       	mov.l	307b7c <dma_setup+0x244>,r2	! 810159c <dma_sleep_blocking>
  307b4e:	61 e3       	mov	r14,r1
  307b50:	71 d4       	add	#-44,r1
  307b52:	51 1e       	mov.l	@(56,r1),r1
  307b54:	31 2c       	add	r2,r1
  307b56:	e2 01       	mov	#1,r2
  307b58:	21 20       	mov.b	r2,@r1
	if(ch->DAR >= 0xfe200000 && ch->DAR <= 0xfe3fffff)
  307b5a:	61 e3       	mov	r14,r1
  307b5c:	71 d4       	add	#-44,r1
  307b5e:	51 1f       	mov.l	@(60,r1),r1
  307b60:	52 11       	mov.l	@(4,r1),r2
  307b62:	a0 15       	bra	307b90 <dma_setup+0x258>
  307b64:	00 09       	nop	
  307b66:	04 00       	.word 0x0400
  307b68:	cf ff       	or.b	#255,@(r0,gbr)
  307b6a:	00 09       	nop	
  307b6c:	fe 00       	.word 0xfe00
  307b6e:	80 20       	mov.b	r0,@(0,r2)
  307b70:	00 30       	.word 0x0030
  307b72:	78 38       	add	#56,r8
  307b74:	ff cf       	.word 0xffcf
  307b76:	ff ff       	.word 0xffff
  307b78:	ff ff       	.word 0xffff
  307b7a:	3f ff       	addv	r15,r15
  307b7c:	08 10       	.word 0x0810
  307b7e:	15 9c       	mov.l	r9,@(48,r5)
  307b80:	e5 00       	mov	#0,r5
  307b82:	6f ff       	exts.w	r15,r15
  307b84:	e5 20       	mov	#32,r5
  307b86:	40 00       	shll	r0
  307b88:	fe 1f       	.word 0xfe1f
  307b8a:	ff ff       	.word 0xffff
  307b8c:	fe 3f       	.word 0xfe3f
  307b8e:	ff ff       	.word 0xffff
  307b90:	d1 0c       	mov.l	307bc4 <dma_setup+0x28c>,r1	! fe1fffff
  307b92:	32 16       	cmp/hi	r1,r2
  307b94:	8b 0d       	bf	307bb2 <dma_setup+0x27a>
  307b96:	61 e3       	mov	r14,r1
  307b98:	71 d4       	add	#-44,r1
  307b9a:	51 1f       	mov.l	@(60,r1),r1
  307b9c:	52 11       	mov.l	@(4,r1),r2
  307b9e:	d1 0a       	mov.l	307bc8 <dma_setup+0x290>,r1	! fe3fffff
  307ba0:	32 16       	cmp/hi	r1,r2
  307ba2:	89 06       	bt	307bb2 <dma_setup+0x27a>
		dma_sleep_blocking[channel] = true;
  307ba4:	d2 09       	mov.l	307bcc <dma_setup+0x294>,r2	! 810159c <dma_sleep_blocking>
  307ba6:	61 e3       	mov	r14,r1
  307ba8:	71 d4       	add	#-44,r1
  307baa:	51 1e       	mov.l	@(56,r1),r1
  307bac:	31 2c       	add	r2,r1
  307bae:	e2 01       	mov	#1,r2
  307bb0:	21 20       	mov.b	r2,@r1

	return 0;
  307bb2:	e1 00       	mov	#0,r1
}
  307bb4:	60 13       	mov	r1,r0
  307bb6:	7e 14       	add	#20,r14
  307bb8:	6f e3       	mov	r14,r15
  307bba:	4f 26       	lds.l	@r15+,pr
  307bbc:	6e f6       	mov.l	@r15+,r14
  307bbe:	68 f6       	mov.l	@r15+,r8
  307bc0:	00 0b       	rts	
  307bc2:	00 09       	nop	
  307bc4:	fe 1f       	.word 0xfe1f
  307bc6:	ff ff       	.word 0xffff
  307bc8:	fe 3f       	.word 0xfe3f
  307bca:	ff ff       	.word 0xffff
  307bcc:	08 10       	.word 0x0810
  307bce:	15 9c       	mov.l	r9,@(48,r5)

00307bd0 <dma_transfer_async>:

bool dma_transfer_async(int channel, dma_size_t size, uint blocks,
	void const *src, dma_address_t src_mode, void *dst,
	dma_address_t dst_mode, gint_call_t callback)
{
  307bd0:	2f 86       	mov.l	r8,@-r15
  307bd2:	2f e6       	mov.l	r14,@-r15
  307bd4:	4f 22       	sts.l	pr,@-r15
  307bd6:	7f dc       	add	#-36,r15
  307bd8:	6e f3       	mov	r15,r14
  307bda:	61 e3       	mov	r14,r1
  307bdc:	71 e4       	add	#-28,r1
  307bde:	11 4e       	mov.l	r4,@(56,r1)
  307be0:	61 e3       	mov	r14,r1
  307be2:	71 e4       	add	#-28,r1
  307be4:	11 5d       	mov.l	r5,@(52,r1)
  307be6:	61 e3       	mov	r14,r1
  307be8:	71 e4       	add	#-28,r1
  307bea:	11 6c       	mov.l	r6,@(48,r1)
  307bec:	61 e3       	mov	r14,r1
  307bee:	71 e4       	add	#-28,r1
  307bf0:	11 7b       	mov.l	r7,@(44,r1)
	if(dma_setup(channel, size, blocks, src, src_mode, dst, dst_mode, 1))
  307bf2:	67 e3       	mov	r14,r7
  307bf4:	77 e4       	add	#-28,r7
  307bf6:	63 e3       	mov	r14,r3
  307bf8:	73 e4       	add	#-28,r3
  307bfa:	62 e3       	mov	r14,r2
  307bfc:	72 e4       	add	#-28,r2
  307bfe:	61 e3       	mov	r14,r1
  307c00:	71 e4       	add	#-28,r1
  307c02:	e6 01       	mov	#1,r6
  307c04:	1f 63       	mov.l	r6,@(12,r15)
  307c06:	56 ee       	mov.l	@(56,r14),r6
  307c08:	1f 62       	mov.l	r6,@(8,r15)
  307c0a:	56 ed       	mov.l	@(52,r14),r6
  307c0c:	1f 61       	mov.l	r6,@(4,r15)
  307c0e:	56 ec       	mov.l	@(48,r14),r6
  307c10:	2f 62       	mov.l	r6,@r15
  307c12:	57 7b       	mov.l	@(44,r7),r7
  307c14:	56 3c       	mov.l	@(48,r3),r6
  307c16:	55 2d       	mov.l	@(52,r2),r5
  307c18:	54 1e       	mov.l	@(56,r1),r4
  307c1a:	d1 25       	mov.l	307cb0 <dma_transfer_async+0xe0>,r1	! 307938 <dma_setup>
  307c1c:	41 0b       	jsr	@r1
  307c1e:	00 09       	nop	
  307c20:	61 03       	mov	r0,r1
  307c22:	21 18       	tst	r1,r1
  307c24:	89 02       	bt	307c2c <dma_transfer_async+0x5c>
		return false;
  307c26:	e1 00       	mov	#0,r1
  307c28:	a0 39       	bra	307c9e <dma_transfer_async+0xce>
  307c2a:	00 09       	nop	

	dma_callbacks[channel] = callback;
  307c2c:	d3 21       	mov.l	307cb4 <dma_transfer_async+0xe4>,r3	! 8101524 <dma_callbacks>
  307c2e:	61 e3       	mov	r14,r1
  307c30:	71 e4       	add	#-28,r1
  307c32:	52 1e       	mov.l	@(56,r1),r2
  307c34:	61 23       	mov	r2,r1
  307c36:	41 08       	shll2	r1
  307c38:	31 2c       	add	r2,r1
  307c3a:	41 08       	shll2	r1
  307c3c:	62 33       	mov	r3,r2
  307c3e:	32 1c       	add	r1,r2
  307c40:	61 e3       	mov	r14,r1
  307c42:	71 3c       	add	#60,r1
  307c44:	63 12       	mov.l	@r1,r3
  307c46:	22 32       	mov.l	r3,@r2
  307c48:	71 04       	add	#4,r1
  307c4a:	63 12       	mov.l	@r1,r3
  307c4c:	12 31       	mov.l	r3,@(4,r2)
  307c4e:	71 04       	add	#4,r1
  307c50:	63 12       	mov.l	@r1,r3
  307c52:	12 32       	mov.l	r3,@(8,r2)
  307c54:	71 04       	add	#4,r1
  307c56:	63 12       	mov.l	@r1,r3
  307c58:	12 33       	mov.l	r3,@(12,r2)
  307c5a:	71 04       	add	#4,r1
  307c5c:	63 12       	mov.l	@r1,r3
  307c5e:	12 34       	mov.l	r3,@(16,r2)
  307c60:	71 04       	add	#4,r1

	if(dma_sleep_blocking[channel])
  307c62:	d2 15       	mov.l	307cb8 <dma_transfer_async+0xe8>,r2	! 810159c <dma_sleep_blocking>
  307c64:	61 e3       	mov	r14,r1
  307c66:	71 e4       	add	#-28,r1
  307c68:	51 1e       	mov.l	@(56,r1),r1
  307c6a:	31 2c       	add	r2,r1
  307c6c:	61 10       	mov.b	@r1,r1
  307c6e:	61 1c       	extu.b	r1,r1
  307c70:	21 18       	tst	r1,r1
  307c72:	89 02       	bt	307c7a <dma_transfer_async+0xaa>
		sleep_block();
  307c74:	d1 11       	mov.l	307cbc <dma_transfer_async+0xec>,r1	! 30a69c <sleep_block>
  307c76:	41 0b       	jsr	@r1
  307c78:	00 09       	nop	

	/* Enable channel, starting the DMA transfer. */
	channel_t *ch = dma_channel(channel);
  307c7a:	68 e3       	mov	r14,r8
  307c7c:	78 e4       	add	#-28,r8
  307c7e:	61 e3       	mov	r14,r1
  307c80:	71 e4       	add	#-28,r1
  307c82:	54 1e       	mov.l	@(56,r1),r4
  307c84:	d1 0e       	mov.l	307cc0 <dma_transfer_async+0xf0>,r1	! 3077b4 <dma_channel>
  307c86:	41 0b       	jsr	@r1
  307c88:	00 09       	nop	
  307c8a:	61 03       	mov	r0,r1
  307c8c:	18 1f       	mov.l	r1,@(60,r8)
	ch->CHCR.DE = 1;
  307c8e:	61 e3       	mov	r14,r1
  307c90:	71 e4       	add	#-28,r1
  307c92:	52 1f       	mov.l	@(60,r1),r2
  307c94:	51 23       	mov.l	@(12,r2),r1
  307c96:	e3 01       	mov	#1,r3
  307c98:	21 3b       	or	r3,r1
  307c9a:	12 13       	mov.l	r1,@(12,r2)
	return true;
  307c9c:	e1 01       	mov	#1,r1
}
  307c9e:	60 13       	mov	r1,r0
  307ca0:	7e 24       	add	#36,r14
  307ca2:	6f e3       	mov	r14,r15
  307ca4:	4f 26       	lds.l	@r15+,pr
  307ca6:	6e f6       	mov.l	@r15+,r14
  307ca8:	68 f6       	mov.l	@r15+,r8
  307caa:	00 0b       	rts	
  307cac:	00 09       	nop	
  307cae:	00 09       	nop	
  307cb0:	00 30       	.word 0x0030
  307cb2:	79 38       	add	#56,r9
  307cb4:	08 10       	.word 0x0810
  307cb6:	15 24       	mov.l	r2,@(16,r5)
  307cb8:	08 10       	.word 0x0810
  307cba:	15 9c       	mov.l	r9,@(48,r5)
  307cbc:	00 30       	.word 0x0030
  307cbe:	a6 9c       	bra	3089fa <hsave+0xb6>
  307cc0:	00 30       	.word 0x0030
  307cc2:	77 b4       	add	#-76,r7

00307cc4 <dma_interrupt_transfer_ended>:

/* Interrupt handler for all finished DMA transfers */
static void dma_interrupt_transfer_ended(int channel)
{
  307cc4:	2f 86       	mov.l	r8,@-r15
  307cc6:	2f e6       	mov.l	r14,@-r15
  307cc8:	4f 22       	sts.l	pr,@-r15
  307cca:	7f c8       	add	#-56,r15
  307ccc:	6e f3       	mov	r15,r14
  307cce:	61 e3       	mov	r14,r1
  307cd0:	71 f8       	add	#-8,r1
  307cd2:	11 42       	mov.l	r4,@(8,r1)
	channel_t *ch = dma_channel(channel);
  307cd4:	68 e3       	mov	r14,r8
  307cd6:	78 f8       	add	#-8,r8
  307cd8:	61 e3       	mov	r14,r1
  307cda:	71 f8       	add	#-8,r1
  307cdc:	54 12       	mov.l	@(8,r1),r4
  307cde:	d1 54       	mov.l	307e30 <dma_interrupt_transfer_ended+0x16c>,r1	! 3077b4 <dma_channel>
  307ce0:	41 0b       	jsr	@r1
  307ce2:	00 09       	nop	
  307ce4:	61 03       	mov	r0,r1
  307ce6:	18 1f       	mov.l	r1,@(60,r8)
	ch->CHCR.IE = 0;
  307ce8:	61 e3       	mov	r14,r1
  307cea:	71 f8       	add	#-8,r1
  307cec:	52 1f       	mov.l	@(60,r1),r2
  307cee:	51 23       	mov.l	@(12,r2),r1
  307cf0:	e3 fb       	mov	#-5,r3
  307cf2:	21 39       	and	r3,r1
  307cf4:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.DE = 0;
  307cf6:	61 e3       	mov	r14,r1
  307cf8:	71 f8       	add	#-8,r1
  307cfa:	52 1f       	mov.l	@(60,r1),r2
  307cfc:	51 23       	mov.l	@(12,r2),r1
  307cfe:	e3 fe       	mov	#-2,r3
  307d00:	21 39       	and	r3,r1
  307d02:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.TE = 0;
  307d04:	61 e3       	mov	r14,r1
  307d06:	71 f8       	add	#-8,r1
  307d08:	52 1f       	mov.l	@(60,r1),r2
  307d0a:	51 23       	mov.l	@(12,r2),r1
  307d0c:	e3 fd       	mov	#-3,r3
  307d0e:	21 39       	and	r3,r1
  307d10:	12 13       	mov.l	r1,@(12,r2)

	DMA.OR.AE = 0;
  307d12:	d1 48       	mov.l	307e34 <dma_interrupt_transfer_ended+0x170>,r1	! fe008020
  307d14:	62 13       	mov	r1,r2
  307d16:	72 40       	add	#64,r2
  307d18:	61 21       	mov.w	@r2,r1
  307d1a:	e3 fb       	mov	#-5,r3
  307d1c:	21 39       	and	r3,r1
  307d1e:	22 11       	mov.w	r1,@r2
	DMA.OR.NMIF = 0;
  307d20:	d1 44       	mov.l	307e34 <dma_interrupt_transfer_ended+0x170>,r1	! fe008020
  307d22:	62 13       	mov	r1,r2
  307d24:	72 40       	add	#64,r2
  307d26:	61 21       	mov.w	@r2,r1
  307d28:	e3 fd       	mov	#-3,r3
  307d2a:	21 39       	and	r3,r1
  307d2c:	22 11       	mov.w	r1,@r2

	if(dma_sleep_blocking[channel])
  307d2e:	d2 42       	mov.l	307e38 <dma_interrupt_transfer_ended+0x174>,r2	! 810159c <dma_sleep_blocking>
  307d30:	61 e3       	mov	r14,r1
  307d32:	71 f8       	add	#-8,r1
  307d34:	51 12       	mov.l	@(8,r1),r1
  307d36:	31 2c       	add	r2,r1
  307d38:	61 10       	mov.b	@r1,r1
  307d3a:	61 1c       	extu.b	r1,r1
  307d3c:	21 18       	tst	r1,r1
  307d3e:	89 02       	bt	307d46 <dma_interrupt_transfer_ended+0x82>
		sleep_unblock();
  307d40:	d1 3e       	mov.l	307e3c <dma_interrupt_transfer_ended+0x178>,r1	! 30a6d4 <sleep_unblock>
  307d42:	41 0b       	jsr	@r1
  307d44:	00 09       	nop	

	/* Cancel any sleep operation that is synchronized with this interrupt */
	if(dma_wait_ics[channel])
  307d46:	d2 3e       	mov.l	307e40 <dma_interrupt_transfer_ended+0x17c>,r2	! 81015a4 <dma_wait_ics>
  307d48:	61 e3       	mov	r14,r1
  307d4a:	71 f8       	add	#-8,r1
  307d4c:	51 12       	mov.l	@(8,r1),r1
  307d4e:	41 08       	shll2	r1
  307d50:	31 2c       	add	r2,r1
  307d52:	61 12       	mov.l	@r1,r1
  307d54:	21 18       	tst	r1,r1
  307d56:	89 0a       	bt	307d6e <dma_interrupt_transfer_ended+0xaa>
		cpu_csleep_cancel(dma_wait_ics[channel]);
  307d58:	d2 39       	mov.l	307e40 <dma_interrupt_transfer_ended+0x17c>,r2	! 81015a4 <dma_wait_ics>
  307d5a:	61 e3       	mov	r14,r1
  307d5c:	71 f8       	add	#-8,r1
  307d5e:	51 12       	mov.l	@(8,r1),r1
  307d60:	41 08       	shll2	r1
  307d62:	31 2c       	add	r2,r1
  307d64:	61 12       	mov.l	@r1,r1
  307d66:	64 13       	mov	r1,r4
  307d68:	d1 36       	mov.l	307e44 <dma_interrupt_transfer_ended+0x180>,r1	! 30a648 <cpu_csleep_cancel>
  307d6a:	41 0b       	jsr	@r1
  307d6c:	00 09       	nop	
  307d6e:	62 e3       	mov	r14,r2
  307d70:	72 04       	add	#4,r2
  307d72:	d7 35       	mov.l	307e48 <dma_interrupt_transfer_ended+0x184>,r7	! 8101524 <dma_callbacks>
  307d74:	61 e3       	mov	r14,r1
  307d76:	71 f8       	add	#-8,r1
  307d78:	53 12       	mov.l	@(8,r1),r3
  307d7a:	61 33       	mov	r3,r1
  307d7c:	41 08       	shll2	r1
  307d7e:	31 3c       	add	r3,r1
  307d80:	41 08       	shll2	r1
  307d82:	31 7c       	add	r7,r1
  307d84:	63 12       	mov.l	@r1,r3
  307d86:	22 32       	mov.l	r3,@r2
  307d88:	71 04       	add	#4,r1
  307d8a:	63 12       	mov.l	@r1,r3
  307d8c:	12 31       	mov.l	r3,@(4,r2)
  307d8e:	71 04       	add	#4,r1
  307d90:	63 12       	mov.l	@r1,r3
  307d92:	12 32       	mov.l	r3,@(8,r2)
  307d94:	71 04       	add	#4,r1
  307d96:	63 12       	mov.l	@r1,r3
  307d98:	12 33       	mov.l	r3,@(12,r2)
  307d9a:	71 04       	add	#4,r1
  307d9c:	63 12       	mov.l	@r1,r3
  307d9e:	12 34       	mov.l	r3,@(16,r2)
  307da0:	71 04       	add	#4,r1
	int (*f)(int r4, int r5, int r6, int r7) = cb.function;
  307da2:	61 e3       	mov	r14,r1
  307da4:	71 04       	add	#4,r1
  307da6:	62 12       	mov.l	@r1,r2
  307da8:	61 e3       	mov	r14,r1
  307daa:	71 f8       	add	#-8,r1
  307dac:	11 2e       	mov.l	r2,@(56,r1)
        gint_call_arg_t *args = cb.args;
  307dae:	61 e3       	mov	r14,r1
  307db0:	71 f8       	add	#-8,r1
  307db2:	62 e3       	mov	r14,r2
  307db4:	72 04       	add	#4,r2
  307db6:	72 04       	add	#4,r2
  307db8:	11 2d       	mov.l	r2,@(52,r1)
	return f ? f(args[0].i, args[1].i, args[2].i, args[3].i) : -1;
  307dba:	61 e3       	mov	r14,r1
  307dbc:	71 f8       	add	#-8,r1
  307dbe:	51 1e       	mov.l	@(56,r1),r1
  307dc0:	21 18       	tst	r1,r1
  307dc2:	89 19       	bt	307df8 <dma_interrupt_transfer_ended+0x134>
  307dc4:	61 e3       	mov	r14,r1
  307dc6:	71 f8       	add	#-8,r1
  307dc8:	51 1d       	mov.l	@(52,r1),r1
  307dca:	62 12       	mov.l	@r1,r2
  307dcc:	61 e3       	mov	r14,r1
  307dce:	71 f8       	add	#-8,r1
  307dd0:	51 1d       	mov.l	@(52,r1),r1
  307dd2:	71 04       	add	#4,r1
  307dd4:	63 12       	mov.l	@r1,r3
  307dd6:	61 e3       	mov	r14,r1
  307dd8:	71 f8       	add	#-8,r1
  307dda:	51 1d       	mov.l	@(52,r1),r1
  307ddc:	71 08       	add	#8,r1
  307dde:	66 12       	mov.l	@r1,r6
  307de0:	61 e3       	mov	r14,r1
  307de2:	71 f8       	add	#-8,r1
  307de4:	51 1d       	mov.l	@(52,r1),r1
  307de6:	71 0c       	add	#12,r1
  307de8:	67 12       	mov.l	@r1,r7
  307dea:	61 e3       	mov	r14,r1
  307dec:	71 f8       	add	#-8,r1
  307dee:	51 1e       	mov.l	@(56,r1),r1
  307df0:	65 33       	mov	r3,r5
  307df2:	64 23       	mov	r2,r4
  307df4:	41 0b       	jsr	@r1
  307df6:	00 09       	nop	
  307df8:	00 09       	nop	

	gint_call(dma_callbacks[channel]);
	dma_callbacks[channel] = GINT_CALL_NULL;
  307dfa:	d3 13       	mov.l	307e48 <dma_interrupt_transfer_ended+0x184>,r3	! 8101524 <dma_callbacks>
  307dfc:	61 e3       	mov	r14,r1
  307dfe:	71 f8       	add	#-8,r1
  307e00:	52 12       	mov.l	@(8,r1),r2
  307e02:	61 23       	mov	r2,r1
  307e04:	41 08       	shll2	r1
  307e06:	31 2c       	add	r2,r1
  307e08:	41 08       	shll2	r1
  307e0a:	31 3c       	add	r3,r1
  307e0c:	e2 00       	mov	#0,r2
  307e0e:	21 22       	mov.l	r2,@r1
  307e10:	e2 00       	mov	#0,r2
  307e12:	11 21       	mov.l	r2,@(4,r1)
  307e14:	e2 00       	mov	#0,r2
  307e16:	11 22       	mov.l	r2,@(8,r1)
  307e18:	e2 00       	mov	#0,r2
  307e1a:	11 23       	mov.l	r2,@(12,r1)
  307e1c:	e2 00       	mov	#0,r2
  307e1e:	11 24       	mov.l	r2,@(16,r1)
}
  307e20:	00 09       	nop	
  307e22:	7e 38       	add	#56,r14
  307e24:	6f e3       	mov	r14,r15
  307e26:	4f 26       	lds.l	@r15+,pr
  307e28:	6e f6       	mov.l	@r15+,r14
  307e2a:	68 f6       	mov.l	@r15+,r8
  307e2c:	00 0b       	rts	
  307e2e:	00 09       	nop	
  307e30:	00 30       	.word 0x0030
  307e32:	77 b4       	add	#-76,r7
  307e34:	fe 00       	.word 0xfe00
  307e36:	80 20       	mov.b	r0,@(0,r2)
  307e38:	08 10       	.word 0x0810
  307e3a:	15 9c       	mov.l	r9,@(48,r5)
  307e3c:	00 30       	.word 0x0030
  307e3e:	a6 d4       	bra	308bea <_WEAK_keydev_unqueue_event+0x18>
  307e40:	08 10       	.word 0x0810
  307e42:	15 a4       	mov.l	r10,@(16,r5)
  307e44:	00 30       	.word 0x0030
  307e46:	a6 48       	bra	308ada <hrestore+0xd2>
  307e48:	08 10       	.word 0x0810
  307e4a:	15 24       	mov.l	r2,@(16,r5)

00307e4c <dma_channel_wait>:

   This function is used both during normal gint operation and during foreign
   unbinds of the DMA driver. The waiting method varies with interrupt settings
   and device ownership. */
static void dma_channel_wait(int channel, bool foreign)
{
  307e4c:	2f 86       	mov.l	r8,@-r15
  307e4e:	2f e6       	mov.l	r14,@-r15
  307e50:	4f 22       	sts.l	pr,@-r15
  307e52:	7f e0       	add	#-32,r15
  307e54:	6e f3       	mov	r15,r14
  307e56:	61 e3       	mov	r14,r1
  307e58:	71 e0       	add	#-32,r1
  307e5a:	11 49       	mov.l	r4,@(36,r1)
  307e5c:	62 53       	mov	r5,r2
  307e5e:	61 e3       	mov	r14,r1
  307e60:	21 20       	mov.b	r2,@r1
	channel_t *ch = dma_channel(channel);
  307e62:	68 e3       	mov	r14,r8
  307e64:	78 e0       	add	#-32,r8
  307e66:	61 e3       	mov	r14,r1
  307e68:	71 e0       	add	#-32,r1
  307e6a:	54 19       	mov.l	@(36,r1),r4
  307e6c:	d1 15       	mov.l	307ec4 <dma_channel_wait+0x78>,r1	! 3077b4 <dma_channel>
  307e6e:	41 0b       	jsr	@r1
  307e70:	00 09       	nop	
  307e72:	61 03       	mov	r0,r1
  307e74:	18 1f       	mov.l	r1,@(60,r8)
	if(!ch) return;
  307e76:	61 e3       	mov	r14,r1
  307e78:	71 e0       	add	#-32,r1
  307e7a:	51 1f       	mov.l	@(60,r1),r1
  307e7c:	21 18       	tst	r1,r1
  307e7e:	89 15       	bt	307eac <dma_channel_wait+0x60>
	   * If the device is owned by another kernel, then we're transitioning
	     so we have to wait for *all* tasks to complete anyway. The risk is
	     rather to stop too early. */
	// if(!ch->CHCR.IE || foreign)
	// {
		while(ch->CHCR.DE && !ch->CHCR.TE) {}
  307e80:	00 09       	nop	
  307e82:	61 e3       	mov	r14,r1
  307e84:	71 e0       	add	#-32,r1
  307e86:	51 1f       	mov.l	@(60,r1),r1
  307e88:	51 13       	mov.l	@(12,r1),r1
  307e8a:	e2 01       	mov	#1,r2
  307e8c:	21 29       	and	r2,r1
  307e8e:	61 1c       	extu.b	r1,r1
  307e90:	21 18       	tst	r1,r1
  307e92:	89 0e       	bt	307eb2 <dma_channel_wait+0x66>
  307e94:	61 e3       	mov	r14,r1
  307e96:	71 e0       	add	#-32,r1
  307e98:	51 1f       	mov.l	@(60,r1),r1
  307e9a:	51 13       	mov.l	@(12,r1),r1
  307e9c:	41 01       	shlr	r1
  307e9e:	e2 01       	mov	#1,r2
  307ea0:	21 29       	and	r2,r1
  307ea2:	61 1c       	extu.b	r1,r1
  307ea4:	21 18       	tst	r1,r1
  307ea6:	89 ec       	bt	307e82 <dma_channel_wait+0x36>
		return;
  307ea8:	a0 03       	bra	307eb2 <dma_channel_wait+0x66>
  307eaa:	00 09       	nop	
	if(!ch) return;
  307eac:	00 09       	nop	
  307eae:	a0 01       	bra	307eb4 <dma_channel_wait+0x68>
  307eb0:	00 09       	nop	
		return;
  307eb2:	00 09       	nop	
	   handler is guaranteed to cancel the sleep at some point */
	if(ch->CHCR.DE && !ch->CHCR.TE) cpu_csleep(&ics);

	/* Clear the ICS pointer for next time */
	dma_wait_ics[channel] = NULL;
}
  307eb4:	7e 20       	add	#32,r14
  307eb6:	6f e3       	mov	r14,r15
  307eb8:	4f 26       	lds.l	@r15+,pr
  307eba:	6e f6       	mov.l	@r15+,r14
  307ebc:	68 f6       	mov.l	@r15+,r8
  307ebe:	00 0b       	rts	
  307ec0:	00 09       	nop	
  307ec2:	00 09       	nop	
  307ec4:	00 30       	.word 0x0030
  307ec6:	77 b4       	add	#-76,r7

00307ec8 <dma_transfer_wait>:

/* dma_transfer_wait(): Wait for a transfer to finish */
void dma_transfer_wait(int channel)
{
  307ec8:	2f e6       	mov.l	r14,@-r15
  307eca:	4f 22       	sts.l	pr,@-r15
  307ecc:	7f fc       	add	#-4,r15
  307ece:	6e f3       	mov	r15,r14
  307ed0:	61 e3       	mov	r14,r1
  307ed2:	71 c4       	add	#-60,r1
  307ed4:	11 4f       	mov.l	r4,@(60,r1)
	dma_channel_wait(channel, false);
  307ed6:	61 e3       	mov	r14,r1
  307ed8:	71 c4       	add	#-60,r1
  307eda:	e5 00       	mov	#0,r5
  307edc:	54 1f       	mov.l	@(60,r1),r4
  307ede:	d1 05       	mov.l	307ef4 <dma_transfer_wait+0x2c>,r1	! 307e4c <dma_channel_wait>
  307ee0:	41 0b       	jsr	@r1
  307ee2:	00 09       	nop	
}
  307ee4:	00 09       	nop	
  307ee6:	7e 04       	add	#4,r14
  307ee8:	6f e3       	mov	r14,r15
  307eea:	4f 26       	lds.l	@r15+,pr
  307eec:	6e f6       	mov.l	@r15+,r14
  307eee:	00 0b       	rts	
  307ef0:	00 09       	nop	
  307ef2:	00 09       	nop	
  307ef4:	00 30       	.word 0x0030
  307ef6:	7e 4c       	add	#76,r14

00307ef8 <dma_transfer_sync>:

bool dma_transfer_sync(int channel, dma_size_t size, uint length,
	void const *src, dma_address_t src_mode, void *dst,
	dma_address_t dst_mode)
{
  307ef8:	2f e6       	mov.l	r14,@-r15
  307efa:	4f 22       	sts.l	pr,@-r15
  307efc:	7f bc       	add	#-68,r15
  307efe:	6e f3       	mov	r15,r14
  307f00:	61 e3       	mov	r14,r1
  307f02:	71 04       	add	#4,r1
  307f04:	11 4a       	mov.l	r4,@(40,r1)
  307f06:	61 e3       	mov	r14,r1
  307f08:	71 04       	add	#4,r1
  307f0a:	11 59       	mov.l	r5,@(36,r1)
  307f0c:	61 e3       	mov	r14,r1
  307f0e:	71 04       	add	#4,r1
  307f10:	11 68       	mov.l	r6,@(32,r1)
  307f12:	61 e3       	mov	r14,r1
  307f14:	71 04       	add	#4,r1
  307f16:	11 77       	mov.l	r7,@(28,r1)
	if(!dma_transfer_async(channel, size, length, src, src_mode, dst,
		dst_mode, GINT_CALL_NULL)) return false;
  307f18:	61 e3       	mov	r14,r1
  307f1a:	71 30       	add	#48,r1
  307f1c:	e2 00       	mov	#0,r2
  307f1e:	21 22       	mov.l	r2,@r1
  307f20:	e2 00       	mov	#0,r2
  307f22:	11 21       	mov.l	r2,@(4,r1)
  307f24:	e2 00       	mov	#0,r2
  307f26:	11 22       	mov.l	r2,@(8,r1)
  307f28:	e2 00       	mov	#0,r2
  307f2a:	11 23       	mov.l	r2,@(12,r1)
  307f2c:	e2 00       	mov	#0,r2
  307f2e:	11 24       	mov.l	r2,@(16,r1)
	if(!dma_transfer_async(channel, size, length, src, src_mode, dst,
  307f30:	67 e3       	mov	r14,r7
  307f32:	77 04       	add	#4,r7
  307f34:	66 e3       	mov	r14,r6
  307f36:	76 04       	add	#4,r6
  307f38:	65 e3       	mov	r14,r5
  307f3a:	75 04       	add	#4,r5
  307f3c:	63 e3       	mov	r14,r3
  307f3e:	73 04       	add	#4,r3
  307f40:	61 e3       	mov	r14,r1
  307f42:	71 30       	add	#48,r1
  307f44:	62 f3       	mov	r15,r2
  307f46:	72 0c       	add	#12,r2
  307f48:	64 12       	mov.l	@r1,r4
  307f4a:	22 42       	mov.l	r4,@r2
  307f4c:	71 04       	add	#4,r1
  307f4e:	64 12       	mov.l	@r1,r4
  307f50:	12 41       	mov.l	r4,@(4,r2)
  307f52:	71 04       	add	#4,r1
  307f54:	64 12       	mov.l	@r1,r4
  307f56:	12 42       	mov.l	r4,@(8,r2)
  307f58:	71 04       	add	#4,r1
  307f5a:	64 12       	mov.l	@r1,r4
  307f5c:	12 43       	mov.l	r4,@(12,r2)
  307f5e:	71 04       	add	#4,r1
  307f60:	64 12       	mov.l	@r1,r4
  307f62:	12 44       	mov.l	r4,@(16,r2)
  307f64:	71 04       	add	#4,r1
  307f66:	62 e3       	mov	r14,r2
  307f68:	72 40       	add	#64,r2
  307f6a:	51 25       	mov.l	@(20,r2),r1
  307f6c:	1f 12       	mov.l	r1,@(8,r15)
  307f6e:	62 e3       	mov	r14,r2
  307f70:	72 40       	add	#64,r2
  307f72:	51 24       	mov.l	@(16,r2),r1
  307f74:	1f 11       	mov.l	r1,@(4,r15)
  307f76:	62 e3       	mov	r14,r2
  307f78:	72 40       	add	#64,r2
  307f7a:	51 23       	mov.l	@(12,r2),r1
  307f7c:	2f 12       	mov.l	r1,@r15
  307f7e:	57 77       	mov.l	@(28,r7),r7
  307f80:	56 68       	mov.l	@(32,r6),r6
  307f82:	55 59       	mov.l	@(36,r5),r5
  307f84:	54 3a       	mov.l	@(40,r3),r4
  307f86:	d1 0d       	mov.l	307fbc <dma_transfer_sync+0xc4>,r1	! 307bd0 <dma_transfer_async>
  307f88:	41 0b       	jsr	@r1
  307f8a:	00 09       	nop	
  307f8c:	61 03       	mov	r0,r1
  307f8e:	e2 01       	mov	#1,r2
  307f90:	21 2a       	xor	r2,r1
  307f92:	61 1c       	extu.b	r1,r1
  307f94:	21 18       	tst	r1,r1
  307f96:	89 02       	bt	307f9e <dma_transfer_sync+0xa6>
		dst_mode, GINT_CALL_NULL)) return false;
  307f98:	e1 00       	mov	#0,r1
  307f9a:	a0 07       	bra	307fac <dma_transfer_sync+0xb4>
  307f9c:	00 09       	nop	
	dma_transfer_wait(channel);
  307f9e:	61 e3       	mov	r14,r1
  307fa0:	71 04       	add	#4,r1
  307fa2:	54 1a       	mov.l	@(40,r1),r4
  307fa4:	d1 06       	mov.l	307fc0 <dma_transfer_sync+0xc8>,r1	! 307ec8 <dma_transfer_wait>
  307fa6:	41 0b       	jsr	@r1
  307fa8:	00 09       	nop	
	return true;
  307faa:	e1 01       	mov	#1,r1
}
  307fac:	60 13       	mov	r1,r0
  307fae:	7e 44       	add	#68,r14
  307fb0:	6f e3       	mov	r14,r15
  307fb2:	4f 26       	lds.l	@r15+,pr
  307fb4:	6e f6       	mov.l	@r15+,r14
  307fb6:	00 0b       	rts	
  307fb8:	00 09       	nop	
  307fba:	00 09       	nop	
  307fbc:	00 30       	.word 0x0030
  307fbe:	7b d0       	add	#-48,r11
  307fc0:	00 30       	.word 0x0030
  307fc2:	7e c8       	add	#-56,r14

00307fc4 <dma_transfer_atomic>:

/* dma_transfer_atomic(): Perform a data transfer without interruptions */
void dma_transfer_atomic(int channel, dma_size_t size, uint blocks,
	void const *src, dma_address_t src_mode,
	void *dst, dma_address_t dst_mode)
{
  307fc4:	2f 86       	mov.l	r8,@-r15
  307fc6:	2f e6       	mov.l	r14,@-r15
  307fc8:	4f 22       	sts.l	pr,@-r15
  307fca:	7f dc       	add	#-36,r15
  307fcc:	6e f3       	mov	r15,r14
  307fce:	61 e3       	mov	r14,r1
  307fd0:	71 e4       	add	#-28,r1
  307fd2:	11 4e       	mov.l	r4,@(56,r1)
  307fd4:	61 e3       	mov	r14,r1
  307fd6:	71 e4       	add	#-28,r1
  307fd8:	11 5d       	mov.l	r5,@(52,r1)
  307fda:	61 e3       	mov	r14,r1
  307fdc:	71 e4       	add	#-28,r1
  307fde:	11 6c       	mov.l	r6,@(48,r1)
  307fe0:	61 e3       	mov	r14,r1
  307fe2:	71 e4       	add	#-28,r1
  307fe4:	11 7b       	mov.l	r7,@(44,r1)
	if(dma_setup(channel, size, blocks, src, src_mode, dst, dst_mode, 0))
  307fe6:	67 e3       	mov	r14,r7
  307fe8:	77 e4       	add	#-28,r7
  307fea:	63 e3       	mov	r14,r3
  307fec:	73 e4       	add	#-28,r3
  307fee:	62 e3       	mov	r14,r2
  307ff0:	72 e4       	add	#-28,r2
  307ff2:	61 e3       	mov	r14,r1
  307ff4:	71 e4       	add	#-28,r1
  307ff6:	e6 00       	mov	#0,r6
  307ff8:	1f 63       	mov.l	r6,@(12,r15)
  307ffa:	56 ee       	mov.l	@(56,r14),r6
  307ffc:	1f 62       	mov.l	r6,@(8,r15)
  307ffe:	56 ed       	mov.l	@(52,r14),r6
  308000:	1f 61       	mov.l	r6,@(4,r15)
  308002:	56 ec       	mov.l	@(48,r14),r6
  308004:	2f 62       	mov.l	r6,@r15
  308006:	57 7b       	mov.l	@(44,r7),r7
  308008:	56 3c       	mov.l	@(48,r3),r6
  30800a:	55 2d       	mov.l	@(52,r2),r5
  30800c:	54 1e       	mov.l	@(56,r1),r4
  30800e:	d1 24       	mov.l	3080a0 <dma_transfer_atomic+0xdc>,r1	! 307938 <dma_setup>
  308010:	41 0b       	jsr	@r1
  308012:	00 09       	nop	
  308014:	61 03       	mov	r0,r1
  308016:	21 18       	tst	r1,r1
  308018:	8b 39       	bf	30808e <dma_transfer_atomic+0xca>
		return;

	/* Enable channel, starting the DMA transfer. */
	channel_t *ch = dma_channel(channel);
  30801a:	68 e3       	mov	r14,r8
  30801c:	78 e4       	add	#-28,r8
  30801e:	61 e3       	mov	r14,r1
  308020:	71 e4       	add	#-28,r1
  308022:	54 1e       	mov.l	@(56,r1),r4
  308024:	d1 1f       	mov.l	3080a4 <dma_transfer_atomic+0xe0>,r1	! 3077b4 <dma_channel>
  308026:	41 0b       	jsr	@r1
  308028:	00 09       	nop	
  30802a:	61 03       	mov	r0,r1
  30802c:	18 1f       	mov.l	r1,@(60,r8)
	ch->CHCR.DE = 1;
  30802e:	61 e3       	mov	r14,r1
  308030:	71 e4       	add	#-28,r1
  308032:	52 1f       	mov.l	@(60,r1),r2
  308034:	51 23       	mov.l	@(12,r2),r1
  308036:	e3 01       	mov	#1,r3
  308038:	21 3b       	or	r3,r1
  30803a:	12 13       	mov.l	r1,@(12,r2)

	/* Actively wait until the transfer is finished */
	while(!ch->CHCR.TE);
  30803c:	00 09       	nop	
  30803e:	61 e3       	mov	r14,r1
  308040:	71 e4       	add	#-28,r1
  308042:	51 1f       	mov.l	@(60,r1),r1
  308044:	51 13       	mov.l	@(12,r1),r1
  308046:	41 01       	shlr	r1
  308048:	e2 01       	mov	#1,r2
  30804a:	21 29       	and	r2,r1
  30804c:	61 1c       	extu.b	r1,r1
  30804e:	21 18       	tst	r1,r1
  308050:	89 f5       	bt	30803e <dma_transfer_atomic+0x7a>

	/* Disable the channel and clear the TE flag. Disable the channel first
	   as clearing the TE flag will allow the transfer to restart */
	ch->CHCR.DE = 0;
  308052:	61 e3       	mov	r14,r1
  308054:	71 e4       	add	#-28,r1
  308056:	52 1f       	mov.l	@(60,r1),r2
  308058:	51 23       	mov.l	@(12,r2),r1
  30805a:	e3 fe       	mov	#-2,r3
  30805c:	21 39       	and	r3,r1
  30805e:	12 13       	mov.l	r1,@(12,r2)
	ch->CHCR.TE = 0;
  308060:	61 e3       	mov	r14,r1
  308062:	71 e4       	add	#-28,r1
  308064:	52 1f       	mov.l	@(60,r1),r2
  308066:	51 23       	mov.l	@(12,r2),r1
  308068:	e3 fd       	mov	#-3,r3
  30806a:	21 39       	and	r3,r1
  30806c:	12 13       	mov.l	r1,@(12,r2)

	/* Clear the AE and NMIF status flags */
	DMA.OR.AE = 0;
  30806e:	d1 0e       	mov.l	3080a8 <dma_transfer_atomic+0xe4>,r1	! fe008020
  308070:	62 13       	mov	r1,r2
  308072:	72 40       	add	#64,r2
  308074:	61 21       	mov.w	@r2,r1
  308076:	e3 fb       	mov	#-5,r3
  308078:	21 39       	and	r3,r1
  30807a:	22 11       	mov.w	r1,@r2
	DMA.OR.NMIF = 0;
  30807c:	d1 0a       	mov.l	3080a8 <dma_transfer_atomic+0xe4>,r1	! fe008020
  30807e:	62 13       	mov	r1,r2
  308080:	72 40       	add	#64,r2
  308082:	61 21       	mov.w	@r2,r1
  308084:	e3 fd       	mov	#-3,r3
  308086:	21 39       	and	r3,r1
  308088:	22 11       	mov.w	r1,@r2
  30808a:	a0 01       	bra	308090 <dma_transfer_atomic+0xcc>
  30808c:	00 09       	nop	
		return;
  30808e:	00 09       	nop	
}
  308090:	7e 24       	add	#36,r14
  308092:	6f e3       	mov	r14,r15
  308094:	4f 26       	lds.l	@r15+,pr
  308096:	6e f6       	mov.l	@r15+,r14
  308098:	68 f6       	mov.l	@r15+,r8
  30809a:	00 0b       	rts	
  30809c:	00 09       	nop	
  30809e:	00 09       	nop	
  3080a0:	00 30       	.word 0x0030
  3080a2:	79 38       	add	#56,r9
  3080a4:	00 30       	.word 0x0030
  3080a6:	77 b4       	add	#-76,r7
  3080a8:	fe 00       	.word 0xfe00
  3080aa:	80 20       	mov.b	r0,@(0,r2)

003080ac <dma_transfer>:

/* Deprecated version of dma_transfer_async() that did not have a callback */
void dma_transfer(int channel, dma_size_t size, uint length, void const *src,
	dma_address_t src_mode, void *dst, dma_address_t dst_mode)
{
  3080ac:	2f e6       	mov.l	r14,@-r15
  3080ae:	4f 22       	sts.l	pr,@-r15
  3080b0:	7f bc       	add	#-68,r15
  3080b2:	6e f3       	mov	r15,r14
  3080b4:	61 e3       	mov	r14,r1
  3080b6:	71 04       	add	#4,r1
  3080b8:	11 4a       	mov.l	r4,@(40,r1)
  3080ba:	61 e3       	mov	r14,r1
  3080bc:	71 04       	add	#4,r1
  3080be:	11 59       	mov.l	r5,@(36,r1)
  3080c0:	61 e3       	mov	r14,r1
  3080c2:	71 04       	add	#4,r1
  3080c4:	11 68       	mov.l	r6,@(32,r1)
  3080c6:	61 e3       	mov	r14,r1
  3080c8:	71 04       	add	#4,r1
  3080ca:	11 77       	mov.l	r7,@(28,r1)
	dma_transfer_async(channel, size, length, src, src_mode, dst, dst_mode,
		GINT_CALL_NULL);
  3080cc:	61 e3       	mov	r14,r1
  3080ce:	71 30       	add	#48,r1
  3080d0:	e2 00       	mov	#0,r2
  3080d2:	21 22       	mov.l	r2,@r1
  3080d4:	e2 00       	mov	#0,r2
  3080d6:	11 21       	mov.l	r2,@(4,r1)
  3080d8:	e2 00       	mov	#0,r2
  3080da:	11 22       	mov.l	r2,@(8,r1)
  3080dc:	e2 00       	mov	#0,r2
  3080de:	11 23       	mov.l	r2,@(12,r1)
  3080e0:	e2 00       	mov	#0,r2
  3080e2:	11 24       	mov.l	r2,@(16,r1)
	dma_transfer_async(channel, size, length, src, src_mode, dst, dst_mode,
  3080e4:	67 e3       	mov	r14,r7
  3080e6:	77 04       	add	#4,r7
  3080e8:	66 e3       	mov	r14,r6
  3080ea:	76 04       	add	#4,r6
  3080ec:	65 e3       	mov	r14,r5
  3080ee:	75 04       	add	#4,r5
  3080f0:	63 e3       	mov	r14,r3
  3080f2:	73 04       	add	#4,r3
  3080f4:	61 e3       	mov	r14,r1
  3080f6:	71 30       	add	#48,r1
  3080f8:	62 f3       	mov	r15,r2
  3080fa:	72 0c       	add	#12,r2
  3080fc:	64 12       	mov.l	@r1,r4
  3080fe:	22 42       	mov.l	r4,@r2
  308100:	71 04       	add	#4,r1
  308102:	64 12       	mov.l	@r1,r4
  308104:	12 41       	mov.l	r4,@(4,r2)
  308106:	71 04       	add	#4,r1
  308108:	64 12       	mov.l	@r1,r4
  30810a:	12 42       	mov.l	r4,@(8,r2)
  30810c:	71 04       	add	#4,r1
  30810e:	64 12       	mov.l	@r1,r4
  308110:	12 43       	mov.l	r4,@(12,r2)
  308112:	71 04       	add	#4,r1
  308114:	64 12       	mov.l	@r1,r4
  308116:	12 44       	mov.l	r4,@(16,r2)
  308118:	71 04       	add	#4,r1
  30811a:	62 e3       	mov	r14,r2
  30811c:	72 40       	add	#64,r2
  30811e:	51 25       	mov.l	@(20,r2),r1
  308120:	1f 12       	mov.l	r1,@(8,r15)
  308122:	62 e3       	mov	r14,r2
  308124:	72 40       	add	#64,r2
  308126:	51 24       	mov.l	@(16,r2),r1
  308128:	1f 11       	mov.l	r1,@(4,r15)
  30812a:	62 e3       	mov	r14,r2
  30812c:	72 40       	add	#64,r2
  30812e:	51 23       	mov.l	@(12,r2),r1
  308130:	2f 12       	mov.l	r1,@r15
  308132:	57 77       	mov.l	@(28,r7),r7
  308134:	56 68       	mov.l	@(32,r6),r6
  308136:	55 59       	mov.l	@(36,r5),r5
  308138:	54 3a       	mov.l	@(40,r3),r4
  30813a:	d1 05       	mov.l	308150 <dma_transfer+0xa4>,r1	! 307bd0 <dma_transfer_async>
  30813c:	41 0b       	jsr	@r1
  30813e:	00 09       	nop	
}
  308140:	00 09       	nop	
  308142:	7e 44       	add	#68,r14
  308144:	6f e3       	mov	r14,r15
  308146:	4f 26       	lds.l	@r15+,pr
  308148:	6e f6       	mov.l	@r15+,r14
  30814a:	00 0b       	rts	
  30814c:	00 09       	nop	
  30814e:	00 09       	nop	
  308150:	00 30       	.word 0x0030
  308152:	7b d0       	add	#-48,r11

00308154 <configure>:
//---
//	Initialization
//---

static void configure(void)
{
  308154:	2f e6       	mov.l	r14,@-r15
  308156:	4f 22       	sts.l	pr,@-r15
  308158:	7f c8       	add	#-56,r15
  30815a:	6e f3       	mov	r15,r14
	if(isSH3()) return;

	/* Install the interrupt handler from dma/inth.s */
	int codes[] = { 0x800, 0x820, 0x840, 0x860, 0xb80, 0xba0 };
  30815c:	61 e3       	mov	r14,r1
  30815e:	71 1c       	add	#28,r1
  308160:	92 a4       	mov.w	3082ac <configure+0x158>,r2	! 800
  308162:	21 22       	mov.l	r2,@r1
  308164:	61 e3       	mov	r14,r1
  308166:	71 1c       	add	#28,r1
  308168:	92 a1       	mov.w	3082ae <configure+0x15a>,r2	! 820
  30816a:	11 21       	mov.l	r2,@(4,r1)
  30816c:	61 e3       	mov	r14,r1
  30816e:	71 1c       	add	#28,r1
  308170:	92 9e       	mov.w	3082b0 <configure+0x15c>,r2	! 840
  308172:	11 22       	mov.l	r2,@(8,r1)
  308174:	61 e3       	mov	r14,r1
  308176:	71 1c       	add	#28,r1
  308178:	92 9b       	mov.w	3082b2 <configure+0x15e>,r2	! 860
  30817a:	11 23       	mov.l	r2,@(12,r1)
  30817c:	61 e3       	mov	r14,r1
  30817e:	71 1c       	add	#28,r1
  308180:	92 98       	mov.w	3082b4 <configure+0x160>,r2	! b80
  308182:	11 24       	mov.l	r2,@(16,r1)
  308184:	61 e3       	mov	r14,r1
  308186:	71 1c       	add	#28,r1
  308188:	92 95       	mov.w	3082b6 <configure+0x162>,r2	! ba0
  30818a:	11 25       	mov.l	r2,@(20,r1)
	extern void inth_dma_te(void);

	for(int i = 0; i < 6; i++)
  30818c:	61 e3       	mov	r14,r1
  30818e:	71 f8       	add	#-8,r1
  308190:	e2 00       	mov	#0,r2
  308192:	11 2f       	mov.l	r2,@(60,r1)
  308194:	a0 3e       	bra	308214 <configure+0xc0>
  308196:	00 09       	nop	
	{
		intc_handler_function(codes[i],
  308198:	62 e3       	mov	r14,r2
  30819a:	72 1c       	add	#28,r2
  30819c:	61 e3       	mov	r14,r1
  30819e:	71 f8       	add	#-8,r1
  3081a0:	51 1f       	mov.l	@(60,r1),r1
  3081a2:	41 08       	shll2	r1
  3081a4:	31 2c       	add	r2,r1
  3081a6:	64 12       	mov.l	@r1,r4
			GINT_CALL(dma_interrupt_transfer_ended, i));
  3081a8:	61 e3       	mov	r14,r1
  3081aa:	71 08       	add	#8,r1
  3081ac:	e2 00       	mov	#0,r2
  3081ae:	21 22       	mov.l	r2,@r1
  3081b0:	e2 00       	mov	#0,r2
  3081b2:	11 21       	mov.l	r2,@(4,r1)
  3081b4:	e2 00       	mov	#0,r2
  3081b6:	11 22       	mov.l	r2,@(8,r1)
  3081b8:	e2 00       	mov	#0,r2
  3081ba:	11 23       	mov.l	r2,@(12,r1)
  3081bc:	e2 00       	mov	#0,r2
  3081be:	11 24       	mov.l	r2,@(16,r1)
  3081c0:	61 e3       	mov	r14,r1
  3081c2:	71 08       	add	#8,r1
  3081c4:	d2 3d       	mov.l	3082bc <configure+0x168>,r2	! 307cc4 <dma_interrupt_transfer_ended>
  3081c6:	21 22       	mov.l	r2,@r1
  3081c8:	61 e3       	mov	r14,r1
  3081ca:	71 08       	add	#8,r1
  3081cc:	62 e3       	mov	r14,r2
  3081ce:	72 f8       	add	#-8,r2
  3081d0:	52 2f       	mov.l	@(60,r2),r2
  3081d2:	11 21       	mov.l	r2,@(4,r1)
		intc_handler_function(codes[i],
  3081d4:	61 e3       	mov	r14,r1
  3081d6:	71 08       	add	#8,r1
  3081d8:	62 13       	mov	r1,r2
  3081da:	72 0c       	add	#12,r2
  3081dc:	63 22       	mov.l	@r2,r3
  3081de:	2f 32       	mov.l	r3,@r15
  3081e0:	52 21       	mov.l	@(4,r2),r2
  3081e2:	1f 21       	mov.l	r2,@(4,r15)
  3081e4:	65 12       	mov.l	@r1,r5
  3081e6:	56 11       	mov.l	@(4,r1),r6
  3081e8:	57 12       	mov.l	@(8,r1),r7
  3081ea:	d1 35       	mov.l	3082c0 <configure+0x16c>,r1	! 308868 <intc_handler_function>
  3081ec:	41 0b       	jsr	@r1
  3081ee:	00 09       	nop	

		/* Disable the channel */
		dma_channel(i)->CHCR.DE = 0;
  3081f0:	61 e3       	mov	r14,r1
  3081f2:	71 f8       	add	#-8,r1
  3081f4:	54 1f       	mov.l	@(60,r1),r4
  3081f6:	d1 33       	mov.l	3082c4 <configure+0x170>,r1	! 3077b4 <dma_channel>
  3081f8:	41 0b       	jsr	@r1
  3081fa:	00 09       	nop	
  3081fc:	62 03       	mov	r0,r2
  3081fe:	51 23       	mov.l	@(12,r2),r1
  308200:	e3 fe       	mov	#-2,r3
  308202:	21 39       	and	r3,r1
  308204:	12 13       	mov.l	r1,@(12,r2)
	for(int i = 0; i < 6; i++)
  308206:	61 e3       	mov	r14,r1
  308208:	71 f8       	add	#-8,r1
  30820a:	62 e3       	mov	r14,r2
  30820c:	72 f8       	add	#-8,r2
  30820e:	52 2f       	mov.l	@(60,r2),r2
  308210:	72 01       	add	#1,r2
  308212:	11 2f       	mov.l	r2,@(60,r1)
  308214:	61 e3       	mov	r14,r1
  308216:	71 f8       	add	#-8,r1
  308218:	52 1f       	mov.l	@(60,r1),r2
  30821a:	e1 05       	mov	#5,r1
  30821c:	32 17       	cmp/gt	r1,r2
  30821e:	8b bb       	bf	308198 <configure+0x44>
	}

	/* Install the address error gate */
	extern void inth_dma_ae(void);
	intc_handler(0xbc0, inth_dma_ae, 32);
  308220:	d2 29       	mov.l	3082c8 <configure+0x174>,r2	! 30cf80 <inth_dma_ae>
  308222:	91 49       	mov.w	3082b8 <configure+0x164>,r1	! bc0
  308224:	e6 20       	mov	#32,r6
  308226:	65 23       	mov	r2,r5
  308228:	64 13       	mov	r1,r4
  30822a:	d1 28       	mov.l	3082cc <configure+0x178>,r1	! 3087c0 <intc_handler>
  30822c:	41 0b       	jsr	@r1
  30822e:	00 09       	nop	

	/* Set interrupt priority to 3, except 11 for the channels that are
	   used by the USB driver */
	intc_priority(INTC_DMA_DEI0, 3);
  308230:	e5 03       	mov	#3,r5
  308232:	e4 09       	mov	#9,r4
  308234:	d1 26       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  308236:	41 0b       	jsr	@r1
  308238:	00 09       	nop	
	intc_priority(INTC_DMA_DEI1, 3);
  30823a:	e5 03       	mov	#3,r5
  30823c:	e4 0a       	mov	#10,r4
  30823e:	d1 24       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  308240:	41 0b       	jsr	@r1
  308242:	00 09       	nop	
	intc_priority(INTC_DMA_DEI2, 3);
  308244:	e5 03       	mov	#3,r5
  308246:	e4 0b       	mov	#11,r4
  308248:	d1 21       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  30824a:	41 0b       	jsr	@r1
  30824c:	00 09       	nop	
	intc_priority(INTC_DMA_DEI3, 9);
  30824e:	e5 09       	mov	#9,r5
  308250:	e4 0c       	mov	#12,r4
  308252:	d1 1f       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  308254:	41 0b       	jsr	@r1
  308256:	00 09       	nop	
	intc_priority(INTC_DMA_DEI4, 9);
  308258:	e5 09       	mov	#9,r5
  30825a:	e4 0d       	mov	#13,r4
  30825c:	d1 1c       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  30825e:	41 0b       	jsr	@r1
  308260:	00 09       	nop	
	intc_priority(INTC_DMA_DEI5, 3);
  308262:	e5 03       	mov	#3,r5
  308264:	e4 0e       	mov	#14,r4
  308266:	d1 1a       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  308268:	41 0b       	jsr	@r1
  30826a:	00 09       	nop	
	intc_priority(INTC_DMA_DADERR, 3);
  30826c:	e5 03       	mov	#3,r5
  30826e:	e4 0f       	mov	#15,r4
  308270:	d1 17       	mov.l	3082d0 <configure+0x17c>,r1	! 308664 <intc_priority>
  308272:	41 0b       	jsr	@r1
  308274:	00 09       	nop	

	/* Clear blocking flags and enable the master switch */
	DMA.OR.AE = 0;
  308276:	d1 17       	mov.l	3082d4 <configure+0x180>,r1	! fe008020
  308278:	62 13       	mov	r1,r2
  30827a:	72 40       	add	#64,r2
  30827c:	61 21       	mov.w	@r2,r1
  30827e:	e3 fb       	mov	#-5,r3
  308280:	21 39       	and	r3,r1
  308282:	22 11       	mov.w	r1,@r2
	DMA.OR.NMIF = 0;
  308284:	d1 13       	mov.l	3082d4 <configure+0x180>,r1	! fe008020
  308286:	62 13       	mov	r1,r2
  308288:	72 40       	add	#64,r2
  30828a:	61 21       	mov.w	@r2,r1
  30828c:	e3 fd       	mov	#-3,r3
  30828e:	21 39       	and	r3,r1
  308290:	22 11       	mov.w	r1,@r2
	DMA.OR.DME = 1;
  308292:	d1 10       	mov.l	3082d4 <configure+0x180>,r1	! fe008020
  308294:	62 13       	mov	r1,r2
  308296:	72 40       	add	#64,r2
  308298:	61 21       	mov.w	@r2,r1
  30829a:	e3 01       	mov	#1,r3
  30829c:	21 3b       	or	r3,r1
  30829e:	22 11       	mov.w	r1,@r2
}
  3082a0:	7e 38       	add	#56,r14
  3082a2:	6f e3       	mov	r14,r15
  3082a4:	4f 26       	lds.l	@r15+,pr
  3082a6:	6e f6       	mov.l	@r15+,r14
  3082a8:	00 0b       	rts	
  3082aa:	00 09       	nop	
  3082ac:	08 00       	.word 0x0800
  3082ae:	08 20       	.word 0x0820
  3082b0:	08 40       	.word 0x0840
  3082b2:	08 60       	.word 0x0860
  3082b4:	0b 80       	.word 0x0b80
  3082b6:	0b a0       	.word 0x0ba0
  3082b8:	0b c0       	.word 0x0bc0
  3082ba:	00 09       	nop	
  3082bc:	00 30       	.word 0x0030
  3082be:	7c c4       	add	#-60,r12
  3082c0:	00 30       	.word 0x0030
  3082c2:	88 68       	cmp/eq	#104,r0
  3082c4:	00 30       	.word 0x0030
  3082c6:	77 b4       	add	#-76,r7
  3082c8:	00 30       	.word 0x0030
  3082ca:	cf 80       	or.b	#128,@(r0,gbr)
  3082cc:	00 30       	.word 0x0030
  3082ce:	87 c0       	.word 0x87c0
  3082d0:	00 30       	.word 0x0030
  3082d2:	86 64       	.word 0x8664
  3082d4:	fe 00       	.word 0xfe00
  3082d6:	80 20       	mov.b	r0,@(0,r2)

003082d8 <funbind>:

static void funbind(void)
{
  3082d8:	2f e6       	mov.l	r14,@-r15
  3082da:	4f 22       	sts.l	pr,@-r15
  3082dc:	7f fc       	add	#-4,r15
  3082de:	6e f3       	mov	r15,r14
	/* Wait for all OS transfers to finish before taking over */
	for(int channel = 0; channel < 6; channel++)
  3082e0:	61 e3       	mov	r14,r1
  3082e2:	71 c4       	add	#-60,r1
  3082e4:	e2 00       	mov	#0,r2
  3082e6:	11 2f       	mov.l	r2,@(60,r1)
  3082e8:	a0 0e       	bra	308308 <funbind+0x30>
  3082ea:	00 09       	nop	
		dma_channel_wait(channel, true);
  3082ec:	61 e3       	mov	r14,r1
  3082ee:	71 c4       	add	#-60,r1
  3082f0:	e5 01       	mov	#1,r5
  3082f2:	54 1f       	mov.l	@(60,r1),r4
  3082f4:	d1 0b       	mov.l	308324 <funbind+0x4c>,r1	! 307e4c <dma_channel_wait>
  3082f6:	41 0b       	jsr	@r1
  3082f8:	00 09       	nop	
	for(int channel = 0; channel < 6; channel++)
  3082fa:	61 e3       	mov	r14,r1
  3082fc:	71 c4       	add	#-60,r1
  3082fe:	62 e3       	mov	r14,r2
  308300:	72 c4       	add	#-60,r2
  308302:	52 2f       	mov.l	@(60,r2),r2
  308304:	72 01       	add	#1,r2
  308306:	11 2f       	mov.l	r2,@(60,r1)
  308308:	61 e3       	mov	r14,r1
  30830a:	71 c4       	add	#-60,r1
  30830c:	52 1f       	mov.l	@(60,r1),r2
  30830e:	e1 05       	mov	#5,r1
  308310:	32 17       	cmp/gt	r1,r2
  308312:	8b eb       	bf	3082ec <funbind+0x14>
}
  308314:	00 09       	nop	
  308316:	00 09       	nop	
  308318:	7e 04       	add	#4,r14
  30831a:	6f e3       	mov	r14,r15
  30831c:	4f 26       	lds.l	@r15+,pr
  30831e:	6e f6       	mov.l	@r15+,r14
  308320:	00 0b       	rts	
  308322:	00 09       	nop	
  308324:	00 30       	.word 0x0030
  308326:	7e 4c       	add	#76,r14

00308328 <unbind>:

static void unbind(void)
{
  308328:	2f e6       	mov.l	r14,@-r15
  30832a:	4f 22       	sts.l	pr,@-r15
  30832c:	7f fc       	add	#-4,r15
  30832e:	6e f3       	mov	r15,r14
	/* Make sure all DMA transfers are finished before leaving gint */
	for(int channel = 0; channel < 6; channel++)
  308330:	61 e3       	mov	r14,r1
  308332:	71 c4       	add	#-60,r1
  308334:	e2 00       	mov	#0,r2
  308336:	11 2f       	mov.l	r2,@(60,r1)
  308338:	a0 0e       	bra	308358 <unbind+0x30>
  30833a:	00 09       	nop	
		dma_channel_wait(channel, false);
  30833c:	61 e3       	mov	r14,r1
  30833e:	71 c4       	add	#-60,r1
  308340:	e5 00       	mov	#0,r5
  308342:	54 1f       	mov.l	@(60,r1),r4
  308344:	d1 0b       	mov.l	308374 <unbind+0x4c>,r1	! 307e4c <dma_channel_wait>
  308346:	41 0b       	jsr	@r1
  308348:	00 09       	nop	
	for(int channel = 0; channel < 6; channel++)
  30834a:	61 e3       	mov	r14,r1
  30834c:	71 c4       	add	#-60,r1
  30834e:	62 e3       	mov	r14,r2
  308350:	72 c4       	add	#-60,r2
  308352:	52 2f       	mov.l	@(60,r2),r2
  308354:	72 01       	add	#1,r2
  308356:	11 2f       	mov.l	r2,@(60,r1)
  308358:	61 e3       	mov	r14,r1
  30835a:	71 c4       	add	#-60,r1
  30835c:	52 1f       	mov.l	@(60,r1),r2
  30835e:	e1 05       	mov	#5,r1
  308360:	32 17       	cmp/gt	r1,r2
  308362:	8b eb       	bf	30833c <unbind+0x14>
}
  308364:	00 09       	nop	
  308366:	00 09       	nop	
  308368:	7e 04       	add	#4,r14
  30836a:	6f e3       	mov	r14,r15
  30836c:	4f 26       	lds.l	@r15+,pr
  30836e:	6e f6       	mov.l	@r15+,r14
  308370:	00 0b       	rts	
  308372:	00 09       	nop	
  308374:	00 30       	.word 0x0030
  308376:	7e 4c       	add	#76,r14

00308378 <hpowered>:

static bool hpowered(void)
{
  308378:	2f e6       	mov.l	r14,@-r15
  30837a:	6e f3       	mov	r15,r14
	if(isSH3()) return false;
	return (POWER.MSTPCR0.DMAC0 == 0);
  30837c:	d1 07       	mov.l	30839c <hpowered+0x24>,r1	! a4150020
  30837e:	51 14       	mov.l	@(16,r1),r1
  308380:	e2 eb       	mov	#-21,r2
  308382:	41 2d       	shld	r2,r1
  308384:	e2 01       	mov	#1,r2
  308386:	21 29       	and	r2,r1
  308388:	61 1c       	extu.b	r1,r1
  30838a:	e2 01       	mov	#1,r2
  30838c:	21 2a       	xor	r2,r1
  30838e:	61 1c       	extu.b	r1,r1
}
  308390:	60 13       	mov	r1,r0
  308392:	6f e3       	mov	r14,r15
  308394:	6e f6       	mov.l	@r15+,r14
  308396:	00 0b       	rts	
  308398:	00 09       	nop	
  30839a:	00 09       	nop	
  30839c:	a4 15       	bra	308bca <_WEAK_keydev_keydown+0x18>
  30839e:	00 20       	.word 0x0020

003083a0 <hpoweron>:

static void hpoweron(void)
{
  3083a0:	2f e6       	mov.l	r14,@-r15
  3083a2:	6e f3       	mov	r15,r14
	if(isSH3()) return;
	POWER.MSTPCR0.DMAC0 = 0;
  3083a4:	d2 04       	mov.l	3083b8 <hpoweron+0x18>,r2	! a4150020
  3083a6:	51 24       	mov.l	@(16,r2),r1
  3083a8:	d3 04       	mov.l	3083bc <hpoweron+0x1c>,r3	! ffdfffff
  3083aa:	21 39       	and	r3,r1
  3083ac:	12 14       	mov.l	r1,@(16,r2)
}
  3083ae:	6f e3       	mov	r14,r15
  3083b0:	6e f6       	mov.l	@r15+,r14
  3083b2:	00 0b       	rts	
  3083b4:	00 09       	nop	
  3083b6:	00 09       	nop	
  3083b8:	a4 15       	bra	308be6 <_WEAK_keydev_unqueue_event+0x14>
  3083ba:	00 20       	.word 0x0020
  3083bc:	ff df       	.word 0xffdf
  3083be:	ff ff       	.word 0xffff

003083c0 <hpoweroff>:

static void hpoweroff(void)
{
  3083c0:	2f e6       	mov.l	r14,@-r15
  3083c2:	6e f3       	mov	r15,r14
	if(isSH3()) return;
	POWER.MSTPCR0.DMAC0 = 1;
  3083c4:	d2 04       	mov.l	3083d8 <hpoweroff+0x18>,r2	! a4150020
  3083c6:	51 24       	mov.l	@(16,r2),r1
  3083c8:	d3 04       	mov.l	3083dc <hpoweroff+0x1c>,r3	! 200000
  3083ca:	21 3b       	or	r3,r1
  3083cc:	12 14       	mov.l	r1,@(16,r2)
}
  3083ce:	6f e3       	mov	r14,r15
  3083d0:	6e f6       	mov.l	@r15+,r14
  3083d2:	00 0b       	rts	
  3083d4:	00 09       	nop	
  3083d6:	00 09       	nop	
  3083d8:	a4 15       	bra	308c06 <gint_default_panic+0x1a>
  3083da:	00 20       	.word 0x0020
  3083dc:	00 20       	.word 0x0020
	...

003083e0 <hsave>:
//---
// State and driver metadata
//---

static void hsave(dma_state_t *s)
{
  3083e0:	2f 86       	mov.l	r8,@-r15
  3083e2:	2f e6       	mov.l	r14,@-r15
  3083e4:	4f 22       	sts.l	pr,@-r15
  3083e6:	7f f4       	add	#-12,r15
  3083e8:	6e f3       	mov	r15,r14
  3083ea:	61 e3       	mov	r14,r1
  3083ec:	71 cc       	add	#-52,r1
  3083ee:	11 4d       	mov.l	r4,@(52,r1)
	if(isSH3()) return;

	for(int i = 0; i < 6; i++)
  3083f0:	61 e3       	mov	r14,r1
  3083f2:	71 cc       	add	#-52,r1
  3083f4:	e2 00       	mov	#0,r2
  3083f6:	11 2f       	mov.l	r2,@(60,r1)
  3083f8:	a0 4c       	bra	308494 <hsave+0xb4>
  3083fa:	00 09       	nop	
	{
		channel_t *ch = dma_channel(i);
  3083fc:	68 e3       	mov	r14,r8
  3083fe:	78 cc       	add	#-52,r8
  308400:	61 e3       	mov	r14,r1
  308402:	71 cc       	add	#-52,r1
  308404:	54 1f       	mov.l	@(60,r1),r4
  308406:	d1 2e       	mov.l	3084c0 <hsave+0xe0>,r1	! 3077b4 <dma_channel>
  308408:	41 0b       	jsr	@r1
  30840a:	00 09       	nop	
  30840c:	61 03       	mov	r0,r1
  30840e:	18 1e       	mov.l	r1,@(56,r8)
		s->ch[i].SAR        = ch->SAR;
  308410:	61 e3       	mov	r14,r1
  308412:	71 cc       	add	#-52,r1
  308414:	51 1e       	mov.l	@(56,r1),r1
  308416:	62 12       	mov.l	@r1,r2
  308418:	61 e3       	mov	r14,r1
  30841a:	71 cc       	add	#-52,r1
  30841c:	53 1d       	mov.l	@(52,r1),r3
  30841e:	61 e3       	mov	r14,r1
  308420:	71 cc       	add	#-52,r1
  308422:	51 1f       	mov.l	@(60,r1),r1
  308424:	41 08       	shll2	r1
  308426:	41 08       	shll2	r1
  308428:	31 3c       	add	r3,r1
  30842a:	21 22       	mov.l	r2,@r1
		s->ch[i].DAR        = ch->DAR;
  30842c:	61 e3       	mov	r14,r1
  30842e:	71 cc       	add	#-52,r1
  308430:	51 1e       	mov.l	@(56,r1),r1
  308432:	52 11       	mov.l	@(4,r1),r2
  308434:	61 e3       	mov	r14,r1
  308436:	71 cc       	add	#-52,r1
  308438:	53 1d       	mov.l	@(52,r1),r3
  30843a:	61 e3       	mov	r14,r1
  30843c:	71 cc       	add	#-52,r1
  30843e:	51 1f       	mov.l	@(60,r1),r1
  308440:	41 08       	shll2	r1
  308442:	41 08       	shll2	r1
  308444:	31 3c       	add	r3,r1
  308446:	71 04       	add	#4,r1
  308448:	21 22       	mov.l	r2,@r1
		s->ch[i].TCR        = ch->TCR;
  30844a:	61 e3       	mov	r14,r1
  30844c:	71 cc       	add	#-52,r1
  30844e:	51 1e       	mov.l	@(56,r1),r1
  308450:	52 12       	mov.l	@(8,r1),r2
  308452:	61 e3       	mov	r14,r1
  308454:	71 cc       	add	#-52,r1
  308456:	53 1d       	mov.l	@(52,r1),r3
  308458:	61 e3       	mov	r14,r1
  30845a:	71 cc       	add	#-52,r1
  30845c:	51 1f       	mov.l	@(60,r1),r1
  30845e:	41 08       	shll2	r1
  308460:	41 08       	shll2	r1
  308462:	31 3c       	add	r3,r1
  308464:	71 08       	add	#8,r1
  308466:	21 22       	mov.l	r2,@r1
		s->ch[i].CHCR.lword = ch->CHCR.lword;
  308468:	61 e3       	mov	r14,r1
  30846a:	71 cc       	add	#-52,r1
  30846c:	51 1e       	mov.l	@(56,r1),r1
  30846e:	52 13       	mov.l	@(12,r1),r2
  308470:	61 e3       	mov	r14,r1
  308472:	71 cc       	add	#-52,r1
  308474:	53 1d       	mov.l	@(52,r1),r3
  308476:	61 e3       	mov	r14,r1
  308478:	71 cc       	add	#-52,r1
  30847a:	51 1f       	mov.l	@(60,r1),r1
  30847c:	41 08       	shll2	r1
  30847e:	41 08       	shll2	r1
  308480:	31 3c       	add	r3,r1
  308482:	71 0c       	add	#12,r1
  308484:	21 22       	mov.l	r2,@r1
	for(int i = 0; i < 6; i++)
  308486:	61 e3       	mov	r14,r1
  308488:	71 cc       	add	#-52,r1
  30848a:	62 e3       	mov	r14,r2
  30848c:	72 cc       	add	#-52,r2
  30848e:	52 2f       	mov.l	@(60,r2),r2
  308490:	72 01       	add	#1,r2
  308492:	11 2f       	mov.l	r2,@(60,r1)
  308494:	61 e3       	mov	r14,r1
  308496:	71 cc       	add	#-52,r1
  308498:	52 1f       	mov.l	@(60,r1),r2
  30849a:	e1 05       	mov	#5,r1
  30849c:	32 17       	cmp/gt	r1,r2
  30849e:	8b ad       	bf	3083fc <hsave+0x1c>
	}
	s->OR = DMA.OR.word;
  3084a0:	d1 08       	mov.l	3084c4 <hsave+0xe4>,r1	! fe008020
  3084a2:	71 40       	add	#64,r1
  3084a4:	61 11       	mov.w	@r1,r1
  3084a6:	62 1d       	extu.w	r1,r2
  3084a8:	61 e3       	mov	r14,r1
  3084aa:	71 cc       	add	#-52,r1
  3084ac:	51 1d       	mov.l	@(52,r1),r1
  3084ae:	71 60       	add	#96,r1
  3084b0:	21 21       	mov.w	r2,@r1
}
  3084b2:	7e 0c       	add	#12,r14
  3084b4:	6f e3       	mov	r14,r15
  3084b6:	4f 26       	lds.l	@r15+,pr
  3084b8:	6e f6       	mov.l	@r15+,r14
  3084ba:	68 f6       	mov.l	@r15+,r8
  3084bc:	00 0b       	rts	
  3084be:	00 09       	nop	
  3084c0:	00 30       	.word 0x0030
  3084c2:	77 b4       	add	#-76,r7
  3084c4:	fe 00       	.word 0xfe00
  3084c6:	80 20       	mov.b	r0,@(0,r2)

003084c8 <hrestore>:

static void hrestore(dma_state_t const *s)
{
  3084c8:	2f 86       	mov.l	r8,@-r15
  3084ca:	2f e6       	mov.l	r14,@-r15
  3084cc:	4f 22       	sts.l	pr,@-r15
  3084ce:	7f f4       	add	#-12,r15
  3084d0:	6e f3       	mov	r15,r14
  3084d2:	61 e3       	mov	r14,r1
  3084d4:	71 cc       	add	#-52,r1
  3084d6:	11 4d       	mov.l	r4,@(52,r1)
	if(isSH3()) return;

	/* Disable the DMA while editing */
	DMA.OR.DME = 0;
  3084d8:	d1 37       	mov.l	3085b8 <hrestore+0xf0>,r1	! fe008020
  3084da:	62 13       	mov	r1,r2
  3084dc:	72 40       	add	#64,r2
  3084de:	61 21       	mov.w	@r2,r1
  3084e0:	e3 fe       	mov	#-2,r3
  3084e2:	21 39       	and	r3,r1
  3084e4:	22 11       	mov.w	r1,@r2

	for(int i = 0; i < 6; i++)
  3084e6:	61 e3       	mov	r14,r1
  3084e8:	71 cc       	add	#-52,r1
  3084ea:	e2 00       	mov	#0,r2
  3084ec:	11 2f       	mov.l	r2,@(60,r1)
  3084ee:	a0 4c       	bra	30858a <hrestore+0xc2>
  3084f0:	00 09       	nop	
	{
		channel_t *ch = dma_channel(i);
  3084f2:	68 e3       	mov	r14,r8
  3084f4:	78 cc       	add	#-52,r8
  3084f6:	61 e3       	mov	r14,r1
  3084f8:	71 cc       	add	#-52,r1
  3084fa:	54 1f       	mov.l	@(60,r1),r4
  3084fc:	d1 2f       	mov.l	3085bc <hrestore+0xf4>,r1	! 3077b4 <dma_channel>
  3084fe:	41 0b       	jsr	@r1
  308500:	00 09       	nop	
  308502:	61 03       	mov	r0,r1
  308504:	18 1e       	mov.l	r1,@(56,r8)
		ch->SAR        = s->ch[i].SAR;
  308506:	61 e3       	mov	r14,r1
  308508:	71 cc       	add	#-52,r1
  30850a:	52 1d       	mov.l	@(52,r1),r2
  30850c:	61 e3       	mov	r14,r1
  30850e:	71 cc       	add	#-52,r1
  308510:	51 1f       	mov.l	@(60,r1),r1
  308512:	41 08       	shll2	r1
  308514:	41 08       	shll2	r1
  308516:	31 2c       	add	r2,r1
  308518:	62 12       	mov.l	@r1,r2
  30851a:	61 e3       	mov	r14,r1
  30851c:	71 cc       	add	#-52,r1
  30851e:	51 1e       	mov.l	@(56,r1),r1
  308520:	21 22       	mov.l	r2,@r1
		ch->DAR        = s->ch[i].DAR;
  308522:	61 e3       	mov	r14,r1
  308524:	71 cc       	add	#-52,r1
  308526:	52 1d       	mov.l	@(52,r1),r2
  308528:	61 e3       	mov	r14,r1
  30852a:	71 cc       	add	#-52,r1
  30852c:	51 1f       	mov.l	@(60,r1),r1
  30852e:	41 08       	shll2	r1
  308530:	41 08       	shll2	r1
  308532:	31 2c       	add	r2,r1
  308534:	71 04       	add	#4,r1
  308536:	62 12       	mov.l	@r1,r2
  308538:	61 e3       	mov	r14,r1
  30853a:	71 cc       	add	#-52,r1
  30853c:	51 1e       	mov.l	@(56,r1),r1
  30853e:	11 21       	mov.l	r2,@(4,r1)
		ch->TCR        = s->ch[i].TCR;
  308540:	61 e3       	mov	r14,r1
  308542:	71 cc       	add	#-52,r1
  308544:	52 1d       	mov.l	@(52,r1),r2
  308546:	61 e3       	mov	r14,r1
  308548:	71 cc       	add	#-52,r1
  30854a:	51 1f       	mov.l	@(60,r1),r1
  30854c:	41 08       	shll2	r1
  30854e:	41 08       	shll2	r1
  308550:	31 2c       	add	r2,r1
  308552:	71 08       	add	#8,r1
  308554:	62 12       	mov.l	@r1,r2
  308556:	61 e3       	mov	r14,r1
  308558:	71 cc       	add	#-52,r1
  30855a:	51 1e       	mov.l	@(56,r1),r1
  30855c:	11 22       	mov.l	r2,@(8,r1)
		ch->CHCR.lword = s->ch[i].CHCR.lword;
  30855e:	61 e3       	mov	r14,r1
  308560:	71 cc       	add	#-52,r1
  308562:	52 1d       	mov.l	@(52,r1),r2
  308564:	61 e3       	mov	r14,r1
  308566:	71 cc       	add	#-52,r1
  308568:	51 1f       	mov.l	@(60,r1),r1
  30856a:	41 08       	shll2	r1
  30856c:	41 08       	shll2	r1
  30856e:	31 2c       	add	r2,r1
  308570:	71 0c       	add	#12,r1
  308572:	62 12       	mov.l	@r1,r2
  308574:	61 e3       	mov	r14,r1
  308576:	71 cc       	add	#-52,r1
  308578:	51 1e       	mov.l	@(56,r1),r1
  30857a:	11 23       	mov.l	r2,@(12,r1)
	for(int i = 0; i < 6; i++)
  30857c:	61 e3       	mov	r14,r1
  30857e:	71 cc       	add	#-52,r1
  308580:	62 e3       	mov	r14,r2
  308582:	72 cc       	add	#-52,r2
  308584:	52 2f       	mov.l	@(60,r2),r2
  308586:	72 01       	add	#1,r2
  308588:	11 2f       	mov.l	r2,@(60,r1)
  30858a:	61 e3       	mov	r14,r1
  30858c:	71 cc       	add	#-52,r1
  30858e:	52 1f       	mov.l	@(60,r1),r2
  308590:	e1 05       	mov	#5,r1
  308592:	32 17       	cmp/gt	r1,r2
  308594:	8b ad       	bf	3084f2 <hrestore+0x2a>
	}
	DMA.OR.word = s->OR;
  308596:	d1 08       	mov.l	3085b8 <hrestore+0xf0>,r1	! fe008020
  308598:	62 e3       	mov	r14,r2
  30859a:	72 cc       	add	#-52,r2
  30859c:	52 2d       	mov.l	@(52,r2),r2
  30859e:	72 60       	add	#96,r2
  3085a0:	62 21       	mov.w	@r2,r2
  3085a2:	62 2d       	extu.w	r2,r2
  3085a4:	71 40       	add	#64,r1
  3085a6:	21 21       	mov.w	r2,@r1
}
  3085a8:	7e 0c       	add	#12,r14
  3085aa:	6f e3       	mov	r14,r15
  3085ac:	4f 26       	lds.l	@r15+,pr
  3085ae:	6e f6       	mov.l	@r15+,r14
  3085b0:	68 f6       	mov.l	@r15+,r8
  3085b2:	00 0b       	rts	
  3085b4:	00 09       	nop	
  3085b6:	00 09       	nop	
  3085b8:	fe 00       	.word 0xfe00
  3085ba:	80 20       	mov.b	r0,@(0,r2)
  3085bc:	00 30       	.word 0x0030
  3085be:	77 b4       	add	#-76,r7

003085c0 <GINT_CALL_SET_function>:
{
  3085c0:	2f e6       	mov.l	r14,@-r15
  3085c2:	7f fc       	add	#-4,r15
  3085c4:	6e f3       	mov	r15,r14
  3085c6:	61 e3       	mov	r14,r1
  3085c8:	71 c4       	add	#-60,r1
  3085ca:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  3085cc:	61 e3       	mov	r14,r1
  3085ce:	71 c4       	add	#-60,r1
  3085d0:	51 1f       	mov.l	@(60,r1),r1
  3085d2:	e2 01       	mov	#1,r2
  3085d4:	21 22       	mov.l	r2,@r1
	return 0;
  3085d6:	e1 00       	mov	#0,r1
}
  3085d8:	60 13       	mov	r1,r0
  3085da:	7e 04       	add	#4,r14
  3085dc:	6f e3       	mov	r14,r15
  3085de:	6e f6       	mov.l	@r15+,r14
  3085e0:	00 0b       	rts	
  3085e2:	00 09       	nop	

003085e4 <GINT_CALL_INC_function>:
{
  3085e4:	2f e6       	mov.l	r14,@-r15
  3085e6:	7f fc       	add	#-4,r15
  3085e8:	6e f3       	mov	r15,r14
  3085ea:	61 e3       	mov	r14,r1
  3085ec:	71 c4       	add	#-60,r1
  3085ee:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3085f0:	61 e3       	mov	r14,r1
  3085f2:	71 c4       	add	#-60,r1
  3085f4:	51 1f       	mov.l	@(60,r1),r1
  3085f6:	61 12       	mov.l	@r1,r1
  3085f8:	62 13       	mov	r1,r2
  3085fa:	72 01       	add	#1,r2
  3085fc:	61 e3       	mov	r14,r1
  3085fe:	71 c4       	add	#-60,r1
  308600:	51 1f       	mov.l	@(60,r1),r1
  308602:	21 22       	mov.l	r2,@r1
	return 0;
  308604:	e1 00       	mov	#0,r1
}
  308606:	60 13       	mov	r1,r0
  308608:	7e 04       	add	#4,r14
  30860a:	6f e3       	mov	r14,r15
  30860c:	6e f6       	mov.l	@r15+,r14
  30860e:	00 0b       	rts	
  308610:	00 09       	nop	

00308612 <GINT_CALL_SET_STOP_function>:
{
  308612:	2f e6       	mov.l	r14,@-r15
  308614:	7f fc       	add	#-4,r15
  308616:	6e f3       	mov	r15,r14
  308618:	61 e3       	mov	r14,r1
  30861a:	71 c4       	add	#-60,r1
  30861c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30861e:	61 e3       	mov	r14,r1
  308620:	71 c4       	add	#-60,r1
  308622:	51 1f       	mov.l	@(60,r1),r1
  308624:	e2 01       	mov	#1,r2
  308626:	21 22       	mov.l	r2,@r1
	return 1;
  308628:	e1 01       	mov	#1,r1
}
  30862a:	60 13       	mov	r1,r0
  30862c:	7e 04       	add	#4,r14
  30862e:	6f e3       	mov	r14,r15
  308630:	6e f6       	mov.l	@r15+,r14
  308632:	00 0b       	rts	
  308634:	00 09       	nop	

00308636 <GINT_CALL_INC_STOP_function>:
{
  308636:	2f e6       	mov.l	r14,@-r15
  308638:	7f fc       	add	#-4,r15
  30863a:	6e f3       	mov	r15,r14
  30863c:	61 e3       	mov	r14,r1
  30863e:	71 c4       	add	#-60,r1
  308640:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  308642:	61 e3       	mov	r14,r1
  308644:	71 c4       	add	#-60,r1
  308646:	51 1f       	mov.l	@(60,r1),r1
  308648:	61 12       	mov.l	@r1,r1
  30864a:	62 13       	mov	r1,r2
  30864c:	72 01       	add	#1,r2
  30864e:	61 e3       	mov	r14,r1
  308650:	71 c4       	add	#-60,r1
  308652:	51 1f       	mov.l	@(60,r1),r1
  308654:	21 22       	mov.l	r2,@r1
	return 1;
  308656:	e1 01       	mov	#1,r1
}
  308658:	60 13       	mov	r1,r0
  30865a:	7e 04       	add	#4,r14
  30865c:	6f e3       	mov	r14,r15
  30865e:	6e f6       	mov.l	@r15+,r14
  308660:	00 0b       	rts	
  308662:	00 09       	nop	

00308664 <intc_priority>:
// Interrupt controller functions
//---

static void (*print)(const char*) = (void (*)(const char*)) 0xfffffe00;
int intc_priority(int intname, int level)
{
  308664:	2f e6       	mov.l	r14,@-r15
  308666:	7f dc       	add	#-36,r15
  308668:	6e f3       	mov	r15,r14
  30866a:	61 e3       	mov	r14,r1
  30866c:	71 e4       	add	#-28,r1
  30866e:	11 48       	mov.l	r4,@(32,r1)
  308670:	61 e3       	mov	r14,r1
  308672:	71 e4       	add	#-28,r1
  308674:	11 57       	mov.l	r5,@(28,r1)
	struct info const *i = &info[intname];
  308676:	63 e3       	mov	r14,r3
  308678:	73 e4       	add	#-28,r3
  30867a:	61 e3       	mov	r14,r1
  30867c:	71 e4       	add	#-28,r1
  30867e:	52 18       	mov.l	@(32,r1),r2
  308680:	61 23       	mov	r2,r1
  308682:	31 1c       	add	r1,r1
  308684:	31 2c       	add	r2,r1
  308686:	41 08       	shll2	r1
  308688:	d2 4a       	mov.l	3087b4 <intc_priority+0x150>,r2	! 30ea24 <info>
  30868a:	31 2c       	add	r2,r1
  30868c:	13 1d       	mov.l	r1,@(52,r3)
	int IPRn = i->IPR4, IPRbits = i->IPR4bits;
  30868e:	61 e3       	mov	r14,r1
  308690:	71 e4       	add	#-28,r1
  308692:	51 1d       	mov.l	@(52,r1),r1
  308694:	61 11       	mov.w	@r1,r1
  308696:	62 1d       	extu.w	r1,r2
  308698:	61 e3       	mov	r14,r1
  30869a:	71 e4       	add	#-28,r1
  30869c:	11 2c       	mov.l	r2,@(48,r1)
  30869e:	61 e3       	mov	r14,r1
  3086a0:	71 e4       	add	#-28,r1
  3086a2:	51 1d       	mov.l	@(52,r1),r1
  3086a4:	85 11       	mov.w	@(2,r1),r0
  3086a6:	61 03       	mov	r0,r1
  3086a8:	62 1d       	extu.w	r1,r2
  3086aa:	61 e3       	mov	r14,r1
  3086ac:	71 e4       	add	#-28,r1
  3086ae:	11 2f       	mov.l	r2,@(60,r1)
		IPRn = i->IPR3;
		IPRbits = i->IPR3bits;
	}

	/* Bit-shift for the mask */
	int shift = 0;
  3086b0:	61 e3       	mov	r14,r1
  3086b2:	71 e4       	add	#-28,r1
  3086b4:	e2 00       	mov	#0,r2
  3086b6:	11 2e       	mov.l	r2,@(56,r1)
	while(IPRbits >>= 4) shift += 4;
  3086b8:	a0 07       	bra	3086ca <intc_priority+0x66>
  3086ba:	00 09       	nop	
  3086bc:	61 e3       	mov	r14,r1
  3086be:	71 e4       	add	#-28,r1
  3086c0:	62 e3       	mov	r14,r2
  3086c2:	72 e4       	add	#-28,r2
  3086c4:	52 2e       	mov.l	@(56,r2),r2
  3086c6:	72 04       	add	#4,r2
  3086c8:	11 2e       	mov.l	r2,@(56,r1)
  3086ca:	61 e3       	mov	r14,r1
  3086cc:	71 e4       	add	#-28,r1
  3086ce:	62 e3       	mov	r14,r2
  3086d0:	72 e4       	add	#-28,r2
  3086d2:	52 2f       	mov.l	@(60,r2),r2
  3086d4:	e3 fc       	mov	#-4,r3
  3086d6:	42 3c       	shad	r3,r2
  3086d8:	11 2f       	mov.l	r2,@(60,r1)
  3086da:	61 e3       	mov	r14,r1
  3086dc:	71 e4       	add	#-28,r1
  3086de:	51 1f       	mov.l	@(60,r1),r1
  3086e0:	21 18       	tst	r1,r1
  3086e2:	8b eb       	bf	3086bc <intc_priority+0x58>

	uint16_t volatile *IPR;
	IPR = isSH3() ? SH7705_INTC.IPR[IPRn] : &SH7305_INTC.IPR[2*IPRn];
  3086e4:	d3 34       	mov.l	3087b8 <intc_priority+0x154>,r3	! a4080000
  3086e6:	61 e3       	mov	r14,r1
  3086e8:	71 e4       	add	#-28,r1
  3086ea:	51 1c       	mov.l	@(48,r1),r1
  3086ec:	62 13       	mov	r1,r2
  3086ee:	42 08       	shll2	r2
  3086f0:	61 e3       	mov	r14,r1
  3086f2:	71 e4       	add	#-28,r1
  3086f4:	32 3c       	add	r3,r2
  3086f6:	11 2b       	mov.l	r2,@(44,r1)

	int oldlevel = (*IPR >> shift) & 0xf;
  3086f8:	61 e3       	mov	r14,r1
  3086fa:	71 e4       	add	#-28,r1
  3086fc:	51 1b       	mov.l	@(44,r1),r1
  3086fe:	61 11       	mov.w	@r1,r1
  308700:	61 1d       	extu.w	r1,r1
  308702:	62 13       	mov	r1,r2
  308704:	61 e3       	mov	r14,r1
  308706:	71 e4       	add	#-28,r1
  308708:	51 1e       	mov.l	@(56,r1),r1
  30870a:	61 1b       	neg	r1,r1
  30870c:	42 1c       	shad	r1,r2
  30870e:	61 e3       	mov	r14,r1
  308710:	71 e4       	add	#-28,r1
  308712:	e3 0f       	mov	#15,r3
  308714:	22 39       	and	r3,r2
  308716:	11 2a       	mov.l	r2,@(40,r1)
	*IPR = (*IPR & ~(0xf << shift)) | (level << shift);
  308718:	61 e3       	mov	r14,r1
  30871a:	71 e4       	add	#-28,r1
  30871c:	51 1b       	mov.l	@(44,r1),r1
  30871e:	61 11       	mov.w	@r1,r1
  308720:	61 1d       	extu.w	r1,r1
  308722:	62 1f       	exts.w	r1,r2
  308724:	63 e3       	mov	r14,r3
  308726:	73 e4       	add	#-28,r3
  308728:	e1 0f       	mov	#15,r1
  30872a:	53 3e       	mov.l	@(56,r3),r3
  30872c:	41 3d       	shld	r3,r1
  30872e:	61 1f       	exts.w	r1,r1
  308730:	61 17       	not	r1,r1
  308732:	61 1f       	exts.w	r1,r1
  308734:	21 29       	and	r2,r1
  308736:	62 1f       	exts.w	r1,r2
  308738:	61 e3       	mov	r14,r1
  30873a:	71 e4       	add	#-28,r1
  30873c:	63 e3       	mov	r14,r3
  30873e:	73 e4       	add	#-28,r3
  308740:	51 17       	mov.l	@(28,r1),r1
  308742:	53 3e       	mov.l	@(56,r3),r3
  308744:	41 3d       	shld	r3,r1
  308746:	61 1f       	exts.w	r1,r1
  308748:	21 2b       	or	r2,r1
  30874a:	61 1f       	exts.w	r1,r1
  30874c:	62 1d       	extu.w	r1,r2
  30874e:	61 e3       	mov	r14,r1
  308750:	71 e4       	add	#-28,r1
  308752:	51 1b       	mov.l	@(44,r1),r1
  308754:	21 21       	mov.w	r2,@r1

	if(isSH4() && level > 0 && i->IMRbits)
  308756:	61 e3       	mov	r14,r1
  308758:	71 e4       	add	#-28,r1
  30875a:	51 17       	mov.l	@(28,r1),r1
  30875c:	41 15       	cmp/pl	r1
  30875e:	8b 1f       	bf	3087a0 <intc_priority+0x13c>
  308760:	61 e3       	mov	r14,r1
  308762:	71 e4       	add	#-28,r1
  308764:	51 1d       	mov.l	@(52,r1),r1
  308766:	85 13       	mov.w	@(6,r1),r0
  308768:	61 03       	mov	r0,r1
  30876a:	61 1d       	extu.w	r1,r1
  30876c:	21 18       	tst	r1,r1
  30876e:	89 17       	bt	3087a0 <intc_priority+0x13c>
	{
		uint8_t volatile *MSKCLR = &SH7305_INTC.MSKCLR->IMR0;
  308770:	d2 12       	mov.l	3087bc <intc_priority+0x158>,r2	! a40800c0
  308772:	61 e3       	mov	r14,r1
  308774:	71 e4       	add	#-28,r1
  308776:	11 29       	mov.l	r2,@(36,r1)
		MSKCLR[
			4*i->IMR
		]
		=
		i->IMRbits;
  308778:	61 e3       	mov	r14,r1
  30877a:	71 e4       	add	#-28,r1
  30877c:	51 1d       	mov.l	@(52,r1),r1
  30877e:	85 13       	mov.w	@(6,r1),r0
  308780:	61 03       	mov	r0,r1
  308782:	62 1d       	extu.w	r1,r2
			4*i->IMR
  308784:	61 e3       	mov	r14,r1
  308786:	71 e4       	add	#-28,r1
  308788:	51 1d       	mov.l	@(52,r1),r1
  30878a:	85 12       	mov.w	@(4,r1),r0
  30878c:	61 03       	mov	r0,r1
  30878e:	61 1d       	extu.w	r1,r1
  308790:	41 08       	shll2	r1
  308792:	63 13       	mov	r1,r3
		MSKCLR[
  308794:	61 e3       	mov	r14,r1
  308796:	71 e4       	add	#-28,r1
  308798:	51 19       	mov.l	@(36,r1),r1
  30879a:	31 3c       	add	r3,r1
		=
  30879c:	62 2c       	extu.b	r2,r2
  30879e:	21 20       	mov.b	r2,@r1
	}

	return oldlevel;
  3087a0:	61 e3       	mov	r14,r1
  3087a2:	71 e4       	add	#-28,r1
  3087a4:	51 1a       	mov.l	@(40,r1),r1
}
  3087a6:	60 13       	mov	r1,r0
  3087a8:	7e 24       	add	#36,r14
  3087aa:	6f e3       	mov	r14,r15
  3087ac:	6e f6       	mov.l	@r15+,r14
  3087ae:	00 0b       	rts	
  3087b0:	00 09       	nop	
  3087b2:	00 09       	nop	
  3087b4:	00 30       	.word 0x0030
  3087b6:	ea 24       	mov	#36,r10
  3087b8:	a4 08       	bra	308fcc <gint_default_panic+0x3e0>
  3087ba:	00 00       	.word 0x0000
  3087bc:	a4 08       	bra	308fd0 <gint_default_panic+0x3e4>
  3087be:	00 c0       	.word 0x00c0

003087c0 <intc_handler>:

void *intc_handler(int event_code, const void *handler, size_t size)
{
  3087c0:	2f e6       	mov.l	r14,@-r15
  3087c2:	4f 22       	sts.l	pr,@-r15
  3087c4:	7f f0       	add	#-16,r15
  3087c6:	6e f3       	mov	r15,r14
  3087c8:	61 e3       	mov	r14,r1
  3087ca:	71 d0       	add	#-48,r1
  3087cc:	11 4e       	mov.l	r4,@(56,r1)
  3087ce:	61 e3       	mov	r14,r1
  3087d0:	71 d0       	add	#-48,r1
  3087d2:	11 5d       	mov.l	r5,@(52,r1)
  3087d4:	61 e3       	mov	r14,r1
  3087d6:	71 d0       	add	#-48,r1
  3087d8:	11 6c       	mov.l	r6,@(48,r1)
	void *dest;

	/* Normalize the event code */
	if(event_code < 0x400) return NULL;
  3087da:	61 e3       	mov	r14,r1
  3087dc:	71 d0       	add	#-48,r1
  3087de:	52 1e       	mov.l	@(56,r1),r2
  3087e0:	91 3a       	mov.w	308858 <intc_handler+0x98>,r1	! 3ff
  3087e2:	32 17       	cmp/gt	r1,r2
  3087e4:	89 02       	bt	3087ec <intc_handler+0x2c>
  3087e6:	e1 00       	mov	#0,r1
  3087e8:	a0 2f       	bra	30884a <intc_handler+0x8a>
  3087ea:	00 09       	nop	
	event_code &= ~0x1f;
  3087ec:	61 e3       	mov	r14,r1
  3087ee:	71 d0       	add	#-48,r1
  3087f0:	62 e3       	mov	r14,r2
  3087f2:	72 d0       	add	#-48,r2
  3087f4:	53 2e       	mov.l	@(56,r2),r3
  3087f6:	e2 e0       	mov	#-32,r2
  3087f8:	22 39       	and	r3,r2
  3087fa:	11 2e       	mov.l	r2,@(56,r1)

	/* Prevent writing beyond the end of the VBR space on SH4. Using code
	   0xfc0 into the interrupt handler space (which starts 0x540 bytes
	   into VBR-reserved memory) would reach byte 0x540 + 0xfc0 - 0x400 =
	   0x1100, which is out of gint's reserved VBR area.  */
	if(isSH4() && event_code + size > 0xfc0) return NULL;
  3087fc:	61 e3       	mov	r14,r1
  3087fe:	71 d0       	add	#-48,r1
  308800:	52 1e       	mov.l	@(56,r1),r2
  308802:	61 e3       	mov	r14,r1
  308804:	71 d0       	add	#-48,r1
  308806:	51 1c       	mov.l	@(48,r1),r1
  308808:	32 1c       	add	r1,r2
  30880a:	91 26       	mov.w	30885a <intc_handler+0x9a>,r1	! fc0
  30880c:	32 16       	cmp/hi	r1,r2
  30880e:	8b 02       	bf	308816 <intc_handler+0x56>
  308810:	e1 00       	mov	#0,r1
  308812:	a0 1a       	bra	30884a <intc_handler+0x8a>
  308814:	00 09       	nop	
	}
	/* On SH4, just use the code as offset */
	else
	{
		/* 0x40 is the size of the entry gate */
		dest = (void *)cpu_getVBR() + 0x640 + (event_code - 0x400);
  308816:	d1 12       	mov.l	308860 <intc_handler+0xa0>,r1	! 3076b6 <cpu_getVBR>
  308818:	41 0b       	jsr	@r1
  30881a:	00 09       	nop	
  30881c:	61 03       	mov	r0,r1
  30881e:	62 e3       	mov	r14,r2
  308820:	72 d0       	add	#-48,r2
  308822:	52 2e       	mov.l	@(56,r2),r2
  308824:	31 2c       	add	r2,r1
  308826:	92 19       	mov.w	30885c <intc_handler+0x9c>,r2	! 240
  308828:	32 1c       	add	r1,r2
  30882a:	61 e3       	mov	r14,r1
  30882c:	71 d0       	add	#-48,r1
  30882e:	11 2f       	mov.l	r2,@(60,r1)
	}

	return memcpy(dest, handler, size);
  308830:	63 e3       	mov	r14,r3
  308832:	73 d0       	add	#-48,r3
  308834:	62 e3       	mov	r14,r2
  308836:	72 d0       	add	#-48,r2
  308838:	61 e3       	mov	r14,r1
  30883a:	71 d0       	add	#-48,r1
  30883c:	56 3c       	mov.l	@(48,r3),r6
  30883e:	55 2d       	mov.l	@(52,r2),r5
  308840:	54 1f       	mov.l	@(60,r1),r4
  308842:	d1 08       	mov.l	308864 <intc_handler+0xa4>,r1	! 30ae40 <memcpy>
  308844:	41 0b       	jsr	@r1
  308846:	00 09       	nop	
  308848:	61 03       	mov	r0,r1
}
  30884a:	60 13       	mov	r1,r0
  30884c:	7e 10       	add	#16,r14
  30884e:	6f e3       	mov	r14,r15
  308850:	4f 26       	lds.l	@r15+,pr
  308852:	6e f6       	mov.l	@r15+,r14
  308854:	00 0b       	rts	
  308856:	00 09       	nop	
  308858:	03 ff       	mac.l	@r15+,@r3+
  30885a:	0f c0       	.word 0x0fc0
  30885c:	02 40       	.word 0x0240
  30885e:	00 09       	nop	
  308860:	00 30       	.word 0x0030
  308862:	76 b6       	add	#-74,r6
  308864:	00 30       	.word 0x0030
  308866:	ae 40       	bra	3084ea <hrestore+0x22>

00308868 <intc_handler_function>:

bool intc_handler_function(int event_code, gint_call_t function)
{
  308868:	7f f4       	add	#-12,r15
  30886a:	2f 86       	mov.l	r8,@-r15
  30886c:	2f e6       	mov.l	r14,@-r15
  30886e:	4f 22       	sts.l	pr,@-r15
  308870:	7f f8       	add	#-8,r15
  308872:	6e f3       	mov	r15,r14
  308874:	61 e3       	mov	r14,r1
  308876:	71 c8       	add	#-56,r1
  308878:	11 4e       	mov.l	r4,@(56,r1)
  30887a:	1e 55       	mov.l	r5,@(20,r14)
  30887c:	1e 66       	mov.l	r6,@(24,r14)
  30887e:	1e 77       	mov.l	r7,@(28,r14)
	/* Install the generic handler */
	extern void intc_generic_handler(void);
	void *h = intc_handler(event_code, intc_generic_handler, 32);
  308880:	68 e3       	mov	r14,r8
  308882:	78 c8       	add	#-56,r8
  308884:	d2 17       	mov.l	3088e4 <intc_handler_function+0x7c>,r2	! 30cfa0 <intc_generic_handler>
  308886:	61 e3       	mov	r14,r1
  308888:	71 c8       	add	#-56,r1
  30888a:	e6 20       	mov	#32,r6
  30888c:	65 23       	mov	r2,r5
  30888e:	54 1e       	mov.l	@(56,r1),r4
  308890:	d1 15       	mov.l	3088e8 <intc_handler_function+0x80>,r1	! 3087c0 <intc_handler>
  308892:	41 0b       	jsr	@r1
  308894:	00 09       	nop	
  308896:	61 03       	mov	r0,r1
  308898:	18 1f       	mov.l	r1,@(60,r8)
	if(!h) return false;
  30889a:	61 e3       	mov	r14,r1
  30889c:	71 c8       	add	#-56,r1
  30889e:	51 1f       	mov.l	@(60,r1),r1
  3088a0:	21 18       	tst	r1,r1
  3088a2:	8b 02       	bf	3088aa <intc_handler_function+0x42>
  3088a4:	e1 00       	mov	#0,r1
  3088a6:	a0 13       	bra	3088d0 <intc_handler_function+0x68>
  3088a8:	00 09       	nop	

	/* Copy the call */
	memcpy(h + 8, &function, 20);
  3088aa:	61 e3       	mov	r14,r1
  3088ac:	71 c8       	add	#-56,r1
  3088ae:	51 1f       	mov.l	@(60,r1),r1
  3088b0:	71 08       	add	#8,r1
  3088b2:	e6 14       	mov	#20,r6
  3088b4:	65 e3       	mov	r14,r5
  3088b6:	75 14       	add	#20,r5
  3088b8:	64 13       	mov	r1,r4
  3088ba:	d1 0c       	mov.l	3088ec <intc_handler_function+0x84>,r1	! 30ae40 <memcpy>
  3088bc:	41 0b       	jsr	@r1
  3088be:	00 09       	nop	
	/* Copy the runtime address of gint_inth_callback() */
	*(void **)(h + 28) = gint_inth_callback;
  3088c0:	61 e3       	mov	r14,r1
  3088c2:	71 c8       	add	#-56,r1
  3088c4:	51 1f       	mov.l	@(60,r1),r1
  3088c6:	71 1c       	add	#28,r1
  3088c8:	d2 09       	mov.l	3088f0 <intc_handler_function+0x88>,r2	! 81017c4 <gint_inth_callback>
  3088ca:	62 22       	mov.l	@r2,r2
  3088cc:	21 22       	mov.l	r2,@r1

	return true;
  3088ce:	e1 01       	mov	#1,r1
}
  3088d0:	60 13       	mov	r1,r0
  3088d2:	7e 08       	add	#8,r14
  3088d4:	6f e3       	mov	r14,r15
  3088d6:	4f 26       	lds.l	@r15+,pr
  3088d8:	6e f6       	mov.l	@r15+,r14
  3088da:	68 f6       	mov.l	@r15+,r8
  3088dc:	7f 0c       	add	#12,r15
  3088de:	00 0b       	rts	
  3088e0:	00 09       	nop	
  3088e2:	00 09       	nop	
  3088e4:	00 30       	.word 0x0030
  3088e6:	cf a0       	or.b	#160,@(r0,gbr)
  3088e8:	00 30       	.word 0x0030
  3088ea:	87 c0       	.word 0x87c0
  3088ec:	00 30       	.word 0x0030
  3088ee:	ae 40       	bra	308572 <hrestore+0xaa>
  3088f0:	08 10       	.word 0x0810
  3088f2:	17 c4       	mov.l	r12,@(16,r7)

003088f4 <configure>:
//---
// State and driver metadata
//---

static void configure(void)
{
  3088f4:	2f e6       	mov.l	r14,@-r15
  3088f6:	7f fc       	add	#-4,r15
  3088f8:	6e f3       	mov	r15,r14
	/* Just disable everything, drivers will enable what they support */
	if(isSH3()) for(int i = 0; i < 8; i++)
		*(SH7705_INTC.IPR[i]) = 0x0000;
	else for(int i = 0; i < 12; i++)
  3088fa:	61 e3       	mov	r14,r1
  3088fc:	71 c4       	add	#-60,r1
  3088fe:	e2 00       	mov	#0,r2
  308900:	11 2f       	mov.l	r2,@(60,r1)
  308902:	a0 0f       	bra	308924 <configure+0x30>
  308904:	00 09       	nop	
		SH7305_INTC.IPR[2 * i] = 0x0000;
  308906:	d2 0e       	mov.l	308940 <configure+0x4c>,r2	! a4080000
  308908:	61 e3       	mov	r14,r1
  30890a:	71 c4       	add	#-60,r1
  30890c:	51 1f       	mov.l	@(60,r1),r1
  30890e:	41 08       	shll2	r1
  308910:	31 2c       	add	r2,r1
  308912:	e2 00       	mov	#0,r2
  308914:	21 21       	mov.w	r2,@r1
	else for(int i = 0; i < 12; i++)
  308916:	61 e3       	mov	r14,r1
  308918:	71 c4       	add	#-60,r1
  30891a:	62 e3       	mov	r14,r2
  30891c:	72 c4       	add	#-60,r2
  30891e:	52 2f       	mov.l	@(60,r2),r2
  308920:	72 01       	add	#1,r2
  308922:	11 2f       	mov.l	r2,@(60,r1)
  308924:	61 e3       	mov	r14,r1
  308926:	71 c4       	add	#-60,r1
  308928:	52 1f       	mov.l	@(60,r1),r2
  30892a:	e1 0b       	mov	#11,r1
  30892c:	32 17       	cmp/gt	r1,r2
  30892e:	8b ea       	bf	308906 <configure+0x12>
}
  308930:	00 09       	nop	
  308932:	00 09       	nop	
  308934:	7e 04       	add	#4,r14
  308936:	6f e3       	mov	r14,r15
  308938:	6e f6       	mov.l	@r15+,r14
  30893a:	00 0b       	rts	
  30893c:	00 09       	nop	
  30893e:	00 09       	nop	
  308940:	a4 08       	bra	309154 <gint_default_panic+0x568>
	...

00308944 <hsave>:

static void hsave(intc_state_t *s)
{
  308944:	2f e6       	mov.l	r14,@-r15
  308946:	7f f0       	add	#-16,r15
  308948:	6e f3       	mov	r15,r14
  30894a:	61 e3       	mov	r14,r1
  30894c:	71 d0       	add	#-48,r1
  30894e:	11 4c       	mov.l	r4,@(48,r1)
		for(int i = 0; i < 8; i++)
			s->IPR[i] = *(SH7705_INTC.IPR[i]);
	}
	else
	{
		for(int i = 0; i < 12; i++)
  308950:	61 e3       	mov	r14,r1
  308952:	71 d0       	add	#-48,r1
  308954:	e2 00       	mov	#0,r2
  308956:	11 2f       	mov.l	r2,@(60,r1)
  308958:	a0 18       	bra	30898c <hsave+0x48>
  30895a:	00 09       	nop	
			s->IPR[i] = SH7305_INTC.IPR[2 * i];
  30895c:	d2 28       	mov.l	308a00 <hsave+0xbc>,r2	! a4080000
  30895e:	61 e3       	mov	r14,r1
  308960:	71 d0       	add	#-48,r1
  308962:	51 1f       	mov.l	@(60,r1),r1
  308964:	41 08       	shll2	r1
  308966:	31 2c       	add	r2,r1
  308968:	61 11       	mov.w	@r1,r1
  30896a:	62 1d       	extu.w	r1,r2
  30896c:	61 e3       	mov	r14,r1
  30896e:	71 d0       	add	#-48,r1
  308970:	53 1c       	mov.l	@(48,r1),r3
  308972:	61 e3       	mov	r14,r1
  308974:	71 d0       	add	#-48,r1
  308976:	51 1f       	mov.l	@(60,r1),r1
  308978:	31 1c       	add	r1,r1
  30897a:	31 3c       	add	r3,r1
  30897c:	21 21       	mov.w	r2,@r1
		for(int i = 0; i < 12; i++)
  30897e:	61 e3       	mov	r14,r1
  308980:	71 d0       	add	#-48,r1
  308982:	62 e3       	mov	r14,r2
  308984:	72 d0       	add	#-48,r2
  308986:	52 2f       	mov.l	@(60,r2),r2
  308988:	72 01       	add	#1,r2
  30898a:	11 2f       	mov.l	r2,@(60,r1)
  30898c:	61 e3       	mov	r14,r1
  30898e:	71 d0       	add	#-48,r1
  308990:	52 1f       	mov.l	@(60,r1),r2
  308992:	e1 0b       	mov	#11,r1
  308994:	32 17       	cmp/gt	r1,r2
  308996:	8b e1       	bf	30895c <hsave+0x18>

		uint8_t *IMR = (void *)SH7305_INTC.MSK;
  308998:	61 e3       	mov	r14,r1
  30899a:	71 d0       	add	#-48,r1
  30899c:	d2 19       	mov.l	308a04 <hsave+0xc0>,r2	! a4080080
  30899e:	11 2e       	mov.l	r2,@(56,r1)
		for(int i = 0; i < 13; i++, IMR += 4)
  3089a0:	61 e3       	mov	r14,r1
  3089a2:	71 d0       	add	#-48,r1
  3089a4:	e2 00       	mov	#0,r2
  3089a6:	11 2d       	mov.l	r2,@(52,r1)
  3089a8:	a0 1c       	bra	3089e4 <hsave+0xa0>
  3089aa:	00 09       	nop	
			s->MSK[i] = *IMR;
  3089ac:	61 e3       	mov	r14,r1
  3089ae:	71 d0       	add	#-48,r1
  3089b0:	51 1e       	mov.l	@(56,r1),r1
  3089b2:	61 10       	mov.b	@r1,r1
  3089b4:	62 1c       	extu.b	r1,r2
  3089b6:	61 e3       	mov	r14,r1
  3089b8:	71 d0       	add	#-48,r1
  3089ba:	53 1c       	mov.l	@(48,r1),r3
  3089bc:	61 e3       	mov	r14,r1
  3089be:	71 d0       	add	#-48,r1
  3089c0:	51 1d       	mov.l	@(52,r1),r1
  3089c2:	31 3c       	add	r3,r1
  3089c4:	71 18       	add	#24,r1
  3089c6:	21 20       	mov.b	r2,@r1
		for(int i = 0; i < 13; i++, IMR += 4)
  3089c8:	61 e3       	mov	r14,r1
  3089ca:	71 d0       	add	#-48,r1
  3089cc:	62 e3       	mov	r14,r2
  3089ce:	72 d0       	add	#-48,r2
  3089d0:	52 2d       	mov.l	@(52,r2),r2
  3089d2:	72 01       	add	#1,r2
  3089d4:	11 2d       	mov.l	r2,@(52,r1)
  3089d6:	61 e3       	mov	r14,r1
  3089d8:	71 d0       	add	#-48,r1
  3089da:	62 e3       	mov	r14,r2
  3089dc:	72 d0       	add	#-48,r2
  3089de:	52 2e       	mov.l	@(56,r2),r2
  3089e0:	72 04       	add	#4,r2
  3089e2:	11 2e       	mov.l	r2,@(56,r1)
  3089e4:	61 e3       	mov	r14,r1
  3089e6:	71 d0       	add	#-48,r1
  3089e8:	52 1d       	mov.l	@(52,r1),r2
  3089ea:	e1 0c       	mov	#12,r1
  3089ec:	32 17       	cmp/gt	r1,r2
  3089ee:	8b dd       	bf	3089ac <hsave+0x68>
	}
}
  3089f0:	00 09       	nop	
  3089f2:	00 09       	nop	
  3089f4:	7e 10       	add	#16,r14
  3089f6:	6f e3       	mov	r14,r15
  3089f8:	6e f6       	mov.l	@r15+,r14
  3089fa:	00 0b       	rts	
  3089fc:	00 09       	nop	
  3089fe:	00 09       	nop	
  308a00:	a4 08       	bra	309214 <gint_panic_set+0x20>
  308a02:	00 00       	.word 0x0000
  308a04:	a4 08       	bra	309218 <gint_panic_set+0x24>
  308a06:	00 80       	.word 0x0080

00308a08 <hrestore>:

static void hrestore(intc_state_t const *s)
{
  308a08:	2f e6       	mov.l	r14,@-r15
  308a0a:	7f ec       	add	#-20,r15
  308a0c:	6e f3       	mov	r15,r14
  308a0e:	61 e3       	mov	r14,r1
  308a10:	71 d4       	add	#-44,r1
  308a12:	11 4b       	mov.l	r4,@(44,r1)
		for(int i = 0; i < 8; i++)
			*(SH7705_INTC.IPR[i]) = s->IPR[i];
	}
	else
	{
		for(int i = 0; i < 12; i++)
  308a14:	61 e3       	mov	r14,r1
  308a16:	71 d4       	add	#-44,r1
  308a18:	e2 00       	mov	#0,r2
  308a1a:	11 2f       	mov.l	r2,@(60,r1)
  308a1c:	a0 18       	bra	308a50 <hrestore+0x48>
  308a1e:	00 09       	nop	
			SH7305_INTC.IPR[2 * i] = s->IPR[i];
  308a20:	d2 30       	mov.l	308ae4 <hrestore+0xdc>,r2	! a4080000
  308a22:	61 e3       	mov	r14,r1
  308a24:	71 d4       	add	#-44,r1
  308a26:	51 1f       	mov.l	@(60,r1),r1
  308a28:	41 08       	shll2	r1
  308a2a:	31 2c       	add	r2,r1
  308a2c:	62 e3       	mov	r14,r2
  308a2e:	72 d4       	add	#-44,r2
  308a30:	53 2b       	mov.l	@(44,r2),r3
  308a32:	62 e3       	mov	r14,r2
  308a34:	72 d4       	add	#-44,r2
  308a36:	52 2f       	mov.l	@(60,r2),r2
  308a38:	32 2c       	add	r2,r2
  308a3a:	32 3c       	add	r3,r2
  308a3c:	62 21       	mov.w	@r2,r2
  308a3e:	62 2d       	extu.w	r2,r2
  308a40:	21 21       	mov.w	r2,@r1
		for(int i = 0; i < 12; i++)
  308a42:	61 e3       	mov	r14,r1
  308a44:	71 d4       	add	#-44,r1
  308a46:	62 e3       	mov	r14,r2
  308a48:	72 d4       	add	#-44,r2
  308a4a:	52 2f       	mov.l	@(60,r2),r2
  308a4c:	72 01       	add	#1,r2
  308a4e:	11 2f       	mov.l	r2,@(60,r1)
  308a50:	61 e3       	mov	r14,r1
  308a52:	71 d4       	add	#-44,r1
  308a54:	52 1f       	mov.l	@(60,r1),r2
  308a56:	e1 0b       	mov	#11,r1
  308a58:	32 17       	cmp/gt	r1,r2
  308a5a:	8b e1       	bf	308a20 <hrestore+0x18>

		/* Setting masks it a bit more involved than reading them */
		uint8_t *IMCR = (void *)SH7305_INTC.MSKCLR;
  308a5c:	61 e3       	mov	r14,r1
  308a5e:	71 d4       	add	#-44,r1
  308a60:	d2 21       	mov.l	308ae8 <hrestore+0xe0>,r2	! a40800c0
  308a62:	11 2e       	mov.l	r2,@(56,r1)
		uint8_t *IMR  = (void *)SH7305_INTC.MSK;
  308a64:	61 e3       	mov	r14,r1
  308a66:	71 d4       	add	#-44,r1
  308a68:	d2 20       	mov.l	308aec <hrestore+0xe4>,r2	! a4080080
  308a6a:	11 2d       	mov.l	r2,@(52,r1)
		for(int i = 0; i < 13; i++, IMR += 4, IMCR += 4)
  308a6c:	61 e3       	mov	r14,r1
  308a6e:	71 d4       	add	#-44,r1
  308a70:	e2 00       	mov	#0,r2
  308a72:	11 2c       	mov.l	r2,@(48,r1)
  308a74:	a0 28       	bra	308ac8 <hrestore+0xc0>
  308a76:	00 09       	nop	
		{
			*IMCR = 0xff;
  308a78:	61 e3       	mov	r14,r1
  308a7a:	71 d4       	add	#-44,r1
  308a7c:	51 1e       	mov.l	@(56,r1),r1
  308a7e:	e2 ff       	mov	#-1,r2
  308a80:	21 20       	mov.b	r2,@r1
			*IMR = s->MSK[i];
  308a82:	61 e3       	mov	r14,r1
  308a84:	71 d4       	add	#-44,r1
  308a86:	52 1b       	mov.l	@(44,r1),r2
  308a88:	61 e3       	mov	r14,r1
  308a8a:	71 d4       	add	#-44,r1
  308a8c:	51 1c       	mov.l	@(48,r1),r1
  308a8e:	31 2c       	add	r2,r1
  308a90:	71 18       	add	#24,r1
  308a92:	61 10       	mov.b	@r1,r1
  308a94:	62 1c       	extu.b	r1,r2
  308a96:	61 e3       	mov	r14,r1
  308a98:	71 d4       	add	#-44,r1
  308a9a:	51 1d       	mov.l	@(52,r1),r1
  308a9c:	21 20       	mov.b	r2,@r1
		for(int i = 0; i < 13; i++, IMR += 4, IMCR += 4)
  308a9e:	61 e3       	mov	r14,r1
  308aa0:	71 d4       	add	#-44,r1
  308aa2:	62 e3       	mov	r14,r2
  308aa4:	72 d4       	add	#-44,r2
  308aa6:	52 2c       	mov.l	@(48,r2),r2
  308aa8:	72 01       	add	#1,r2
  308aaa:	11 2c       	mov.l	r2,@(48,r1)
  308aac:	61 e3       	mov	r14,r1
  308aae:	71 d4       	add	#-44,r1
  308ab0:	62 e3       	mov	r14,r2
  308ab2:	72 d4       	add	#-44,r2
  308ab4:	52 2d       	mov.l	@(52,r2),r2
  308ab6:	72 04       	add	#4,r2
  308ab8:	11 2d       	mov.l	r2,@(52,r1)
  308aba:	61 e3       	mov	r14,r1
  308abc:	71 d4       	add	#-44,r1
  308abe:	62 e3       	mov	r14,r2
  308ac0:	72 d4       	add	#-44,r2
  308ac2:	52 2e       	mov.l	@(56,r2),r2
  308ac4:	72 04       	add	#4,r2
  308ac6:	11 2e       	mov.l	r2,@(56,r1)
  308ac8:	61 e3       	mov	r14,r1
  308aca:	71 d4       	add	#-44,r1
  308acc:	52 1c       	mov.l	@(48,r1),r2
  308ace:	e1 0c       	mov	#12,r1
  308ad0:	32 17       	cmp/gt	r1,r2
  308ad2:	8b d1       	bf	308a78 <hrestore+0x70>
		}
	}
}
  308ad4:	00 09       	nop	
  308ad6:	00 09       	nop	
  308ad8:	7e 14       	add	#20,r14
  308ada:	6f e3       	mov	r14,r15
  308adc:	6e f6       	mov.l	@r15+,r14
  308ade:	00 0b       	rts	
  308ae0:	00 09       	nop	
  308ae2:	00 09       	nop	
  308ae4:	a4 08       	bra	3092f8 <osheap_realloc+0x2c>
  308ae6:	00 00       	.word 0x0000
  308ae8:	a4 08       	bra	3092fc <osheap_realloc+0x30>
  308aea:	00 c0       	.word 0x00c0
  308aec:	a4 08       	bra	309300 <osheap_realloc+0x34>
  308aee:	00 80       	.word 0x0080

00308af0 <GINT_CALL_SET_function>:
{
  308af0:	2f e6       	mov.l	r14,@-r15
  308af2:	7f fc       	add	#-4,r15
  308af4:	6e f3       	mov	r15,r14
  308af6:	61 e3       	mov	r14,r1
  308af8:	71 c4       	add	#-60,r1
  308afa:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  308afc:	61 e3       	mov	r14,r1
  308afe:	71 c4       	add	#-60,r1
  308b00:	51 1f       	mov.l	@(60,r1),r1
  308b02:	e2 01       	mov	#1,r2
  308b04:	21 22       	mov.l	r2,@r1
	return 0;
  308b06:	e1 00       	mov	#0,r1
}
  308b08:	60 13       	mov	r1,r0
  308b0a:	7e 04       	add	#4,r14
  308b0c:	6f e3       	mov	r14,r15
  308b0e:	6e f6       	mov.l	@r15+,r14
  308b10:	00 0b       	rts	
  308b12:	00 09       	nop	

00308b14 <GINT_CALL_INC_function>:
{
  308b14:	2f e6       	mov.l	r14,@-r15
  308b16:	7f fc       	add	#-4,r15
  308b18:	6e f3       	mov	r15,r14
  308b1a:	61 e3       	mov	r14,r1
  308b1c:	71 c4       	add	#-60,r1
  308b1e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  308b20:	61 e3       	mov	r14,r1
  308b22:	71 c4       	add	#-60,r1
  308b24:	51 1f       	mov.l	@(60,r1),r1
  308b26:	61 12       	mov.l	@r1,r1
  308b28:	62 13       	mov	r1,r2
  308b2a:	72 01       	add	#1,r2
  308b2c:	61 e3       	mov	r14,r1
  308b2e:	71 c4       	add	#-60,r1
  308b30:	51 1f       	mov.l	@(60,r1),r1
  308b32:	21 22       	mov.l	r2,@r1
	return 0;
  308b34:	e1 00       	mov	#0,r1
}
  308b36:	60 13       	mov	r1,r0
  308b38:	7e 04       	add	#4,r14
  308b3a:	6f e3       	mov	r14,r15
  308b3c:	6e f6       	mov.l	@r15+,r14
  308b3e:	00 0b       	rts	
  308b40:	00 09       	nop	

00308b42 <GINT_CALL_SET_STOP_function>:
{
  308b42:	2f e6       	mov.l	r14,@-r15
  308b44:	7f fc       	add	#-4,r15
  308b46:	6e f3       	mov	r15,r14
  308b48:	61 e3       	mov	r14,r1
  308b4a:	71 c4       	add	#-60,r1
  308b4c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  308b4e:	61 e3       	mov	r14,r1
  308b50:	71 c4       	add	#-60,r1
  308b52:	51 1f       	mov.l	@(60,r1),r1
  308b54:	e2 01       	mov	#1,r2
  308b56:	21 22       	mov.l	r2,@r1
	return 1;
  308b58:	e1 01       	mov	#1,r1
}
  308b5a:	60 13       	mov	r1,r0
  308b5c:	7e 04       	add	#4,r14
  308b5e:	6f e3       	mov	r14,r15
  308b60:	6e f6       	mov.l	@r15+,r14
  308b62:	00 0b       	rts	
  308b64:	00 09       	nop	

00308b66 <GINT_CALL_INC_STOP_function>:
{
  308b66:	2f e6       	mov.l	r14,@-r15
  308b68:	7f fc       	add	#-4,r15
  308b6a:	6e f3       	mov	r15,r14
  308b6c:	61 e3       	mov	r14,r1
  308b6e:	71 c4       	add	#-60,r1
  308b70:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  308b72:	61 e3       	mov	r14,r1
  308b74:	71 c4       	add	#-60,r1
  308b76:	51 1f       	mov.l	@(60,r1),r1
  308b78:	61 12       	mov.l	@r1,r1
  308b7a:	62 13       	mov	r1,r2
  308b7c:	72 01       	add	#1,r2
  308b7e:	61 e3       	mov	r14,r1
  308b80:	71 c4       	add	#-60,r1
  308b82:	51 1f       	mov.l	@(60,r1),r1
  308b84:	21 22       	mov.l	r2,@r1
	return 1;
  308b86:	e1 01       	mov	#1,r1
}
  308b88:	60 13       	mov	r1,r0
  308b8a:	7e 04       	add	#4,r14
  308b8c:	6f e3       	mov	r14,r15
  308b8e:	6e f6       	mov.l	@r15+,r14
  308b90:	00 0b       	rts	
  308b92:	00 09       	nop	

/* Weak implementation of driver functions, which are used if the keyboard and
   display drivers are not linked in. This allows add-ins to not link in these
   drivers (which is useful for low-level debugging). */
GWEAK void _WEAK_dupdate(void)
{
  308b94:	2f e6       	mov.l	r14,@-r15
  308b96:	6e f3       	mov	r15,r14
	return;
  308b98:	00 09       	nop	
}
  308b9a:	6f e3       	mov	r14,r15
  308b9c:	6e f6       	mov.l	@r15+,r14
  308b9e:	00 0b       	rts	
  308ba0:	00 09       	nop	

00308ba2 <_WEAK_keydev_std>:
GWEAK keydev_t *_WEAK_keydev_std(void)
{
  308ba2:	2f e6       	mov.l	r14,@-r15
  308ba4:	6e f3       	mov	r15,r14
	return NULL;
  308ba6:	e1 00       	mov	#0,r1
}
  308ba8:	60 13       	mov	r1,r0
  308baa:	6f e3       	mov	r14,r15
  308bac:	6e f6       	mov.l	@r15+,r14
  308bae:	00 0b       	rts	
  308bb0:	00 09       	nop	

00308bb2 <_WEAK_keydev_keydown>:
GWEAK bool _WEAK_keydev_keydown(GUNUSED keydev_t *d, GUNUSED int key)
{
  308bb2:	2f e6       	mov.l	r14,@-r15
  308bb4:	7f f8       	add	#-8,r15
  308bb6:	6e f3       	mov	r15,r14
  308bb8:	61 e3       	mov	r14,r1
  308bba:	71 c8       	add	#-56,r1
  308bbc:	11 4f       	mov.l	r4,@(60,r1)
  308bbe:	61 e3       	mov	r14,r1
  308bc0:	71 c8       	add	#-56,r1
  308bc2:	11 5e       	mov.l	r5,@(56,r1)
	return false;
  308bc4:	e1 00       	mov	#0,r1
}
  308bc6:	60 13       	mov	r1,r0
  308bc8:	7e 08       	add	#8,r14
  308bca:	6f e3       	mov	r14,r15
  308bcc:	6e f6       	mov.l	@r15+,r14
  308bce:	00 0b       	rts	
  308bd0:	00 09       	nop	

00308bd2 <_WEAK_keydev_unqueue_event>:
GWEAK key_event_t _WEAK_keydev_unqueue_event(GUNUSED keydev_t *d)
{
  308bd2:	2f e6       	mov.l	r14,@-r15
  308bd4:	7f fc       	add	#-4,r15
  308bd6:	6e f3       	mov	r15,r14
  308bd8:	61 e3       	mov	r14,r1
  308bda:	71 c4       	add	#-60,r1
  308bdc:	11 4f       	mov.l	r4,@(60,r1)
	return (key_event_t){ .type = KEYEV_NONE };
  308bde:	e1 00       	mov	#0,r1
}
  308be0:	60 13       	mov	r1,r0
  308be2:	7e 04       	add	#4,r14
  308be4:	6f e3       	mov	r14,r15
  308be6:	6e f6       	mov.l	@r15+,r14
  308be8:	00 0b       	rts	
  308bea:	00 09       	nop	

00308bec <gint_default_panic>:

/* gint_panic_default(): Default panic handler */
GNORETURN static void gint_default_panic(GUNUSED uint32_t code)
{
  308bec:	2f 86       	mov.l	r8,@-r15
  308bee:	2f e6       	mov.l	r14,@-r15
  308bf0:	4f 22       	sts.l	pr,@-r15
  308bf2:	7f c0       	add	#-64,r15
  308bf4:	6e f3       	mov	r15,r14
  308bf6:	61 e3       	mov	r14,r1
  308bf8:	11 44       	mov.l	r4,@(16,r1)
	uint32_t TEA, TRA;
	keydev_t *kd = _WEAK_keydev_std();
  308bfa:	68 e3       	mov	r14,r8
  308bfc:	d1 1b       	mov.l	308c6c <gint_default_panic+0x80>,r1	! 308ba2 <_WEAK_keydev_std>
  308bfe:	41 0b       	jsr	@r1
  308c00:	00 09       	nop	
  308c02:	61 03       	mov	r0,r1
  308c04:	18 1c       	mov.l	r1,@(48,r8)
		TEA = *(volatile uint32_t *)0xfffffffc;
		TRA = *(volatile uint32_t *)0xffffffd0 >> 2;
	}
	else
	{
		TEA = *(volatile uint32_t *)0xff00000c;
  308c06:	d2 1a       	mov.l	308c70 <gint_default_panic+0x84>,r2	! ff00000c
  308c08:	61 e3       	mov	r14,r1
  308c0a:	62 22       	mov.l	@r2,r2
  308c0c:	11 2b       	mov.l	r2,@(44,r1)
		TRA = *(volatile uint32_t *)0xff000020 >> 2;
  308c0e:	d1 19       	mov.l	308c74 <gint_default_panic+0x88>,r1	! ff000020
  308c10:	62 12       	mov.l	@r1,r2
  308c12:	61 e3       	mov	r14,r1
  308c14:	42 09       	shlr2	r2
  308c16:	11 2a       	mov.l	r2,@(40,r1)
	}

	uint32_t PC;
	__asm__("stc spc, %0" : "=r"(PC));
  308c18:	02 42       	stc	spc,r2
  308c1a:	61 e3       	mov	r14,r1
  308c1c:	11 29       	mov.l	r2,@(36,r1)

	uint32_t SGR = 0xffffffff;
  308c1e:	61 e3       	mov	r14,r1
  308c20:	e2 ff       	mov	#-1,r2
  308c22:	11 28       	mov.l	r2,@(32,r1)
	if(isSH4()) __asm__("stc sgr, %0" : "=r"(SGR));
  308c24:	02 3a       	stc	sgr,r2
  308c26:	61 e3       	mov	r14,r1
  308c28:	11 28       	mov.l	r2,@(32,r1)

	dfont(NULL);
  308c2a:	e4 00       	mov	#0,r4
  308c2c:	d1 12       	mov.l	308c78 <gint_default_panic+0x8c>,r1	! 3096b0 <dfont>
  308c2e:	41 0b       	jsr	@r1
  308c30:	00 09       	nop	
	}
	#endif

	#ifdef FXCG50
	/* Don't require the DMA driver just for a clear */
	memset(gint_vram, 0xff, DWIDTH*DHEIGHT*2);
  308c32:	d1 12       	mov.l	308c7c <gint_default_panic+0x90>,r1	! 810143c <gint_vram>
  308c34:	61 12       	mov.l	@r1,r1
  308c36:	d3 12       	mov.l	308c80 <gint_default_panic+0x94>,r3	! 2b500
  308c38:	92 16       	mov.w	308c68 <gint_default_panic+0x7c>,r2	! ff
  308c3a:	66 33       	mov	r3,r6
  308c3c:	65 23       	mov	r2,r5
  308c3e:	64 13       	mov	r1,r4
  308c40:	d1 10       	mov.l	308c84 <gint_default_panic+0x98>,r1	! 30af00 <memset>
  308c42:	41 0b       	jsr	@r1
  308c44:	00 09       	nop	
	dtext(6, 3, "An exception occured! (System ERROR)");
  308c46:	d1 10       	mov.l	308c88 <gint_default_panic+0x9c>,r1	! 30eb48
  308c48:	67 13       	mov	r1,r7
  308c4a:	e6 00       	mov	#0,r6
  308c4c:	e5 03       	mov	#3,r5
  308c4e:	e4 06       	mov	#6,r4
  308c50:	d1 0e       	mov.l	308c8c <gint_default_panic+0xa0>,r1	! 3095ac <dtext>
  308c52:	41 0b       	jsr	@r1
  308c54:	00 09       	nop	

	uint32_t *long_vram = (void *)gint_vram;
  308c56:	61 e3       	mov	r14,r1
  308c58:	d2 08       	mov.l	308c7c <gint_default_panic+0x90>,r2	! 810143c <gint_vram>
  308c5a:	62 22       	mov.l	@r2,r2
  308c5c:	11 27       	mov.l	r2,@(28,r1)
	for(int i = 0; i < 198 * 16; i++) long_vram[i] = ~long_vram[i];
  308c5e:	61 e3       	mov	r14,r1
  308c60:	e2 00       	mov	#0,r2
  308c62:	11 2f       	mov.l	r2,@(60,r1)
  308c64:	a0 28       	bra	308cb8 <gint_default_panic+0xcc>
  308c66:	00 09       	nop	
  308c68:	00 ff       	mac.l	@r15+,@r0+
  308c6a:	00 09       	nop	
  308c6c:	00 30       	.word 0x0030
  308c6e:	8b a2       	bf	308bb6 <_WEAK_keydev_keydown+0x4>
  308c70:	ff 00       	.word 0xff00
  308c72:	00 0c       	mov.b	@(r0,r0),r0
  308c74:	ff 00       	.word 0xff00
  308c76:	00 20       	.word 0x0020
  308c78:	00 30       	.word 0x0030
  308c7a:	96 b0       	mov.w	308dde <gint_default_panic+0x1f2>,r6	! ec98
  308c7c:	08 10       	.word 0x0810
  308c7e:	14 3c       	mov.l	r3,@(48,r4)
  308c80:	00 02       	stc	sr,r0
  308c82:	b5 00       	bsr	309686 <GINT_CALL_INC_STOP_function+0x4>
  308c84:	00 30       	.word 0x0030
  308c86:	af 00       	bra	308a8a <hrestore+0x82>
  308c88:	00 30       	.word 0x0030
  308c8a:	eb 48       	mov	#72,r11
  308c8c:	00 30       	.word 0x0030
  308c8e:	95 ac       	mov.w	308dea <gint_default_panic+0x1fe>,r5	! 9484
  308c90:	61 e3       	mov	r14,r1
  308c92:	51 1f       	mov.l	@(60,r1),r1
  308c94:	41 08       	shll2	r1
  308c96:	62 e3       	mov	r14,r2
  308c98:	52 27       	mov.l	@(28,r2),r2
  308c9a:	31 2c       	add	r2,r1
  308c9c:	62 12       	mov.l	@r1,r2
  308c9e:	61 e3       	mov	r14,r1
  308ca0:	51 1f       	mov.l	@(60,r1),r1
  308ca2:	41 08       	shll2	r1
  308ca4:	63 e3       	mov	r14,r3
  308ca6:	53 37       	mov.l	@(28,r3),r3
  308ca8:	31 3c       	add	r3,r1
  308caa:	62 27       	not	r2,r2
  308cac:	21 22       	mov.l	r2,@r1
  308cae:	61 e3       	mov	r14,r1
  308cb0:	62 e3       	mov	r14,r2
  308cb2:	52 2f       	mov.l	@(60,r2),r2
  308cb4:	72 01       	add	#1,r2
  308cb6:	11 2f       	mov.l	r2,@(60,r1)
  308cb8:	61 e3       	mov	r14,r1
  308cba:	52 1f       	mov.l	@(60,r1),r2
  308cbc:	91 6f       	mov.w	308d9e <gint_default_panic+0x1b2>,r1	! c5f
  308cbe:	32 17       	cmp/gt	r1,r2
  308cc0:	8b e6       	bf	308c90 <gint_default_panic+0xa4>

	char const *name = "";
  308cc2:	61 e3       	mov	r14,r1
  308cc4:	d2 3b       	mov.l	308db4 <gint_default_panic+0x1c8>,r2	! 30eb70
  308cc6:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x040) name = "TLB miss (nonexisting address) on read";
  308cc8:	61 e3       	mov	r14,r1
  308cca:	52 14       	mov.l	@(16,r1),r2
  308ccc:	e1 40       	mov	#64,r1
  308cce:	32 10       	cmp/eq	r1,r2
  308cd0:	8b 02       	bf	308cd8 <gint_default_panic+0xec>
  308cd2:	61 e3       	mov	r14,r1
  308cd4:	d2 38       	mov.l	308db8 <gint_default_panic+0x1cc>,r2	! 30eb74
  308cd6:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x060) name = "TLB miss (nonexisting address) on write";
  308cd8:	61 e3       	mov	r14,r1
  308cda:	52 14       	mov.l	@(16,r1),r2
  308cdc:	e1 60       	mov	#96,r1
  308cde:	32 10       	cmp/eq	r1,r2
  308ce0:	8b 02       	bf	308ce8 <gint_default_panic+0xfc>
  308ce2:	61 e3       	mov	r14,r1
  308ce4:	d2 35       	mov.l	308dbc <gint_default_panic+0x1d0>,r2	! 30eb9c
  308ce6:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x0e0) name = "Read address error (probably alignment)";
  308ce8:	61 e3       	mov	r14,r1
  308cea:	52 14       	mov.l	@(16,r1),r2
  308cec:	91 58       	mov.w	308da0 <gint_default_panic+0x1b4>,r1	! e0
  308cee:	32 10       	cmp/eq	r1,r2
  308cf0:	8b 02       	bf	308cf8 <gint_default_panic+0x10c>
  308cf2:	61 e3       	mov	r14,r1
  308cf4:	d2 32       	mov.l	308dc0 <gint_default_panic+0x1d4>,r2	! 30ebc4
  308cf6:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x100) name = "Write address error (probably alignment)";
  308cf8:	61 e3       	mov	r14,r1
  308cfa:	52 14       	mov.l	@(16,r1),r2
  308cfc:	91 51       	mov.w	308da2 <gint_default_panic+0x1b6>,r1	! 100
  308cfe:	32 10       	cmp/eq	r1,r2
  308d00:	8b 02       	bf	308d08 <gint_default_panic+0x11c>
  308d02:	61 e3       	mov	r14,r1
  308d04:	d2 2f       	mov.l	308dc4 <gint_default_panic+0x1d8>,r2	! 30ebec
  308d06:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x160) name = "Unconditional trap";
  308d08:	61 e3       	mov	r14,r1
  308d0a:	52 14       	mov.l	@(16,r1),r2
  308d0c:	91 4a       	mov.w	308da4 <gint_default_panic+0x1b8>,r1	! 160 <sdata>
  308d0e:	32 10       	cmp/eq	r1,r2
  308d10:	8b 02       	bf	308d18 <gint_default_panic+0x12c>
  308d12:	61 e3       	mov	r14,r1
  308d14:	d2 2c       	mov.l	308dc8 <gint_default_panic+0x1dc>,r2	! 30ec18
  308d16:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x180) name = "Illegal instruction";
  308d18:	61 e3       	mov	r14,r1
  308d1a:	52 14       	mov.l	@(16,r1),r2
  308d1c:	91 43       	mov.w	308da6 <gint_default_panic+0x1ba>,r1	! 180
  308d1e:	32 10       	cmp/eq	r1,r2
  308d20:	8b 02       	bf	308d28 <gint_default_panic+0x13c>
  308d22:	61 e3       	mov	r14,r1
  308d24:	d2 29       	mov.l	308dcc <gint_default_panic+0x1e0>,r2	! 30ec2c
  308d26:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x1a0) name = "Illegal delay slot instruction";
  308d28:	61 e3       	mov	r14,r1
  308d2a:	52 14       	mov.l	@(16,r1),r2
  308d2c:	91 3c       	mov.w	308da8 <gint_default_panic+0x1bc>,r1	! 1a0
  308d2e:	32 10       	cmp/eq	r1,r2
  308d30:	8b 02       	bf	308d38 <gint_default_panic+0x14c>
  308d32:	61 e3       	mov	r14,r1
  308d34:	d2 26       	mov.l	308dd0 <gint_default_panic+0x1e4>,r2	! 30ec40
  308d36:	11 2e       	mov.l	r2,@(56,r1)

	/* Custom gint codes for convenience */
	if(code == 0x1020) name = "DMA address error";
  308d38:	61 e3       	mov	r14,r1
  308d3a:	52 14       	mov.l	@(16,r1),r2
  308d3c:	91 35       	mov.w	308daa <gint_default_panic+0x1be>,r1	! 1020
  308d3e:	32 10       	cmp/eq	r1,r2
  308d40:	8b 02       	bf	308d48 <gint_default_panic+0x15c>
  308d42:	61 e3       	mov	r14,r1
  308d44:	d2 23       	mov.l	308dd4 <gint_default_panic+0x1e8>,r2	! 30ec60
  308d46:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x1040) name = "Add-in not fully mapped (too large)";
  308d48:	61 e3       	mov	r14,r1
  308d4a:	52 14       	mov.l	@(16,r1),r2
  308d4c:	91 2e       	mov.w	308dac <gint_default_panic+0x1c0>,r1	! 1040
  308d4e:	32 10       	cmp/eq	r1,r2
  308d50:	8b 02       	bf	308d58 <gint_default_panic+0x16c>
  308d52:	61 e3       	mov	r14,r1
  308d54:	d2 20       	mov.l	308dd8 <gint_default_panic+0x1ec>,r2	! 30ec74
  308d56:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x1060) name = "Memory initialization failed (heap)";
  308d58:	61 e3       	mov	r14,r1
  308d5a:	52 14       	mov.l	@(16,r1),r2
  308d5c:	91 27       	mov.w	308dae <gint_default_panic+0x1c2>,r1	! 1060
  308d5e:	32 10       	cmp/eq	r1,r2
  308d60:	8b 02       	bf	308d68 <gint_default_panic+0x17c>
  308d62:	61 e3       	mov	r14,r1
  308d64:	d2 1d       	mov.l	308ddc <gint_default_panic+0x1f0>,r2	! 30ec98
  308d66:	11 2e       	mov.l	r2,@(56,r1)
	if(code == 0x1080) name = "Stack overflow during world switch";
  308d68:	61 e3       	mov	r14,r1
  308d6a:	52 14       	mov.l	@(16,r1),r2
  308d6c:	91 20       	mov.w	308db0 <gint_default_panic+0x1c4>,r1	! 1080
  308d6e:	32 10       	cmp/eq	r1,r2
  308d70:	8b 02       	bf	308d78 <gint_default_panic+0x18c>
  308d72:	61 e3       	mov	r14,r1
  308d74:	d2 1a       	mov.l	308de0 <gint_default_panic+0x1f4>,r2	! 30ecbc
  308d76:	11 2e       	mov.l	r2,@(56,r1)

	dprint(6, 25, "%03x %s", code, name);
  308d78:	d2 1a       	mov.l	308de4 <gint_default_panic+0x1f8>,r2	! 30ece0
  308d7a:	61 e3       	mov	r14,r1
  308d7c:	51 1e       	mov.l	@(56,r1),r1
  308d7e:	1f 11       	mov.l	r1,@(4,r15)
  308d80:	61 e3       	mov	r14,r1
  308d82:	51 14       	mov.l	@(16,r1),r1
  308d84:	2f 12       	mov.l	r1,@r15
  308d86:	67 23       	mov	r2,r7
  308d88:	e6 00       	mov	#0,r6
  308d8a:	e5 19       	mov	#25,r5
  308d8c:	e4 06       	mov	#6,r4
  308d8e:	d1 16       	mov.l	308de8 <gint_default_panic+0x1fc>,r1	! 309484 <dprint>
  308d90:	41 0b       	jsr	@r1
  308d92:	00 09       	nop	

	dtext(6, 45, "PC");
  308d94:	d1 15       	mov.l	308dec <gint_default_panic+0x200>,r1	! 30ece8
  308d96:	67 13       	mov	r1,r7
  308d98:	e6 00       	mov	#0,r6
  308d9a:	a0 29       	bra	308df0 <gint_default_panic+0x204>
  308d9c:	00 09       	nop	
  308d9e:	0c 5f       	mac.l	@r5+,@r12+
  308da0:	00 e0       	.word 0x00e0
  308da2:	01 00       	.word 0x0100
  308da4:	01 60       	.word 0x0160
  308da6:	01 80       	.word 0x0180
  308da8:	01 a0       	.word 0x01a0
  308daa:	10 20       	mov.l	r2,@(0,r0)
  308dac:	10 40       	mov.l	r4,@(0,r0)
  308dae:	10 60       	mov.l	r6,@(0,r0)
  308db0:	10 80       	mov.l	r8,@(0,r0)
  308db2:	00 09       	nop	
  308db4:	00 30       	.word 0x0030
  308db6:	eb 70       	mov	#112,r11
  308db8:	00 30       	.word 0x0030
  308dba:	eb 74       	mov	#116,r11
  308dbc:	00 30       	.word 0x0030
  308dbe:	eb 9c       	mov	#-100,r11
  308dc0:	00 30       	.word 0x0030
  308dc2:	eb c4       	mov	#-60,r11
  308dc4:	00 30       	.word 0x0030
  308dc6:	eb ec       	mov	#-20,r11
  308dc8:	00 30       	.word 0x0030
  308dca:	ec 18       	mov	#24,r12
  308dcc:	00 30       	.word 0x0030
  308dce:	ec 2c       	mov	#44,r12
  308dd0:	00 30       	.word 0x0030
  308dd2:	ec 40       	mov	#64,r12
  308dd4:	00 30       	.word 0x0030
  308dd6:	ec 60       	mov	#96,r12
  308dd8:	00 30       	.word 0x0030
  308dda:	ec 74       	mov	#116,r12
  308ddc:	00 30       	.word 0x0030
  308dde:	ec 98       	mov	#-104,r12
  308de0:	00 30       	.word 0x0030
  308de2:	ec bc       	mov	#-68,r12
  308de4:	00 30       	.word 0x0030
  308de6:	ec e0       	mov	#-32,r12
  308de8:	00 30       	.word 0x0030
  308dea:	94 84       	mov.w	308ef6 <gint_default_panic+0x30a>,r4	! ed2c
  308dec:	00 30       	.word 0x0030
  308dee:	ec e8       	mov	#-24,r12
  308df0:	e5 2d       	mov	#45,r5
  308df2:	e4 06       	mov	#6,r4
  308df4:	d1 37       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308df6:	41 0b       	jsr	@r1
  308df8:	00 09       	nop	
	dprint(38, 45, "= %08x", PC);
  308dfa:	d2 37       	mov.l	308ed8 <gint_default_panic+0x2ec>,r2	! 30ecec
  308dfc:	61 e3       	mov	r14,r1
  308dfe:	51 19       	mov.l	@(36,r1),r1
  308e00:	2f 12       	mov.l	r1,@r15
  308e02:	67 23       	mov	r2,r7
  308e04:	e6 00       	mov	#0,r6
  308e06:	e5 2d       	mov	#45,r5
  308e08:	e4 26       	mov	#38,r4
  308e0a:	d1 34       	mov.l	308edc <gint_default_panic+0x2f0>,r1	! 309484 <dprint>
  308e0c:	41 0b       	jsr	@r1
  308e0e:	00 09       	nop	
	dtext(261, 45, "(Error location)");
  308e10:	d2 33       	mov.l	308ee0 <gint_default_panic+0x2f4>,r2	! 30ecf4
  308e12:	91 5c       	mov.w	308ece <gint_default_panic+0x2e2>,r1	! 105
  308e14:	67 23       	mov	r2,r7
  308e16:	e6 00       	mov	#0,r6
  308e18:	e5 2d       	mov	#45,r5
  308e1a:	64 13       	mov	r1,r4
  308e1c:	d1 2d       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e1e:	41 0b       	jsr	@r1
  308e20:	00 09       	nop	

	dtext(6, 60, "TEA");
  308e22:	d1 30       	mov.l	308ee4 <gint_default_panic+0x2f8>,r1	! 30ed08
  308e24:	67 13       	mov	r1,r7
  308e26:	e6 00       	mov	#0,r6
  308e28:	e5 3c       	mov	#60,r5
  308e2a:	e4 06       	mov	#6,r4
  308e2c:	d1 29       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e2e:	41 0b       	jsr	@r1
  308e30:	00 09       	nop	
	dprint(38, 60, "= %08x", TEA);
  308e32:	d2 29       	mov.l	308ed8 <gint_default_panic+0x2ec>,r2	! 30ecec
  308e34:	61 e3       	mov	r14,r1
  308e36:	51 1b       	mov.l	@(44,r1),r1
  308e38:	2f 12       	mov.l	r1,@r15
  308e3a:	67 23       	mov	r2,r7
  308e3c:	e6 00       	mov	#0,r6
  308e3e:	e5 3c       	mov	#60,r5
  308e40:	e4 26       	mov	#38,r4
  308e42:	d1 26       	mov.l	308edc <gint_default_panic+0x2f0>,r1	! 309484 <dprint>
  308e44:	41 0b       	jsr	@r1
  308e46:	00 09       	nop	
	dtext(234, 60, "(Offending address)");
  308e48:	d2 27       	mov.l	308ee8 <gint_default_panic+0x2fc>,r2	! 30ed0c
  308e4a:	91 41       	mov.w	308ed0 <gint_default_panic+0x2e4>,r1	! ea
  308e4c:	67 23       	mov	r2,r7
  308e4e:	e6 00       	mov	#0,r6
  308e50:	e5 3c       	mov	#60,r5
  308e52:	64 13       	mov	r1,r4
  308e54:	d1 1f       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e56:	41 0b       	jsr	@r1
  308e58:	00 09       	nop	

	dtext(6, 75, "TRA");
  308e5a:	d1 24       	mov.l	308eec <gint_default_panic+0x300>,r1	! 30ed20
  308e5c:	67 13       	mov	r1,r7
  308e5e:	e6 00       	mov	#0,r6
  308e60:	e5 4b       	mov	#75,r5
  308e62:	e4 06       	mov	#6,r4
  308e64:	d1 1b       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e66:	41 0b       	jsr	@r1
  308e68:	00 09       	nop	
	dprint(38, 75, "= %#x", TRA);
  308e6a:	d2 21       	mov.l	308ef0 <gint_default_panic+0x304>,r2	! 30ed24
  308e6c:	61 e3       	mov	r14,r1
  308e6e:	51 1a       	mov.l	@(40,r1),r1
  308e70:	2f 12       	mov.l	r1,@r15
  308e72:	67 23       	mov	r2,r7
  308e74:	e6 00       	mov	#0,r6
  308e76:	e5 4b       	mov	#75,r5
  308e78:	e4 26       	mov	#38,r4
  308e7a:	d1 18       	mov.l	308edc <gint_default_panic+0x2f0>,r1	! 309484 <dprint>
  308e7c:	41 0b       	jsr	@r1
  308e7e:	00 09       	nop	
	dtext(281, 75, "(Trap number)");
  308e80:	d2 1c       	mov.l	308ef4 <gint_default_panic+0x308>,r2	! 30ed2c
  308e82:	91 26       	mov.w	308ed2 <gint_default_panic+0x2e6>,r1	! 119
  308e84:	67 23       	mov	r2,r7
  308e86:	e6 00       	mov	#0,r6
  308e88:	e5 4b       	mov	#75,r5
  308e8a:	64 13       	mov	r1,r4
  308e8c:	d1 11       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e8e:	41 0b       	jsr	@r1
  308e90:	00 09       	nop	

	dtext(6, 95,  "The add-in crashed!");
  308e92:	d1 19       	mov.l	308ef8 <gint_default_panic+0x30c>,r1	! 30ed3c
  308e94:	67 13       	mov	r1,r7
  308e96:	e6 00       	mov	#0,r6
  308e98:	e5 5f       	mov	#95,r5
  308e9a:	e4 06       	mov	#6,r4
  308e9c:	d1 0d       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308e9e:	41 0b       	jsr	@r1
  308ea0:	00 09       	nop	
	if(kd == NULL) {
  308ea2:	61 e3       	mov	r14,r1
  308ea4:	51 1c       	mov.l	@(48,r1),r1
  308ea6:	21 18       	tst	r1,r1
  308ea8:	8b 2c       	bf	308f04 <gint_default_panic+0x318>
		dtext(6, 108, "Please press the RESET button to restart the");
  308eaa:	d1 14       	mov.l	308efc <gint_default_panic+0x310>,r1	! 30ed50
  308eac:	67 13       	mov	r1,r7
  308eae:	e6 00       	mov	#0,r6
  308eb0:	e5 6c       	mov	#108,r5
  308eb2:	e4 06       	mov	#6,r4
  308eb4:	d1 07       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308eb6:	41 0b       	jsr	@r1
  308eb8:	00 09       	nop	
		dtext(6, 121, "calculator.");
  308eba:	d1 11       	mov.l	308f00 <gint_default_panic+0x314>,r1	! 30ed80
  308ebc:	67 13       	mov	r1,r7
  308ebe:	e6 00       	mov	#0,r6
  308ec0:	e5 79       	mov	#121,r5
  308ec2:	e4 06       	mov	#6,r4
  308ec4:	d1 03       	mov.l	308ed4 <gint_default_panic+0x2e8>,r1	! 3095ac <dtext>
  308ec6:	41 0b       	jsr	@r1
  308ec8:	00 09       	nop	
  308eca:	a0 35       	bra	308f38 <gint_default_panic+0x34c>
  308ecc:	00 09       	nop	
  308ece:	01 05       	mov.w	r0,@(r0,r1)
  308ed0:	00 ea       	.word 0x00ea
  308ed2:	01 19       	.word 0x0119
  308ed4:	00 30       	.word 0x0030
  308ed6:	95 ac       	mov.w	309032 <gint_default_panic+0x446>,r5	! 6213
  308ed8:	00 30       	.word 0x0030
  308eda:	ec ec       	mov	#-20,r12
  308edc:	00 30       	.word 0x0030
  308ede:	94 84       	mov.w	308fea <gint_default_panic+0x3fe>,r4	! 611d
  308ee0:	00 30       	.word 0x0030
  308ee2:	ec f4       	mov	#-12,r12
  308ee4:	00 30       	.word 0x0030
  308ee6:	ed 08       	mov	#8,r13
  308ee8:	00 30       	.word 0x0030
  308eea:	ed 0c       	mov	#12,r13
  308eec:	00 30       	.word 0x0030
  308eee:	ed 20       	mov	#32,r13
  308ef0:	00 30       	.word 0x0030
  308ef2:	ed 24       	mov	#36,r13
  308ef4:	00 30       	.word 0x0030
  308ef6:	ed 2c       	mov	#44,r13
  308ef8:	00 30       	.word 0x0030
  308efa:	ed 3c       	mov	#60,r13
  308efc:	00 30       	.word 0x0030
  308efe:	ed 50       	mov	#80,r13
  308f00:	00 30       	.word 0x0030
  308f02:	ed 80       	mov	#-128,r13
	}
	else {
		dtext(6, 121, "[EXIT]: Exit the program with abort()");
  308f04:	d1 73       	mov.l	3090d4 <gint_default_panic+0x4e8>,r1	! 30ed8c
  308f06:	67 13       	mov	r1,r7
  308f08:	e6 00       	mov	#0,r6
  308f0a:	e5 79       	mov	#121,r5
  308f0c:	e4 06       	mov	#6,r4
  308f0e:	d1 72       	mov.l	3090d8 <gint_default_panic+0x4ec>,r1	! 3095ac <dtext>
  308f10:	41 0b       	jsr	@r1
  308f12:	00 09       	nop	
		dtext(6, 134, "[MENU]: Leave to main menu");
  308f14:	d2 71       	mov.l	3090dc <gint_default_panic+0x4f0>,r2	! 30edb4
  308f16:	91 cf       	mov.w	3090b8 <gint_default_panic+0x4cc>,r1	! 86
  308f18:	67 23       	mov	r2,r7
  308f1a:	e6 00       	mov	#0,r6
  308f1c:	65 13       	mov	r1,r5
  308f1e:	e4 06       	mov	#6,r4
  308f20:	d1 6d       	mov.l	3090d8 <gint_default_panic+0x4ec>,r1	! 3095ac <dtext>
  308f22:	41 0b       	jsr	@r1
  308f24:	00 09       	nop	
		dtext(6, 147, "[F1]+[F6]: RESET the calculator");
  308f26:	d2 6e       	mov.l	3090e0 <gint_default_panic+0x4f4>,r2	! 30edd0
  308f28:	91 c7       	mov.w	3090ba <gint_default_panic+0x4ce>,r1	! 93
  308f2a:	67 23       	mov	r2,r7
  308f2c:	e6 00       	mov	#0,r6
  308f2e:	65 13       	mov	r1,r5
  308f30:	e4 06       	mov	#6,r4
  308f32:	d1 69       	mov.l	3090d8 <gint_default_panic+0x4ec>,r1	! 3095ac <dtext>
  308f34:	41 0b       	jsr	@r1
  308f36:	00 09       	nop	
	}

	/* DMA address error handler */
	if(code == 0x1020)
  308f38:	61 e3       	mov	r14,r1
  308f3a:	52 14       	mov.l	@(16,r1),r2
  308f3c:	91 be       	mov.w	3090bc <gint_default_panic+0x4d0>,r1	! 1020
  308f3e:	32 10       	cmp/eq	r1,r2
  308f40:	8b 3b       	bf	308fba <gint_default_panic+0x3ce>
	{
		#define DMA SH7305_DMA
		dprint(6, 167, "SAR0: %08x   DAR0: %08x   TCR0: %08x",
  308f42:	d1 68       	mov.l	3090e4 <gint_default_panic+0x4f8>,r1	! fe008020
  308f44:	61 12       	mov.l	@r1,r1
  308f46:	d2 67       	mov.l	3090e4 <gint_default_panic+0x4f8>,r2	! fe008020
  308f48:	52 21       	mov.l	@(4,r2),r2
  308f4a:	d3 66       	mov.l	3090e4 <gint_default_panic+0x4f8>,r3	! fe008020
  308f4c:	53 32       	mov.l	@(8,r3),r3
  308f4e:	d7 66       	mov.l	3090e8 <gint_default_panic+0x4fc>,r7	! 30edf0
  308f50:	95 b5       	mov.w	3090be <gint_default_panic+0x4d2>,r5	! a7
  308f52:	1f 32       	mov.l	r3,@(8,r15)
  308f54:	1f 21       	mov.l	r2,@(4,r15)
  308f56:	2f 12       	mov.l	r1,@r15
  308f58:	e6 00       	mov	#0,r6
  308f5a:	e4 06       	mov	#6,r4
  308f5c:	d1 63       	mov.l	3090ec <gint_default_panic+0x500>,r1	! 309484 <dprint>
  308f5e:	41 0b       	jsr	@r1
  308f60:	00 09       	nop	
			DMA.DMA0.SAR, DMA.DMA0.DAR, DMA.DMA0.TCR);
		dprint(6, 180, "CHCR0: %08x", DMA.DMA0.CHCR);
  308f62:	d1 60       	mov.l	3090e4 <gint_default_panic+0x4f8>,r1	! fe008020
  308f64:	d3 62       	mov.l	3090f0 <gint_default_panic+0x504>,r3	! 30ee18
  308f66:	92 ab       	mov.w	3090c0 <gint_default_panic+0x4d4>,r2	! b4
  308f68:	51 13       	mov.l	@(12,r1),r1
  308f6a:	2f 12       	mov.l	r1,@r15
  308f6c:	67 33       	mov	r3,r7
  308f6e:	e6 00       	mov	#0,r6
  308f70:	65 23       	mov	r2,r5
  308f72:	e4 06       	mov	#6,r4
  308f74:	d1 5d       	mov.l	3090ec <gint_default_panic+0x500>,r1	! 309484 <dprint>
  308f76:	41 0b       	jsr	@r1
  308f78:	00 09       	nop	
		dprint(6, 193, "SAR1: %08x   DAR1: %08x   TCR1: %08x",
  308f7a:	d1 5a       	mov.l	3090e4 <gint_default_panic+0x4f8>,r1	! fe008020
  308f7c:	51 14       	mov.l	@(16,r1),r1
  308f7e:	d2 59       	mov.l	3090e4 <gint_default_panic+0x4f8>,r2	! fe008020
  308f80:	52 25       	mov.l	@(20,r2),r2
  308f82:	d3 58       	mov.l	3090e4 <gint_default_panic+0x4f8>,r3	! fe008020
  308f84:	53 36       	mov.l	@(24,r3),r3
  308f86:	d7 5b       	mov.l	3090f4 <gint_default_panic+0x508>,r7	! 30ee24
  308f88:	95 9b       	mov.w	3090c2 <gint_default_panic+0x4d6>,r5	! c1
  308f8a:	1f 32       	mov.l	r3,@(8,r15)
  308f8c:	1f 21       	mov.l	r2,@(4,r15)
  308f8e:	2f 12       	mov.l	r1,@r15
  308f90:	e6 00       	mov	#0,r6
  308f92:	e4 06       	mov	#6,r4
  308f94:	d1 55       	mov.l	3090ec <gint_default_panic+0x500>,r1	! 309484 <dprint>
  308f96:	41 0b       	jsr	@r1
  308f98:	00 09       	nop	
			DMA.DMA1.SAR, DMA.DMA1.DAR, DMA.DMA1.TCR);
		dprint(6, 206, "CHCR1: %08x  DMAOR:%04x", DMA.DMA1.CHCR, DMA.OR);
  308f9a:	d1 52       	mov.l	3090e4 <gint_default_panic+0x4f8>,r1	! fe008020
  308f9c:	d2 51       	mov.l	3090e4 <gint_default_panic+0x4f8>,r2	! fe008020
  308f9e:	d7 56       	mov.l	3090f8 <gint_default_panic+0x50c>,r7	! 30ee4c
  308fa0:	93 90       	mov.w	3090c4 <gint_default_panic+0x4d8>,r3	! ce
  308fa2:	72 40       	add	#64,r2
  308fa4:	62 21       	mov.w	@r2,r2
  308fa6:	60 23       	mov	r2,r0
  308fa8:	81 f3       	mov.w	r0,@(6,r15)
  308faa:	51 17       	mov.l	@(28,r1),r1
  308fac:	2f 12       	mov.l	r1,@r15
  308fae:	e6 00       	mov	#0,r6
  308fb0:	65 33       	mov	r3,r5
  308fb2:	e4 06       	mov	#6,r4
  308fb4:	d1 4d       	mov.l	3090ec <gint_default_panic+0x500>,r1	! 309484 <dprint>
  308fb6:	41 0b       	jsr	@r1
  308fb8:	00 09       	nop	
		#undef DMA
	}
	/* Illegal instruction handler */
	if(code == 0x180)
  308fba:	61 e3       	mov	r14,r1
  308fbc:	52 14       	mov.l	@(16,r1),r2
  308fbe:	91 82       	mov.w	3090c6 <gint_default_panic+0x4da>,r1	! 180
  308fc0:	32 10       	cmp/eq	r1,r2
  308fc2:	8b 27       	bf	309014 <gint_default_panic+0x428>
	{
		uint16_t *opcodes = (void *)PC;
  308fc4:	61 e3       	mov	r14,r1
  308fc6:	62 e3       	mov	r14,r2
  308fc8:	52 29       	mov.l	@(36,r2),r2
  308fca:	11 26       	mov.l	r2,@(24,r1)
		dprint(6, 160, "Opcodes: %04x %04x [%04x] %04x",
  308fcc:	61 e3       	mov	r14,r1
  308fce:	51 16       	mov.l	@(24,r1),r1
  308fd0:	71 fc       	add	#-4,r1
  308fd2:	61 11       	mov.w	@r1,r1
  308fd4:	61 1d       	extu.w	r1,r1
  308fd6:	63 13       	mov	r1,r3
  308fd8:	61 e3       	mov	r14,r1
  308fda:	51 16       	mov.l	@(24,r1),r1
  308fdc:	71 fe       	add	#-2,r1
  308fde:	61 11       	mov.w	@r1,r1
  308fe0:	61 1d       	extu.w	r1,r1
  308fe2:	67 13       	mov	r1,r7
  308fe4:	61 e3       	mov	r14,r1
  308fe6:	51 16       	mov.l	@(24,r1),r1
  308fe8:	61 11       	mov.w	@r1,r1
  308fea:	61 1d       	extu.w	r1,r1
  308fec:	66 13       	mov	r1,r6
  308fee:	61 e3       	mov	r14,r1
  308ff0:	51 16       	mov.l	@(24,r1),r1
  308ff2:	71 02       	add	#2,r1
  308ff4:	61 11       	mov.w	@r1,r1
  308ff6:	61 1d       	extu.w	r1,r1
  308ff8:	65 13       	mov	r1,r5
  308ffa:	d2 40       	mov.l	3090fc <gint_default_panic+0x510>,r2	! 30ee64
  308ffc:	91 64       	mov.w	3090c8 <gint_default_panic+0x4dc>,r1	! a0
  308ffe:	1f 53       	mov.l	r5,@(12,r15)
  309000:	1f 62       	mov.l	r6,@(8,r15)
  309002:	1f 71       	mov.l	r7,@(4,r15)
  309004:	2f 32       	mov.l	r3,@r15
  309006:	67 23       	mov	r2,r7
  309008:	e6 00       	mov	#0,r6
  30900a:	65 13       	mov	r1,r5
  30900c:	e4 06       	mov	#6,r4
  30900e:	d1 37       	mov.l	3090ec <gint_default_panic+0x500>,r1	! 309484 <dprint>
  309010:	41 0b       	jsr	@r1
  309012:	00 09       	nop	
			opcodes[-2], opcodes[-1], opcodes[0], opcodes[1]);
	}
	#endif

	_WEAK_dupdate();
  309014:	d1 3a       	mov.l	309100 <gint_default_panic+0x514>,r1	! 301364 <_WEAK_dupdate>
  309016:	41 0b       	jsr	@r1
  309018:	00 09       	nop	

	/* Make sure relevant keys are released before taking in events; we don't
	   want the user to RESET through this screen by holding a key */
	bool has_released = false;
  30901a:	61 e3       	mov	r14,r1
  30901c:	71 30       	add	#48,r1
  30901e:	e2 00       	mov	#0,r2
  309020:	60 23       	mov	r2,r0
  309022:	80 17       	mov.b	r0,@(7,r1)

	while(1) {
		while(_WEAK_keydev_unqueue_event(kd).type != KEYEV_NONE) {}
  309024:	00 09       	nop	
  309026:	61 e3       	mov	r14,r1
  309028:	54 1c       	mov.l	@(48,r1),r4
  30902a:	d1 36       	mov.l	309104 <gint_default_panic+0x518>,r1	! 308bd2 <_WEAK_keydev_unqueue_event>
  30902c:	41 0b       	jsr	@r1
  30902e:	00 09       	nop	
  309030:	61 03       	mov	r0,r1
  309032:	62 13       	mov	r1,r2
  309034:	91 49       	mov.w	3090ca <gint_default_panic+0x4de>,r1	! 300
  309036:	21 29       	and	r2,r1
  309038:	21 18       	tst	r1,r1
  30903a:	8b f4       	bf	309026 <gint_default_panic+0x43a>

		bool exit = _WEAK_keydev_keydown(kd, KEY_EXIT);
  30903c:	68 e3       	mov	r14,r8
  30903e:	78 10       	add	#16,r8
  309040:	61 e3       	mov	r14,r1
  309042:	e5 74       	mov	#116,r5
  309044:	54 1c       	mov.l	@(48,r1),r4
  309046:	d1 30       	mov.l	309108 <gint_default_panic+0x51c>,r1	! 308bb2 <_WEAK_keydev_keydown>
  309048:	41 0b       	jsr	@r1
  30904a:	00 09       	nop	
  30904c:	61 03       	mov	r0,r1
  30904e:	60 13       	mov	r1,r0
  309050:	80 87       	mov.b	r0,@(7,r8)
		bool menu = _WEAK_keydev_keydown(kd, KEY_MENU);
  309052:	68 e3       	mov	r14,r8
  309054:	78 10       	add	#16,r8
  309056:	92 39       	mov.w	3090cc <gint_default_panic+0x4e0>,r2	! 84
  309058:	61 e3       	mov	r14,r1
  30905a:	65 23       	mov	r2,r5
  30905c:	54 1c       	mov.l	@(48,r1),r4
  30905e:	d1 2a       	mov.l	309108 <gint_default_panic+0x51c>,r1	! 308bb2 <_WEAK_keydev_keydown>
  309060:	41 0b       	jsr	@r1
  309062:	00 09       	nop	
  309064:	61 03       	mov	r0,r1
  309066:	60 13       	mov	r1,r0
  309068:	80 86       	mov.b	r0,@(6,r8)
		bool f1   = _WEAK_keydev_keydown(kd, KEY_F1);
  30906a:	68 e3       	mov	r14,r8
  30906c:	78 10       	add	#16,r8
  30906e:	92 2e       	mov.w	3090ce <gint_default_panic+0x4e2>,r2	! 91
  309070:	61 e3       	mov	r14,r1
  309072:	65 23       	mov	r2,r5
  309074:	54 1c       	mov.l	@(48,r1),r4
  309076:	d1 24       	mov.l	309108 <gint_default_panic+0x51c>,r1	! 308bb2 <_WEAK_keydev_keydown>
  309078:	41 0b       	jsr	@r1
  30907a:	00 09       	nop	
  30907c:	61 03       	mov	r0,r1
  30907e:	60 13       	mov	r1,r0
  309080:	80 85       	mov.b	r0,@(5,r8)
		bool f6   = _WEAK_keydev_keydown(kd, KEY_F6);
  309082:	68 e3       	mov	r14,r8
  309084:	78 10       	add	#16,r8
  309086:	92 23       	mov.w	3090d0 <gint_default_panic+0x4e4>,r2	! 96
  309088:	61 e3       	mov	r14,r1
  30908a:	65 23       	mov	r2,r5
  30908c:	54 1c       	mov.l	@(48,r1),r4
  30908e:	d1 1e       	mov.l	309108 <gint_default_panic+0x51c>,r1	! 308bb2 <_WEAK_keydev_keydown>
  309090:	41 0b       	jsr	@r1
  309092:	00 09       	nop	
  309094:	61 03       	mov	r0,r1
  309096:	60 13       	mov	r1,r0
  309098:	80 84       	mov.b	r0,@(4,r8)

		if(has_released && exit)
  30909a:	61 e3       	mov	r14,r1
  30909c:	71 30       	add	#48,r1
  30909e:	84 17       	mov.b	@(7,r1),r0
  3090a0:	61 03       	mov	r0,r1
  3090a2:	61 1c       	extu.b	r1,r1
  3090a4:	21 18       	tst	r1,r1
  3090a6:	89 35       	bt	309114 <gint_default_panic+0x528>
  3090a8:	61 e3       	mov	r14,r1
  3090aa:	71 10       	add	#16,r1
  3090ac:	84 17       	mov.b	@(7,r1),r0
  3090ae:	61 03       	mov	r0,r1
  3090b0:	61 1c       	extu.b	r1,r1
  3090b2:	21 18       	tst	r1,r1
  3090b4:	a0 2a       	bra	30910c <gint_default_panic+0x520>
  3090b6:	00 09       	nop	
  3090b8:	00 86       	mov.l	r8,@(r0,r0)
  3090ba:	00 93       	ocbi	@r0
  3090bc:	10 20       	mov.l	r2,@(0,r0)
  3090be:	00 a7       	mul.l	r10,r0
  3090c0:	00 b4       	mov.b	r11,@(r0,r0)
  3090c2:	00 c1       	.word 0x00c1
  3090c4:	00 ce       	mov.l	@(r0,r12),r0
  3090c6:	01 80       	.word 0x0180
  3090c8:	00 a0       	.word 0x00a0
  3090ca:	03 00       	.word 0x0300
  3090cc:	00 84       	mov.b	r8,@(r0,r0)
  3090ce:	00 91       	.word 0x0091
  3090d0:	00 96       	mov.l	r9,@(r0,r0)
  3090d2:	00 09       	nop	
  3090d4:	00 30       	.word 0x0030
  3090d6:	ed 8c       	mov	#-116,r13
  3090d8:	00 30       	.word 0x0030
  3090da:	95 ac       	mov.w	309236 <gint_exc_catch+0x6>,r5	! 61e3
  3090dc:	00 30       	.word 0x0030
  3090de:	ed b4       	mov	#-76,r13
  3090e0:	00 30       	.word 0x0030
  3090e2:	ed d0       	mov	#-48,r13
  3090e4:	fe 00       	.word 0xfe00
  3090e6:	80 20       	mov.b	r0,@(0,r2)
  3090e8:	00 30       	.word 0x0030
  3090ea:	ed f0       	mov	#-16,r13
  3090ec:	00 30       	.word 0x0030
  3090ee:	94 84       	mov.w	3091fa <gint_panic_set+0x6>,r4	! 61e3
  3090f0:	00 30       	.word 0x0030
  3090f2:	ee 18       	mov	#24,r14
  3090f4:	00 30       	.word 0x0030
  3090f6:	ee 24       	mov	#36,r14
  3090f8:	00 30       	.word 0x0030
  3090fa:	ee 4c       	mov	#76,r14
  3090fc:	00 30       	.word 0x0030
  3090fe:	ee 64       	mov	#100,r14
  309100:	00 30       	.word 0x0030
  309102:	13 64       	mov.l	r6,@(16,r3)
  309104:	00 30       	.word 0x0030
  309106:	8b d2       	bf	3090ae <gint_default_panic+0x4c2>
  309108:	00 30       	.word 0x0030
  30910a:	8b b2       	bf	309072 <gint_default_panic+0x486>
  30910c:	89 02       	bt	309114 <gint_default_panic+0x528>
			abort();
  30910e:	d1 2d       	mov.l	3091c4 <gint_default_panic+0x5d8>,r1	! 30ad04 <abort>
  309110:	41 0b       	jsr	@r1
  309112:	00 09       	nop	
		if(has_released && menu)
  309114:	61 e3       	mov	r14,r1
  309116:	71 30       	add	#48,r1
  309118:	84 17       	mov.b	@(7,r1),r0
  30911a:	61 03       	mov	r0,r1
  30911c:	61 1c       	extu.b	r1,r1
  30911e:	21 18       	tst	r1,r1
  309120:	89 09       	bt	309136 <gint_default_panic+0x54a>
  309122:	61 e3       	mov	r14,r1
  309124:	71 10       	add	#16,r1
  309126:	84 16       	mov.b	@(6,r1),r0
  309128:	61 03       	mov	r0,r1
  30912a:	61 1c       	extu.b	r1,r1
  30912c:	21 18       	tst	r1,r1
  30912e:	89 02       	bt	309136 <gint_default_panic+0x54a>
			gint_osmenu();
  309130:	d1 25       	mov.l	3091c8 <gint_default_panic+0x5dc>,r1	! 3029e4 <gint_osmenu>
  309132:	41 0b       	jsr	@r1
  309134:	00 09       	nop	
		if(has_released && f1 && f6)
  309136:	61 e3       	mov	r14,r1
  309138:	71 30       	add	#48,r1
  30913a:	84 17       	mov.b	@(7,r1),r0
  30913c:	61 03       	mov	r0,r1
  30913e:	61 1c       	extu.b	r1,r1
  309140:	21 18       	tst	r1,r1
  309142:	89 10       	bt	309166 <gint_default_panic+0x57a>
  309144:	61 e3       	mov	r14,r1
  309146:	71 10       	add	#16,r1
  309148:	84 15       	mov.b	@(5,r1),r0
  30914a:	61 03       	mov	r0,r1
  30914c:	61 1c       	extu.b	r1,r1
  30914e:	21 18       	tst	r1,r1
  309150:	89 09       	bt	309166 <gint_default_panic+0x57a>
  309152:	61 e3       	mov	r14,r1
  309154:	71 10       	add	#16,r1
  309156:	84 14       	mov.b	@(4,r1),r0
  309158:	61 03       	mov	r0,r1
  30915a:	61 1c       	extu.b	r1,r1
  30915c:	21 18       	tst	r1,r1
  30915e:	89 02       	bt	309166 <gint_default_panic+0x57a>
			__Reset();
  309160:	d1 1a       	mov.l	3091cc <gint_default_panic+0x5e0>,r1	! 302de4 <__Reset>
  309162:	41 0b       	jsr	@r1
  309164:	00 09       	nop	
		if(!exit && !menu && !f1 && !f6)
  309166:	61 e3       	mov	r14,r1
  309168:	71 10       	add	#16,r1
  30916a:	84 17       	mov.b	@(7,r1),r0
  30916c:	61 03       	mov	r0,r1
  30916e:	e2 01       	mov	#1,r2
  309170:	21 2a       	xor	r2,r1
  309172:	61 1c       	extu.b	r1,r1
  309174:	21 18       	tst	r1,r1
  309176:	89 1f       	bt	3091b8 <gint_default_panic+0x5cc>
  309178:	61 e3       	mov	r14,r1
  30917a:	71 10       	add	#16,r1
  30917c:	84 16       	mov.b	@(6,r1),r0
  30917e:	61 03       	mov	r0,r1
  309180:	e2 01       	mov	#1,r2
  309182:	21 2a       	xor	r2,r1
  309184:	61 1c       	extu.b	r1,r1
  309186:	21 18       	tst	r1,r1
  309188:	89 16       	bt	3091b8 <gint_default_panic+0x5cc>
  30918a:	61 e3       	mov	r14,r1
  30918c:	71 10       	add	#16,r1
  30918e:	84 15       	mov.b	@(5,r1),r0
  309190:	61 03       	mov	r0,r1
  309192:	e2 01       	mov	#1,r2
  309194:	21 2a       	xor	r2,r1
  309196:	61 1c       	extu.b	r1,r1
  309198:	21 18       	tst	r1,r1
  30919a:	89 0d       	bt	3091b8 <gint_default_panic+0x5cc>
  30919c:	61 e3       	mov	r14,r1
  30919e:	71 10       	add	#16,r1
  3091a0:	84 14       	mov.b	@(4,r1),r0
  3091a2:	61 03       	mov	r0,r1
  3091a4:	e2 01       	mov	#1,r2
  3091a6:	21 2a       	xor	r2,r1
  3091a8:	61 1c       	extu.b	r1,r1
  3091aa:	21 18       	tst	r1,r1
  3091ac:	89 04       	bt	3091b8 <gint_default_panic+0x5cc>
			has_released = true;
  3091ae:	61 e3       	mov	r14,r1
  3091b0:	71 30       	add	#48,r1
  3091b2:	e2 01       	mov	#1,r2
  3091b4:	60 23       	mov	r2,r0
  3091b6:	80 17       	mov.b	r0,@(7,r1)

		sleep();
  3091b8:	d1 05       	mov.l	3091d0 <gint_default_panic+0x5e4>,r1	! 30a680 <sleep>
  3091ba:	41 0b       	jsr	@r1
  3091bc:	00 09       	nop	
	while(1) {
  3091be:	af 31       	bra	309024 <gint_default_panic+0x438>
  3091c0:	00 09       	nop	
  3091c2:	00 09       	nop	
  3091c4:	00 30       	.word 0x0030
  3091c6:	ad 04       	bra	308bd2 <_WEAK_keydev_unqueue_event>
  3091c8:	00 30       	.word 0x0030
  3091ca:	29 e4       	mov.b	r14,@-r9
  3091cc:	00 30       	.word 0x0030
  3091ce:	2d e4       	mov.b	r14,@-r13
  3091d0:	00 30       	.word 0x0030
  3091d2:	a6 80       	bra	309ed6 <drsize+0x126>

003091d4 <gint_panic>:
/* Exception catcher */
int (*gint_exc_catcher)(uint32_t code) = NULL;

/* gint_panic(): Panic handler function */
void gint_panic(uint32_t code)
{
  3091d4:	2f e6       	mov.l	r14,@-r15
  3091d6:	4f 22       	sts.l	pr,@-r15
  3091d8:	7f fc       	add	#-4,r15
  3091da:	6e f3       	mov	r15,r14
  3091dc:	61 e3       	mov	r14,r1
  3091de:	71 c4       	add	#-60,r1
  3091e0:	11 4f       	mov.l	r4,@(60,r1)
	gint_exc_panic(code);
  3091e2:	d1 03       	mov.l	3091f0 <gint_panic+0x1c>,r1	! 81016ac <gint_exc_panic>
  3091e4:	61 12       	mov.l	@r1,r1
  3091e6:	62 e3       	mov	r14,r2
  3091e8:	72 c4       	add	#-60,r2
  3091ea:	54 2f       	mov.l	@(60,r2),r4
  3091ec:	41 0b       	jsr	@r1
  3091ee:	00 09       	nop	
  3091f0:	08 10       	.word 0x0810
  3091f2:	16 ac       	mov.l	r10,@(48,r6)

003091f4 <gint_panic_set>:
}

/* gint_panic_set(): Change the panic handler function */
void gint_panic_set(GNORETURN void (*panic)(uint32_t code))
{
  3091f4:	2f e6       	mov.l	r14,@-r15
  3091f6:	7f fc       	add	#-4,r15
  3091f8:	6e f3       	mov	r15,r14
  3091fa:	61 e3       	mov	r14,r1
  3091fc:	71 c4       	add	#-60,r1
  3091fe:	11 4f       	mov.l	r4,@(60,r1)
	gint_exc_panic = panic ? panic : gint_default_panic;
  309200:	61 e3       	mov	r14,r1
  309202:	71 c4       	add	#-60,r1
  309204:	51 1f       	mov.l	@(60,r1),r1
  309206:	21 18       	tst	r1,r1
  309208:	89 04       	bt	309214 <gint_panic_set+0x20>
  30920a:	61 e3       	mov	r14,r1
  30920c:	71 c4       	add	#-60,r1
  30920e:	51 1f       	mov.l	@(60,r1),r1
  309210:	a0 01       	bra	309216 <gint_panic_set+0x22>
  309212:	00 09       	nop	
  309214:	d1 04       	mov.l	309228 <gint_panic_set+0x34>,r1	! 308bec <gint_default_panic>
  309216:	d2 05       	mov.l	30922c <gint_panic_set+0x38>,r2	! 81016ac <gint_exc_panic>
  309218:	22 12       	mov.l	r1,@r2
}
  30921a:	00 09       	nop	
  30921c:	7e 04       	add	#4,r14
  30921e:	6f e3       	mov	r14,r15
  309220:	6e f6       	mov.l	@r15+,r14
  309222:	00 0b       	rts	
  309224:	00 09       	nop	
  309226:	00 09       	nop	
  309228:	00 30       	.word 0x0030
  30922a:	8b ec       	bf	309206 <gint_panic_set+0x12>
  30922c:	08 10       	.word 0x0810
  30922e:	16 ac       	mov.l	r10,@(48,r6)

00309230 <gint_exc_catch>:

/* gint_exc_catch(): Set a function to catch exceptions */
void gint_exc_catch(int (*handler)(uint32_t code))
{
  309230:	2f e6       	mov.l	r14,@-r15
  309232:	7f fc       	add	#-4,r15
  309234:	6e f3       	mov	r15,r14
  309236:	61 e3       	mov	r14,r1
  309238:	71 c4       	add	#-60,r1
  30923a:	11 4f       	mov.l	r4,@(60,r1)
	gint_exc_catcher = handler;
  30923c:	d1 05       	mov.l	309254 <gint_exc_catch+0x24>,r1	! 81015bc <gint_exc_catcher>
  30923e:	62 e3       	mov	r14,r2
  309240:	72 c4       	add	#-60,r2
  309242:	52 2f       	mov.l	@(60,r2),r2
  309244:	21 22       	mov.l	r2,@r1
}
  309246:	00 09       	nop	
  309248:	7e 04       	add	#4,r14
  30924a:	6f e3       	mov	r14,r15
  30924c:	6e f6       	mov.l	@r15+,r14
  30924e:	00 0b       	rts	
  309250:	00 09       	nop	
  309252:	00 09       	nop	
  309254:	08 10       	.word 0x0810
  309256:	15 bc       	mov.l	r11,@(48,r5)

00309258 <gint_exc_skip>:

/* gint_exc_skip(): Skip pending exception instructions */
void gint_exc_skip(int instructions)
{
  309258:	2f e6       	mov.l	r14,@-r15
  30925a:	7f f8       	add	#-8,r15
  30925c:	6e f3       	mov	r15,r14
  30925e:	61 e3       	mov	r14,r1
  309260:	71 c8       	add	#-56,r1
  309262:	11 4e       	mov.l	r4,@(56,r1)
	uint32_t spc;

	/* Increase SPC by 2 bytes per instruction */
	__asm__("stc spc, %0" : "=r"(spc));
  309264:	02 42       	stc	spc,r2
  309266:	61 e3       	mov	r14,r1
  309268:	71 c8       	add	#-56,r1
  30926a:	11 2f       	mov.l	r2,@(60,r1)
	spc += 2 * instructions;
  30926c:	61 e3       	mov	r14,r1
  30926e:	71 c8       	add	#-56,r1
  309270:	51 1e       	mov.l	@(56,r1),r1
  309272:	31 1c       	add	r1,r1
  309274:	63 13       	mov	r1,r3
  309276:	61 e3       	mov	r14,r1
  309278:	71 c8       	add	#-56,r1
  30927a:	62 e3       	mov	r14,r2
  30927c:	72 c8       	add	#-56,r2
  30927e:	52 2f       	mov.l	@(60,r2),r2
  309280:	32 3c       	add	r3,r2
  309282:	11 2f       	mov.l	r2,@(60,r1)
	__asm__("ldc %0, spc" :: "r"(spc));
  309284:	61 e3       	mov	r14,r1
  309286:	71 c8       	add	#-56,r1
  309288:	51 1f       	mov.l	@(60,r1),r1
  30928a:	41 4e       	ldc	r1,spc
}
  30928c:	00 09       	nop	
  30928e:	7e 08       	add	#8,r14
  309290:	6f e3       	mov	r14,r15
  309292:	6e f6       	mov.l	@r15+,r14
  309294:	00 0b       	rts	
  309296:	00 09       	nop	

00309298 <osheap_malloc>:
extern void *__malloc(size_t size);
extern void *__realloc(void *ptr, size_t newsize);
extern void __free(void *ptr);

static void *osheap_malloc(size_t size, GUNUSED void *data)
{
  309298:	2f e6       	mov.l	r14,@-r15
  30929a:	4f 22       	sts.l	pr,@-r15
  30929c:	7f f8       	add	#-8,r15
  30929e:	6e f3       	mov	r15,r14
  3092a0:	61 e3       	mov	r14,r1
  3092a2:	71 c8       	add	#-56,r1
  3092a4:	11 4f       	mov.l	r4,@(60,r1)
  3092a6:	61 e3       	mov	r14,r1
  3092a8:	71 c8       	add	#-56,r1
  3092aa:	11 5e       	mov.l	r5,@(56,r1)
	return __malloc(size);
  3092ac:	61 e3       	mov	r14,r1
  3092ae:	71 c8       	add	#-56,r1
  3092b0:	54 1f       	mov.l	@(60,r1),r4
  3092b2:	d1 05       	mov.l	3092c8 <osheap_malloc+0x30>,r1	! 302c30 <__malloc>
  3092b4:	41 0b       	jsr	@r1
  3092b6:	00 09       	nop	
  3092b8:	61 03       	mov	r0,r1
}
  3092ba:	60 13       	mov	r1,r0
  3092bc:	7e 08       	add	#8,r14
  3092be:	6f e3       	mov	r14,r15
  3092c0:	4f 26       	lds.l	@r15+,pr
  3092c2:	6e f6       	mov.l	@r15+,r14
  3092c4:	00 0b       	rts	
  3092c6:	00 09       	nop	
  3092c8:	00 30       	.word 0x0030
  3092ca:	2c 30       	mov.b	r3,@r12

003092cc <osheap_realloc>:

static void *osheap_realloc(void *ptr, size_t newsize, GUNUSED void *data)
{
  3092cc:	2f e6       	mov.l	r14,@-r15
  3092ce:	4f 22       	sts.l	pr,@-r15
  3092d0:	7f f4       	add	#-12,r15
  3092d2:	6e f3       	mov	r15,r14
  3092d4:	61 e3       	mov	r14,r1
  3092d6:	71 cc       	add	#-52,r1
  3092d8:	11 4f       	mov.l	r4,@(60,r1)
  3092da:	61 e3       	mov	r14,r1
  3092dc:	71 cc       	add	#-52,r1
  3092de:	11 5e       	mov.l	r5,@(56,r1)
  3092e0:	61 e3       	mov	r14,r1
  3092e2:	71 cc       	add	#-52,r1
  3092e4:	11 6d       	mov.l	r6,@(52,r1)
	return __realloc(ptr, newsize);
  3092e6:	62 e3       	mov	r14,r2
  3092e8:	72 cc       	add	#-52,r2
  3092ea:	61 e3       	mov	r14,r1
  3092ec:	71 cc       	add	#-52,r1
  3092ee:	55 2e       	mov.l	@(56,r2),r5
  3092f0:	54 1f       	mov.l	@(60,r1),r4
  3092f2:	d1 05       	mov.l	309308 <osheap_realloc+0x3c>,r1	! 302c54 <__realloc>
  3092f4:	41 0b       	jsr	@r1
  3092f6:	00 09       	nop	
  3092f8:	61 03       	mov	r0,r1
}
  3092fa:	60 13       	mov	r1,r0
  3092fc:	7e 0c       	add	#12,r14
  3092fe:	6f e3       	mov	r14,r15
  309300:	4f 26       	lds.l	@r15+,pr
  309302:	6e f6       	mov.l	@r15+,r14
  309304:	00 0b       	rts	
  309306:	00 09       	nop	
  309308:	00 30       	.word 0x0030
  30930a:	2c 54       	mov.b	r5,@-r12

0030930c <osheap_free>:

static void osheap_free(void *ptr, GUNUSED void *data)
{
  30930c:	2f e6       	mov.l	r14,@-r15
  30930e:	4f 22       	sts.l	pr,@-r15
  309310:	7f f8       	add	#-8,r15
  309312:	6e f3       	mov	r15,r14
  309314:	61 e3       	mov	r14,r1
  309316:	71 c8       	add	#-56,r1
  309318:	11 4f       	mov.l	r4,@(60,r1)
  30931a:	61 e3       	mov	r14,r1
  30931c:	71 c8       	add	#-56,r1
  30931e:	11 5e       	mov.l	r5,@(56,r1)
	return __free(ptr);
  309320:	61 e3       	mov	r14,r1
  309322:	71 c8       	add	#-56,r1
  309324:	54 1f       	mov.l	@(60,r1),r4
  309326:	d1 04       	mov.l	309338 <osheap_free+0x2c>,r1	! 302c44 <__free>
  309328:	41 0b       	jsr	@r1
  30932a:	00 09       	nop	
}
  30932c:	7e 08       	add	#8,r14
  30932e:	6f e3       	mov	r14,r15
  309330:	4f 26       	lds.l	@r15+,pr
  309332:	6e f6       	mov.l	@r15+,r14
  309334:	00 0b       	rts	
  309336:	00 09       	nop	
  309338:	00 30       	.word 0x0030
  30933a:	2c 44       	mov.b	r4,@-r12

0030933c <GINT_CALL_SET_function>:
{
  30933c:	2f e6       	mov.l	r14,@-r15
  30933e:	7f fc       	add	#-4,r15
  309340:	6e f3       	mov	r15,r14
  309342:	61 e3       	mov	r14,r1
  309344:	71 c4       	add	#-60,r1
  309346:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309348:	61 e3       	mov	r14,r1
  30934a:	71 c4       	add	#-60,r1
  30934c:	51 1f       	mov.l	@(60,r1),r1
  30934e:	e2 01       	mov	#1,r2
  309350:	21 22       	mov.l	r2,@r1
	return 0;
  309352:	e1 00       	mov	#0,r1
}
  309354:	60 13       	mov	r1,r0
  309356:	7e 04       	add	#4,r14
  309358:	6f e3       	mov	r14,r15
  30935a:	6e f6       	mov.l	@r15+,r14
  30935c:	00 0b       	rts	
  30935e:	00 09       	nop	

00309360 <GINT_CALL_INC_function>:
{
  309360:	2f e6       	mov.l	r14,@-r15
  309362:	7f fc       	add	#-4,r15
  309364:	6e f3       	mov	r15,r14
  309366:	61 e3       	mov	r14,r1
  309368:	71 c4       	add	#-60,r1
  30936a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30936c:	61 e3       	mov	r14,r1
  30936e:	71 c4       	add	#-60,r1
  309370:	51 1f       	mov.l	@(60,r1),r1
  309372:	61 12       	mov.l	@r1,r1
  309374:	62 13       	mov	r1,r2
  309376:	72 01       	add	#1,r2
  309378:	61 e3       	mov	r14,r1
  30937a:	71 c4       	add	#-60,r1
  30937c:	51 1f       	mov.l	@(60,r1),r1
  30937e:	21 22       	mov.l	r2,@r1
	return 0;
  309380:	e1 00       	mov	#0,r1
}
  309382:	60 13       	mov	r1,r0
  309384:	7e 04       	add	#4,r14
  309386:	6f e3       	mov	r14,r15
  309388:	6e f6       	mov.l	@r15+,r14
  30938a:	00 0b       	rts	
  30938c:	00 09       	nop	

0030938e <GINT_CALL_SET_STOP_function>:
{
  30938e:	2f e6       	mov.l	r14,@-r15
  309390:	7f fc       	add	#-4,r15
  309392:	6e f3       	mov	r15,r14
  309394:	61 e3       	mov	r14,r1
  309396:	71 c4       	add	#-60,r1
  309398:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30939a:	61 e3       	mov	r14,r1
  30939c:	71 c4       	add	#-60,r1
  30939e:	51 1f       	mov.l	@(60,r1),r1
  3093a0:	e2 01       	mov	#1,r2
  3093a2:	21 22       	mov.l	r2,@r1
	return 1;
  3093a4:	e1 01       	mov	#1,r1
}
  3093a6:	60 13       	mov	r1,r0
  3093a8:	7e 04       	add	#4,r14
  3093aa:	6f e3       	mov	r14,r15
  3093ac:	6e f6       	mov.l	@r15+,r14
  3093ae:	00 0b       	rts	
  3093b0:	00 09       	nop	

003093b2 <GINT_CALL_INC_STOP_function>:
{
  3093b2:	2f e6       	mov.l	r14,@-r15
  3093b4:	7f fc       	add	#-4,r15
  3093b6:	6e f3       	mov	r15,r14
  3093b8:	61 e3       	mov	r14,r1
  3093ba:	71 c4       	add	#-60,r1
  3093bc:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  3093be:	61 e3       	mov	r14,r1
  3093c0:	71 c4       	add	#-60,r1
  3093c2:	51 1f       	mov.l	@(60,r1),r1
  3093c4:	61 12       	mov.l	@r1,r1
  3093c6:	62 13       	mov	r1,r2
  3093c8:	72 01       	add	#1,r2
  3093ca:	61 e3       	mov	r14,r1
  3093cc:	71 c4       	add	#-60,r1
  3093ce:	51 1f       	mov.l	@(60,r1),r1
  3093d0:	21 22       	mov.l	r2,@r1
	return 1;
  3093d2:	e1 01       	mov	#1,r1
}
  3093d4:	60 13       	mov	r1,r0
  3093d6:	7e 04       	add	#4,r14
  3093d8:	6f e3       	mov	r14,r15
  3093da:	6e f6       	mov.l	@r15+,r14
  3093dc:	00 0b       	rts	
  3093de:	00 09       	nop	

003093e0 <dprint_opt>:
#include <stdio.h>

/* dprint(): Display a formatted string */
void dprint_opt(int x, int y, int fg, int bg, int halign, int valign,
	char const *format, ...)
{
  3093e0:	2f e6       	mov.l	r14,@-r15
  3093e2:	4f 22       	sts.l	pr,@-r15
  3093e4:	91 45       	mov.w	309472 <dprint_opt+0x92>,r1	! 224
  3093e6:	3f 18       	sub	r1,r15
  3093e8:	6e f3       	mov	r15,r14
  3093ea:	61 e3       	mov	r14,r1
  3093ec:	71 e4       	add	#-28,r1
  3093ee:	11 4e       	mov.l	r4,@(56,r1)
  3093f0:	61 e3       	mov	r14,r1
  3093f2:	71 e4       	add	#-28,r1
  3093f4:	11 5d       	mov.l	r5,@(52,r1)
  3093f6:	61 e3       	mov	r14,r1
  3093f8:	71 e4       	add	#-28,r1
  3093fa:	11 6c       	mov.l	r6,@(48,r1)
  3093fc:	61 e3       	mov	r14,r1
  3093fe:	71 e4       	add	#-28,r1
  309400:	11 7b       	mov.l	r7,@(44,r1)
	char str[512];
	va_list args;

	va_start(args, format);
  309402:	92 37       	mov.w	309474 <dprint_opt+0x94>,r2	! 238
  309404:	32 ec       	add	r14,r2
  309406:	61 e3       	mov	r14,r1
  309408:	71 e4       	add	#-28,r1
  30940a:	11 2f       	mov.l	r2,@(60,r1)
	vsnprintf(str, 512, format, args);
  30940c:	61 e3       	mov	r14,r1
  30940e:	71 e4       	add	#-28,r1
  309410:	53 1f       	mov.l	@(60,r1),r3
  309412:	92 30       	mov.w	309476 <dprint_opt+0x96>,r2	! 200
  309414:	61 e3       	mov	r14,r1
  309416:	71 24       	add	#36,r1
  309418:	67 33       	mov	r3,r7
  30941a:	93 2d       	mov.w	309478 <dprint_opt+0x98>,r3	! 1fc
  30941c:	33 ec       	add	r14,r3
  30941e:	56 3e       	mov.l	@(56,r3),r6
  309420:	65 23       	mov	r2,r5
  309422:	64 13       	mov	r1,r4
  309424:	d1 15       	mov.l	30947c <dprint_opt+0x9c>,r1	! 30acc0 <vsnprintf>
  309426:	41 0b       	jsr	@r1
  309428:	00 09       	nop	
	va_end(args);

	dtext_opt(x, y, fg, bg, halign, valign, str);
  30942a:	67 e3       	mov	r14,r7
  30942c:	77 e4       	add	#-28,r7
  30942e:	63 e3       	mov	r14,r3
  309430:	73 e4       	add	#-28,r3
  309432:	62 e3       	mov	r14,r2
  309434:	72 e4       	add	#-28,r2
  309436:	61 e3       	mov	r14,r1
  309438:	71 e4       	add	#-28,r1
  30943a:	e6 ff       	mov	#-1,r6
  30943c:	1f 63       	mov.l	r6,@(12,r15)
  30943e:	66 e3       	mov	r14,r6
  309440:	76 24       	add	#36,r6
  309442:	1f 62       	mov.l	r6,@(8,r15)
  309444:	95 18       	mov.w	309478 <dprint_opt+0x98>,r5	! 1fc
  309446:	35 ec       	add	r14,r5
  309448:	56 5d       	mov.l	@(52,r5),r6
  30944a:	1f 61       	mov.l	r6,@(4,r15)
  30944c:	95 14       	mov.w	309478 <dprint_opt+0x98>,r5	! 1fc
  30944e:	35 ec       	add	r14,r5
  309450:	56 5c       	mov.l	@(48,r5),r6
  309452:	2f 62       	mov.l	r6,@r15
  309454:	57 7b       	mov.l	@(44,r7),r7
  309456:	56 3c       	mov.l	@(48,r3),r6
  309458:	55 2d       	mov.l	@(52,r2),r5
  30945a:	54 1e       	mov.l	@(56,r1),r4
  30945c:	d1 08       	mov.l	309480 <dprint_opt+0xa0>,r1	! 30a500 <dtext_opt>
  30945e:	41 0b       	jsr	@r1
  309460:	00 09       	nop	
}
  309462:	00 09       	nop	
  309464:	97 05       	mov.w	309472 <dprint_opt+0x92>,r7	! 224
  309466:	3e 7c       	add	r7,r14
  309468:	6f e3       	mov	r14,r15
  30946a:	4f 26       	lds.l	@r15+,pr
  30946c:	6e f6       	mov.l	@r15+,r14
  30946e:	00 0b       	rts	
  309470:	00 09       	nop	
  309472:	02 24       	mov.b	r2,@(r0,r2)
  309474:	02 38       	.word 0x0238
  309476:	02 00       	.word 0x0200
  309478:	01 fc       	mov.b	@(r0,r15),r1
  30947a:	00 09       	nop	
  30947c:	00 30       	.word 0x0030
  30947e:	ac c0       	bra	308e02 <gint_default_panic+0x216>
  309480:	00 30       	.word 0x0030
  309482:	a5 00       	bra	309e86 <drsize+0xd6>

00309484 <dprint>:

/* dprint(): Simple version of dprint_op() with defaults */
void dprint(int x, int y, int fg, char const *format, ...)
{
  309484:	2f e6       	mov.l	r14,@-r15
  309486:	4f 22       	sts.l	pr,@-r15
  309488:	91 36       	mov.w	3094f8 <dprint+0x74>,r1	! 214
  30948a:	3f 18       	sub	r1,r15
  30948c:	6e f3       	mov	r15,r14
  30948e:	61 e3       	mov	r14,r1
  309490:	71 d4       	add	#-44,r1
  309492:	11 4e       	mov.l	r4,@(56,r1)
  309494:	61 e3       	mov	r14,r1
  309496:	71 d4       	add	#-44,r1
  309498:	11 5d       	mov.l	r5,@(52,r1)
  30949a:	61 e3       	mov	r14,r1
  30949c:	71 d4       	add	#-44,r1
  30949e:	11 6c       	mov.l	r6,@(48,r1)
  3094a0:	61 e3       	mov	r14,r1
  3094a2:	71 d4       	add	#-44,r1
  3094a4:	11 7b       	mov.l	r7,@(44,r1)
	char str[512];
	va_list args;

	va_start(args, format);
  3094a6:	92 28       	mov.w	3094fa <dprint+0x76>,r2	! 21c
  3094a8:	32 ec       	add	r14,r2
  3094aa:	61 e3       	mov	r14,r1
  3094ac:	71 d4       	add	#-44,r1
  3094ae:	11 2f       	mov.l	r2,@(60,r1)
	vsnprintf(str, 512, format, args);
  3094b0:	61 e3       	mov	r14,r1
  3094b2:	71 d4       	add	#-44,r1
  3094b4:	57 1f       	mov.l	@(60,r1),r7
  3094b6:	61 e3       	mov	r14,r1
  3094b8:	71 d4       	add	#-44,r1
  3094ba:	93 1f       	mov.w	3094fc <dprint+0x78>,r3	! 200
  3094bc:	62 e3       	mov	r14,r2
  3094be:	72 14       	add	#20,r2
  3094c0:	56 1b       	mov.l	@(44,r1),r6
  3094c2:	65 33       	mov	r3,r5
  3094c4:	64 23       	mov	r2,r4
  3094c6:	d1 0e       	mov.l	309500 <dprint+0x7c>,r1	! 30acc0 <vsnprintf>
  3094c8:	41 0b       	jsr	@r1
  3094ca:	00 09       	nop	
	va_end(args);

	dtext(x, y, fg, str);
  3094cc:	67 e3       	mov	r14,r7
  3094ce:	77 14       	add	#20,r7
  3094d0:	63 e3       	mov	r14,r3
  3094d2:	73 d4       	add	#-44,r3
  3094d4:	62 e3       	mov	r14,r2
  3094d6:	72 d4       	add	#-44,r2
  3094d8:	61 e3       	mov	r14,r1
  3094da:	71 d4       	add	#-44,r1
  3094dc:	56 3c       	mov.l	@(48,r3),r6
  3094de:	55 2d       	mov.l	@(52,r2),r5
  3094e0:	54 1e       	mov.l	@(56,r1),r4
  3094e2:	d1 08       	mov.l	309504 <dprint+0x80>,r1	! 3095ac <dtext>
  3094e4:	41 0b       	jsr	@r1
  3094e6:	00 09       	nop	
}
  3094e8:	00 09       	nop	
  3094ea:	97 05       	mov.w	3094f8 <dprint+0x74>,r7	! 214
  3094ec:	3e 7c       	add	r7,r14
  3094ee:	6f e3       	mov	r14,r15
  3094f0:	4f 26       	lds.l	@r15+,pr
  3094f2:	6e f6       	mov.l	@r15+,r14
  3094f4:	00 0b       	rts	
  3094f6:	00 09       	nop	
  3094f8:	02 14       	mov.b	r1,@(r0,r2)
  3094fa:	02 1c       	mov.b	@(r0,r1),r2
  3094fc:	02 00       	.word 0x0200
  3094fe:	00 09       	nop	
  309500:	00 30       	.word 0x0030
  309502:	ac c0       	bra	308e86 <gint_default_panic+0x29a>
  309504:	00 30       	.word 0x0030
  309506:	95 ac       	mov.w	309662 <GINT_CALL_SET_STOP_function+0x4>,r5	! 6ef3

00309508 <GINT_CALL_SET_function>:
{
  309508:	2f e6       	mov.l	r14,@-r15
  30950a:	7f fc       	add	#-4,r15
  30950c:	6e f3       	mov	r15,r14
  30950e:	61 e3       	mov	r14,r1
  309510:	71 c4       	add	#-60,r1
  309512:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309514:	61 e3       	mov	r14,r1
  309516:	71 c4       	add	#-60,r1
  309518:	51 1f       	mov.l	@(60,r1),r1
  30951a:	e2 01       	mov	#1,r2
  30951c:	21 22       	mov.l	r2,@r1
	return 0;
  30951e:	e1 00       	mov	#0,r1
}
  309520:	60 13       	mov	r1,r0
  309522:	7e 04       	add	#4,r14
  309524:	6f e3       	mov	r14,r15
  309526:	6e f6       	mov.l	@r15+,r14
  309528:	00 0b       	rts	
  30952a:	00 09       	nop	

0030952c <GINT_CALL_INC_function>:
{
  30952c:	2f e6       	mov.l	r14,@-r15
  30952e:	7f fc       	add	#-4,r15
  309530:	6e f3       	mov	r15,r14
  309532:	61 e3       	mov	r14,r1
  309534:	71 c4       	add	#-60,r1
  309536:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  309538:	61 e3       	mov	r14,r1
  30953a:	71 c4       	add	#-60,r1
  30953c:	51 1f       	mov.l	@(60,r1),r1
  30953e:	61 12       	mov.l	@r1,r1
  309540:	62 13       	mov	r1,r2
  309542:	72 01       	add	#1,r2
  309544:	61 e3       	mov	r14,r1
  309546:	71 c4       	add	#-60,r1
  309548:	51 1f       	mov.l	@(60,r1),r1
  30954a:	21 22       	mov.l	r2,@r1
	return 0;
  30954c:	e1 00       	mov	#0,r1
}
  30954e:	60 13       	mov	r1,r0
  309550:	7e 04       	add	#4,r14
  309552:	6f e3       	mov	r14,r15
  309554:	6e f6       	mov.l	@r15+,r14
  309556:	00 0b       	rts	
  309558:	00 09       	nop	

0030955a <GINT_CALL_SET_STOP_function>:
{
  30955a:	2f e6       	mov.l	r14,@-r15
  30955c:	7f fc       	add	#-4,r15
  30955e:	6e f3       	mov	r15,r14
  309560:	61 e3       	mov	r14,r1
  309562:	71 c4       	add	#-60,r1
  309564:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309566:	61 e3       	mov	r14,r1
  309568:	71 c4       	add	#-60,r1
  30956a:	51 1f       	mov.l	@(60,r1),r1
  30956c:	e2 01       	mov	#1,r2
  30956e:	21 22       	mov.l	r2,@r1
	return 1;
  309570:	e1 01       	mov	#1,r1
}
  309572:	60 13       	mov	r1,r0
  309574:	7e 04       	add	#4,r14
  309576:	6f e3       	mov	r14,r15
  309578:	6e f6       	mov.l	@r15+,r14
  30957a:	00 0b       	rts	
  30957c:	00 09       	nop	

0030957e <GINT_CALL_INC_STOP_function>:
{
  30957e:	2f e6       	mov.l	r14,@-r15
  309580:	7f fc       	add	#-4,r15
  309582:	6e f3       	mov	r15,r14
  309584:	61 e3       	mov	r14,r1
  309586:	71 c4       	add	#-60,r1
  309588:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30958a:	61 e3       	mov	r14,r1
  30958c:	71 c4       	add	#-60,r1
  30958e:	51 1f       	mov.l	@(60,r1),r1
  309590:	61 12       	mov.l	@r1,r1
  309592:	62 13       	mov	r1,r2
  309594:	72 01       	add	#1,r2
  309596:	61 e3       	mov	r14,r1
  309598:	71 c4       	add	#-60,r1
  30959a:	51 1f       	mov.l	@(60,r1),r1
  30959c:	21 22       	mov.l	r2,@r1
	return 1;
  30959e:	e1 01       	mov	#1,r1
}
  3095a0:	60 13       	mov	r1,r0
  3095a2:	7e 04       	add	#4,r14
  3095a4:	6f e3       	mov	r14,r15
  3095a6:	6e f6       	mov.l	@r15+,r14
  3095a8:	00 0b       	rts	
  3095aa:	00 09       	nop	

003095ac <dtext>:
#include <gint/display.h>

/* dtext(): Simple version of dtext_opt() with defaults */
void dtext(int x, int y, int fg, char const *str)
{
  3095ac:	2f e6       	mov.l	r14,@-r15
  3095ae:	4f 22       	sts.l	pr,@-r15
  3095b0:	7f e0       	add	#-32,r15
  3095b2:	6e f3       	mov	r15,r14
  3095b4:	61 e3       	mov	r14,r1
  3095b6:	71 e0       	add	#-32,r1
  3095b8:	11 4f       	mov.l	r4,@(60,r1)
  3095ba:	61 e3       	mov	r14,r1
  3095bc:	71 e0       	add	#-32,r1
  3095be:	11 5e       	mov.l	r5,@(56,r1)
  3095c0:	61 e3       	mov	r14,r1
  3095c2:	71 e0       	add	#-32,r1
  3095c4:	11 6d       	mov.l	r6,@(52,r1)
  3095c6:	61 e3       	mov	r14,r1
  3095c8:	71 e0       	add	#-32,r1
  3095ca:	11 7c       	mov.l	r7,@(48,r1)
	dtext_opt(x, y, fg, C_NONE, DTEXT_LEFT, DTEXT_TOP, str);
  3095cc:	63 e3       	mov	r14,r3
  3095ce:	73 e0       	add	#-32,r3
  3095d0:	62 e3       	mov	r14,r2
  3095d2:	72 e0       	add	#-32,r2
  3095d4:	61 e3       	mov	r14,r1
  3095d6:	71 e0       	add	#-32,r1
  3095d8:	e7 ff       	mov	#-1,r7
  3095da:	1f 73       	mov.l	r7,@(12,r15)
  3095dc:	67 e3       	mov	r14,r7
  3095de:	77 e0       	add	#-32,r7
  3095e0:	57 7c       	mov.l	@(48,r7),r7
  3095e2:	1f 72       	mov.l	r7,@(8,r15)
  3095e4:	e7 00       	mov	#0,r7
  3095e6:	1f 71       	mov.l	r7,@(4,r15)
  3095e8:	e7 00       	mov	#0,r7
  3095ea:	2f 72       	mov.l	r7,@r15
  3095ec:	e7 ff       	mov	#-1,r7
  3095ee:	56 3d       	mov.l	@(52,r3),r6
  3095f0:	55 2e       	mov.l	@(56,r2),r5
  3095f2:	54 1f       	mov.l	@(60,r1),r4
  3095f4:	d1 04       	mov.l	309608 <dtext+0x5c>,r1	! 30a500 <dtext_opt>
  3095f6:	41 0b       	jsr	@r1
  3095f8:	00 09       	nop	
}
  3095fa:	00 09       	nop	
  3095fc:	7e 20       	add	#32,r14
  3095fe:	6f e3       	mov	r14,r15
  309600:	4f 26       	lds.l	@r15+,pr
  309602:	6e f6       	mov.l	@r15+,r14
  309604:	00 0b       	rts	
  309606:	00 09       	nop	
  309608:	00 30       	.word 0x0030
  30960a:	a5 00       	bra	30a00e <topti_glyph+0x4a>

0030960c <GINT_CALL_SET_function>:
{
  30960c:	2f e6       	mov.l	r14,@-r15
  30960e:	7f fc       	add	#-4,r15
  309610:	6e f3       	mov	r15,r14
  309612:	61 e3       	mov	r14,r1
  309614:	71 c4       	add	#-60,r1
  309616:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309618:	61 e3       	mov	r14,r1
  30961a:	71 c4       	add	#-60,r1
  30961c:	51 1f       	mov.l	@(60,r1),r1
  30961e:	e2 01       	mov	#1,r2
  309620:	21 22       	mov.l	r2,@r1
	return 0;
  309622:	e1 00       	mov	#0,r1
}
  309624:	60 13       	mov	r1,r0
  309626:	7e 04       	add	#4,r14
  309628:	6f e3       	mov	r14,r15
  30962a:	6e f6       	mov.l	@r15+,r14
  30962c:	00 0b       	rts	
  30962e:	00 09       	nop	

00309630 <GINT_CALL_INC_function>:
{
  309630:	2f e6       	mov.l	r14,@-r15
  309632:	7f fc       	add	#-4,r15
  309634:	6e f3       	mov	r15,r14
  309636:	61 e3       	mov	r14,r1
  309638:	71 c4       	add	#-60,r1
  30963a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30963c:	61 e3       	mov	r14,r1
  30963e:	71 c4       	add	#-60,r1
  309640:	51 1f       	mov.l	@(60,r1),r1
  309642:	61 12       	mov.l	@r1,r1
  309644:	62 13       	mov	r1,r2
  309646:	72 01       	add	#1,r2
  309648:	61 e3       	mov	r14,r1
  30964a:	71 c4       	add	#-60,r1
  30964c:	51 1f       	mov.l	@(60,r1),r1
  30964e:	21 22       	mov.l	r2,@r1
	return 0;
  309650:	e1 00       	mov	#0,r1
}
  309652:	60 13       	mov	r1,r0
  309654:	7e 04       	add	#4,r14
  309656:	6f e3       	mov	r14,r15
  309658:	6e f6       	mov.l	@r15+,r14
  30965a:	00 0b       	rts	
  30965c:	00 09       	nop	

0030965e <GINT_CALL_SET_STOP_function>:
{
  30965e:	2f e6       	mov.l	r14,@-r15
  309660:	7f fc       	add	#-4,r15
  309662:	6e f3       	mov	r15,r14
  309664:	61 e3       	mov	r14,r1
  309666:	71 c4       	add	#-60,r1
  309668:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30966a:	61 e3       	mov	r14,r1
  30966c:	71 c4       	add	#-60,r1
  30966e:	51 1f       	mov.l	@(60,r1),r1
  309670:	e2 01       	mov	#1,r2
  309672:	21 22       	mov.l	r2,@r1
	return 1;
  309674:	e1 01       	mov	#1,r1
}
  309676:	60 13       	mov	r1,r0
  309678:	7e 04       	add	#4,r14
  30967a:	6f e3       	mov	r14,r15
  30967c:	6e f6       	mov.l	@r15+,r14
  30967e:	00 0b       	rts	
  309680:	00 09       	nop	

00309682 <GINT_CALL_INC_STOP_function>:
{
  309682:	2f e6       	mov.l	r14,@-r15
  309684:	7f fc       	add	#-4,r15
  309686:	6e f3       	mov	r15,r14
  309688:	61 e3       	mov	r14,r1
  30968a:	71 c4       	add	#-60,r1
  30968c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30968e:	61 e3       	mov	r14,r1
  309690:	71 c4       	add	#-60,r1
  309692:	51 1f       	mov.l	@(60,r1),r1
  309694:	61 12       	mov.l	@r1,r1
  309696:	62 13       	mov	r1,r2
  309698:	72 01       	add	#1,r2
  30969a:	61 e3       	mov	r14,r1
  30969c:	71 c4       	add	#-60,r1
  30969e:	51 1f       	mov.l	@(60,r1),r1
  3096a0:	21 22       	mov.l	r2,@r1
	return 1;
  3096a2:	e1 01       	mov	#1,r1
}
  3096a4:	60 13       	mov	r1,r0
  3096a6:	7e 04       	add	#4,r14
  3096a8:	6f e3       	mov	r14,r15
  3096aa:	6e f6       	mov.l	@r15+,r14
  3096ac:	00 0b       	rts	
  3096ae:	00 09       	nop	

003096b0 <dfont>:

#include "../render/render.h"

/* dfont(): Set the default font for text rendering */
font_t const *dfont(font_t const * font)
{
  3096b0:	2f e6       	mov.l	r14,@-r15
  3096b2:	7f f8       	add	#-8,r15
  3096b4:	6e f3       	mov	r15,r14
  3096b6:	61 e3       	mov	r14,r1
  3096b8:	71 c8       	add	#-56,r1
  3096ba:	11 4e       	mov.l	r4,@(56,r1)
	font_t const *old_font = topti_font;
  3096bc:	61 e3       	mov	r14,r1
  3096be:	71 c8       	add	#-56,r1
  3096c0:	d2 0c       	mov.l	3096f4 <dfont+0x44>,r2	! 81016ec <topti_font>
  3096c2:	62 22       	mov.l	@r2,r2
  3096c4:	11 2f       	mov.l	r2,@(60,r1)

	topti_font = font ? font : gint_default_font;
  3096c6:	61 e3       	mov	r14,r1
  3096c8:	71 c8       	add	#-56,r1
  3096ca:	51 1e       	mov.l	@(56,r1),r1
  3096cc:	21 18       	tst	r1,r1
  3096ce:	89 04       	bt	3096da <dfont+0x2a>
  3096d0:	61 e3       	mov	r14,r1
  3096d2:	71 c8       	add	#-56,r1
  3096d4:	51 1e       	mov.l	@(56,r1),r1
  3096d6:	a0 02       	bra	3096de <dfont+0x2e>
  3096d8:	00 09       	nop	
  3096da:	d1 07       	mov.l	3096f8 <dfont+0x48>,r1	! 81016e8 <gint_default_font>
  3096dc:	61 12       	mov.l	@r1,r1
  3096de:	d2 05       	mov.l	3096f4 <dfont+0x44>,r2	! 81016ec <topti_font>
  3096e0:	22 12       	mov.l	r1,@r2
	return old_font;
  3096e2:	61 e3       	mov	r14,r1
  3096e4:	71 c8       	add	#-56,r1
  3096e6:	51 1f       	mov.l	@(60,r1),r1
}
  3096e8:	60 13       	mov	r1,r0
  3096ea:	7e 08       	add	#8,r14
  3096ec:	6f e3       	mov	r14,r15
  3096ee:	6e f6       	mov.l	@r15+,r14
  3096f0:	00 0b       	rts	
  3096f2:	00 09       	nop	
  3096f4:	08 10       	.word 0x0810
  3096f6:	16 ec       	mov.l	r14,@(48,r6)
  3096f8:	08 10       	.word 0x0810
  3096fa:	16 e8       	mov.l	r14,@(32,r6)

003096fc <dfont_default>:

/* dfont_default(): Get gint's default font */
font_t const *dfont_default(void)
{
  3096fc:	2f e6       	mov.l	r14,@-r15
  3096fe:	6e f3       	mov	r15,r14
	return gint_default_font;
  309700:	d1 03       	mov.l	309710 <dfont_default+0x14>,r1	! 81016e8 <gint_default_font>
  309702:	61 12       	mov.l	@r1,r1
}
  309704:	60 13       	mov	r1,r0
  309706:	6f e3       	mov	r14,r15
  309708:	6e f6       	mov.l	@r15+,r14
  30970a:	00 0b       	rts	
  30970c:	00 09       	nop	
  30970e:	00 09       	nop	
  309710:	08 10       	.word 0x0810
  309712:	16 e8       	mov.l	r14,@(32,r6)

00309714 <topti_glyph_index>:

/* topti_glyph_index(): Obtain the glyph index of a Unicode code point */
int topti_glyph_index(font_t const *f, uint32_t code_point)
{
  309714:	2f e6       	mov.l	r14,@-r15
  309716:	7f ec       	add	#-20,r15
  309718:	6e f3       	mov	r15,r14
  30971a:	61 e3       	mov	r14,r1
  30971c:	71 d4       	add	#-44,r1
  30971e:	11 4c       	mov.l	r4,@(48,r1)
  309720:	61 e3       	mov	r14,r1
  309722:	71 d4       	add	#-44,r1
  309724:	11 5b       	mov.l	r5,@(44,r1)
	int glyph_start = 0;
  309726:	61 e3       	mov	r14,r1
  309728:	71 d4       	add	#-44,r1
  30972a:	e2 00       	mov	#0,r2
  30972c:	11 2f       	mov.l	r2,@(60,r1)

	for(int i = 0; i < f->block_count; i++)
  30972e:	61 e3       	mov	r14,r1
  309730:	71 d4       	add	#-44,r1
  309732:	e2 00       	mov	#0,r2
  309734:	11 2e       	mov.l	r2,@(56,r1)
  309736:	a0 54       	bra	3097e2 <topti_glyph_index+0xce>
  309738:	00 09       	nop	
	{
		int diff = code_point - f->blocks[i].start;
  30973a:	61 e3       	mov	r14,r1
  30973c:	71 d4       	add	#-44,r1
  30973e:	51 1c       	mov.l	@(48,r1),r1
  309740:	52 14       	mov.l	@(16,r1),r2
  309742:	61 e3       	mov	r14,r1
  309744:	71 d4       	add	#-44,r1
  309746:	51 1e       	mov.l	@(56,r1),r1
  309748:	41 08       	shll2	r1
  30974a:	31 2c       	add	r2,r1
  30974c:	61 12       	mov.l	@r1,r1
  30974e:	e0 f4       	mov	#-12,r0
  309750:	41 0d       	shld	r0,r1
  309752:	63 13       	mov	r1,r3
  309754:	61 e3       	mov	r14,r1
  309756:	71 d4       	add	#-44,r1
  309758:	51 1b       	mov.l	@(44,r1),r1
  30975a:	62 13       	mov	r1,r2
  30975c:	32 38       	sub	r3,r2
  30975e:	61 e3       	mov	r14,r1
  309760:	71 d4       	add	#-44,r1
  309762:	11 2d       	mov.l	r2,@(52,r1)
		if(diff >= 0 && diff < f->blocks[i].length)
  309764:	61 e3       	mov	r14,r1
  309766:	71 d4       	add	#-44,r1
  309768:	51 1d       	mov.l	@(52,r1),r1
  30976a:	41 11       	cmp/pz	r1
  30976c:	8b 1c       	bf	3097a8 <topti_glyph_index+0x94>
  30976e:	61 e3       	mov	r14,r1
  309770:	71 d4       	add	#-44,r1
  309772:	51 1c       	mov.l	@(48,r1),r1
  309774:	52 14       	mov.l	@(16,r1),r2
  309776:	61 e3       	mov	r14,r1
  309778:	71 d4       	add	#-44,r1
  30977a:	51 1e       	mov.l	@(56,r1),r1
  30977c:	41 08       	shll2	r1
  30977e:	31 2c       	add	r2,r1
  309780:	61 12       	mov.l	@r1,r1
  309782:	62 13       	mov	r1,r2
  309784:	91 40       	mov.w	309808 <topti_glyph_index+0xf4>,r1	! fff
  309786:	21 29       	and	r2,r1
  309788:	61 1d       	extu.w	r1,r1
  30978a:	62 13       	mov	r1,r2
  30978c:	61 e3       	mov	r14,r1
  30978e:	71 d4       	add	#-44,r1
  309790:	51 1d       	mov.l	@(52,r1),r1
  309792:	31 23       	cmp/ge	r2,r1
  309794:	89 08       	bt	3097a8 <topti_glyph_index+0x94>
		{
			return glyph_start + diff;
  309796:	62 e3       	mov	r14,r2
  309798:	72 d4       	add	#-44,r2
  30979a:	61 e3       	mov	r14,r1
  30979c:	71 d4       	add	#-44,r1
  30979e:	52 2f       	mov.l	@(60,r2),r2
  3097a0:	51 1d       	mov.l	@(52,r1),r1
  3097a2:	31 2c       	add	r2,r1
  3097a4:	a0 2a       	bra	3097fc <topti_glyph_index+0xe8>
  3097a6:	00 09       	nop	
		}

		glyph_start += f->blocks[i].length;
  3097a8:	61 e3       	mov	r14,r1
  3097aa:	71 d4       	add	#-44,r1
  3097ac:	51 1c       	mov.l	@(48,r1),r1
  3097ae:	52 14       	mov.l	@(16,r1),r2
  3097b0:	61 e3       	mov	r14,r1
  3097b2:	71 d4       	add	#-44,r1
  3097b4:	51 1e       	mov.l	@(56,r1),r1
  3097b6:	41 08       	shll2	r1
  3097b8:	31 2c       	add	r2,r1
  3097ba:	61 12       	mov.l	@r1,r1
  3097bc:	62 13       	mov	r1,r2
  3097be:	91 23       	mov.w	309808 <topti_glyph_index+0xf4>,r1	! fff
  3097c0:	21 29       	and	r2,r1
  3097c2:	61 1d       	extu.w	r1,r1
  3097c4:	63 13       	mov	r1,r3
  3097c6:	61 e3       	mov	r14,r1
  3097c8:	71 d4       	add	#-44,r1
  3097ca:	62 e3       	mov	r14,r2
  3097cc:	72 d4       	add	#-44,r2
  3097ce:	52 2f       	mov.l	@(60,r2),r2
  3097d0:	32 3c       	add	r3,r2
  3097d2:	11 2f       	mov.l	r2,@(60,r1)
	for(int i = 0; i < f->block_count; i++)
  3097d4:	61 e3       	mov	r14,r1
  3097d6:	71 d4       	add	#-44,r1
  3097d8:	62 e3       	mov	r14,r2
  3097da:	72 d4       	add	#-44,r2
  3097dc:	52 2e       	mov.l	@(56,r2),r2
  3097de:	72 01       	add	#1,r2
  3097e0:	11 2e       	mov.l	r2,@(56,r1)
  3097e2:	61 e3       	mov	r14,r1
  3097e4:	71 d4       	add	#-44,r1
  3097e6:	51 1c       	mov.l	@(48,r1),r1
  3097e8:	84 17       	mov.b	@(7,r1),r0
  3097ea:	61 03       	mov	r0,r1
  3097ec:	61 1c       	extu.b	r1,r1
  3097ee:	62 13       	mov	r1,r2
  3097f0:	61 e3       	mov	r14,r1
  3097f2:	71 d4       	add	#-44,r1
  3097f4:	51 1e       	mov.l	@(56,r1),r1
  3097f6:	31 23       	cmp/ge	r2,r1
  3097f8:	8b 9f       	bf	30973a <topti_glyph_index+0x26>
	}

	return -1;
  3097fa:	e1 ff       	mov	#-1,r1
}
  3097fc:	60 13       	mov	r1,r0
  3097fe:	7e 14       	add	#20,r14
  309800:	6f e3       	mov	r14,r15
  309802:	6e f6       	mov.l	@r15+,r14
  309804:	00 0b       	rts	
  309806:	00 09       	nop	
  309808:	0f ff       	mac.l	@r15+,@r15+

0030980a <topti_offset>:

/* topti_offset(): Use a font index to find the location of a glyph */
int topti_offset(font_t const *f, uint glyph)
{
  30980a:	2f e6       	mov.l	r14,@-r15
  30980c:	7f ec       	add	#-20,r15
  30980e:	6e f3       	mov	r15,r14
  309810:	61 e3       	mov	r14,r1
  309812:	71 d4       	add	#-44,r1
  309814:	11 4c       	mov.l	r4,@(48,r1)
  309816:	61 e3       	mov	r14,r1
  309818:	71 d4       	add	#-44,r1
  30981a:	11 5b       	mov.l	r5,@(44,r1)
	/* Non-proportional fonts don't need an index */
	if(!f->prop) return glyph * f->storage_size;
  30981c:	61 e3       	mov	r14,r1
  30981e:	71 d4       	add	#-44,r1
  309820:	51 1c       	mov.l	@(48,r1),r1
  309822:	84 14       	mov.b	@(4,r1),r0
  309824:	61 03       	mov	r0,r1
  309826:	61 1c       	extu.b	r1,r1
  309828:	e2 01       	mov	#1,r2
  30982a:	21 29       	and	r2,r1
  30982c:	61 1c       	extu.b	r1,r1
  30982e:	21 18       	tst	r1,r1
  309830:	8b 0d       	bf	30984e <topti_offset+0x44>
  309832:	61 e3       	mov	r14,r1
  309834:	71 d4       	add	#-44,r1
  309836:	51 1c       	mov.l	@(48,r1),r1
  309838:	85 1d       	mov.w	@(26,r1),r0
  30983a:	61 03       	mov	r0,r1
  30983c:	61 1d       	extu.w	r1,r1
  30983e:	62 13       	mov	r1,r2
  309840:	61 e3       	mov	r14,r1
  309842:	71 d4       	add	#-44,r1
  309844:	51 1b       	mov.l	@(44,r1),r1
  309846:	02 17       	mul.l	r1,r2
  309848:	01 1a       	sts	macl,r1
  30984a:	a0 4f       	bra	3098ec <topti_offset+0xe2>
  30984c:	00 09       	nop	

	uint8_t const *width = f->glyph_width;
  30984e:	61 e3       	mov	r14,r1
  309850:	71 d4       	add	#-44,r1
  309852:	62 e3       	mov	r14,r2
  309854:	72 d4       	add	#-44,r2
  309856:	52 2c       	mov.l	@(48,r2),r2
  309858:	52 27       	mov.l	@(28,r2),r2
  30985a:	11 2d       	mov.l	r2,@(52,r1)

	/* The index gives us the position of all glyphs whose IDs are
	   multiples of 8. Start with a close one and iterate from there. */
	uint g = glyph & ~0x7;
  30985c:	61 e3       	mov	r14,r1
  30985e:	71 d4       	add	#-44,r1
  309860:	62 e3       	mov	r14,r2
  309862:	72 d4       	add	#-44,r2
  309864:	53 2b       	mov.l	@(44,r2),r3
  309866:	e2 f8       	mov	#-8,r2
  309868:	22 39       	and	r3,r2
  30986a:	11 2f       	mov.l	r2,@(60,r1)
	int offset = f->glyph_index[g >> 3];
  30986c:	61 e3       	mov	r14,r1
  30986e:	71 d4       	add	#-44,r1
  309870:	51 1c       	mov.l	@(48,r1),r1
  309872:	52 16       	mov.l	@(24,r1),r2
  309874:	61 e3       	mov	r14,r1
  309876:	71 d4       	add	#-44,r1
  309878:	51 1f       	mov.l	@(60,r1),r1
  30987a:	41 09       	shlr2	r1
  30987c:	41 01       	shlr	r1
  30987e:	31 1c       	add	r1,r1
  309880:	31 2c       	add	r2,r1
  309882:	61 11       	mov.w	@r1,r1
  309884:	62 1d       	extu.w	r1,r2
  309886:	61 e3       	mov	r14,r1
  309888:	71 d4       	add	#-44,r1
  30988a:	11 2e       	mov.l	r2,@(56,r1)

	/* Traverse the width array (which is in bits) while converting to
	   longword size */
	while(g < glyph) offset += (width[g++] * f->data_height + 31) >> 5;
  30988c:	a0 23       	bra	3098d6 <topti_offset+0xcc>
  30988e:	00 09       	nop	
  309890:	61 e3       	mov	r14,r1
  309892:	71 d4       	add	#-44,r1
  309894:	51 1f       	mov.l	@(60,r1),r1
  309896:	62 e3       	mov	r14,r2
  309898:	72 d4       	add	#-44,r2
  30989a:	63 13       	mov	r1,r3
  30989c:	73 01       	add	#1,r3
  30989e:	12 3f       	mov.l	r3,@(60,r2)
  3098a0:	62 e3       	mov	r14,r2
  3098a2:	72 d4       	add	#-44,r2
  3098a4:	52 2d       	mov.l	@(52,r2),r2
  3098a6:	31 2c       	add	r2,r1
  3098a8:	61 10       	mov.b	@r1,r1
  3098aa:	61 1c       	extu.b	r1,r1
  3098ac:	62 13       	mov	r1,r2
  3098ae:	61 e3       	mov	r14,r1
  3098b0:	71 d4       	add	#-44,r1
  3098b2:	51 1c       	mov.l	@(48,r1),r1
  3098b4:	84 16       	mov.b	@(6,r1),r0
  3098b6:	61 03       	mov	r0,r1
  3098b8:	61 1c       	extu.b	r1,r1
  3098ba:	02 17       	mul.l	r1,r2
  3098bc:	01 1a       	sts	macl,r1
  3098be:	62 13       	mov	r1,r2
  3098c0:	72 1f       	add	#31,r2
  3098c2:	e1 fb       	mov	#-5,r1
  3098c4:	63 23       	mov	r2,r3
  3098c6:	43 1c       	shad	r1,r3
  3098c8:	61 e3       	mov	r14,r1
  3098ca:	71 d4       	add	#-44,r1
  3098cc:	62 e3       	mov	r14,r2
  3098ce:	72 d4       	add	#-44,r2
  3098d0:	52 2e       	mov.l	@(56,r2),r2
  3098d2:	32 3c       	add	r3,r2
  3098d4:	11 2e       	mov.l	r2,@(56,r1)
  3098d6:	62 e3       	mov	r14,r2
  3098d8:	72 d4       	add	#-44,r2
  3098da:	61 e3       	mov	r14,r1
  3098dc:	71 d4       	add	#-44,r1
  3098de:	52 2f       	mov.l	@(60,r2),r2
  3098e0:	51 1b       	mov.l	@(44,r1),r1
  3098e2:	32 12       	cmp/hs	r1,r2
  3098e4:	8b d4       	bf	309890 <topti_offset+0x86>

	return offset;
  3098e6:	61 e3       	mov	r14,r1
  3098e8:	71 d4       	add	#-44,r1
  3098ea:	51 1e       	mov.l	@(56,r1),r1
}
  3098ec:	60 13       	mov	r1,r0
  3098ee:	7e 14       	add	#20,r14
  3098f0:	6f e3       	mov	r14,r15
  3098f2:	6e f6       	mov.l	@r15+,r14
  3098f4:	00 0b       	rts	
  3098f6:	00 09       	nop	

003098f8 <topti_utf8_next>:

/* topti_utf8_next(): Read the next UTF-8 code point of a string */
uint32_t topti_utf8_next(uint8_t const **str_pointer)
{
  3098f8:	2f e6       	mov.l	r14,@-r15
  3098fa:	7f f4       	add	#-12,r15
  3098fc:	6e f3       	mov	r15,r14
  3098fe:	61 e3       	mov	r14,r1
  309900:	71 cc       	add	#-52,r1
  309902:	11 4d       	mov.l	r4,@(52,r1)
	uint8_t const *str = *str_pointer;
  309904:	61 e3       	mov	r14,r1
  309906:	71 cc       	add	#-52,r1
  309908:	62 e3       	mov	r14,r2
  30990a:	72 cc       	add	#-52,r2
  30990c:	52 2d       	mov.l	@(52,r2),r2
  30990e:	62 22       	mov.l	@r2,r2
  309910:	11 2f       	mov.l	r2,@(60,r1)
	uint8_t lead = *str++;
  309912:	61 e3       	mov	r14,r1
  309914:	71 cc       	add	#-52,r1
  309916:	51 1f       	mov.l	@(60,r1),r1
  309918:	62 e3       	mov	r14,r2
  30991a:	72 cc       	add	#-52,r2
  30991c:	63 13       	mov	r1,r3
  30991e:	73 01       	add	#1,r3
  309920:	12 3f       	mov.l	r3,@(60,r2)
  309922:	62 e3       	mov	r14,r2
  309924:	72 fc       	add	#-4,r2
  309926:	61 10       	mov.b	@r1,r1
  309928:	60 13       	mov	r1,r0
  30992a:	80 2b       	mov.b	r0,@(11,r2)

	/* Skip non-leaders which are invalid as starting bytes */
	while((lead >= 0x80 && lead <= 0xbf) ||
  30992c:	a0 0d       	bra	30994a <topti_utf8_next+0x52>
  30992e:	00 09       	nop	
		lead == 0xc0 || lead == 0xc1 || lead == 0xfe || lead == 0xff)
	{
		lead = *str++;
  309930:	61 e3       	mov	r14,r1
  309932:	71 cc       	add	#-52,r1
  309934:	51 1f       	mov.l	@(60,r1),r1
  309936:	62 e3       	mov	r14,r2
  309938:	72 cc       	add	#-52,r2
  30993a:	63 13       	mov	r1,r3
  30993c:	73 01       	add	#1,r3
  30993e:	12 3f       	mov.l	r3,@(60,r2)
  309940:	62 e3       	mov	r14,r2
  309942:	72 fc       	add	#-4,r2
  309944:	61 10       	mov.b	@r1,r1
  309946:	60 13       	mov	r1,r0
  309948:	80 2b       	mov.b	r0,@(11,r2)
	while((lead >= 0x80 && lead <= 0xbf) ||
  30994a:	61 e3       	mov	r14,r1
  30994c:	71 fc       	add	#-4,r1
  30994e:	84 1b       	mov.b	@(11,r1),r0
  309950:	61 03       	mov	r0,r1
		lead == 0xc0 || lead == 0xc1 || lead == 0xfe || lead == 0xff)
  309952:	41 11       	cmp/pz	r1
  309954:	89 07       	bt	309966 <topti_utf8_next+0x6e>
	while((lead >= 0x80 && lead <= 0xbf) ||
  309956:	61 e3       	mov	r14,r1
  309958:	71 fc       	add	#-4,r1
  30995a:	84 1b       	mov.b	@(11,r1),r0
  30995c:	61 03       	mov	r0,r1
  30995e:	62 1c       	extu.b	r1,r2
  309960:	91 65       	mov.w	309a2e <topti_utf8_next+0x136>,r1	! bf
  309962:	32 16       	cmp/hi	r1,r2
  309964:	8b e4       	bf	309930 <topti_utf8_next+0x38>
  309966:	61 e3       	mov	r14,r1
  309968:	71 fc       	add	#-4,r1
  30996a:	84 1b       	mov.b	@(11,r1),r0
  30996c:	61 03       	mov	r0,r1
  30996e:	62 1c       	extu.b	r1,r2
  309970:	91 5e       	mov.w	309a30 <topti_utf8_next+0x138>,r1	! c0
  309972:	32 10       	cmp/eq	r1,r2
  309974:	89 dc       	bt	309930 <topti_utf8_next+0x38>
		lead == 0xc0 || lead == 0xc1 || lead == 0xfe || lead == 0xff)
  309976:	61 e3       	mov	r14,r1
  309978:	71 fc       	add	#-4,r1
  30997a:	84 1b       	mov.b	@(11,r1),r0
  30997c:	61 03       	mov	r0,r1
  30997e:	62 1c       	extu.b	r1,r2
  309980:	91 57       	mov.w	309a32 <topti_utf8_next+0x13a>,r1	! c1
  309982:	32 10       	cmp/eq	r1,r2
  309984:	89 d4       	bt	309930 <topti_utf8_next+0x38>
  309986:	61 e3       	mov	r14,r1
  309988:	71 fc       	add	#-4,r1
  30998a:	84 1b       	mov.b	@(11,r1),r0
  30998c:	61 03       	mov	r0,r1
  30998e:	62 1c       	extu.b	r1,r2
  309990:	91 50       	mov.w	309a34 <topti_utf8_next+0x13c>,r1	! fe
  309992:	32 10       	cmp/eq	r1,r2
  309994:	89 cc       	bt	309930 <topti_utf8_next+0x38>
  309996:	61 e3       	mov	r14,r1
  309998:	71 fc       	add	#-4,r1
  30999a:	84 1b       	mov.b	@(11,r1),r0
  30999c:	61 03       	mov	r0,r1
  30999e:	62 1c       	extu.b	r1,r2
  3099a0:	91 49       	mov.w	309a36 <topti_utf8_next+0x13e>,r1	! ff
  3099a2:	32 10       	cmp/eq	r1,r2
  3099a4:	89 c4       	bt	309930 <topti_utf8_next+0x38>
	}

	/* This base case will handle the NUL terminator */
	if(lead <= 0x7f)
  3099a6:	61 e3       	mov	r14,r1
  3099a8:	71 fc       	add	#-4,r1
  3099aa:	84 1b       	mov.b	@(11,r1),r0
  3099ac:	61 03       	mov	r0,r1
  3099ae:	41 11       	cmp/pz	r1
  3099b0:	8b 0d       	bf	3099ce <topti_utf8_next+0xd6>
	{
		*str_pointer = str;
  3099b2:	61 e3       	mov	r14,r1
  3099b4:	71 cc       	add	#-52,r1
  3099b6:	51 1d       	mov.l	@(52,r1),r1
  3099b8:	62 e3       	mov	r14,r2
  3099ba:	72 cc       	add	#-52,r2
  3099bc:	52 2f       	mov.l	@(60,r2),r2
  3099be:	21 22       	mov.l	r2,@r1
		return lead;
  3099c0:	61 e3       	mov	r14,r1
  3099c2:	71 fc       	add	#-4,r1
  3099c4:	84 1b       	mov.b	@(11,r1),r0
  3099c6:	61 03       	mov	r0,r1
  3099c8:	61 1c       	extu.b	r1,r1
  3099ca:	a0 b6       	bra	309b3a <topti_utf8_next+0x242>
  3099cc:	00 09       	nop	
	}

	uint8_t n2 = (*str++ & 0x3f);
  3099ce:	61 e3       	mov	r14,r1
  3099d0:	71 cc       	add	#-52,r1
  3099d2:	51 1f       	mov.l	@(60,r1),r1
  3099d4:	62 e3       	mov	r14,r2
  3099d6:	72 cc       	add	#-52,r2
  3099d8:	63 13       	mov	r1,r3
  3099da:	73 01       	add	#1,r3
  3099dc:	12 3f       	mov.l	r3,@(60,r2)
  3099de:	61 10       	mov.b	@r1,r1
  3099e0:	62 1c       	extu.b	r1,r2
  3099e2:	61 e3       	mov	r14,r1
  3099e4:	71 fc       	add	#-4,r1
  3099e6:	e3 3f       	mov	#63,r3
  3099e8:	22 39       	and	r3,r2
  3099ea:	60 23       	mov	r2,r0
  3099ec:	80 1a       	mov.b	r0,@(10,r1)
	if(lead <= 0xdf)
  3099ee:	61 e3       	mov	r14,r1
  3099f0:	71 fc       	add	#-4,r1
  3099f2:	84 1b       	mov.b	@(11,r1),r0
  3099f4:	61 03       	mov	r0,r1
  3099f6:	62 1c       	extu.b	r1,r2
  3099f8:	91 1e       	mov.w	309a38 <topti_utf8_next+0x140>,r1	! df
  3099fa:	32 16       	cmp/hi	r1,r2
  3099fc:	89 1e       	bt	309a3c <topti_utf8_next+0x144>
	{
		*str_pointer = str;
  3099fe:	61 e3       	mov	r14,r1
  309a00:	71 cc       	add	#-52,r1
  309a02:	51 1d       	mov.l	@(52,r1),r1
  309a04:	62 e3       	mov	r14,r2
  309a06:	72 cc       	add	#-52,r2
  309a08:	52 2f       	mov.l	@(60,r2),r2
  309a0a:	21 22       	mov.l	r2,@r1
		return ((lead & 0x1f) << 6) | n2;
  309a0c:	61 e3       	mov	r14,r1
  309a0e:	71 fc       	add	#-4,r1
  309a10:	84 1b       	mov.b	@(11,r1),r0
  309a12:	61 03       	mov	r0,r1
  309a14:	62 1c       	extu.b	r1,r2
  309a16:	e1 06       	mov	#6,r1
  309a18:	42 1d       	shld	r1,r2
  309a1a:	91 0e       	mov.w	309a3a <topti_utf8_next+0x142>,r1	! 7c0
  309a1c:	22 19       	and	r1,r2
  309a1e:	61 e3       	mov	r14,r1
  309a20:	71 fc       	add	#-4,r1
  309a22:	84 1a       	mov.b	@(10,r1),r0
  309a24:	61 03       	mov	r0,r1
  309a26:	61 1c       	extu.b	r1,r1
  309a28:	21 2b       	or	r2,r1
  309a2a:	a0 86       	bra	309b3a <topti_utf8_next+0x242>
  309a2c:	00 09       	nop	
  309a2e:	00 bf       	mac.l	@r11+,@r0+
  309a30:	00 c0       	.word 0x00c0
  309a32:	00 c1       	.word 0x00c1
  309a34:	00 fe       	mov.l	@(r0,r15),r0
  309a36:	00 ff       	mac.l	@r15+,@r0+
  309a38:	00 df       	mac.l	@r13+,@r0+
  309a3a:	07 c0       	.word 0x07c0
	}

	uint8_t n3 = (*str++ & 0x3f);
  309a3c:	61 e3       	mov	r14,r1
  309a3e:	71 cc       	add	#-52,r1
  309a40:	51 1f       	mov.l	@(60,r1),r1
  309a42:	62 e3       	mov	r14,r2
  309a44:	72 cc       	add	#-52,r2
  309a46:	63 13       	mov	r1,r3
  309a48:	73 01       	add	#1,r3
  309a4a:	12 3f       	mov.l	r3,@(60,r2)
  309a4c:	61 10       	mov.b	@r1,r1
  309a4e:	62 1c       	extu.b	r1,r2
  309a50:	61 e3       	mov	r14,r1
  309a52:	71 fc       	add	#-4,r1
  309a54:	e3 3f       	mov	#63,r3
  309a56:	22 39       	and	r3,r2
  309a58:	60 23       	mov	r2,r0
  309a5a:	80 19       	mov.b	r0,@(9,r1)
	if(lead <= 0xef)
  309a5c:	61 e3       	mov	r14,r1
  309a5e:	71 fc       	add	#-4,r1
  309a60:	84 1b       	mov.b	@(11,r1),r0
  309a62:	61 03       	mov	r0,r1
  309a64:	62 1c       	extu.b	r1,r2
  309a66:	91 6e       	mov.w	309b46 <topti_utf8_next+0x24e>,r1	! ef
  309a68:	32 16       	cmp/hi	r1,r2
  309a6a:	89 1e       	bt	309aaa <topti_utf8_next+0x1b2>
	{
		*str_pointer = str;
  309a6c:	61 e3       	mov	r14,r1
  309a6e:	71 cc       	add	#-52,r1
  309a70:	51 1d       	mov.l	@(52,r1),r1
  309a72:	62 e3       	mov	r14,r2
  309a74:	72 cc       	add	#-52,r2
  309a76:	52 2f       	mov.l	@(60,r2),r2
  309a78:	21 22       	mov.l	r2,@r1
		return ((lead & 0x0f) << 12) | (n2 << 6) | n3;
  309a7a:	61 e3       	mov	r14,r1
  309a7c:	71 fc       	add	#-4,r1
  309a7e:	84 1b       	mov.b	@(11,r1),r0
  309a80:	61 03       	mov	r0,r1
  309a82:	61 1c       	extu.b	r1,r1
  309a84:	e2 0c       	mov	#12,r2
  309a86:	41 2d       	shld	r2,r1
  309a88:	62 1d       	extu.w	r1,r2
  309a8a:	61 e3       	mov	r14,r1
  309a8c:	71 fc       	add	#-4,r1
  309a8e:	84 1a       	mov.b	@(10,r1),r0
  309a90:	61 03       	mov	r0,r1
  309a92:	61 1c       	extu.b	r1,r1
  309a94:	e3 06       	mov	#6,r3
  309a96:	41 3d       	shld	r3,r1
  309a98:	22 1b       	or	r1,r2
  309a9a:	61 e3       	mov	r14,r1
  309a9c:	71 fc       	add	#-4,r1
  309a9e:	84 19       	mov.b	@(9,r1),r0
  309aa0:	61 03       	mov	r0,r1
  309aa2:	61 1c       	extu.b	r1,r1
  309aa4:	21 2b       	or	r2,r1
  309aa6:	a0 48       	bra	309b3a <topti_utf8_next+0x242>
  309aa8:	00 09       	nop	
	}

	uint8_t n4 = (*str++ & 0x3f);
  309aaa:	61 e3       	mov	r14,r1
  309aac:	71 cc       	add	#-52,r1
  309aae:	51 1f       	mov.l	@(60,r1),r1
  309ab0:	62 e3       	mov	r14,r2
  309ab2:	72 cc       	add	#-52,r2
  309ab4:	63 13       	mov	r1,r3
  309ab6:	73 01       	add	#1,r3
  309ab8:	12 3f       	mov.l	r3,@(60,r2)
  309aba:	61 10       	mov.b	@r1,r1
  309abc:	62 1c       	extu.b	r1,r2
  309abe:	61 e3       	mov	r14,r1
  309ac0:	71 fc       	add	#-4,r1
  309ac2:	e3 3f       	mov	#63,r3
  309ac4:	22 39       	and	r3,r2
  309ac6:	60 23       	mov	r2,r0
  309ac8:	80 18       	mov.b	r0,@(8,r1)
	if(lead <= 0xf7)
  309aca:	61 e3       	mov	r14,r1
  309acc:	71 fc       	add	#-4,r1
  309ace:	84 1b       	mov.b	@(11,r1),r0
  309ad0:	61 03       	mov	r0,r1
  309ad2:	62 1c       	extu.b	r1,r2
  309ad4:	91 38       	mov.w	309b48 <topti_utf8_next+0x250>,r1	! f7
  309ad6:	32 16       	cmp/hi	r1,r2
  309ad8:	89 27       	bt	309b2a <topti_utf8_next+0x232>
	{
		*str_pointer = str;
  309ada:	61 e3       	mov	r14,r1
  309adc:	71 cc       	add	#-52,r1
  309ade:	51 1d       	mov.l	@(52,r1),r1
  309ae0:	62 e3       	mov	r14,r2
  309ae2:	72 cc       	add	#-52,r2
  309ae4:	52 2f       	mov.l	@(60,r2),r2
  309ae6:	21 22       	mov.l	r2,@r1
		return ((lead & 0x07) << 18) | (n2 << 12) | (n3 << 6) | n4;
  309ae8:	61 e3       	mov	r14,r1
  309aea:	71 fc       	add	#-4,r1
  309aec:	84 1b       	mov.b	@(11,r1),r0
  309aee:	61 03       	mov	r0,r1
  309af0:	61 1c       	extu.b	r1,r1
  309af2:	41 28       	shll16	r1
  309af4:	41 08       	shll2	r1
  309af6:	d2 15       	mov.l	309b4c <topti_utf8_next+0x254>,r2	! 1c0000
  309af8:	22 19       	and	r1,r2
  309afa:	61 e3       	mov	r14,r1
  309afc:	71 fc       	add	#-4,r1
  309afe:	84 1a       	mov.b	@(10,r1),r0
  309b00:	61 03       	mov	r0,r1
  309b02:	61 1c       	extu.b	r1,r1
  309b04:	e3 0c       	mov	#12,r3
  309b06:	41 3d       	shld	r3,r1
  309b08:	22 1b       	or	r1,r2
  309b0a:	61 e3       	mov	r14,r1
  309b0c:	71 fc       	add	#-4,r1
  309b0e:	84 19       	mov.b	@(9,r1),r0
  309b10:	61 03       	mov	r0,r1
  309b12:	61 1c       	extu.b	r1,r1
  309b14:	e3 06       	mov	#6,r3
  309b16:	41 3d       	shld	r3,r1
  309b18:	22 1b       	or	r1,r2
  309b1a:	61 e3       	mov	r14,r1
  309b1c:	71 fc       	add	#-4,r1
  309b1e:	84 18       	mov.b	@(8,r1),r0
  309b20:	61 03       	mov	r0,r1
  309b22:	61 1c       	extu.b	r1,r1
  309b24:	21 2b       	or	r2,r1
  309b26:	a0 08       	bra	309b3a <topti_utf8_next+0x242>
  309b28:	00 09       	nop	
	}

	/* It the string is too invalid, force a space and try to continue */
	*str_pointer = str;
  309b2a:	61 e3       	mov	r14,r1
  309b2c:	71 cc       	add	#-52,r1
  309b2e:	51 1d       	mov.l	@(52,r1),r1
  309b30:	62 e3       	mov	r14,r2
  309b32:	72 cc       	add	#-52,r2
  309b34:	52 2f       	mov.l	@(60,r2),r2
  309b36:	21 22       	mov.l	r2,@r1
	return 0x20;
  309b38:	e1 20       	mov	#32,r1
}
  309b3a:	60 13       	mov	r1,r0
  309b3c:	7e 0c       	add	#12,r14
  309b3e:	6f e3       	mov	r14,r15
  309b40:	6e f6       	mov.l	@r15+,r14
  309b42:	00 0b       	rts	
  309b44:	00 09       	nop	
  309b46:	00 ef       	mac.l	@r14+,@r0+
  309b48:	00 f7       	mul.l	r15,r0
  309b4a:	00 09       	nop	
  309b4c:	00 1c       	mov.b	@(r0,r1),r0
	...

00309b50 <dnsize>:

/* dnsize(): Get the width and height of rendered text, with character limit */
void dnsize(char const *str_char, int size, font_t const *f, int *w, int *h)
{
  309b50:	2f 86       	mov.l	r8,@-r15
  309b52:	2f e6       	mov.l	r14,@-r15
  309b54:	4f 22       	sts.l	pr,@-r15
  309b56:	7f d8       	add	#-40,r15
  309b58:	6e f3       	mov	r15,r14
  309b5a:	61 e3       	mov	r14,r1
  309b5c:	71 e8       	add	#-24,r1
  309b5e:	11 49       	mov.l	r4,@(36,r1)
  309b60:	61 e3       	mov	r14,r1
  309b62:	71 e8       	add	#-24,r1
  309b64:	11 58       	mov.l	r5,@(32,r1)
  309b66:	61 e3       	mov	r14,r1
  309b68:	71 e8       	add	#-24,r1
  309b6a:	11 67       	mov.l	r6,@(28,r1)
  309b6c:	61 e3       	mov	r14,r1
  309b6e:	71 e8       	add	#-24,r1
  309b70:	11 76       	mov.l	r7,@(24,r1)
	uint8_t const *str = (void *)str_char;
  309b72:	61 e3       	mov	r14,r1
  309b74:	71 e8       	add	#-24,r1
  309b76:	62 e3       	mov	r14,r2
  309b78:	72 e8       	add	#-24,r2
  309b7a:	52 29       	mov.l	@(36,r2),r2
  309b7c:	11 2a       	mov.l	r2,@(40,r1)
	uint8_t const *str0 = str;
  309b7e:	61 e3       	mov	r14,r1
  309b80:	71 e8       	add	#-24,r1
  309b82:	62 e3       	mov	r14,r2
  309b84:	72 e8       	add	#-24,r2
  309b86:	52 2a       	mov.l	@(40,r2),r2
  309b88:	11 2d       	mov.l	r2,@(52,r1)
	uint32_t code_point;

	if(!f) f = topti_font;
  309b8a:	61 e3       	mov	r14,r1
  309b8c:	71 e8       	add	#-24,r1
  309b8e:	51 17       	mov.l	@(28,r1),r1
  309b90:	21 18       	tst	r1,r1
  309b92:	8b 04       	bf	309b9e <dnsize+0x4e>
  309b94:	61 e3       	mov	r14,r1
  309b96:	71 e8       	add	#-24,r1
  309b98:	d2 6d       	mov.l	309d50 <dnsize+0x200>,r2	! 81016ec <topti_font>
  309b9a:	62 22       	mov.l	@r2,r2
  309b9c:	11 27       	mov.l	r2,@(28,r1)
	if(h) *h = f->line_height;
  309b9e:	51 ed       	mov.l	@(52,r14),r1
  309ba0:	21 18       	tst	r1,r1
  309ba2:	89 08       	bt	309bb6 <dnsize+0x66>
  309ba4:	61 e3       	mov	r14,r1
  309ba6:	71 e8       	add	#-24,r1
  309ba8:	51 17       	mov.l	@(28,r1),r1
  309baa:	84 15       	mov.b	@(5,r1),r0
  309bac:	61 03       	mov	r0,r1
  309bae:	61 1c       	extu.b	r1,r1
  309bb0:	62 13       	mov	r1,r2
  309bb2:	51 ed       	mov.l	@(52,r14),r1
  309bb4:	21 22       	mov.l	r2,@r1
	if(!w) return;
  309bb6:	61 e3       	mov	r14,r1
  309bb8:	71 e8       	add	#-24,r1
  309bba:	51 16       	mov.l	@(24,r1),r1
  309bbc:	21 18       	tst	r1,r1
  309bbe:	8b 01       	bf	309bc4 <dnsize+0x74>
  309bc0:	a0 bd       	bra	309d3e <dnsize+0x1ee>
  309bc2:	00 09       	nop	

	/* Width for monospaced fonts is easy, unfortunately we still need to
	   compute the length and group bytes into Unicode code points. */
	if(!f->prop)
  309bc4:	61 e3       	mov	r14,r1
  309bc6:	71 e8       	add	#-24,r1
  309bc8:	51 17       	mov.l	@(28,r1),r1
  309bca:	84 14       	mov.b	@(4,r1),r0
  309bcc:	61 03       	mov	r0,r1
  309bce:	61 1c       	extu.b	r1,r1
  309bd0:	e2 01       	mov	#1,r2
  309bd2:	21 29       	and	r2,r1
  309bd4:	61 1c       	extu.b	r1,r1
  309bd6:	21 18       	tst	r1,r1
  309bd8:	89 01       	bt	309bde <dnsize+0x8e>
  309bda:	a0 4d       	bra	309c78 <dnsize+0x128>
  309bdc:	00 09       	nop	
	{
		int length = 0;
  309bde:	61 e3       	mov	r14,r1
  309be0:	71 e8       	add	#-24,r1
  309be2:	e2 00       	mov	#0,r2
  309be4:	11 2f       	mov.l	r2,@(60,r1)
		while(1)
		{
			code_point = topti_utf8_next(&str);
  309be6:	68 e3       	mov	r14,r8
  309be8:	78 e8       	add	#-24,r8
  309bea:	61 e3       	mov	r14,r1
  309bec:	71 10       	add	#16,r1
  309bee:	64 13       	mov	r1,r4
  309bf0:	d1 58       	mov.l	309d54 <dnsize+0x204>,r1	! 3098f8 <topti_utf8_next>
  309bf2:	41 0b       	jsr	@r1
  309bf4:	00 09       	nop	
  309bf6:	61 03       	mov	r0,r1
  309bf8:	18 1c       	mov.l	r1,@(48,r8)
			if(!code_point || (size >= 0 && str - str0 > size))
  309bfa:	61 e3       	mov	r14,r1
  309bfc:	71 e8       	add	#-24,r1
  309bfe:	51 1c       	mov.l	@(48,r1),r1
  309c00:	21 18       	tst	r1,r1
  309c02:	89 19       	bt	309c38 <dnsize+0xe8>
  309c04:	61 e3       	mov	r14,r1
  309c06:	71 e8       	add	#-24,r1
  309c08:	51 18       	mov.l	@(32,r1),r1
  309c0a:	41 11       	cmp/pz	r1
  309c0c:	8b 0b       	bf	309c26 <dnsize+0xd6>
  309c0e:	61 e3       	mov	r14,r1
  309c10:	71 e8       	add	#-24,r1
  309c12:	51 1a       	mov.l	@(40,r1),r1
  309c14:	62 e3       	mov	r14,r2
  309c16:	72 e8       	add	#-24,r2
  309c18:	52 2d       	mov.l	@(52,r2),r2
  309c1a:	31 28       	sub	r2,r1
  309c1c:	62 e3       	mov	r14,r2
  309c1e:	72 e8       	add	#-24,r2
  309c20:	52 28       	mov.l	@(32,r2),r2
  309c22:	32 13       	cmp/ge	r1,r2
  309c24:	8b 08       	bf	309c38 <dnsize+0xe8>
				break;
			length++;
  309c26:	61 e3       	mov	r14,r1
  309c28:	71 e8       	add	#-24,r1
  309c2a:	62 e3       	mov	r14,r2
  309c2c:	72 e8       	add	#-24,r2
  309c2e:	52 2f       	mov.l	@(60,r2),r2
  309c30:	72 01       	add	#1,r2
  309c32:	11 2f       	mov.l	r2,@(60,r1)
			code_point = topti_utf8_next(&str);
  309c34:	af d7       	bra	309be6 <dnsize+0x96>
  309c36:	00 09       	nop	
		}

		*w = (f->width + f->char_spacing) * length - f->char_spacing;
  309c38:	61 e3       	mov	r14,r1
  309c3a:	71 e8       	add	#-24,r1
  309c3c:	51 17       	mov.l	@(28,r1),r1
  309c3e:	85 1c       	mov.w	@(24,r1),r0
  309c40:	61 03       	mov	r0,r1
  309c42:	61 1d       	extu.w	r1,r1
  309c44:	62 13       	mov	r1,r2
  309c46:	61 e3       	mov	r14,r1
  309c48:	71 e8       	add	#-24,r1
  309c4a:	51 17       	mov.l	@(28,r1),r1
  309c4c:	84 1c       	mov.b	@(12,r1),r0
  309c4e:	61 03       	mov	r0,r1
  309c50:	61 1c       	extu.b	r1,r1
  309c52:	32 1c       	add	r1,r2
  309c54:	61 e3       	mov	r14,r1
  309c56:	71 e8       	add	#-24,r1
  309c58:	51 1f       	mov.l	@(60,r1),r1
  309c5a:	02 17       	mul.l	r1,r2
  309c5c:	02 1a       	sts	macl,r2
  309c5e:	61 e3       	mov	r14,r1
  309c60:	71 e8       	add	#-24,r1
  309c62:	51 17       	mov.l	@(28,r1),r1
  309c64:	84 1c       	mov.b	@(12,r1),r0
  309c66:	61 03       	mov	r0,r1
  309c68:	61 1c       	extu.b	r1,r1
  309c6a:	32 18       	sub	r1,r2
  309c6c:	61 e3       	mov	r14,r1
  309c6e:	71 e8       	add	#-24,r1
  309c70:	51 16       	mov.l	@(24,r1),r1
  309c72:	21 22       	mov.l	r2,@r1
		return;
  309c74:	a0 64       	bra	309d40 <dnsize+0x1f0>
  309c76:	00 09       	nop	
	}

	/* For proportional fonts, fetch the width of each individual glyphs */
	int width = 0;
  309c78:	61 e3       	mov	r14,r1
  309c7a:	71 e8       	add	#-24,r1
  309c7c:	e2 00       	mov	#0,r2
  309c7e:	11 2e       	mov.l	r2,@(56,r1)

	while(1)
	{
		code_point = topti_utf8_next(&str);
  309c80:	68 e3       	mov	r14,r8
  309c82:	78 e8       	add	#-24,r8
  309c84:	61 e3       	mov	r14,r1
  309c86:	71 10       	add	#16,r1
  309c88:	64 13       	mov	r1,r4
  309c8a:	d1 32       	mov.l	309d54 <dnsize+0x204>,r1	! 3098f8 <topti_utf8_next>
  309c8c:	41 0b       	jsr	@r1
  309c8e:	00 09       	nop	
  309c90:	61 03       	mov	r0,r1
  309c92:	18 1c       	mov.l	r1,@(48,r8)
		if(!code_point || (size >= 0 && str - str0 > size)) break;
  309c94:	61 e3       	mov	r14,r1
  309c96:	71 e8       	add	#-24,r1
  309c98:	51 1c       	mov.l	@(48,r1),r1
  309c9a:	21 18       	tst	r1,r1
  309c9c:	89 3d       	bt	309d1a <dnsize+0x1ca>
  309c9e:	61 e3       	mov	r14,r1
  309ca0:	71 e8       	add	#-24,r1
  309ca2:	51 18       	mov.l	@(32,r1),r1
  309ca4:	41 11       	cmp/pz	r1
  309ca6:	8b 0b       	bf	309cc0 <dnsize+0x170>
  309ca8:	61 e3       	mov	r14,r1
  309caa:	71 e8       	add	#-24,r1
  309cac:	51 1a       	mov.l	@(40,r1),r1
  309cae:	62 e3       	mov	r14,r2
  309cb0:	72 e8       	add	#-24,r2
  309cb2:	52 2d       	mov.l	@(52,r2),r2
  309cb4:	31 28       	sub	r2,r1
  309cb6:	62 e3       	mov	r14,r2
  309cb8:	72 e8       	add	#-24,r2
  309cba:	52 28       	mov.l	@(32,r2),r2
  309cbc:	32 13       	cmp/ge	r1,r2
  309cbe:	8b 2c       	bf	309d1a <dnsize+0x1ca>

		int glyph = topti_glyph_index(f, code_point);
  309cc0:	68 e3       	mov	r14,r8
  309cc2:	78 e8       	add	#-24,r8
  309cc4:	62 e3       	mov	r14,r2
  309cc6:	72 e8       	add	#-24,r2
  309cc8:	61 e3       	mov	r14,r1
  309cca:	71 e8       	add	#-24,r1
  309ccc:	55 2c       	mov.l	@(48,r2),r5
  309cce:	54 17       	mov.l	@(28,r1),r4
  309cd0:	d1 21       	mov.l	309d58 <dnsize+0x208>,r1	! 309714 <topti_glyph_index>
  309cd2:	41 0b       	jsr	@r1
  309cd4:	00 09       	nop	
  309cd6:	61 03       	mov	r0,r1
  309cd8:	18 1b       	mov.l	r1,@(44,r8)
		if(glyph >= 0)
  309cda:	61 e3       	mov	r14,r1
  309cdc:	71 e8       	add	#-24,r1
  309cde:	51 1b       	mov.l	@(44,r1),r1
  309ce0:	41 11       	cmp/pz	r1
  309ce2:	8b cd       	bf	309c80 <dnsize+0x130>
			width += f->glyph_width[glyph] + f->char_spacing;
  309ce4:	61 e3       	mov	r14,r1
  309ce6:	71 e8       	add	#-24,r1
  309ce8:	51 17       	mov.l	@(28,r1),r1
  309cea:	52 17       	mov.l	@(28,r1),r2
  309cec:	61 e3       	mov	r14,r1
  309cee:	71 e8       	add	#-24,r1
  309cf0:	51 1b       	mov.l	@(44,r1),r1
  309cf2:	31 2c       	add	r2,r1
  309cf4:	61 10       	mov.b	@r1,r1
  309cf6:	61 1c       	extu.b	r1,r1
  309cf8:	62 13       	mov	r1,r2
  309cfa:	61 e3       	mov	r14,r1
  309cfc:	71 e8       	add	#-24,r1
  309cfe:	51 17       	mov.l	@(28,r1),r1
  309d00:	84 1c       	mov.b	@(12,r1),r0
  309d02:	61 03       	mov	r0,r1
  309d04:	61 1c       	extu.b	r1,r1
  309d06:	32 1c       	add	r1,r2
  309d08:	61 e3       	mov	r14,r1
  309d0a:	71 e8       	add	#-24,r1
  309d0c:	63 e3       	mov	r14,r3
  309d0e:	73 e8       	add	#-24,r3
  309d10:	53 3e       	mov.l	@(56,r3),r3
  309d12:	32 3c       	add	r3,r2
  309d14:	11 2e       	mov.l	r2,@(56,r1)
	{
  309d16:	af b3       	bra	309c80 <dnsize+0x130>
  309d18:	00 09       	nop	
	}
	*w = width - f->char_spacing;
  309d1a:	61 e3       	mov	r14,r1
  309d1c:	71 e8       	add	#-24,r1
  309d1e:	51 17       	mov.l	@(28,r1),r1
  309d20:	84 1c       	mov.b	@(12,r1),r0
  309d22:	61 03       	mov	r0,r1
  309d24:	61 1c       	extu.b	r1,r1
  309d26:	63 13       	mov	r1,r3
  309d28:	61 e3       	mov	r14,r1
  309d2a:	71 e8       	add	#-24,r1
  309d2c:	51 1e       	mov.l	@(56,r1),r1
  309d2e:	62 13       	mov	r1,r2
  309d30:	32 38       	sub	r3,r2
  309d32:	61 e3       	mov	r14,r1
  309d34:	71 e8       	add	#-24,r1
  309d36:	51 16       	mov.l	@(24,r1),r1
  309d38:	21 22       	mov.l	r2,@r1
  309d3a:	a0 01       	bra	309d40 <dnsize+0x1f0>
  309d3c:	00 09       	nop	
	if(!w) return;
  309d3e:	00 09       	nop	
}
  309d40:	7e 28       	add	#40,r14
  309d42:	6f e3       	mov	r14,r15
  309d44:	4f 26       	lds.l	@r15+,pr
  309d46:	6e f6       	mov.l	@r15+,r14
  309d48:	68 f6       	mov.l	@r15+,r8
  309d4a:	00 0b       	rts	
  309d4c:	00 09       	nop	
  309d4e:	00 09       	nop	
  309d50:	08 10       	.word 0x0810
  309d52:	16 ec       	mov.l	r14,@(48,r6)
  309d54:	00 30       	.word 0x0030
  309d56:	98 f8       	mov.w	309f4a <GINT_CALL_INC_function+0x6>,r8	! 61e3
  309d58:	00 30       	.word 0x0030
  309d5a:	97 14       	mov.w	309d86 <dsize+0x2a>,r7	! 71d4

00309d5c <dsize>:

/* dsize(): Get the width and height of rendered text */
void dsize(char const *str_char, font_t const *f, int *w, int *h)
{
  309d5c:	2f e6       	mov.l	r14,@-r15
  309d5e:	4f 22       	sts.l	pr,@-r15
  309d60:	7f ec       	add	#-20,r15
  309d62:	6e f3       	mov	r15,r14
  309d64:	61 e3       	mov	r14,r1
  309d66:	71 d4       	add	#-44,r1
  309d68:	11 4f       	mov.l	r4,@(60,r1)
  309d6a:	61 e3       	mov	r14,r1
  309d6c:	71 d4       	add	#-44,r1
  309d6e:	11 5e       	mov.l	r5,@(56,r1)
  309d70:	61 e3       	mov	r14,r1
  309d72:	71 d4       	add	#-44,r1
  309d74:	11 6d       	mov.l	r6,@(52,r1)
  309d76:	61 e3       	mov	r14,r1
  309d78:	71 d4       	add	#-44,r1
  309d7a:	11 7c       	mov.l	r7,@(48,r1)
	return dnsize(str_char, -1, f, w, h);
  309d7c:	63 e3       	mov	r14,r3
  309d7e:	73 d4       	add	#-44,r3
  309d80:	62 e3       	mov	r14,r2
  309d82:	72 d4       	add	#-44,r2
  309d84:	61 e3       	mov	r14,r1
  309d86:	71 d4       	add	#-44,r1
  309d88:	67 e3       	mov	r14,r7
  309d8a:	77 d4       	add	#-44,r7
  309d8c:	57 7c       	mov.l	@(48,r7),r7
  309d8e:	2f 72       	mov.l	r7,@r15
  309d90:	57 3d       	mov.l	@(52,r3),r7
  309d92:	56 2e       	mov.l	@(56,r2),r6
  309d94:	e5 ff       	mov	#-1,r5
  309d96:	54 1f       	mov.l	@(60,r1),r4
  309d98:	d1 04       	mov.l	309dac <dsize+0x50>,r1	! 309b50 <dnsize>
  309d9a:	41 0b       	jsr	@r1
  309d9c:	00 09       	nop	
}
  309d9e:	7e 14       	add	#20,r14
  309da0:	6f e3       	mov	r14,r15
  309da2:	4f 26       	lds.l	@r15+,pr
  309da4:	6e f6       	mov.l	@r15+,r14
  309da6:	00 0b       	rts	
  309da8:	00 09       	nop	
  309daa:	00 09       	nop	
  309dac:	00 30       	.word 0x0030
  309dae:	9b 50       	mov.w	309e52 <drsize+0xa2>,r11	! 61e3

00309db0 <drsize>:

/* drsize(): Get width of rendered text with reverse size limit */
char const *drsize(char const *str_char, font_t const *f, int width, int *w)
{
  309db0:	2f 86       	mov.l	r8,@-r15
  309db2:	2f e6       	mov.l	r14,@-r15
  309db4:	4f 22       	sts.l	pr,@-r15
  309db6:	7f e0       	add	#-32,r15
  309db8:	6e f3       	mov	r15,r14
  309dba:	61 e3       	mov	r14,r1
  309dbc:	71 e0       	add	#-32,r1
  309dbe:	11 4b       	mov.l	r4,@(44,r1)
  309dc0:	61 e3       	mov	r14,r1
  309dc2:	71 e0       	add	#-32,r1
  309dc4:	11 5a       	mov.l	r5,@(40,r1)
  309dc6:	61 e3       	mov	r14,r1
  309dc8:	71 e0       	add	#-32,r1
  309dca:	11 69       	mov.l	r6,@(36,r1)
  309dcc:	61 e3       	mov	r14,r1
  309dce:	71 e0       	add	#-32,r1
  309dd0:	11 78       	mov.l	r7,@(32,r1)
	uint8_t const *str = (void *)str_char;
  309dd2:	61 e3       	mov	r14,r1
  309dd4:	71 e0       	add	#-32,r1
  309dd6:	62 e3       	mov	r14,r2
  309dd8:	72 e0       	add	#-32,r2
  309dda:	52 2b       	mov.l	@(44,r2),r2
  309ddc:	11 2c       	mov.l	r2,@(48,r1)
	uint32_t code_point;

	int used_width = 0;
  309dde:	61 e3       	mov	r14,r1
  309de0:	71 e0       	add	#-32,r1
  309de2:	e2 00       	mov	#0,r2
  309de4:	11 2f       	mov.l	r2,@(60,r1)
	if(!f) f = topti_font;
  309de6:	61 e3       	mov	r14,r1
  309de8:	71 e0       	add	#-32,r1
  309dea:	51 1a       	mov.l	@(40,r1),r1
  309dec:	21 18       	tst	r1,r1
  309dee:	8b 04       	bf	309dfa <drsize+0x4a>
  309df0:	61 e3       	mov	r14,r1
  309df2:	71 e0       	add	#-32,r1
  309df4:	d2 47       	mov.l	309f14 <drsize+0x164>,r2	! 81016ec <topti_font>
  309df6:	62 22       	mov.l	@r2,r2
  309df8:	11 2a       	mov.l	r2,@(40,r1)

	while(used_width < width)
  309dfa:	a0 69       	bra	309ed0 <drsize+0x120>
  309dfc:	00 09       	nop	
	{
		/* Record that last glyph considered fits */
		str_char = (void *)str;
  309dfe:	61 e3       	mov	r14,r1
  309e00:	71 e0       	add	#-32,r1
  309e02:	62 e3       	mov	r14,r2
  309e04:	72 e0       	add	#-32,r2
  309e06:	52 2c       	mov.l	@(48,r2),r2
  309e08:	11 2b       	mov.l	r2,@(44,r1)

		code_point = topti_utf8_next(&str);
  309e0a:	68 e3       	mov	r14,r8
  309e0c:	78 e0       	add	#-32,r8
  309e0e:	61 e3       	mov	r14,r1
  309e10:	71 10       	add	#16,r1
  309e12:	64 13       	mov	r1,r4
  309e14:	d1 40       	mov.l	309f18 <drsize+0x168>,r1	! 3098f8 <topti_utf8_next>
  309e16:	41 0b       	jsr	@r1
  309e18:	00 09       	nop	
  309e1a:	61 03       	mov	r0,r1
  309e1c:	18 1e       	mov.l	r1,@(56,r8)
		if(!code_point)
  309e1e:	61 e3       	mov	r14,r1
  309e20:	71 e0       	add	#-32,r1
  309e22:	51 1e       	mov.l	@(56,r1),r1
  309e24:	21 18       	tst	r1,r1
  309e26:	8b 01       	bf	309e2c <drsize+0x7c>
  309e28:	a0 5c       	bra	309ee4 <drsize+0x134>
  309e2a:	00 09       	nop	
		{
			break;
		}

		if(used_width > 0) used_width += f->char_spacing;
  309e2c:	61 e3       	mov	r14,r1
  309e2e:	71 e0       	add	#-32,r1
  309e30:	51 1f       	mov.l	@(60,r1),r1
  309e32:	41 15       	cmp/pl	r1
  309e34:	8b 0d       	bf	309e52 <drsize+0xa2>
  309e36:	61 e3       	mov	r14,r1
  309e38:	71 e0       	add	#-32,r1
  309e3a:	51 1a       	mov.l	@(40,r1),r1
  309e3c:	84 1c       	mov.b	@(12,r1),r0
  309e3e:	61 03       	mov	r0,r1
  309e40:	61 1c       	extu.b	r1,r1
  309e42:	63 13       	mov	r1,r3
  309e44:	61 e3       	mov	r14,r1
  309e46:	71 e0       	add	#-32,r1
  309e48:	62 e3       	mov	r14,r2
  309e4a:	72 e0       	add	#-32,r2
  309e4c:	52 2f       	mov.l	@(60,r2),r2
  309e4e:	32 3c       	add	r3,r2
  309e50:	11 2f       	mov.l	r2,@(60,r1)
		if(!f->prop)
  309e52:	61 e3       	mov	r14,r1
  309e54:	71 e0       	add	#-32,r1
  309e56:	51 1a       	mov.l	@(40,r1),r1
  309e58:	84 14       	mov.b	@(4,r1),r0
  309e5a:	61 03       	mov	r0,r1
  309e5c:	61 1c       	extu.b	r1,r1
  309e5e:	e2 01       	mov	#1,r2
  309e60:	21 29       	and	r2,r1
  309e62:	61 1c       	extu.b	r1,r1
  309e64:	21 18       	tst	r1,r1
  309e66:	8b 0f       	bf	309e88 <drsize+0xd8>
		{
			used_width += f->width;
  309e68:	61 e3       	mov	r14,r1
  309e6a:	71 e0       	add	#-32,r1
  309e6c:	51 1a       	mov.l	@(40,r1),r1
  309e6e:	85 1c       	mov.w	@(24,r1),r0
  309e70:	61 03       	mov	r0,r1
  309e72:	61 1d       	extu.w	r1,r1
  309e74:	63 13       	mov	r1,r3
  309e76:	61 e3       	mov	r14,r1
  309e78:	71 e0       	add	#-32,r1
  309e7a:	62 e3       	mov	r14,r2
  309e7c:	72 e0       	add	#-32,r2
  309e7e:	52 2f       	mov.l	@(60,r2),r2
  309e80:	32 3c       	add	r3,r2
  309e82:	11 2f       	mov.l	r2,@(60,r1)
  309e84:	a0 24       	bra	309ed0 <drsize+0x120>
  309e86:	00 09       	nop	
		}
		else
		{
			int glyph = topti_glyph_index(f, code_point);
  309e88:	68 e3       	mov	r14,r8
  309e8a:	78 e0       	add	#-32,r8
  309e8c:	62 e3       	mov	r14,r2
  309e8e:	72 e0       	add	#-32,r2
  309e90:	61 e3       	mov	r14,r1
  309e92:	71 e0       	add	#-32,r1
  309e94:	55 2e       	mov.l	@(56,r2),r5
  309e96:	54 1a       	mov.l	@(40,r1),r4
  309e98:	d1 20       	mov.l	309f1c <drsize+0x16c>,r1	! 309714 <topti_glyph_index>
  309e9a:	41 0b       	jsr	@r1
  309e9c:	00 09       	nop	
  309e9e:	61 03       	mov	r0,r1
  309ea0:	18 1d       	mov.l	r1,@(52,r8)
			if(glyph >= 0) used_width += f->glyph_width[glyph];
  309ea2:	61 e3       	mov	r14,r1
  309ea4:	71 e0       	add	#-32,r1
  309ea6:	51 1d       	mov.l	@(52,r1),r1
  309ea8:	41 11       	cmp/pz	r1
  309eaa:	8b 11       	bf	309ed0 <drsize+0x120>
  309eac:	61 e3       	mov	r14,r1
  309eae:	71 e0       	add	#-32,r1
  309eb0:	51 1a       	mov.l	@(40,r1),r1
  309eb2:	52 17       	mov.l	@(28,r1),r2
  309eb4:	61 e3       	mov	r14,r1
  309eb6:	71 e0       	add	#-32,r1
  309eb8:	51 1d       	mov.l	@(52,r1),r1
  309eba:	31 2c       	add	r2,r1
  309ebc:	61 10       	mov.b	@r1,r1
  309ebe:	61 1c       	extu.b	r1,r1
  309ec0:	63 13       	mov	r1,r3
  309ec2:	61 e3       	mov	r14,r1
  309ec4:	71 e0       	add	#-32,r1
  309ec6:	62 e3       	mov	r14,r2
  309ec8:	72 e0       	add	#-32,r2
  309eca:	52 2f       	mov.l	@(60,r2),r2
  309ecc:	32 3c       	add	r3,r2
  309ece:	11 2f       	mov.l	r2,@(60,r1)
	while(used_width < width)
  309ed0:	62 e3       	mov	r14,r2
  309ed2:	72 e0       	add	#-32,r2
  309ed4:	61 e3       	mov	r14,r1
  309ed6:	71 e0       	add	#-32,r1
  309ed8:	52 2f       	mov.l	@(60,r2),r2
  309eda:	51 19       	mov.l	@(36,r1),r1
  309edc:	32 13       	cmp/ge	r1,r2
  309ede:	8b 8e       	bf	309dfe <drsize+0x4e>
  309ee0:	a0 01       	bra	309ee6 <drsize+0x136>
  309ee2:	00 09       	nop	
			break;
  309ee4:	00 09       	nop	
		}
	}

	if(w) *w = used_width;
  309ee6:	61 e3       	mov	r14,r1
  309ee8:	71 e0       	add	#-32,r1
  309eea:	51 18       	mov.l	@(32,r1),r1
  309eec:	21 18       	tst	r1,r1
  309eee:	89 06       	bt	309efe <drsize+0x14e>
  309ef0:	61 e3       	mov	r14,r1
  309ef2:	71 e0       	add	#-32,r1
  309ef4:	51 18       	mov.l	@(32,r1),r1
  309ef6:	62 e3       	mov	r14,r2
  309ef8:	72 e0       	add	#-32,r2
  309efa:	52 2f       	mov.l	@(60,r2),r2
  309efc:	21 22       	mov.l	r2,@r1
	return str_char;
  309efe:	61 e3       	mov	r14,r1
  309f00:	71 e0       	add	#-32,r1
  309f02:	51 1b       	mov.l	@(44,r1),r1
}
  309f04:	60 13       	mov	r1,r0
  309f06:	7e 20       	add	#32,r14
  309f08:	6f e3       	mov	r14,r15
  309f0a:	4f 26       	lds.l	@r15+,pr
  309f0c:	6e f6       	mov.l	@r15+,r14
  309f0e:	68 f6       	mov.l	@r15+,r8
  309f10:	00 0b       	rts	
  309f12:	00 09       	nop	
  309f14:	08 10       	.word 0x0810
  309f16:	16 ec       	mov.l	r14,@(48,r6)
  309f18:	00 30       	.word 0x0030
  309f1a:	98 f8       	mov.w	30a10e <topti_render+0x36>,r8	! 522e
  309f1c:	00 30       	.word 0x0030
  309f1e:	97 14       	mov.w	309f4a <GINT_CALL_INC_function+0x6>,r7	! 61e3

00309f20 <GINT_CALL_SET_function>:
{
  309f20:	2f e6       	mov.l	r14,@-r15
  309f22:	7f fc       	add	#-4,r15
  309f24:	6e f3       	mov	r15,r14
  309f26:	61 e3       	mov	r14,r1
  309f28:	71 c4       	add	#-60,r1
  309f2a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309f2c:	61 e3       	mov	r14,r1
  309f2e:	71 c4       	add	#-60,r1
  309f30:	51 1f       	mov.l	@(60,r1),r1
  309f32:	e2 01       	mov	#1,r2
  309f34:	21 22       	mov.l	r2,@r1
	return 0;
  309f36:	e1 00       	mov	#0,r1
}
  309f38:	60 13       	mov	r1,r0
  309f3a:	7e 04       	add	#4,r14
  309f3c:	6f e3       	mov	r14,r15
  309f3e:	6e f6       	mov.l	@r15+,r14
  309f40:	00 0b       	rts	
  309f42:	00 09       	nop	

00309f44 <GINT_CALL_INC_function>:
{
  309f44:	2f e6       	mov.l	r14,@-r15
  309f46:	7f fc       	add	#-4,r15
  309f48:	6e f3       	mov	r15,r14
  309f4a:	61 e3       	mov	r14,r1
  309f4c:	71 c4       	add	#-60,r1
  309f4e:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  309f50:	61 e3       	mov	r14,r1
  309f52:	71 c4       	add	#-60,r1
  309f54:	51 1f       	mov.l	@(60,r1),r1
  309f56:	61 12       	mov.l	@r1,r1
  309f58:	62 13       	mov	r1,r2
  309f5a:	72 01       	add	#1,r2
  309f5c:	61 e3       	mov	r14,r1
  309f5e:	71 c4       	add	#-60,r1
  309f60:	51 1f       	mov.l	@(60,r1),r1
  309f62:	21 22       	mov.l	r2,@r1
	return 0;
  309f64:	e1 00       	mov	#0,r1
}
  309f66:	60 13       	mov	r1,r0
  309f68:	7e 04       	add	#4,r14
  309f6a:	6f e3       	mov	r14,r15
  309f6c:	6e f6       	mov.l	@r15+,r14
  309f6e:	00 0b       	rts	
  309f70:	00 09       	nop	

00309f72 <GINT_CALL_SET_STOP_function>:
{
  309f72:	2f e6       	mov.l	r14,@-r15
  309f74:	7f fc       	add	#-4,r15
  309f76:	6e f3       	mov	r15,r14
  309f78:	61 e3       	mov	r14,r1
  309f7a:	71 c4       	add	#-60,r1
  309f7c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  309f7e:	61 e3       	mov	r14,r1
  309f80:	71 c4       	add	#-60,r1
  309f82:	51 1f       	mov.l	@(60,r1),r1
  309f84:	e2 01       	mov	#1,r2
  309f86:	21 22       	mov.l	r2,@r1
	return 1;
  309f88:	e1 01       	mov	#1,r1
}
  309f8a:	60 13       	mov	r1,r0
  309f8c:	7e 04       	add	#4,r14
  309f8e:	6f e3       	mov	r14,r15
  309f90:	6e f6       	mov.l	@r15+,r14
  309f92:	00 0b       	rts	
  309f94:	00 09       	nop	

00309f96 <GINT_CALL_INC_STOP_function>:
{
  309f96:	2f e6       	mov.l	r14,@-r15
  309f98:	7f fc       	add	#-4,r15
  309f9a:	6e f3       	mov	r15,r14
  309f9c:	61 e3       	mov	r14,r1
  309f9e:	71 c4       	add	#-60,r1
  309fa0:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  309fa2:	61 e3       	mov	r14,r1
  309fa4:	71 c4       	add	#-60,r1
  309fa6:	51 1f       	mov.l	@(60,r1),r1
  309fa8:	61 12       	mov.l	@r1,r1
  309faa:	62 13       	mov	r1,r2
  309fac:	72 01       	add	#1,r2
  309fae:	61 e3       	mov	r14,r1
  309fb0:	71 c4       	add	#-60,r1
  309fb2:	51 1f       	mov.l	@(60,r1),r1
  309fb4:	21 22       	mov.l	r2,@r1
	return 1;
  309fb6:	e1 01       	mov	#1,r1
}
  309fb8:	60 13       	mov	r1,r0
  309fba:	7e 04       	add	#4,r14
  309fbc:	6f e3       	mov	r14,r15
  309fbe:	6e f6       	mov.l	@r15+,r14
  309fc0:	00 0b       	rts	
  309fc2:	00 09       	nop	

00309fc4 <topti_glyph>:
   @height  Subglyph height
   @dataw   Glyph width
   @fg @bg  Foreground and background colors */
static void topti_glyph(uint16_t *vram, uint32_t const * data, int left,
	int top, int width, int height, int dataw, int fg, int bg)
{
  309fc4:	2f e6       	mov.l	r14,@-r15
  309fc6:	4f 22       	sts.l	pr,@-r15
  309fc8:	7f e0       	add	#-32,r15
  309fca:	6e f3       	mov	r15,r14
  309fcc:	61 e3       	mov	r14,r1
  309fce:	71 e0       	add	#-32,r1
  309fd0:	11 4e       	mov.l	r4,@(56,r1)
  309fd2:	61 e3       	mov	r14,r1
  309fd4:	71 e0       	add	#-32,r1
  309fd6:	11 5d       	mov.l	r5,@(52,r1)
  309fd8:	61 e3       	mov	r14,r1
  309fda:	71 e0       	add	#-32,r1
  309fdc:	11 6c       	mov.l	r6,@(48,r1)
  309fde:	61 e3       	mov	r14,r1
  309fe0:	71 e0       	add	#-32,r1
  309fe2:	11 7b       	mov.l	r7,@(44,r1)
	int index = top * dataw + left;
  309fe4:	61 e3       	mov	r14,r1
  309fe6:	71 e0       	add	#-32,r1
  309fe8:	52 1b       	mov.l	@(44,r1),r2
  309fea:	51 ec       	mov.l	@(48,r14),r1
  309fec:	02 17       	mul.l	r1,r2
  309fee:	03 1a       	sts	macl,r3
  309ff0:	61 e3       	mov	r14,r1
  309ff2:	71 e0       	add	#-32,r1
  309ff4:	62 e3       	mov	r14,r2
  309ff6:	72 e0       	add	#-32,r2
  309ff8:	52 2c       	mov.l	@(48,r2),r2
  309ffa:	32 3c       	add	r3,r2
  309ffc:	11 2f       	mov.l	r2,@(60,r1)

	/* Most common situation: opaque text on transparent background */
	if(bg < 0) topti_glyph_fg(vram + left, data, fg, height, width,
  309ffe:	51 ee       	mov.l	@(56,r14),r1
  30a000:	41 11       	cmp/pz	r1
  30a002:	89 1c       	bt	30a03e <topti_glyph+0x7a>
  30a004:	61 e3       	mov	r14,r1
  30a006:	71 e0       	add	#-32,r1
  30a008:	51 1c       	mov.l	@(48,r1),r1
  30a00a:	31 1c       	add	r1,r1
  30a00c:	62 e3       	mov	r14,r2
  30a00e:	72 e0       	add	#-32,r2
  30a010:	52 2e       	mov.l	@(56,r2),r2
  30a012:	64 23       	mov	r2,r4
  30a014:	34 1c       	add	r1,r4
  30a016:	56 ed       	mov.l	@(52,r14),r6
  30a018:	52 ec       	mov.l	@(48,r14),r2
  30a01a:	51 ea       	mov.l	@(40,r14),r1
  30a01c:	32 18       	sub	r1,r2
  30a01e:	61 e3       	mov	r14,r1
  30a020:	71 e0       	add	#-32,r1
  30a022:	63 e3       	mov	r14,r3
  30a024:	73 e0       	add	#-32,r3
  30a026:	53 3f       	mov.l	@(60,r3),r3
  30a028:	1f 32       	mov.l	r3,@(8,r15)
  30a02a:	1f 21       	mov.l	r2,@(4,r15)
  30a02c:	52 ea       	mov.l	@(40,r14),r2
  30a02e:	2f 22       	mov.l	r2,@r15
  30a030:	57 eb       	mov.l	@(44,r14),r7
  30a032:	55 1d       	mov.l	@(52,r1),r5
  30a034:	d1 25       	mov.l	30a0cc <topti_glyph+0x108>,r1	! 30ac2e <topti_glyph_fg>
  30a036:	41 0b       	jsr	@r1
  30a038:	00 09       	nop	
	else if(fg >= 0) topti_glyph_fg_bg(vram + left, data, (fg << 16) | bg,
		height, width, dataw - width, index);
	/* Draw background but not text */
	else topti_glyph_bg(vram + left, data, bg, height, width,
		dataw - width, index);
}
  30a03a:	a0 40       	bra	30a0be <topti_glyph+0xfa>
  30a03c:	00 09       	nop	
	else if(fg >= 0) topti_glyph_fg_bg(vram + left, data, (fg << 16) | bg,
  30a03e:	51 ed       	mov.l	@(52,r14),r1
  30a040:	41 11       	cmp/pz	r1
  30a042:	8b 21       	bf	30a088 <topti_glyph+0xc4>
  30a044:	61 e3       	mov	r14,r1
  30a046:	71 e0       	add	#-32,r1
  30a048:	51 1c       	mov.l	@(48,r1),r1
  30a04a:	31 1c       	add	r1,r1
  30a04c:	62 e3       	mov	r14,r2
  30a04e:	72 e0       	add	#-32,r2
  30a050:	52 2e       	mov.l	@(56,r2),r2
  30a052:	64 23       	mov	r2,r4
  30a054:	34 1c       	add	r1,r4
  30a056:	51 ed       	mov.l	@(52,r14),r1
  30a058:	62 13       	mov	r1,r2
  30a05a:	42 28       	shll16	r2
  30a05c:	51 ee       	mov.l	@(56,r14),r1
  30a05e:	21 2b       	or	r2,r1
  30a060:	66 13       	mov	r1,r6
  30a062:	52 ec       	mov.l	@(48,r14),r2
  30a064:	51 ea       	mov.l	@(40,r14),r1
  30a066:	32 18       	sub	r1,r2
  30a068:	61 e3       	mov	r14,r1
  30a06a:	71 e0       	add	#-32,r1
  30a06c:	63 e3       	mov	r14,r3
  30a06e:	73 e0       	add	#-32,r3
  30a070:	53 3f       	mov.l	@(60,r3),r3
  30a072:	1f 32       	mov.l	r3,@(8,r15)
  30a074:	1f 21       	mov.l	r2,@(4,r15)
  30a076:	52 ea       	mov.l	@(40,r14),r2
  30a078:	2f 22       	mov.l	r2,@r15
  30a07a:	57 eb       	mov.l	@(44,r14),r7
  30a07c:	55 1d       	mov.l	@(52,r1),r5
  30a07e:	d1 14       	mov.l	30a0d0 <topti_glyph+0x10c>,r1	! 30abf0 <topti_glyph_fg_bg>
  30a080:	41 0b       	jsr	@r1
  30a082:	00 09       	nop	
}
  30a084:	a0 1b       	bra	30a0be <topti_glyph+0xfa>
  30a086:	00 09       	nop	
	else topti_glyph_bg(vram + left, data, bg, height, width,
  30a088:	61 e3       	mov	r14,r1
  30a08a:	71 e0       	add	#-32,r1
  30a08c:	51 1c       	mov.l	@(48,r1),r1
  30a08e:	31 1c       	add	r1,r1
  30a090:	62 e3       	mov	r14,r2
  30a092:	72 e0       	add	#-32,r2
  30a094:	52 2e       	mov.l	@(56,r2),r2
  30a096:	64 23       	mov	r2,r4
  30a098:	34 1c       	add	r1,r4
  30a09a:	56 ee       	mov.l	@(56,r14),r6
  30a09c:	52 ec       	mov.l	@(48,r14),r2
  30a09e:	51 ea       	mov.l	@(40,r14),r1
  30a0a0:	32 18       	sub	r1,r2
  30a0a2:	61 e3       	mov	r14,r1
  30a0a4:	71 e0       	add	#-32,r1
  30a0a6:	63 e3       	mov	r14,r3
  30a0a8:	73 e0       	add	#-32,r3
  30a0aa:	53 3f       	mov.l	@(60,r3),r3
  30a0ac:	1f 32       	mov.l	r3,@(8,r15)
  30a0ae:	1f 21       	mov.l	r2,@(4,r15)
  30a0b0:	52 ea       	mov.l	@(40,r14),r2
  30a0b2:	2f 22       	mov.l	r2,@r15
  30a0b4:	57 eb       	mov.l	@(44,r14),r7
  30a0b6:	55 1d       	mov.l	@(52,r1),r5
  30a0b8:	d1 06       	mov.l	30a0d4 <topti_glyph+0x110>,r1	! 30ac68 <topti_glyph_bg>
  30a0ba:	41 0b       	jsr	@r1
  30a0bc:	00 09       	nop	
}
  30a0be:	00 09       	nop	
  30a0c0:	7e 20       	add	#32,r14
  30a0c2:	6f e3       	mov	r14,r15
  30a0c4:	4f 26       	lds.l	@r15+,pr
  30a0c6:	6e f6       	mov.l	@r15+,r14
  30a0c8:	00 0b       	rts	
  30a0ca:	00 09       	nop	
  30a0cc:	00 30       	.word 0x0030
  30a0ce:	ac 2e       	bra	30992e <topti_utf8_next+0x36>
  30a0d0:	00 30       	.word 0x0030
  30a0d2:	ab f0       	bra	3098b6 <topti_offset+0xac>
  30a0d4:	00 30       	.word 0x0030
  30a0d6:	ac 68       	bra	3099aa <topti_utf8_next+0xb2>

0030a0d8 <topti_render>:

static void topti_render(int x, int y, char const *str_char, font_t const *f,
	int fg, int bg, int size)
{
  30a0d8:	2f 86       	mov.l	r8,@-r15
  30a0da:	2f e6       	mov.l	r14,@-r15
  30a0dc:	4f 22       	sts.l	pr,@-r15
  30a0de:	7f 94       	add	#-108,r15
  30a0e0:	6e f3       	mov	r15,r14
  30a0e2:	61 e3       	mov	r14,r1
  30a0e4:	71 ec       	add	#-20,r1
  30a0e6:	11 4d       	mov.l	r4,@(52,r1)
  30a0e8:	61 e3       	mov	r14,r1
  30a0ea:	71 ec       	add	#-20,r1
  30a0ec:	11 5c       	mov.l	r5,@(48,r1)
  30a0ee:	61 e3       	mov	r14,r1
  30a0f0:	71 ec       	add	#-20,r1
  30a0f2:	11 6b       	mov.l	r6,@(44,r1)
  30a0f4:	61 e3       	mov	r14,r1
  30a0f6:	71 ec       	add	#-20,r1
  30a0f8:	11 7a       	mov.l	r7,@(40,r1)
	uint8_t const *str = (void *)str_char;
  30a0fa:	61 e3       	mov	r14,r1
  30a0fc:	71 ec       	add	#-20,r1
  30a0fe:	62 e3       	mov	r14,r2
  30a100:	72 ec       	add	#-20,r2
  30a102:	52 2b       	mov.l	@(44,r2),r2
  30a104:	11 2e       	mov.l	r2,@(56,r1)
	uint8_t const *str0 = str;
  30a106:	61 e3       	mov	r14,r1
  30a108:	71 2c       	add	#44,r1
  30a10a:	62 e3       	mov	r14,r2
  30a10c:	72 ec       	add	#-20,r2
  30a10e:	52 2e       	mov.l	@(56,r2),r2
  30a110:	11 2a       	mov.l	r2,@(40,r1)

	/* Raw glyph data */
	uint32_t const *data = f->data;
  30a112:	61 e3       	mov	r14,r1
  30a114:	71 2c       	add	#44,r1
  30a116:	62 e3       	mov	r14,r2
  30a118:	72 ec       	add	#-20,r2
  30a11a:	52 2a       	mov.l	@(40,r2),r2
  30a11c:	52 25       	mov.l	@(20,r2),r2
  30a11e:	11 29       	mov.l	r2,@(36,r1)

	/* Storage height, top position within glyph */
	int height = f->data_height, top = 0;
  30a120:	61 e3       	mov	r14,r1
  30a122:	71 ec       	add	#-20,r1
  30a124:	51 1a       	mov.l	@(40,r1),r1
  30a126:	84 16       	mov.b	@(6,r1),r0
  30a128:	61 03       	mov	r0,r1
  30a12a:	62 1c       	extu.b	r1,r2
  30a12c:	61 e3       	mov	r14,r1
  30a12e:	71 2c       	add	#44,r1
  30a130:	11 2f       	mov.l	r2,@(60,r1)
  30a132:	61 e3       	mov	r14,r1
  30a134:	71 2c       	add	#44,r1
  30a136:	e2 00       	mov	#0,r2
  30a138:	11 2e       	mov.l	r2,@(56,r1)

	/* Vertical clipping */
	if(x >= dwindow.right || y >= dwindow.bottom) return;
  30a13a:	d1 63       	mov.l	30a2c8 <topti_render+0x1f0>,r1	! 8101690 <dwindow>
  30a13c:	51 12       	mov.l	@(8,r1),r1
  30a13e:	62 e3       	mov	r14,r2
  30a140:	72 ec       	add	#-20,r2
  30a142:	52 2d       	mov.l	@(52,r2),r2
  30a144:	32 13       	cmp/ge	r1,r2
  30a146:	89 06       	bt	30a156 <topti_render+0x7e>
  30a148:	d1 5f       	mov.l	30a2c8 <topti_render+0x1f0>,r1	! 8101690 <dwindow>
  30a14a:	51 13       	mov.l	@(12,r1),r1
  30a14c:	62 e3       	mov	r14,r2
  30a14e:	72 ec       	add	#-20,r2
  30a150:	52 2c       	mov.l	@(48,r2),r2
  30a152:	32 13       	cmp/ge	r1,r2
  30a154:	8b 01       	bf	30a15a <topti_render+0x82>
  30a156:	a1 b9       	bra	30a4cc <topti_render+0x3f4>
  30a158:	00 09       	nop	
	if(y + height <= dwindow.top) return;
  30a15a:	62 e3       	mov	r14,r2
  30a15c:	72 ec       	add	#-20,r2
  30a15e:	61 e3       	mov	r14,r1
  30a160:	71 2c       	add	#44,r1
  30a162:	52 2c       	mov.l	@(48,r2),r2
  30a164:	51 1f       	mov.l	@(60,r1),r1
  30a166:	32 1c       	add	r1,r2
  30a168:	d1 57       	mov.l	30a2c8 <topti_render+0x1f0>,r1	! 8101690 <dwindow>
  30a16a:	51 11       	mov.l	@(4,r1),r1
  30a16c:	32 17       	cmp/gt	r1,r2
  30a16e:	89 01       	bt	30a174 <topti_render+0x9c>
  30a170:	a1 af       	bra	30a4d2 <topti_render+0x3fa>
  30a172:	00 09       	nop	

	int top_overflow = y - dwindow.top;
  30a174:	d1 54       	mov.l	30a2c8 <topti_render+0x1f0>,r1	! 8101690 <dwindow>
  30a176:	53 11       	mov.l	@(4,r1),r3
  30a178:	61 e3       	mov	r14,r1
  30a17a:	71 2c       	add	#44,r1
  30a17c:	62 e3       	mov	r14,r2
  30a17e:	72 ec       	add	#-20,r2
  30a180:	52 2c       	mov.l	@(48,r2),r2
  30a182:	32 38       	sub	r3,r2
  30a184:	11 28       	mov.l	r2,@(32,r1)
	if(top_overflow < 0) {
  30a186:	61 e3       	mov	r14,r1
  30a188:	71 2c       	add	#44,r1
  30a18a:	51 18       	mov.l	@(32,r1),r1
  30a18c:	41 11       	cmp/pz	r1
  30a18e:	89 1a       	bt	30a1c6 <topti_render+0xee>
		top = -top_overflow;
  30a190:	61 e3       	mov	r14,r1
  30a192:	71 2c       	add	#44,r1
  30a194:	62 e3       	mov	r14,r2
  30a196:	72 2c       	add	#44,r2
  30a198:	52 28       	mov.l	@(32,r2),r2
  30a19a:	62 2b       	neg	r2,r2
  30a19c:	11 2e       	mov.l	r2,@(56,r1)
		height += top_overflow;
  30a19e:	61 e3       	mov	r14,r1
  30a1a0:	71 2c       	add	#44,r1
  30a1a2:	63 e3       	mov	r14,r3
  30a1a4:	73 2c       	add	#44,r3
  30a1a6:	62 e3       	mov	r14,r2
  30a1a8:	72 2c       	add	#44,r2
  30a1aa:	53 3f       	mov.l	@(60,r3),r3
  30a1ac:	52 28       	mov.l	@(32,r2),r2
  30a1ae:	32 3c       	add	r3,r2
  30a1b0:	11 2f       	mov.l	r2,@(60,r1)
		y -= top_overflow;
  30a1b2:	61 e3       	mov	r14,r1
  30a1b4:	71 ec       	add	#-20,r1
  30a1b6:	62 e3       	mov	r14,r2
  30a1b8:	72 ec       	add	#-20,r2
  30a1ba:	63 e3       	mov	r14,r3
  30a1bc:	73 2c       	add	#44,r3
  30a1be:	52 2c       	mov.l	@(48,r2),r2
  30a1c0:	53 38       	mov.l	@(32,r3),r3
  30a1c2:	32 38       	sub	r3,r2
  30a1c4:	11 2c       	mov.l	r2,@(48,r1)
	}
	height = min(height, dwindow.bottom - y);
  30a1c6:	61 e3       	mov	r14,r1
  30a1c8:	71 2c       	add	#44,r1
  30a1ca:	62 e3       	mov	r14,r2
  30a1cc:	72 2c       	add	#44,r2
  30a1ce:	52 2f       	mov.l	@(60,r2),r2
  30a1d0:	11 27       	mov.l	r2,@(28,r1)
  30a1d2:	d1 3d       	mov.l	30a2c8 <topti_render+0x1f0>,r1	! 8101690 <dwindow>
  30a1d4:	52 13       	mov.l	@(12,r1),r2
  30a1d6:	61 e3       	mov	r14,r1
  30a1d8:	71 2c       	add	#44,r1
  30a1da:	63 e3       	mov	r14,r3
  30a1dc:	73 ec       	add	#-20,r3
  30a1de:	53 3c       	mov.l	@(48,r3),r3
  30a1e0:	32 38       	sub	r3,r2
  30a1e2:	11 26       	mov.l	r2,@(24,r1)
  30a1e4:	61 e3       	mov	r14,r1
  30a1e6:	71 2c       	add	#44,r1
  30a1e8:	62 e3       	mov	r14,r2
  30a1ea:	72 2c       	add	#44,r2
  30a1ec:	52 27       	mov.l	@(28,r2),r2
  30a1ee:	51 16       	mov.l	@(24,r1),r1
  30a1f0:	31 27       	cmp/gt	r2,r1
  30a1f2:	8b 00       	bf	30a1f6 <topti_render+0x11e>
  30a1f4:	61 23       	mov	r2,r1
  30a1f6:	62 e3       	mov	r14,r2
  30a1f8:	72 2c       	add	#44,r2
  30a1fa:	12 1f       	mov.l	r1,@(60,r2)
	if(height <= 0) return;
  30a1fc:	61 e3       	mov	r14,r1
  30a1fe:	71 2c       	add	#44,r1
  30a200:	51 1f       	mov.l	@(60,r1),r1
  30a202:	41 15       	cmp/pl	r1
  30a204:	89 01       	bt	30a20a <topti_render+0x132>
  30a206:	a1 67       	bra	30a4d8 <topti_render+0x400>
  30a208:	00 09       	nop	

	/* Move to top row */
	uint16_t *target = gint_vram + DWIDTH * y;
  30a20a:	d1 30       	mov.l	30a2cc <topti_render+0x1f4>,r1	! 810143c <gint_vram>
  30a20c:	62 12       	mov.l	@r1,r2
  30a20e:	61 e3       	mov	r14,r1
  30a210:	71 ec       	add	#-20,r1
  30a212:	53 1c       	mov.l	@(48,r1),r3
  30a214:	91 57       	mov.w	30a2c6 <topti_render+0x1ee>,r1	! 318
  30a216:	03 17       	mul.l	r1,r3
  30a218:	03 1a       	sts	macl,r3
  30a21a:	61 e3       	mov	r14,r1
  30a21c:	71 2c       	add	#44,r1
  30a21e:	32 3c       	add	r3,r2
  30a220:	11 25       	mov.l	r2,@(20,r1)

	/* Character spacing waiting to be drawn, in pixels */
	int space = 0;
  30a222:	61 e3       	mov	r14,r1
  30a224:	71 2c       	add	#44,r1
  30a226:	e2 00       	mov	#0,r2
  30a228:	11 2d       	mov.l	r2,@(52,r1)

	/* Read each character from the input string */
	while(1)
	{
		uint32_t code_point = topti_utf8_next(&str);
  30a22a:	68 e3       	mov	r14,r8
  30a22c:	78 2c       	add	#44,r8
  30a22e:	61 e3       	mov	r14,r1
  30a230:	71 24       	add	#36,r1
  30a232:	64 13       	mov	r1,r4
  30a234:	d1 26       	mov.l	30a2d0 <topti_render+0x1f8>,r1	! 3098f8 <topti_utf8_next>
  30a236:	41 0b       	jsr	@r1
  30a238:	00 09       	nop	
  30a23a:	61 03       	mov	r0,r1
  30a23c:	18 14       	mov.l	r1,@(16,r8)
		if(!code_point || (size >= 0 && str - str0 > size)) break;
  30a23e:	61 e3       	mov	r14,r1
  30a240:	71 2c       	add	#44,r1
  30a242:	51 14       	mov.l	@(16,r1),r1
  30a244:	21 18       	tst	r1,r1
  30a246:	89 10       	bt	30a26a <topti_render+0x192>
  30a248:	62 e3       	mov	r14,r2
  30a24a:	72 7c       	add	#124,r2
  30a24c:	51 21       	mov.l	@(4,r2),r1
  30a24e:	41 11       	cmp/pz	r1
  30a250:	8b 0d       	bf	30a26e <topti_render+0x196>
  30a252:	61 e3       	mov	r14,r1
  30a254:	71 ec       	add	#-20,r1
  30a256:	51 1e       	mov.l	@(56,r1),r1
  30a258:	62 e3       	mov	r14,r2
  30a25a:	72 2c       	add	#44,r2
  30a25c:	52 2a       	mov.l	@(40,r2),r2
  30a25e:	31 28       	sub	r2,r1
  30a260:	63 e3       	mov	r14,r3
  30a262:	73 7c       	add	#124,r3
  30a264:	52 31       	mov.l	@(4,r3),r2
  30a266:	32 13       	cmp/ge	r1,r2
  30a268:	89 01       	bt	30a26e <topti_render+0x196>
  30a26a:	a1 39       	bra	30a4e0 <topti_render+0x408>
  30a26c:	00 09       	nop	

		int glyph = topti_glyph_index(f, code_point);
  30a26e:	68 e3       	mov	r14,r8
  30a270:	78 2c       	add	#44,r8
  30a272:	62 e3       	mov	r14,r2
  30a274:	72 2c       	add	#44,r2
  30a276:	61 e3       	mov	r14,r1
  30a278:	71 ec       	add	#-20,r1
  30a27a:	55 24       	mov.l	@(16,r2),r5
  30a27c:	54 1a       	mov.l	@(40,r1),r4
  30a27e:	d1 15       	mov.l	30a2d4 <topti_render+0x1fc>,r1	! 309714 <topti_glyph_index>
  30a280:	41 0b       	jsr	@r1
  30a282:	00 09       	nop	
  30a284:	61 03       	mov	r0,r1
  30a286:	18 13       	mov.l	r1,@(12,r8)
		if(glyph < 0) continue;
  30a288:	61 e3       	mov	r14,r1
  30a28a:	71 2c       	add	#44,r1
  30a28c:	51 13       	mov.l	@(12,r1),r1
  30a28e:	41 11       	cmp/pz	r1
  30a290:	89 01       	bt	30a296 <topti_render+0x1be>
  30a292:	a1 18       	bra	30a4c6 <topti_render+0x3ee>
  30a294:	00 09       	nop	

		int dataw = f->prop ? f->glyph_width[glyph] : f->width;
  30a296:	61 e3       	mov	r14,r1
  30a298:	71 ec       	add	#-20,r1
  30a29a:	51 1a       	mov.l	@(40,r1),r1
  30a29c:	84 14       	mov.b	@(4,r1),r0
  30a29e:	61 03       	mov	r0,r1
  30a2a0:	61 1c       	extu.b	r1,r1
  30a2a2:	e2 01       	mov	#1,r2
  30a2a4:	21 29       	and	r2,r1
  30a2a6:	61 1c       	extu.b	r1,r1
  30a2a8:	21 18       	tst	r1,r1
  30a2aa:	89 15       	bt	30a2d8 <topti_render+0x200>
  30a2ac:	61 e3       	mov	r14,r1
  30a2ae:	71 ec       	add	#-20,r1
  30a2b0:	51 1a       	mov.l	@(40,r1),r1
  30a2b2:	52 17       	mov.l	@(28,r1),r2
  30a2b4:	61 e3       	mov	r14,r1
  30a2b6:	71 2c       	add	#44,r1
  30a2b8:	51 13       	mov.l	@(12,r1),r1
  30a2ba:	31 2c       	add	r2,r1
  30a2bc:	61 10       	mov.b	@r1,r1
  30a2be:	61 1c       	extu.b	r1,r1
  30a2c0:	62 13       	mov	r1,r2
  30a2c2:	a0 10       	bra	30a2e6 <topti_render+0x20e>
  30a2c4:	00 09       	nop	
  30a2c6:	03 18       	.word 0x0318
  30a2c8:	08 10       	.word 0x0810
  30a2ca:	16 90       	mov.l	r9,@(0,r6)
  30a2cc:	08 10       	.word 0x0810
  30a2ce:	14 3c       	mov.l	r3,@(48,r4)
  30a2d0:	00 30       	.word 0x0030
  30a2d2:	98 f8       	mov.w	30a4c6 <topti_render+0x3ee>,r8	! 9
  30a2d4:	00 30       	.word 0x0030
  30a2d6:	97 14       	mov.w	30a302 <topti_render+0x22a>,r7	! 72ec
  30a2d8:	61 e3       	mov	r14,r1
  30a2da:	71 ec       	add	#-20,r1
  30a2dc:	51 1a       	mov.l	@(40,r1),r1
  30a2de:	85 1c       	mov.w	@(24,r1),r0
  30a2e0:	61 03       	mov	r0,r1
  30a2e2:	61 1d       	extu.w	r1,r1
  30a2e4:	62 13       	mov	r1,r2
  30a2e6:	61 e3       	mov	r14,r1
  30a2e8:	71 2c       	add	#44,r1
  30a2ea:	11 22       	mov.l	r2,@(8,r1)

		/* Draw character spacing if background is opaque */
		if(space && bg >= 0) drect(x, y, x+space-1, y+height-1, bg);
  30a2ec:	61 e3       	mov	r14,r1
  30a2ee:	71 2c       	add	#44,r1
  30a2f0:	51 1d       	mov.l	@(52,r1),r1
  30a2f2:	21 18       	tst	r1,r1
  30a2f4:	89 23       	bt	30a33e <topti_render+0x266>
  30a2f6:	62 e3       	mov	r14,r2
  30a2f8:	72 40       	add	#64,r2
  30a2fa:	51 2f       	mov.l	@(60,r2),r1
  30a2fc:	41 11       	cmp/pz	r1
  30a2fe:	8b 1e       	bf	30a33e <topti_render+0x266>
  30a300:	62 e3       	mov	r14,r2
  30a302:	72 ec       	add	#-20,r2
  30a304:	61 e3       	mov	r14,r1
  30a306:	71 2c       	add	#44,r1
  30a308:	52 2d       	mov.l	@(52,r2),r2
  30a30a:	51 1d       	mov.l	@(52,r1),r1
  30a30c:	31 2c       	add	r2,r1
  30a30e:	66 13       	mov	r1,r6
  30a310:	76 ff       	add	#-1,r6
  30a312:	62 e3       	mov	r14,r2
  30a314:	72 ec       	add	#-20,r2
  30a316:	61 e3       	mov	r14,r1
  30a318:	71 2c       	add	#44,r1
  30a31a:	52 2c       	mov.l	@(48,r2),r2
  30a31c:	51 1f       	mov.l	@(60,r1),r1
  30a31e:	31 2c       	add	r2,r1
  30a320:	67 13       	mov	r1,r7
  30a322:	77 ff       	add	#-1,r7
  30a324:	62 e3       	mov	r14,r2
  30a326:	72 ec       	add	#-20,r2
  30a328:	61 e3       	mov	r14,r1
  30a32a:	71 ec       	add	#-20,r1
  30a32c:	65 e3       	mov	r14,r5
  30a32e:	75 40       	add	#64,r5
  30a330:	53 5f       	mov.l	@(60,r5),r3
  30a332:	2f 32       	mov.l	r3,@r15
  30a334:	55 2c       	mov.l	@(48,r2),r5
  30a336:	54 1d       	mov.l	@(52,r1),r4
  30a338:	d1 6d       	mov.l	30a4f0 <topti_render+0x418>,r1	! 30a7b0 <drect>
  30a33a:	41 0b       	jsr	@r1
  30a33c:	00 09       	nop	
		x += space;
  30a33e:	61 e3       	mov	r14,r1
  30a340:	71 ec       	add	#-20,r1
  30a342:	63 e3       	mov	r14,r3
  30a344:	73 ec       	add	#-20,r3
  30a346:	62 e3       	mov	r14,r2
  30a348:	72 2c       	add	#44,r2
  30a34a:	53 3d       	mov.l	@(52,r3),r3
  30a34c:	52 2d       	mov.l	@(52,r2),r2
  30a34e:	32 3c       	add	r3,r2
  30a350:	11 2d       	mov.l	r2,@(52,r1)
		if(x >= dwindow.right) break;
  30a352:	d1 68       	mov.l	30a4f4 <topti_render+0x41c>,r1	! 8101690 <dwindow>
  30a354:	51 12       	mov.l	@(8,r1),r1
  30a356:	62 e3       	mov	r14,r2
  30a358:	72 ec       	add	#-20,r2
  30a35a:	52 2d       	mov.l	@(52,r2),r2
  30a35c:	32 13       	cmp/ge	r1,r2
  30a35e:	8b 01       	bf	30a364 <topti_render+0x28c>
  30a360:	a0 bd       	bra	30a4de <topti_render+0x406>
  30a362:	00 09       	nop	

		int index = topti_offset(f, glyph);
  30a364:	61 e3       	mov	r14,r1
  30a366:	71 2c       	add	#44,r1
  30a368:	52 13       	mov.l	@(12,r1),r2
  30a36a:	68 e3       	mov	r14,r8
  30a36c:	78 2c       	add	#44,r8
  30a36e:	61 e3       	mov	r14,r1
  30a370:	71 ec       	add	#-20,r1
  30a372:	65 23       	mov	r2,r5
  30a374:	54 1a       	mov.l	@(40,r1),r4
  30a376:	d1 60       	mov.l	30a4f8 <topti_render+0x420>,r1	! 30980a <topti_offset>
  30a378:	41 0b       	jsr	@r1
  30a37a:	00 09       	nop	
  30a37c:	61 03       	mov	r0,r1
  30a37e:	18 11       	mov.l	r1,@(4,r8)

		/* Compute horizontal intersection between glyph and screen */

		int width = dataw, left = 0;
  30a380:	61 e3       	mov	r14,r1
  30a382:	71 2c       	add	#44,r1
  30a384:	62 e3       	mov	r14,r2
  30a386:	72 2c       	add	#44,r2
  30a388:	52 22       	mov.l	@(8,r2),r2
  30a38a:	11 2c       	mov.l	r2,@(48,r1)
  30a38c:	61 e3       	mov	r14,r1
  30a38e:	71 2c       	add	#44,r1
  30a390:	e2 00       	mov	#0,r2
  30a392:	11 2b       	mov.l	r2,@(44,r1)

		if(x + dataw <= dwindow.left)
  30a394:	62 e3       	mov	r14,r2
  30a396:	72 ec       	add	#-20,r2
  30a398:	61 e3       	mov	r14,r1
  30a39a:	71 2c       	add	#44,r1
  30a39c:	52 2d       	mov.l	@(52,r2),r2
  30a39e:	51 12       	mov.l	@(8,r1),r1
  30a3a0:	32 1c       	add	r1,r2
  30a3a2:	d1 54       	mov.l	30a4f4 <topti_render+0x41c>,r1	! 8101690 <dwindow>
  30a3a4:	61 12       	mov.l	@r1,r1
  30a3a6:	32 17       	cmp/gt	r1,r2
  30a3a8:	89 14       	bt	30a3d4 <topti_render+0x2fc>
		{
			x += dataw;
  30a3aa:	61 e3       	mov	r14,r1
  30a3ac:	71 ec       	add	#-20,r1
  30a3ae:	63 e3       	mov	r14,r3
  30a3b0:	73 ec       	add	#-20,r3
  30a3b2:	62 e3       	mov	r14,r2
  30a3b4:	72 2c       	add	#44,r2
  30a3b6:	53 3d       	mov.l	@(52,r3),r3
  30a3b8:	52 22       	mov.l	@(8,r2),r2
  30a3ba:	32 3c       	add	r3,r2
  30a3bc:	11 2d       	mov.l	r2,@(52,r1)
			space = f->char_spacing;
  30a3be:	61 e3       	mov	r14,r1
  30a3c0:	71 ec       	add	#-20,r1
  30a3c2:	51 1a       	mov.l	@(40,r1),r1
  30a3c4:	84 1c       	mov.b	@(12,r1),r0
  30a3c6:	61 03       	mov	r0,r1
  30a3c8:	62 1c       	extu.b	r1,r2
  30a3ca:	61 e3       	mov	r14,r1
  30a3cc:	71 2c       	add	#44,r1
  30a3ce:	11 2d       	mov.l	r2,@(52,r1)
			continue;
  30a3d0:	a0 7a       	bra	30a4c8 <topti_render+0x3f0>
  30a3d2:	00 09       	nop	
		}
		if(x < dwindow.left) {
  30a3d4:	d1 47       	mov.l	30a4f4 <topti_render+0x41c>,r1	! 8101690 <dwindow>
  30a3d6:	61 12       	mov.l	@r1,r1
  30a3d8:	62 e3       	mov	r14,r2
  30a3da:	72 ec       	add	#-20,r2
  30a3dc:	52 2d       	mov.l	@(52,r2),r2
  30a3de:	32 13       	cmp/ge	r1,r2
  30a3e0:	89 12       	bt	30a408 <topti_render+0x330>
			left = dwindow.left - x;
  30a3e2:	d1 44       	mov.l	30a4f4 <topti_render+0x41c>,r1	! 8101690 <dwindow>
  30a3e4:	62 12       	mov.l	@r1,r2
  30a3e6:	61 e3       	mov	r14,r1
  30a3e8:	71 2c       	add	#44,r1
  30a3ea:	63 e3       	mov	r14,r3
  30a3ec:	73 ec       	add	#-20,r3
  30a3ee:	53 3d       	mov.l	@(52,r3),r3
  30a3f0:	32 38       	sub	r3,r2
  30a3f2:	11 2b       	mov.l	r2,@(44,r1)
			width -= left;
  30a3f4:	61 e3       	mov	r14,r1
  30a3f6:	71 2c       	add	#44,r1
  30a3f8:	62 e3       	mov	r14,r2
  30a3fa:	72 2c       	add	#44,r2
  30a3fc:	63 e3       	mov	r14,r3
  30a3fe:	73 2c       	add	#44,r3
  30a400:	52 2c       	mov.l	@(48,r2),r2
  30a402:	53 3b       	mov.l	@(44,r3),r3
  30a404:	32 38       	sub	r3,r2
  30a406:	11 2c       	mov.l	r2,@(48,r1)
		}
		width = min(width, dwindow.right - x);
  30a408:	61 e3       	mov	r14,r1
  30a40a:	71 2c       	add	#44,r1
  30a40c:	62 e3       	mov	r14,r2
  30a40e:	72 2c       	add	#44,r2
  30a410:	52 2c       	mov.l	@(48,r2),r2
  30a412:	11 20       	mov.l	r2,@(0,r1)
  30a414:	d1 37       	mov.l	30a4f4 <topti_render+0x41c>,r1	! 8101690 <dwindow>
  30a416:	52 12       	mov.l	@(8,r1),r2
  30a418:	61 e3       	mov	r14,r1
  30a41a:	71 ec       	add	#-20,r1
  30a41c:	63 e3       	mov	r14,r3
  30a41e:	73 ec       	add	#-20,r3
  30a420:	53 3d       	mov.l	@(52,r3),r3
  30a422:	32 38       	sub	r3,r2
  30a424:	11 2f       	mov.l	r2,@(60,r1)
  30a426:	61 e3       	mov	r14,r1
  30a428:	71 ec       	add	#-20,r1
  30a42a:	62 e3       	mov	r14,r2
  30a42c:	72 2c       	add	#44,r2
  30a42e:	52 20       	mov.l	@(0,r2),r2
  30a430:	51 1f       	mov.l	@(60,r1),r1
  30a432:	31 27       	cmp/gt	r2,r1
  30a434:	8b 00       	bf	30a438 <topti_render+0x360>
  30a436:	61 23       	mov	r2,r1
  30a438:	62 e3       	mov	r14,r2
  30a43a:	72 2c       	add	#44,r2
  30a43c:	12 1c       	mov.l	r1,@(48,r2)

		/* Render glyph */

		topti_glyph(target + x, data + index, left, top, width, height,
  30a43e:	61 e3       	mov	r14,r1
  30a440:	71 ec       	add	#-20,r1
  30a442:	51 1d       	mov.l	@(52,r1),r1
  30a444:	31 1c       	add	r1,r1
  30a446:	62 e3       	mov	r14,r2
  30a448:	72 2c       	add	#44,r2
  30a44a:	52 25       	mov.l	@(20,r2),r2
  30a44c:	64 23       	mov	r2,r4
  30a44e:	34 1c       	add	r1,r4
  30a450:	61 e3       	mov	r14,r1
  30a452:	71 2c       	add	#44,r1
  30a454:	51 11       	mov.l	@(4,r1),r1
  30a456:	41 08       	shll2	r1
  30a458:	62 e3       	mov	r14,r2
  30a45a:	72 2c       	add	#44,r2
  30a45c:	52 29       	mov.l	@(36,r2),r2
  30a45e:	65 23       	mov	r2,r5
  30a460:	35 1c       	add	r1,r5
  30a462:	62 e3       	mov	r14,r2
  30a464:	72 2c       	add	#44,r2
  30a466:	61 e3       	mov	r14,r1
  30a468:	71 2c       	add	#44,r1
  30a46a:	67 e3       	mov	r14,r7
  30a46c:	77 40       	add	#64,r7
  30a46e:	53 7f       	mov.l	@(60,r7),r3
  30a470:	1f 34       	mov.l	r3,@(16,r15)
  30a472:	60 e3       	mov	r14,r0
  30a474:	70 40       	add	#64,r0
  30a476:	53 0e       	mov.l	@(56,r0),r3
  30a478:	1f 33       	mov.l	r3,@(12,r15)
  30a47a:	63 e3       	mov	r14,r3
  30a47c:	73 2c       	add	#44,r3
  30a47e:	53 32       	mov.l	@(8,r3),r3
  30a480:	1f 32       	mov.l	r3,@(8,r15)
  30a482:	63 e3       	mov	r14,r3
  30a484:	73 2c       	add	#44,r3
  30a486:	53 3f       	mov.l	@(60,r3),r3
  30a488:	1f 31       	mov.l	r3,@(4,r15)
  30a48a:	63 e3       	mov	r14,r3
  30a48c:	73 2c       	add	#44,r3
  30a48e:	53 3c       	mov.l	@(48,r3),r3
  30a490:	2f 32       	mov.l	r3,@r15
  30a492:	57 2e       	mov.l	@(56,r2),r7
  30a494:	56 1b       	mov.l	@(44,r1),r6
  30a496:	d1 19       	mov.l	30a4fc <topti_render+0x424>,r1	! 309fc4 <topti_glyph>
  30a498:	41 0b       	jsr	@r1
  30a49a:	00 09       	nop	
			dataw, fg, bg);

		x += dataw;
  30a49c:	61 e3       	mov	r14,r1
  30a49e:	71 ec       	add	#-20,r1
  30a4a0:	63 e3       	mov	r14,r3
  30a4a2:	73 ec       	add	#-20,r3
  30a4a4:	62 e3       	mov	r14,r2
  30a4a6:	72 2c       	add	#44,r2
  30a4a8:	53 3d       	mov.l	@(52,r3),r3
  30a4aa:	52 22       	mov.l	@(8,r2),r2
  30a4ac:	32 3c       	add	r3,r2
  30a4ae:	11 2d       	mov.l	r2,@(52,r1)
		space = f->char_spacing;
  30a4b0:	61 e3       	mov	r14,r1
  30a4b2:	71 ec       	add	#-20,r1
  30a4b4:	51 1a       	mov.l	@(40,r1),r1
  30a4b6:	84 1c       	mov.b	@(12,r1),r0
  30a4b8:	61 03       	mov	r0,r1
  30a4ba:	62 1c       	extu.b	r1,r2
  30a4bc:	61 e3       	mov	r14,r1
  30a4be:	71 2c       	add	#44,r1
  30a4c0:	11 2d       	mov.l	r2,@(52,r1)
  30a4c2:	ae b2       	bra	30a22a <topti_render+0x152>
  30a4c4:	00 09       	nop	
		if(glyph < 0) continue;
  30a4c6:	00 09       	nop	
	{
  30a4c8:	ae af       	bra	30a22a <topti_render+0x152>
  30a4ca:	00 09       	nop	
	if(x >= dwindow.right || y >= dwindow.bottom) return;
  30a4cc:	00 09       	nop	
  30a4ce:	a0 07       	bra	30a4e0 <topti_render+0x408>
  30a4d0:	00 09       	nop	
	if(y + height <= dwindow.top) return;
  30a4d2:	00 09       	nop	
  30a4d4:	a0 04       	bra	30a4e0 <topti_render+0x408>
  30a4d6:	00 09       	nop	
	if(height <= 0) return;
  30a4d8:	00 09       	nop	
  30a4da:	a0 01       	bra	30a4e0 <topti_render+0x408>
  30a4dc:	00 09       	nop	
		if(x >= dwindow.right) break;
  30a4de:	00 09       	nop	
	}
}
  30a4e0:	7e 6c       	add	#108,r14
  30a4e2:	6f e3       	mov	r14,r15
  30a4e4:	4f 26       	lds.l	@r15+,pr
  30a4e6:	6e f6       	mov.l	@r15+,r14
  30a4e8:	68 f6       	mov.l	@r15+,r8
  30a4ea:	00 0b       	rts	
  30a4ec:	00 09       	nop	
  30a4ee:	00 09       	nop	
  30a4f0:	00 30       	.word 0x0030
  30a4f2:	a7 b0       	bra	30b456 <__printf+0x286>
  30a4f4:	08 10       	.word 0x0810
  30a4f6:	16 90       	mov.l	r9,@(0,r6)
  30a4f8:	00 30       	.word 0x0030
  30a4fa:	98 0a       	mov.w	30a512 <dtext_opt+0x12>,r8	! 115c
  30a4fc:	00 30       	.word 0x0030
  30a4fe:	9f c4       	mov.w	30a68a <sleep+0xa>,r15	! 8900

0030a500 <dtext_opt>:

/* dtext_opt(): Display a string of text */
void dtext_opt(int x, int y, int fg, int bg, int halign, int valign,
	char const *str, int size)
{
  30a500:	2f e6       	mov.l	r14,@-r15
  30a502:	4f 22       	sts.l	pr,@-r15
  30a504:	7f dc       	add	#-36,r15
  30a506:	6e f3       	mov	r15,r14
  30a508:	61 e3       	mov	r14,r1
  30a50a:	71 e4       	add	#-28,r1
  30a50c:	11 4d       	mov.l	r4,@(52,r1)
  30a50e:	61 e3       	mov	r14,r1
  30a510:	71 e4       	add	#-28,r1
  30a512:	11 5c       	mov.l	r5,@(48,r1)
  30a514:	61 e3       	mov	r14,r1
  30a516:	71 e4       	add	#-28,r1
  30a518:	11 6b       	mov.l	r6,@(44,r1)
  30a51a:	61 e3       	mov	r14,r1
  30a51c:	71 e4       	add	#-28,r1
  30a51e:	11 7a       	mov.l	r7,@(40,r1)
	if(halign != DTEXT_LEFT || valign != DTEXT_TOP)
  30a520:	51 eb       	mov.l	@(44,r14),r1
  30a522:	21 18       	tst	r1,r1
  30a524:	8b 02       	bf	30a52c <dtext_opt+0x2c>
  30a526:	51 ec       	mov.l	@(48,r14),r1
  30a528:	21 18       	tst	r1,r1
  30a52a:	89 4d       	bt	30a5c8 <dtext_opt+0xc8>
	{
		int w, h;
		dnsize(str, size, topti_font, &w, &h);
  30a52c:	d1 35       	mov.l	30a604 <dtext_opt+0x104>,r1	! 81016ec <topti_font>
  30a52e:	62 12       	mov.l	@r1,r2
  30a530:	63 e3       	mov	r14,r3
  30a532:	73 20       	add	#32,r3
  30a534:	61 e3       	mov	r14,r1
  30a536:	71 1c       	add	#28,r1
  30a538:	2f 12       	mov.l	r1,@r15
  30a53a:	67 33       	mov	r3,r7
  30a53c:	66 23       	mov	r2,r6
  30a53e:	55 ee       	mov.l	@(56,r14),r5
  30a540:	54 ed       	mov.l	@(52,r14),r4
  30a542:	d1 31       	mov.l	30a608 <dtext_opt+0x108>,r1	! 309b50 <dnsize>
  30a544:	41 0b       	jsr	@r1
  30a546:	00 09       	nop	

		if(halign == DTEXT_RIGHT)  x -= w - 1;
  30a548:	52 eb       	mov.l	@(44,r14),r2
  30a54a:	e1 02       	mov	#2,r1
  30a54c:	32 10       	cmp/eq	r1,r2
  30a54e:	8b 0b       	bf	30a568 <dtext_opt+0x68>
  30a550:	61 e3       	mov	r14,r1
  30a552:	71 e4       	add	#-28,r1
  30a554:	51 1f       	mov.l	@(60,r1),r1
  30a556:	63 13       	mov	r1,r3
  30a558:	73 ff       	add	#-1,r3
  30a55a:	61 e3       	mov	r14,r1
  30a55c:	71 e4       	add	#-28,r1
  30a55e:	62 e3       	mov	r14,r2
  30a560:	72 e4       	add	#-28,r2
  30a562:	52 2d       	mov.l	@(52,r2),r2
  30a564:	32 38       	sub	r3,r2
  30a566:	11 2d       	mov.l	r2,@(52,r1)
		if(halign == DTEXT_CENTER) x -= (w >> 1);
  30a568:	52 eb       	mov.l	@(44,r14),r2
  30a56a:	e1 01       	mov	#1,r1
  30a56c:	32 10       	cmp/eq	r1,r2
  30a56e:	8b 0b       	bf	30a588 <dtext_opt+0x88>
  30a570:	61 e3       	mov	r14,r1
  30a572:	71 e4       	add	#-28,r1
  30a574:	51 1f       	mov.l	@(60,r1),r1
  30a576:	41 21       	shar	r1
  30a578:	63 13       	mov	r1,r3
  30a57a:	61 e3       	mov	r14,r1
  30a57c:	71 e4       	add	#-28,r1
  30a57e:	62 e3       	mov	r14,r2
  30a580:	72 e4       	add	#-28,r2
  30a582:	52 2d       	mov.l	@(52,r2),r2
  30a584:	32 38       	sub	r3,r2
  30a586:	11 2d       	mov.l	r2,@(52,r1)
		if(valign == DTEXT_BOTTOM) y -= h - 1;
  30a588:	52 ec       	mov.l	@(48,r14),r2
  30a58a:	e1 02       	mov	#2,r1
  30a58c:	32 10       	cmp/eq	r1,r2
  30a58e:	8b 0b       	bf	30a5a8 <dtext_opt+0xa8>
  30a590:	61 e3       	mov	r14,r1
  30a592:	71 e4       	add	#-28,r1
  30a594:	51 1e       	mov.l	@(56,r1),r1
  30a596:	63 13       	mov	r1,r3
  30a598:	73 ff       	add	#-1,r3
  30a59a:	61 e3       	mov	r14,r1
  30a59c:	71 e4       	add	#-28,r1
  30a59e:	62 e3       	mov	r14,r2
  30a5a0:	72 e4       	add	#-28,r2
  30a5a2:	52 2c       	mov.l	@(48,r2),r2
  30a5a4:	32 38       	sub	r3,r2
  30a5a6:	11 2c       	mov.l	r2,@(48,r1)
		if(valign == DTEXT_MIDDLE) y -= (h >> 1);
  30a5a8:	52 ec       	mov.l	@(48,r14),r2
  30a5aa:	e1 01       	mov	#1,r1
  30a5ac:	32 10       	cmp/eq	r1,r2
  30a5ae:	8b 0b       	bf	30a5c8 <dtext_opt+0xc8>
  30a5b0:	61 e3       	mov	r14,r1
  30a5b2:	71 e4       	add	#-28,r1
  30a5b4:	51 1e       	mov.l	@(56,r1),r1
  30a5b6:	41 21       	shar	r1
  30a5b8:	63 13       	mov	r1,r3
  30a5ba:	61 e3       	mov	r14,r1
  30a5bc:	71 e4       	add	#-28,r1
  30a5be:	62 e3       	mov	r14,r2
  30a5c0:	72 e4       	add	#-28,r2
  30a5c2:	52 2c       	mov.l	@(48,r2),r2
  30a5c4:	32 38       	sub	r3,r2
  30a5c6:	11 2c       	mov.l	r2,@(48,r1)
	}

	topti_render(x, y, str, topti_font, fg, bg, size);
  30a5c8:	d1 0e       	mov.l	30a604 <dtext_opt+0x104>,r1	! 81016ec <topti_font>
  30a5ca:	67 12       	mov.l	@r1,r7
  30a5cc:	62 e3       	mov	r14,r2
  30a5ce:	72 e4       	add	#-28,r2
  30a5d0:	61 e3       	mov	r14,r1
  30a5d2:	71 e4       	add	#-28,r1
  30a5d4:	53 ee       	mov.l	@(56,r14),r3
  30a5d6:	1f 32       	mov.l	r3,@(8,r15)
  30a5d8:	63 e3       	mov	r14,r3
  30a5da:	73 e4       	add	#-28,r3
  30a5dc:	53 3a       	mov.l	@(40,r3),r3
  30a5de:	1f 31       	mov.l	r3,@(4,r15)
  30a5e0:	63 e3       	mov	r14,r3
  30a5e2:	73 e4       	add	#-28,r3
  30a5e4:	53 3b       	mov.l	@(44,r3),r3
  30a5e6:	2f 32       	mov.l	r3,@r15
  30a5e8:	56 ed       	mov.l	@(52,r14),r6
  30a5ea:	55 2c       	mov.l	@(48,r2),r5
  30a5ec:	54 1d       	mov.l	@(52,r1),r4
  30a5ee:	d1 07       	mov.l	30a60c <dtext_opt+0x10c>,r1	! 30a0d8 <topti_render>
  30a5f0:	41 0b       	jsr	@r1
  30a5f2:	00 09       	nop	
}
  30a5f4:	00 09       	nop	
  30a5f6:	7e 24       	add	#36,r14
  30a5f8:	6f e3       	mov	r14,r15
  30a5fa:	4f 26       	lds.l	@r15+,pr
  30a5fc:	6e f6       	mov.l	@r15+,r14
  30a5fe:	00 0b       	rts	
  30a600:	00 09       	nop	
  30a602:	00 09       	nop	
  30a604:	08 10       	.word 0x0810
  30a606:	16 ec       	mov.l	r14,@(48,r6)
  30a608:	00 30       	.word 0x0030
  30a60a:	9b 50       	mov.w	30a6ae <sleep_block+0x12>,r11	! 7201
  30a60c:	00 30       	.word 0x0030
  30a60e:	a0 d8       	bra	30a7c2 <drect+0x12>

0030a610 <cpu_csleep_init>:
  30a610:	d1 03       	mov.l	30a620 <.memcpy>,r1	! 30ae40 <memcpy>
  30a612:	c7 13       	mova	30a660 <sleep>,r0
  30a614:	65 03       	mov	r0,r5
  30a616:	41 2b       	jmp	@r1
  30a618:	e6 14       	mov	#20,r6
  30a61a:	00 09       	nop	
  30a61c:	00 09       	nop	
  30a61e:	00 09       	nop	

0030a620 <.memcpy>:
  30a620:	00 30       	.word 0x0030
  30a622:	ae 40       	bra	30a2a6 <topti_render+0x1ce>

0030a624 <cpu_csleep>:
  30a624:	2f 86       	mov.l	r8,@-r15
  30a626:	4f 22       	sts.l	pr,@-r15
  30a628:	68 43       	mov	r4,r8
  30a62a:	85 84       	mov.w	@(8,r8),r0
  30a62c:	60 0d       	extu.w	r0,r0
  30a62e:	88 1b       	cmp/eq	#27,r0
  30a630:	8b 07       	bf	30a642 <cpu_csleep+0x1e>
  30a632:	60 83       	mov	r8,r0
  30a634:	00 e3       	icbi	@r0
  30a636:	70 12       	add	#18,r0
  30a638:	00 e3       	icbi	@r0
  30a63a:	48 0b       	jsr	@r8
  30a63c:	00 09       	nop	
  30a63e:	af f4       	bra	30a62a <cpu_csleep+0x6>
  30a640:	00 09       	nop	
  30a642:	4f 26       	lds.l	@r15+,pr
  30a644:	00 0b       	rts	
  30a646:	68 f6       	mov.l	@r15+,r8

0030a648 <cpu_csleep_cancel>:
  30a648:	e0 09       	mov	#9,r0
  30a64a:	74 08       	add	#8,r4
  30a64c:	24 01       	mov.w	r0,@r4
  30a64e:	04 e3       	icbi	@r4
  30a650:	00 0b       	rts	
  30a652:	00 09       	nop	
  30a654:	00 09       	nop	
  30a656:	00 09       	nop	
  30a658:	00 09       	nop	
  30a65a:	00 09       	nop	
  30a65c:	00 09       	nop	
  30a65e:	00 09       	nop	

0030a660 <sleep>:
  30a660:	d0 03       	mov.l	30a670 <sleep+0x10>,r0	! 81015c0 <cpu_sleep_block_counter>
  30a662:	60 02       	mov.l	@r0,r0
  30a664:	40 15       	cmp/pl	r0
  30a666:	89 00       	bt	30a66a <sleep+0xa>
  30a668:	00 1b       	sleep	
  30a66a:	00 0b       	rts	
  30a66c:	00 09       	nop	
  30a66e:	00 09       	nop	
  30a670:	08 10       	.word 0x0810
  30a672:	15 c0       	mov.l	r12,@(0,r5)

0030a674 <sleep_end>:
  30a674:	00 09       	nop	
  30a676:	00 09       	nop	
  30a678:	00 09       	nop	
  30a67a:	00 09       	nop	
  30a67c:	00 09       	nop	
  30a67e:	00 09       	nop	

0030a680 <sleep>:
#include <gint/cpu.h>

volatile int cpu_sleep_block_counter = 0;

void sleep(void)
{
  30a680:	2f e6       	mov.l	r14,@-r15
  30a682:	6e f3       	mov	r15,r14
	if(cpu_sleep_block_counter <= 0) __asm__("sleep");
  30a684:	d1 04       	mov.l	30a698 <sleep+0x18>,r1	! 81015c0 <cpu_sleep_block_counter>
  30a686:	61 12       	mov.l	@r1,r1
  30a688:	41 15       	cmp/pl	r1
  30a68a:	89 00       	bt	30a68e <sleep+0xe>
  30a68c:	00 1b       	sleep	
}
  30a68e:	00 09       	nop	
  30a690:	6f e3       	mov	r14,r15
  30a692:	6e f6       	mov.l	@r15+,r14
  30a694:	00 0b       	rts	
  30a696:	00 09       	nop	
  30a698:	08 10       	.word 0x0810
  30a69a:	15 c0       	mov.l	r12,@(0,r5)

0030a69c <sleep_block>:

void sleep_block(void)
{
  30a69c:	2f e6       	mov.l	r14,@-r15
  30a69e:	4f 22       	sts.l	pr,@-r15
  30a6a0:	6e f3       	mov	r15,r14
	cpu_atomic_start();
  30a6a2:	d1 09       	mov.l	30a6c8 <sleep_block+0x2c>,r1	! 307444 <cpu_atomic_start>
  30a6a4:	41 0b       	jsr	@r1
  30a6a6:	00 09       	nop	
	cpu_sleep_block_counter++;
  30a6a8:	d1 08       	mov.l	30a6cc <sleep_block+0x30>,r1	! 81015c0 <cpu_sleep_block_counter>
  30a6aa:	61 12       	mov.l	@r1,r1
  30a6ac:	62 13       	mov	r1,r2
  30a6ae:	72 01       	add	#1,r2
  30a6b0:	d1 06       	mov.l	30a6cc <sleep_block+0x30>,r1	! 81015c0 <cpu_sleep_block_counter>
  30a6b2:	21 22       	mov.l	r2,@r1
	cpu_atomic_end();
  30a6b4:	d1 06       	mov.l	30a6d0 <sleep_block+0x34>,r1	! 3074cc <cpu_atomic_end>
  30a6b6:	41 0b       	jsr	@r1
  30a6b8:	00 09       	nop	
}
  30a6ba:	00 09       	nop	
  30a6bc:	6f e3       	mov	r14,r15
  30a6be:	4f 26       	lds.l	@r15+,pr
  30a6c0:	6e f6       	mov.l	@r15+,r14
  30a6c2:	00 0b       	rts	
  30a6c4:	00 09       	nop	
  30a6c6:	00 09       	nop	
  30a6c8:	00 30       	.word 0x0030
  30a6ca:	74 44       	add	#68,r4
  30a6cc:	08 10       	.word 0x0810
  30a6ce:	15 c0       	mov.l	r12,@(0,r5)
  30a6d0:	00 30       	.word 0x0030
  30a6d2:	74 cc       	add	#-52,r4

0030a6d4 <sleep_unblock>:

void sleep_unblock(void)
{
  30a6d4:	2f e6       	mov.l	r14,@-r15
  30a6d6:	4f 22       	sts.l	pr,@-r15
  30a6d8:	6e f3       	mov	r15,r14
	cpu_atomic_start();
  30a6da:	d1 09       	mov.l	30a700 <sleep_unblock+0x2c>,r1	! 307444 <cpu_atomic_start>
  30a6dc:	41 0b       	jsr	@r1
  30a6de:	00 09       	nop	
	cpu_sleep_block_counter--;
  30a6e0:	d1 08       	mov.l	30a704 <sleep_unblock+0x30>,r1	! 81015c0 <cpu_sleep_block_counter>
  30a6e2:	61 12       	mov.l	@r1,r1
  30a6e4:	62 13       	mov	r1,r2
  30a6e6:	72 ff       	add	#-1,r2
  30a6e8:	d1 06       	mov.l	30a704 <sleep_unblock+0x30>,r1	! 81015c0 <cpu_sleep_block_counter>
  30a6ea:	21 22       	mov.l	r2,@r1
	cpu_atomic_end();
  30a6ec:	d1 06       	mov.l	30a708 <sleep_unblock+0x34>,r1	! 3074cc <cpu_atomic_end>
  30a6ee:	41 0b       	jsr	@r1
  30a6f0:	00 09       	nop	
}
  30a6f2:	00 09       	nop	
  30a6f4:	6f e3       	mov	r14,r15
  30a6f6:	4f 26       	lds.l	@r15+,pr
  30a6f8:	6e f6       	mov.l	@r15+,r14
  30a6fa:	00 0b       	rts	
  30a6fc:	00 09       	nop	
  30a6fe:	00 09       	nop	
  30a700:	00 30       	.word 0x0030
  30a702:	74 44       	add	#68,r4
  30a704:	08 10       	.word 0x0810
  30a706:	15 c0       	mov.l	r12,@(0,r5)
  30a708:	00 30       	.word 0x0030
  30a70a:	74 cc       	add	#-52,r4

0030a70c <GINT_CALL_SET_function>:
{
  30a70c:	2f e6       	mov.l	r14,@-r15
  30a70e:	7f fc       	add	#-4,r15
  30a710:	6e f3       	mov	r15,r14
  30a712:	61 e3       	mov	r14,r1
  30a714:	71 c4       	add	#-60,r1
  30a716:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30a718:	61 e3       	mov	r14,r1
  30a71a:	71 c4       	add	#-60,r1
  30a71c:	51 1f       	mov.l	@(60,r1),r1
  30a71e:	e2 01       	mov	#1,r2
  30a720:	21 22       	mov.l	r2,@r1
	return 0;
  30a722:	e1 00       	mov	#0,r1
}
  30a724:	60 13       	mov	r1,r0
  30a726:	7e 04       	add	#4,r14
  30a728:	6f e3       	mov	r14,r15
  30a72a:	6e f6       	mov.l	@r15+,r14
  30a72c:	00 0b       	rts	
  30a72e:	00 09       	nop	

0030a730 <GINT_CALL_INC_function>:
{
  30a730:	2f e6       	mov.l	r14,@-r15
  30a732:	7f fc       	add	#-4,r15
  30a734:	6e f3       	mov	r15,r14
  30a736:	61 e3       	mov	r14,r1
  30a738:	71 c4       	add	#-60,r1
  30a73a:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30a73c:	61 e3       	mov	r14,r1
  30a73e:	71 c4       	add	#-60,r1
  30a740:	51 1f       	mov.l	@(60,r1),r1
  30a742:	61 12       	mov.l	@r1,r1
  30a744:	62 13       	mov	r1,r2
  30a746:	72 01       	add	#1,r2
  30a748:	61 e3       	mov	r14,r1
  30a74a:	71 c4       	add	#-60,r1
  30a74c:	51 1f       	mov.l	@(60,r1),r1
  30a74e:	21 22       	mov.l	r2,@r1
	return 0;
  30a750:	e1 00       	mov	#0,r1
}
  30a752:	60 13       	mov	r1,r0
  30a754:	7e 04       	add	#4,r14
  30a756:	6f e3       	mov	r14,r15
  30a758:	6e f6       	mov.l	@r15+,r14
  30a75a:	00 0b       	rts	
  30a75c:	00 09       	nop	

0030a75e <GINT_CALL_SET_STOP_function>:
{
  30a75e:	2f e6       	mov.l	r14,@-r15
  30a760:	7f fc       	add	#-4,r15
  30a762:	6e f3       	mov	r15,r14
  30a764:	61 e3       	mov	r14,r1
  30a766:	71 c4       	add	#-60,r1
  30a768:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer) = 1;
  30a76a:	61 e3       	mov	r14,r1
  30a76c:	71 c4       	add	#-60,r1
  30a76e:	51 1f       	mov.l	@(60,r1),r1
  30a770:	e2 01       	mov	#1,r2
  30a772:	21 22       	mov.l	r2,@r1
	return 1;
  30a774:	e1 01       	mov	#1,r1
}
  30a776:	60 13       	mov	r1,r0
  30a778:	7e 04       	add	#4,r14
  30a77a:	6f e3       	mov	r14,r15
  30a77c:	6e f6       	mov.l	@r15+,r14
  30a77e:	00 0b       	rts	
  30a780:	00 09       	nop	

0030a782 <GINT_CALL_INC_STOP_function>:
{
  30a782:	2f e6       	mov.l	r14,@-r15
  30a784:	7f fc       	add	#-4,r15
  30a786:	6e f3       	mov	r15,r14
  30a788:	61 e3       	mov	r14,r1
  30a78a:	71 c4       	add	#-60,r1
  30a78c:	11 4f       	mov.l	r4,@(60,r1)
	(*pointer)++;
  30a78e:	61 e3       	mov	r14,r1
  30a790:	71 c4       	add	#-60,r1
  30a792:	51 1f       	mov.l	@(60,r1),r1
  30a794:	61 12       	mov.l	@r1,r1
  30a796:	62 13       	mov	r1,r2
  30a798:	72 01       	add	#1,r2
  30a79a:	61 e3       	mov	r14,r1
  30a79c:	71 c4       	add	#-60,r1
  30a79e:	51 1f       	mov.l	@(60,r1),r1
  30a7a0:	21 22       	mov.l	r2,@r1
	return 1;
  30a7a2:	e1 01       	mov	#1,r1
}
  30a7a4:	60 13       	mov	r1,r0
  30a7a6:	7e 04       	add	#4,r14
  30a7a8:	6f e3       	mov	r14,r15
  30a7aa:	6e f6       	mov.l	@r15+,r14
  30a7ac:	00 0b       	rts	
  30a7ae:	00 09       	nop	

0030a7b0 <drect>:
#include <gint/defs/util.h>
#include <gint/display.h>

void drect(int x1, int y1, int x2, int y2, int color)
{
  30a7b0:	2f e6       	mov.l	r14,@-r15
  30a7b2:	7f 9c       	add	#-100,r15
  30a7b4:	6e f3       	mov	r15,r14
  30a7b6:	61 e3       	mov	r14,r1
  30a7b8:	71 e4       	add	#-28,r1
  30a7ba:	11 4a       	mov.l	r4,@(40,r1)
  30a7bc:	61 e3       	mov	r14,r1
  30a7be:	71 e4       	add	#-28,r1
  30a7c0:	11 59       	mov.l	r5,@(36,r1)
  30a7c2:	61 e3       	mov	r14,r1
  30a7c4:	71 e4       	add	#-28,r1
  30a7c6:	11 68       	mov.l	r6,@(32,r1)
  30a7c8:	61 e3       	mov	r14,r1
  30a7ca:	71 e4       	add	#-28,r1
  30a7cc:	11 77       	mov.l	r7,@(28,r1)
	if(color == C_NONE) return;
  30a7ce:	61 e3       	mov	r14,r1
  30a7d0:	71 40       	add	#64,r1
  30a7d2:	52 1a       	mov.l	@(40,r1),r2
  30a7d4:	e1 ff       	mov	#-1,r1
  30a7d6:	32 10       	cmp/eq	r1,r2
  30a7d8:	8b 01       	bf	30a7de <drect+0x2e>
  30a7da:	a1 f8       	bra	30abce <drect+0x41e>
  30a7dc:	00 09       	nop	

	if(x1 > x2) swap(x1, x2);
  30a7de:	62 e3       	mov	r14,r2
  30a7e0:	72 e4       	add	#-28,r2
  30a7e2:	61 e3       	mov	r14,r1
  30a7e4:	71 e4       	add	#-28,r1
  30a7e6:	52 2a       	mov.l	@(40,r2),r2
  30a7e8:	51 18       	mov.l	@(32,r1),r1
  30a7ea:	32 17       	cmp/gt	r1,r2
  30a7ec:	8b 11       	bf	30a812 <drect+0x62>
  30a7ee:	61 e3       	mov	r14,r1
  30a7f0:	71 24       	add	#36,r1
  30a7f2:	62 e3       	mov	r14,r2
  30a7f4:	72 e4       	add	#-28,r2
  30a7f6:	52 2a       	mov.l	@(40,r2),r2
  30a7f8:	11 29       	mov.l	r2,@(36,r1)
  30a7fa:	61 e3       	mov	r14,r1
  30a7fc:	71 e4       	add	#-28,r1
  30a7fe:	62 e3       	mov	r14,r2
  30a800:	72 e4       	add	#-28,r2
  30a802:	52 28       	mov.l	@(32,r2),r2
  30a804:	11 2a       	mov.l	r2,@(40,r1)
  30a806:	61 e3       	mov	r14,r1
  30a808:	71 e4       	add	#-28,r1
  30a80a:	62 e3       	mov	r14,r2
  30a80c:	72 24       	add	#36,r2
  30a80e:	52 29       	mov.l	@(36,r2),r2
  30a810:	11 28       	mov.l	r2,@(32,r1)
	if(y1 > y2) swap(y1, y2);
  30a812:	62 e3       	mov	r14,r2
  30a814:	72 e4       	add	#-28,r2
  30a816:	61 e3       	mov	r14,r1
  30a818:	71 e4       	add	#-28,r1
  30a81a:	52 29       	mov.l	@(36,r2),r2
  30a81c:	51 17       	mov.l	@(28,r1),r1
  30a81e:	32 17       	cmp/gt	r1,r2
  30a820:	8b 11       	bf	30a846 <drect+0x96>
  30a822:	61 e3       	mov	r14,r1
  30a824:	71 24       	add	#36,r1
  30a826:	62 e3       	mov	r14,r2
  30a828:	72 e4       	add	#-28,r2
  30a82a:	52 29       	mov.l	@(36,r2),r2
  30a82c:	11 28       	mov.l	r2,@(32,r1)
  30a82e:	61 e3       	mov	r14,r1
  30a830:	71 e4       	add	#-28,r1
  30a832:	62 e3       	mov	r14,r2
  30a834:	72 e4       	add	#-28,r2
  30a836:	52 27       	mov.l	@(28,r2),r2
  30a838:	11 29       	mov.l	r2,@(36,r1)
  30a83a:	61 e3       	mov	r14,r1
  30a83c:	71 e4       	add	#-28,r1
  30a83e:	62 e3       	mov	r14,r2
  30a840:	72 24       	add	#36,r2
  30a842:	52 28       	mov.l	@(32,r2),r2
  30a844:	11 27       	mov.l	r2,@(28,r1)

	/* Rectangle is completely outside the rendering window */
	if(x1 >= dwindow.right || x2 < dwindow.left) return;
  30a846:	d1 8e       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a848:	51 12       	mov.l	@(8,r1),r1
  30a84a:	62 e3       	mov	r14,r2
  30a84c:	72 e4       	add	#-28,r2
  30a84e:	52 2a       	mov.l	@(40,r2),r2
  30a850:	32 13       	cmp/ge	r1,r2
  30a852:	89 06       	bt	30a862 <drect+0xb2>
  30a854:	d1 8a       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a856:	61 12       	mov.l	@r1,r1
  30a858:	62 e3       	mov	r14,r2
  30a85a:	72 e4       	add	#-28,r2
  30a85c:	52 28       	mov.l	@(32,r2),r2
  30a85e:	32 13       	cmp/ge	r1,r2
  30a860:	89 01       	bt	30a866 <drect+0xb6>
  30a862:	a1 b7       	bra	30abd4 <drect+0x424>
  30a864:	00 09       	nop	
	if(y1 >= dwindow.bottom || y2 < dwindow.top) return;
  30a866:	d1 86       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a868:	51 13       	mov.l	@(12,r1),r1
  30a86a:	62 e3       	mov	r14,r2
  30a86c:	72 e4       	add	#-28,r2
  30a86e:	52 29       	mov.l	@(36,r2),r2
  30a870:	32 13       	cmp/ge	r1,r2
  30a872:	89 06       	bt	30a882 <drect+0xd2>
  30a874:	d1 82       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a876:	51 11       	mov.l	@(4,r1),r1
  30a878:	62 e3       	mov	r14,r2
  30a87a:	72 e4       	add	#-28,r2
  30a87c:	52 27       	mov.l	@(28,r2),r2
  30a87e:	32 13       	cmp/ge	r1,r2
  30a880:	89 01       	bt	30a886 <drect+0xd6>
  30a882:	a1 aa       	bra	30abda <drect+0x42a>
  30a884:	00 09       	nop	
	/* Clipping */
	x1 = max(x1, dwindow.left);
  30a886:	61 e3       	mov	r14,r1
  30a888:	71 24       	add	#36,r1
  30a88a:	62 e3       	mov	r14,r2
  30a88c:	72 e4       	add	#-28,r2
  30a88e:	52 2a       	mov.l	@(40,r2),r2
  30a890:	11 27       	mov.l	r2,@(28,r1)
  30a892:	61 e3       	mov	r14,r1
  30a894:	71 24       	add	#36,r1
  30a896:	d2 7a       	mov.l	30aa80 <drect+0x2d0>,r2	! 8101690 <dwindow>
  30a898:	62 22       	mov.l	@r2,r2
  30a89a:	11 26       	mov.l	r2,@(24,r1)
  30a89c:	61 e3       	mov	r14,r1
  30a89e:	71 24       	add	#36,r1
  30a8a0:	62 e3       	mov	r14,r2
  30a8a2:	72 24       	add	#36,r2
  30a8a4:	52 27       	mov.l	@(28,r2),r2
  30a8a6:	51 16       	mov.l	@(24,r1),r1
  30a8a8:	31 23       	cmp/ge	r2,r1
  30a8aa:	89 00       	bt	30a8ae <drect+0xfe>
  30a8ac:	61 23       	mov	r2,r1
  30a8ae:	62 e3       	mov	r14,r2
  30a8b0:	72 e4       	add	#-28,r2
  30a8b2:	12 1a       	mov.l	r1,@(40,r2)
	x2 = min(x2, dwindow.right - 1);
  30a8b4:	61 e3       	mov	r14,r1
  30a8b6:	71 24       	add	#36,r1
  30a8b8:	62 e3       	mov	r14,r2
  30a8ba:	72 e4       	add	#-28,r2
  30a8bc:	52 28       	mov.l	@(32,r2),r2
  30a8be:	11 25       	mov.l	r2,@(20,r1)
  30a8c0:	d1 6f       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a8c2:	52 12       	mov.l	@(8,r1),r2
  30a8c4:	61 e3       	mov	r14,r1
  30a8c6:	71 24       	add	#36,r1
  30a8c8:	72 ff       	add	#-1,r2
  30a8ca:	11 24       	mov.l	r2,@(16,r1)
  30a8cc:	61 e3       	mov	r14,r1
  30a8ce:	71 24       	add	#36,r1
  30a8d0:	62 e3       	mov	r14,r2
  30a8d2:	72 24       	add	#36,r2
  30a8d4:	52 25       	mov.l	@(20,r2),r2
  30a8d6:	51 14       	mov.l	@(16,r1),r1
  30a8d8:	31 27       	cmp/gt	r2,r1
  30a8da:	8b 00       	bf	30a8de <drect+0x12e>
  30a8dc:	61 23       	mov	r2,r1
  30a8de:	62 e3       	mov	r14,r2
  30a8e0:	72 e4       	add	#-28,r2
  30a8e2:	12 18       	mov.l	r1,@(32,r2)
	y1 = max(y1, dwindow.top);
  30a8e4:	61 e3       	mov	r14,r1
  30a8e6:	71 24       	add	#36,r1
  30a8e8:	62 e3       	mov	r14,r2
  30a8ea:	72 e4       	add	#-28,r2
  30a8ec:	52 29       	mov.l	@(36,r2),r2
  30a8ee:	11 23       	mov.l	r2,@(12,r1)
  30a8f0:	61 e3       	mov	r14,r1
  30a8f2:	71 24       	add	#36,r1
  30a8f4:	d2 62       	mov.l	30aa80 <drect+0x2d0>,r2	! 8101690 <dwindow>
  30a8f6:	52 21       	mov.l	@(4,r2),r2
  30a8f8:	11 22       	mov.l	r2,@(8,r1)
  30a8fa:	61 e3       	mov	r14,r1
  30a8fc:	71 24       	add	#36,r1
  30a8fe:	62 e3       	mov	r14,r2
  30a900:	72 24       	add	#36,r2
  30a902:	52 23       	mov.l	@(12,r2),r2
  30a904:	51 12       	mov.l	@(8,r1),r1
  30a906:	31 23       	cmp/ge	r2,r1
  30a908:	89 00       	bt	30a90c <drect+0x15c>
  30a90a:	61 23       	mov	r2,r1
  30a90c:	62 e3       	mov	r14,r2
  30a90e:	72 e4       	add	#-28,r2
  30a910:	12 19       	mov.l	r1,@(36,r2)
	y2 = min(y2, dwindow.bottom - 1);
  30a912:	61 e3       	mov	r14,r1
  30a914:	71 24       	add	#36,r1
  30a916:	62 e3       	mov	r14,r2
  30a918:	72 e4       	add	#-28,r2
  30a91a:	52 27       	mov.l	@(28,r2),r2
  30a91c:	11 21       	mov.l	r2,@(4,r1)
  30a91e:	d1 58       	mov.l	30aa80 <drect+0x2d0>,r1	! 8101690 <dwindow>
  30a920:	52 13       	mov.l	@(12,r1),r2
  30a922:	61 e3       	mov	r14,r1
  30a924:	71 24       	add	#36,r1
  30a926:	72 ff       	add	#-1,r2
  30a928:	11 20       	mov.l	r2,@(0,r1)
  30a92a:	61 e3       	mov	r14,r1
  30a92c:	71 24       	add	#36,r1
  30a92e:	62 e3       	mov	r14,r2
  30a930:	72 24       	add	#36,r2
  30a932:	52 21       	mov.l	@(4,r2),r2
  30a934:	51 10       	mov.l	@(0,r1),r1
  30a936:	31 27       	cmp/gt	r2,r1
  30a938:	8b 00       	bf	30a93c <drect+0x18c>
  30a93a:	61 23       	mov	r2,r1
  30a93c:	62 e3       	mov	r14,r2
  30a93e:	72 e4       	add	#-28,r2
  30a940:	12 17       	mov.l	r1,@(28,r2)

	/* The method is exactly like dhline(). I first handle odd endpoints,
	   then write longwords for the longest section */

	uint16_t *base = gint_vram + DWIDTH * y1;
  30a942:	d1 50       	mov.l	30aa84 <drect+0x2d4>,r1	! 810143c <gint_vram>
  30a944:	62 12       	mov.l	@r1,r2
  30a946:	61 e3       	mov	r14,r1
  30a948:	71 e4       	add	#-28,r1
  30a94a:	53 19       	mov.l	@(36,r1),r3
  30a94c:	91 97       	mov.w	30aa7e <drect+0x2ce>,r1	! 318
  30a94e:	03 17       	mul.l	r1,r3
  30a950:	03 1a       	sts	macl,r3
  30a952:	61 e3       	mov	r14,r1
  30a954:	71 24       	add	#36,r1
  30a956:	32 3c       	add	r3,r2
  30a958:	11 2f       	mov.l	r2,@(60,r1)
	int height = y2 - y1 + 1;
  30a95a:	62 e3       	mov	r14,r2
  30a95c:	72 e4       	add	#-28,r2
  30a95e:	61 e3       	mov	r14,r1
  30a960:	71 e4       	add	#-28,r1
  30a962:	52 27       	mov.l	@(28,r2),r2
  30a964:	51 19       	mov.l	@(36,r1),r1
  30a966:	32 18       	sub	r1,r2
  30a968:	61 e3       	mov	r14,r1
  30a96a:	71 e4       	add	#-28,r1
  30a96c:	72 01       	add	#1,r2
  30a96e:	11 2f       	mov.l	r2,@(60,r1)

	/* Now copy everything that's left as longwords */

	int ax1 = x1 + (x1 & 1);
  30a970:	61 e3       	mov	r14,r1
  30a972:	71 e4       	add	#-28,r1
  30a974:	51 1a       	mov.l	@(40,r1),r1
  30a976:	63 13       	mov	r1,r3
  30a978:	73 01       	add	#1,r3
  30a97a:	61 e3       	mov	r14,r1
  30a97c:	71 e4       	add	#-28,r1
  30a97e:	e2 fe       	mov	#-2,r2
  30a980:	22 39       	and	r3,r2
  30a982:	11 2e       	mov.l	r2,@(56,r1)
	int ax2 = (x2 + 1) & ~1;
  30a984:	61 e3       	mov	r14,r1
  30a986:	71 e4       	add	#-28,r1
  30a988:	51 18       	mov.l	@(32,r1),r1
  30a98a:	63 13       	mov	r1,r3
  30a98c:	73 01       	add	#1,r3
  30a98e:	61 e3       	mov	r14,r1
  30a990:	71 e4       	add	#-28,r1
  30a992:	e2 fe       	mov	#-2,r2
  30a994:	22 39       	and	r3,r2
  30a996:	11 2d       	mov.l	r2,@(52,r1)

	uint32_t *v = (void *)(base + ax1);
  30a998:	61 e3       	mov	r14,r1
  30a99a:	71 e4       	add	#-28,r1
  30a99c:	51 1e       	mov.l	@(56,r1),r1
  30a99e:	62 13       	mov	r1,r2
  30a9a0:	32 2c       	add	r2,r2
  30a9a2:	61 e3       	mov	r14,r1
  30a9a4:	71 24       	add	#36,r1
  30a9a6:	63 e3       	mov	r14,r3
  30a9a8:	73 24       	add	#36,r3
  30a9aa:	53 3f       	mov.l	@(60,r3),r3
  30a9ac:	32 3c       	add	r3,r2
  30a9ae:	11 2e       	mov.l	r2,@(56,r1)
	uint32_t op = (color << 16) | color;
  30a9b0:	62 e3       	mov	r14,r2
  30a9b2:	72 40       	add	#64,r2
  30a9b4:	51 2a       	mov.l	@(40,r2),r1
  30a9b6:	62 13       	mov	r1,r2
  30a9b8:	42 28       	shll16	r2
  30a9ba:	63 e3       	mov	r14,r3
  30a9bc:	73 40       	add	#64,r3
  30a9be:	51 3a       	mov.l	@(40,r3),r1
  30a9c0:	22 1b       	or	r1,r2
  30a9c2:	61 e3       	mov	r14,r1
  30a9c4:	71 e4       	add	#-28,r1
  30a9c6:	11 2c       	mov.l	r2,@(48,r1)
	int width = (ax2 - ax1) >> 1;
  30a9c8:	62 e3       	mov	r14,r2
  30a9ca:	72 e4       	add	#-28,r2
  30a9cc:	61 e3       	mov	r14,r1
  30a9ce:	71 e4       	add	#-28,r1
  30a9d0:	52 2d       	mov.l	@(52,r2),r2
  30a9d2:	51 1e       	mov.l	@(56,r1),r1
  30a9d4:	63 23       	mov	r2,r3
  30a9d6:	33 18       	sub	r1,r3
  30a9d8:	62 e3       	mov	r14,r2
  30a9da:	72 e4       	add	#-28,r2
  30a9dc:	61 33       	mov	r3,r1
  30a9de:	41 21       	shar	r1
  30a9e0:	12 1b       	mov.l	r1,@(44,r2)

	if(color == C_INVERT) for(int h = height; h; h--)
  30a9e2:	61 e3       	mov	r14,r1
  30a9e4:	71 40       	add	#64,r1
  30a9e6:	52 1a       	mov.l	@(40,r1),r2
  30a9e8:	e1 fe       	mov	#-2,r1
  30a9ea:	32 10       	cmp/eq	r1,r2
  30a9ec:	89 01       	bt	30a9f2 <drect+0x242>
  30a9ee:	a0 8d       	bra	30ab0c <drect+0x35c>
  30a9f0:	00 09       	nop	
  30a9f2:	61 e3       	mov	r14,r1
  30a9f4:	71 24       	add	#36,r1
  30a9f6:	62 e3       	mov	r14,r2
  30a9f8:	72 e4       	add	#-28,r2
  30a9fa:	52 2f       	mov.l	@(60,r2),r2
  30a9fc:	11 2d       	mov.l	r2,@(52,r1)
  30a9fe:	a0 7c       	bra	30aafa <drect+0x34a>
  30aa00:	00 09       	nop	
	{
		/* We can't double-draw on base[x1] and base[x2] here */
		if(x1 & 1) base[x1] ^= 0xffff;
  30aa02:	61 e3       	mov	r14,r1
  30aa04:	71 e4       	add	#-28,r1
  30aa06:	51 1a       	mov.l	@(40,r1),r1
  30aa08:	e2 01       	mov	#1,r2
  30aa0a:	21 29       	and	r2,r1
  30aa0c:	21 18       	tst	r1,r1
  30aa0e:	89 14       	bt	30aa3a <drect+0x28a>
  30aa10:	61 e3       	mov	r14,r1
  30aa12:	71 e4       	add	#-28,r1
  30aa14:	51 1a       	mov.l	@(40,r1),r1
  30aa16:	31 1c       	add	r1,r1
  30aa18:	62 e3       	mov	r14,r2
  30aa1a:	72 24       	add	#36,r2
  30aa1c:	52 2f       	mov.l	@(60,r2),r2
  30aa1e:	31 2c       	add	r2,r1
  30aa20:	61 11       	mov.w	@r1,r1
  30aa22:	62 1d       	extu.w	r1,r2
  30aa24:	61 e3       	mov	r14,r1
  30aa26:	71 e4       	add	#-28,r1
  30aa28:	51 1a       	mov.l	@(40,r1),r1
  30aa2a:	31 1c       	add	r1,r1
  30aa2c:	63 e3       	mov	r14,r3
  30aa2e:	73 24       	add	#36,r3
  30aa30:	53 3f       	mov.l	@(60,r3),r3
  30aa32:	31 3c       	add	r3,r1
  30aa34:	62 27       	not	r2,r2
  30aa36:	62 2d       	extu.w	r2,r2
  30aa38:	21 21       	mov.w	r2,@r1
		if(!(x2 & 1)) base[x2] ^= 0xffff;
  30aa3a:	61 e3       	mov	r14,r1
  30aa3c:	71 e4       	add	#-28,r1
  30aa3e:	51 18       	mov.l	@(32,r1),r1
  30aa40:	e3 01       	mov	#1,r3
  30aa42:	21 39       	and	r3,r1
  30aa44:	21 18       	tst	r1,r1
  30aa46:	8b 14       	bf	30aa72 <drect+0x2c2>
  30aa48:	61 e3       	mov	r14,r1
  30aa4a:	71 e4       	add	#-28,r1
  30aa4c:	51 18       	mov.l	@(32,r1),r1
  30aa4e:	31 1c       	add	r1,r1
  30aa50:	62 e3       	mov	r14,r2
  30aa52:	72 24       	add	#36,r2
  30aa54:	52 2f       	mov.l	@(60,r2),r2
  30aa56:	31 2c       	add	r2,r1
  30aa58:	61 11       	mov.w	@r1,r1
  30aa5a:	62 1d       	extu.w	r1,r2
  30aa5c:	61 e3       	mov	r14,r1
  30aa5e:	71 e4       	add	#-28,r1
  30aa60:	51 18       	mov.l	@(32,r1),r1
  30aa62:	31 1c       	add	r1,r1
  30aa64:	63 e3       	mov	r14,r3
  30aa66:	73 24       	add	#36,r3
  30aa68:	53 3f       	mov.l	@(60,r3),r3
  30aa6a:	31 3c       	add	r3,r1
  30aa6c:	62 27       	not	r2,r2
  30aa6e:	62 2d       	extu.w	r2,r2
  30aa70:	21 21       	mov.w	r2,@r1
		for(int w = 0; w < width; w++) v[w] ^= 0xffffffff;
  30aa72:	61 e3       	mov	r14,r1
  30aa74:	71 24       	add	#36,r1
  30aa76:	e2 00       	mov	#0,r2
  30aa78:	11 2c       	mov.l	r2,@(48,r1)
  30aa7a:	a0 1f       	bra	30aabc <drect+0x30c>
  30aa7c:	00 09       	nop	
  30aa7e:	03 18       	.word 0x0318
  30aa80:	08 10       	.word 0x0810
  30aa82:	16 90       	mov.l	r9,@(0,r6)
  30aa84:	08 10       	.word 0x0810
  30aa86:	14 3c       	mov.l	r3,@(48,r4)
  30aa88:	61 e3       	mov	r14,r1
  30aa8a:	71 24       	add	#36,r1
  30aa8c:	51 1c       	mov.l	@(48,r1),r1
  30aa8e:	41 08       	shll2	r1
  30aa90:	62 e3       	mov	r14,r2
  30aa92:	72 24       	add	#36,r2
  30aa94:	52 2e       	mov.l	@(56,r2),r2
  30aa96:	31 2c       	add	r2,r1
  30aa98:	62 12       	mov.l	@r1,r2
  30aa9a:	61 e3       	mov	r14,r1
  30aa9c:	71 24       	add	#36,r1
  30aa9e:	51 1c       	mov.l	@(48,r1),r1
  30aaa0:	41 08       	shll2	r1
  30aaa2:	63 e3       	mov	r14,r3
  30aaa4:	73 24       	add	#36,r3
  30aaa6:	53 3e       	mov.l	@(56,r3),r3
  30aaa8:	31 3c       	add	r3,r1
  30aaaa:	62 27       	not	r2,r2
  30aaac:	21 22       	mov.l	r2,@r1
  30aaae:	61 e3       	mov	r14,r1
  30aab0:	71 24       	add	#36,r1
  30aab2:	62 e3       	mov	r14,r2
  30aab4:	72 24       	add	#36,r2
  30aab6:	52 2c       	mov.l	@(48,r2),r2
  30aab8:	72 01       	add	#1,r2
  30aaba:	11 2c       	mov.l	r2,@(48,r1)
  30aabc:	62 e3       	mov	r14,r2
  30aabe:	72 24       	add	#36,r2
  30aac0:	61 e3       	mov	r14,r1
  30aac2:	71 e4       	add	#-28,r1
  30aac4:	52 2c       	mov.l	@(48,r2),r2
  30aac6:	51 1b       	mov.l	@(44,r1),r1
  30aac8:	32 13       	cmp/ge	r1,r2
  30aaca:	8b dd       	bf	30aa88 <drect+0x2d8>
		v += DWIDTH / 2;
  30aacc:	61 e3       	mov	r14,r1
  30aace:	71 24       	add	#36,r1
  30aad0:	62 e3       	mov	r14,r2
  30aad2:	72 24       	add	#36,r2
  30aad4:	52 2e       	mov.l	@(56,r2),r2
  30aad6:	93 86       	mov.w	30abe6 <drect+0x436>,r3	! 318
  30aad8:	32 3c       	add	r3,r2
  30aada:	11 2e       	mov.l	r2,@(56,r1)
		base += DWIDTH;
  30aadc:	61 e3       	mov	r14,r1
  30aade:	71 24       	add	#36,r1
  30aae0:	62 e3       	mov	r14,r2
  30aae2:	72 24       	add	#36,r2
  30aae4:	52 2f       	mov.l	@(60,r2),r2
  30aae6:	93 7e       	mov.w	30abe6 <drect+0x436>,r3	! 318
  30aae8:	32 3c       	add	r3,r2
  30aaea:	11 2f       	mov.l	r2,@(60,r1)
	if(color == C_INVERT) for(int h = height; h; h--)
  30aaec:	61 e3       	mov	r14,r1
  30aaee:	71 24       	add	#36,r1
  30aaf0:	62 e3       	mov	r14,r2
  30aaf2:	72 24       	add	#36,r2
  30aaf4:	52 2d       	mov.l	@(52,r2),r2
  30aaf6:	72 ff       	add	#-1,r2
  30aaf8:	11 2d       	mov.l	r2,@(52,r1)
  30aafa:	61 e3       	mov	r14,r1
  30aafc:	71 24       	add	#36,r1
  30aafe:	51 1d       	mov.l	@(52,r1),r1
  30ab00:	21 18       	tst	r1,r1
  30ab02:	89 01       	bt	30ab08 <drect+0x358>
  30ab04:	af 7d       	bra	30aa02 <drect+0x252>
  30ab06:	00 09       	nop	
  30ab08:	a0 68       	bra	30abdc <drect+0x42c>
  30ab0a:	00 09       	nop	
	}
	else for(int h = height; h; h--)
  30ab0c:	61 e3       	mov	r14,r1
  30ab0e:	71 24       	add	#36,r1
  30ab10:	62 e3       	mov	r14,r2
  30ab12:	72 e4       	add	#-28,r2
  30ab14:	52 2f       	mov.l	@(60,r2),r2
  30ab16:	11 2b       	mov.l	r2,@(44,r1)
  30ab18:	a0 52       	bra	30abc0 <drect+0x410>
  30ab1a:	00 09       	nop	
	{
		base[x1] = color;
  30ab1c:	61 e3       	mov	r14,r1
  30ab1e:	71 e4       	add	#-28,r1
  30ab20:	51 1a       	mov.l	@(40,r1),r1
  30ab22:	31 1c       	add	r1,r1
  30ab24:	62 e3       	mov	r14,r2
  30ab26:	72 24       	add	#36,r2
  30ab28:	52 2f       	mov.l	@(60,r2),r2
  30ab2a:	31 2c       	add	r2,r1
  30ab2c:	63 e3       	mov	r14,r3
  30ab2e:	73 40       	add	#64,r3
  30ab30:	52 3a       	mov.l	@(40,r3),r2
  30ab32:	62 2d       	extu.w	r2,r2
  30ab34:	21 21       	mov.w	r2,@r1
		base[x2] = color;
  30ab36:	61 e3       	mov	r14,r1
  30ab38:	71 e4       	add	#-28,r1
  30ab3a:	51 18       	mov.l	@(32,r1),r1
  30ab3c:	31 1c       	add	r1,r1
  30ab3e:	62 e3       	mov	r14,r2
  30ab40:	72 24       	add	#36,r2
  30ab42:	52 2f       	mov.l	@(60,r2),r2
  30ab44:	31 2c       	add	r2,r1
  30ab46:	63 e3       	mov	r14,r3
  30ab48:	73 40       	add	#64,r3
  30ab4a:	52 3a       	mov.l	@(40,r3),r2
  30ab4c:	62 2d       	extu.w	r2,r2
  30ab4e:	21 21       	mov.w	r2,@r1
		for(int w = 0; w < width; w++) v[w] = op;
  30ab50:	61 e3       	mov	r14,r1
  30ab52:	71 24       	add	#36,r1
  30ab54:	e2 00       	mov	#0,r2
  30ab56:	11 2a       	mov.l	r2,@(40,r1)
  30ab58:	a0 13       	bra	30ab82 <drect+0x3d2>
  30ab5a:	00 09       	nop	
  30ab5c:	61 e3       	mov	r14,r1
  30ab5e:	71 24       	add	#36,r1
  30ab60:	51 1a       	mov.l	@(40,r1),r1
  30ab62:	41 08       	shll2	r1
  30ab64:	62 e3       	mov	r14,r2
  30ab66:	72 24       	add	#36,r2
  30ab68:	52 2e       	mov.l	@(56,r2),r2
  30ab6a:	31 2c       	add	r2,r1
  30ab6c:	62 e3       	mov	r14,r2
  30ab6e:	72 e4       	add	#-28,r2
  30ab70:	52 2c       	mov.l	@(48,r2),r2
  30ab72:	21 22       	mov.l	r2,@r1
  30ab74:	61 e3       	mov	r14,r1
  30ab76:	71 24       	add	#36,r1
  30ab78:	62 e3       	mov	r14,r2
  30ab7a:	72 24       	add	#36,r2
  30ab7c:	52 2a       	mov.l	@(40,r2),r2
  30ab7e:	72 01       	add	#1,r2
  30ab80:	11 2a       	mov.l	r2,@(40,r1)
  30ab82:	62 e3       	mov	r14,r2
  30ab84:	72 24       	add	#36,r2
  30ab86:	61 e3       	mov	r14,r1
  30ab88:	71 e4       	add	#-28,r1
  30ab8a:	52 2a       	mov.l	@(40,r2),r2
  30ab8c:	51 1b       	mov.l	@(44,r1),r1
  30ab8e:	32 13       	cmp/ge	r1,r2
  30ab90:	8b e4       	bf	30ab5c <drect+0x3ac>
		v += DWIDTH / 2;
  30ab92:	61 e3       	mov	r14,r1
  30ab94:	71 24       	add	#36,r1
  30ab96:	62 e3       	mov	r14,r2
  30ab98:	72 24       	add	#36,r2
  30ab9a:	52 2e       	mov.l	@(56,r2),r2
  30ab9c:	93 23       	mov.w	30abe6 <drect+0x436>,r3	! 318
  30ab9e:	32 3c       	add	r3,r2
  30aba0:	11 2e       	mov.l	r2,@(56,r1)
		base += DWIDTH;
  30aba2:	61 e3       	mov	r14,r1
  30aba4:	71 24       	add	#36,r1
  30aba6:	62 e3       	mov	r14,r2
  30aba8:	72 24       	add	#36,r2
  30abaa:	52 2f       	mov.l	@(60,r2),r2
  30abac:	93 1b       	mov.w	30abe6 <drect+0x436>,r3	! 318
  30abae:	32 3c       	add	r3,r2
  30abb0:	11 2f       	mov.l	r2,@(60,r1)
	else for(int h = height; h; h--)
  30abb2:	61 e3       	mov	r14,r1
  30abb4:	71 24       	add	#36,r1
  30abb6:	62 e3       	mov	r14,r2
  30abb8:	72 24       	add	#36,r2
  30abba:	52 2b       	mov.l	@(44,r2),r2
  30abbc:	72 ff       	add	#-1,r2
  30abbe:	11 2b       	mov.l	r2,@(44,r1)
  30abc0:	61 e3       	mov	r14,r1
  30abc2:	71 24       	add	#36,r1
  30abc4:	51 1b       	mov.l	@(44,r1),r1
  30abc6:	21 18       	tst	r1,r1
  30abc8:	8b a8       	bf	30ab1c <drect+0x36c>
  30abca:	a0 07       	bra	30abdc <drect+0x42c>
  30abcc:	00 09       	nop	
	if(color == C_NONE) return;
  30abce:	00 09       	nop	
  30abd0:	a0 04       	bra	30abdc <drect+0x42c>
  30abd2:	00 09       	nop	
	if(x1 >= dwindow.right || x2 < dwindow.left) return;
  30abd4:	00 09       	nop	
  30abd6:	a0 01       	bra	30abdc <drect+0x42c>
  30abd8:	00 09       	nop	
	if(y1 >= dwindow.bottom || y2 < dwindow.top) return;
  30abda:	00 09       	nop	
	}
}
  30abdc:	7e 64       	add	#100,r14
  30abde:	6f e3       	mov	r14,r15
  30abe0:	6e f6       	mov.l	@r15+,r14
  30abe2:	00 0b       	rts	
  30abe4:	00 09       	nop	
  30abe6:	03 18       	.word 0x0318
	...

0030abf0 <topti_glyph_fg_bg>:
  30abf0:	2f 86       	mov.l	r8,@-r15
  30abf2:	d8 2f       	mov.l	30acb0 <.bg_next+0x24>,r8	! 318
  30abf4:	53 f1       	mov.l	@(4,r15),r3
  30abf6:	43 00       	shll	r3
  30abf8:	38 38       	sub	r3,r8
  30abfa:	53 f3       	mov.l	@(12,r15),r3

0030abfc <.fg_bg_y>:
  30abfc:	52 f1       	mov.l	@(4,r15),r2

0030abfe <.fg_bg_x>:
  30abfe:	60 33       	mov	r3,r0
  30ac00:	e1 fb       	mov	#-5,r1
  30ac02:	40 1d       	shld	r1,r0
  30ac04:	40 08       	shll2	r0
  30ac06:	01 5e       	mov.l	@(r0,r5),r1
  30ac08:	60 33       	mov	r3,r0
  30ac0a:	c9 1f       	and	#31,r0
  30ac0c:	41 0d       	shld	r0,r1
  30ac0e:	41 00       	shll	r1
  30ac10:	8f 01       	bf.s	30ac16 <.fg_bg_zero>
  30ac12:	61 63       	mov	r6,r1
  30ac14:	61 69       	swap.w	r6,r1

0030ac16 <.fg_bg_zero>:
  30ac16:	24 11       	mov.w	r1,@r4
  30ac18:	74 02       	add	#2,r4
  30ac1a:	42 10       	dt	r2
  30ac1c:	8f ef       	bf.s	30abfe <.fg_bg_x>
  30ac1e:	73 01       	add	#1,r3
  30ac20:	47 10       	dt	r7
  30ac22:	50 f2       	mov.l	@(8,r15),r0
  30ac24:	33 0c       	add	r0,r3
  30ac26:	8f e9       	bf.s	30abfc <.fg_bg_y>
  30ac28:	34 8c       	add	r8,r4
  30ac2a:	00 0b       	rts	
  30ac2c:	68 f6       	mov.l	@r15+,r8

0030ac2e <topti_glyph_fg>:
  30ac2e:	2f 86       	mov.l	r8,@-r15
  30ac30:	d8 1f       	mov.l	30acb0 <.bg_next+0x24>,r8	! 318
  30ac32:	53 f1       	mov.l	@(4,r15),r3
  30ac34:	43 00       	shll	r3
  30ac36:	38 38       	sub	r3,r8
  30ac38:	53 f3       	mov.l	@(12,r15),r3

0030ac3a <.fg_y>:
  30ac3a:	52 f1       	mov.l	@(4,r15),r2

0030ac3c <.fg_x>:
  30ac3c:	60 33       	mov	r3,r0
  30ac3e:	e1 fb       	mov	#-5,r1
  30ac40:	40 1d       	shld	r1,r0
  30ac42:	40 08       	shll2	r0
  30ac44:	01 5e       	mov.l	@(r0,r5),r1
  30ac46:	60 33       	mov	r3,r0
  30ac48:	c9 1f       	and	#31,r0
  30ac4a:	41 0d       	shld	r0,r1
  30ac4c:	41 00       	shll	r1
  30ac4e:	8b 00       	bf	30ac52 <.fg_next>
  30ac50:	24 61       	mov.w	r6,@r4

0030ac52 <.fg_next>:
  30ac52:	74 02       	add	#2,r4
  30ac54:	42 10       	dt	r2
  30ac56:	8f f1       	bf.s	30ac3c <.fg_x>
  30ac58:	73 01       	add	#1,r3
  30ac5a:	47 10       	dt	r7
  30ac5c:	50 f2       	mov.l	@(8,r15),r0
  30ac5e:	33 0c       	add	r0,r3
  30ac60:	8f eb       	bf.s	30ac3a <.fg_y>
  30ac62:	34 8c       	add	r8,r4
  30ac64:	00 0b       	rts	
  30ac66:	68 f6       	mov.l	@r15+,r8

0030ac68 <topti_glyph_bg>:
  30ac68:	2f 86       	mov.l	r8,@-r15
  30ac6a:	d8 11       	mov.l	30acb0 <.bg_next+0x24>,r8	! 318
  30ac6c:	53 f1       	mov.l	@(4,r15),r3
  30ac6e:	43 00       	shll	r3
  30ac70:	38 38       	sub	r3,r8
  30ac72:	53 f3       	mov.l	@(12,r15),r3

0030ac74 <.bg_y>:
  30ac74:	52 f1       	mov.l	@(4,r15),r2

0030ac76 <.bg_x>:
  30ac76:	60 33       	mov	r3,r0
  30ac78:	e1 fb       	mov	#-5,r1
  30ac7a:	40 1d       	shld	r1,r0
  30ac7c:	40 08       	shll2	r0
  30ac7e:	01 5e       	mov.l	@(r0,r5),r1
  30ac80:	60 33       	mov	r3,r0
  30ac82:	c9 1f       	and	#31,r0
  30ac84:	41 0d       	shld	r0,r1
  30ac86:	41 00       	shll	r1
  30ac88:	89 00       	bt	30ac8c <.bg_next>
  30ac8a:	24 61       	mov.w	r6,@r4

0030ac8c <.bg_next>:
  30ac8c:	74 02       	add	#2,r4
  30ac8e:	42 10       	dt	r2
  30ac90:	8f f1       	bf.s	30ac76 <.bg_x>
  30ac92:	73 01       	add	#1,r3
  30ac94:	47 10       	dt	r7
  30ac96:	50 f2       	mov.l	@(8,r15),r0
  30ac98:	33 0c       	add	r0,r3
  30ac9a:	8f eb       	bf.s	30ac74 <.bg_y>
  30ac9c:	34 8c       	add	r8,r4
  30ac9e:	00 0b       	rts	
  30aca0:	68 f6       	mov.l	@r15+,r8
  30aca2:	00 09       	nop	
  30aca4:	00 09       	nop	
  30aca6:	00 09       	nop	
  30aca8:	00 09       	nop	
  30acaa:	00 09       	nop	
  30acac:	00 09       	nop	
  30acae:	00 09       	nop	
  30acb0:	00 00       	.word 0x0000
  30acb2:	03 18       	.word 0x0318
  30acb4:	00 09       	nop	
  30acb6:	00 09       	nop	
  30acb8:	00 09       	nop	
  30acba:	00 09       	nop	
  30acbc:	00 09       	nop	
  30acbe:	00 09       	nop	

0030acc0 <vsnprintf>:
  30acc0:	2f 86       	mov.l	r8,@-r15
  30acc2:	68 63       	mov	r6,r8
  30acc4:	2f 96       	mov.l	r9,@-r15
  30acc6:	e6 1c       	mov	#28,r6
  30acc8:	2f a6       	mov.l	r10,@-r15
  30acca:	6a 43       	mov	r4,r10
  30accc:	4f 22       	sts.l	pr,@-r15
  30acce:	69 53       	mov	r5,r9
  30acd0:	d0 0a       	mov.l	30acfc <vsnprintf+0x3c>,r0	! 30af00 <memset>
  30acd2:	7f dc       	add	#-36,r15
  30acd4:	64 f3       	mov	r15,r4
  30acd6:	2f 72       	mov.l	r7,@r15
  30acd8:	e5 00       	mov	#0,r5
  30acda:	40 0b       	jsr	@r0
  30acdc:	74 08       	add	#8,r4
  30acde:	d0 08       	mov.l	30ad00 <vsnprintf+0x40>,r0	! 30b1d0 <__printf>
  30ace0:	64 f3       	mov	r15,r4
  30ace2:	1f a1       	mov.l	r10,@(4,r15)
  30ace4:	66 f3       	mov	r15,r6
  30ace6:	1f 94       	mov.l	r9,@(16,r15)
  30ace8:	65 83       	mov	r8,r5
  30acea:	40 0b       	jsr	@r0
  30acec:	74 04       	add	#4,r4
  30acee:	7f 24       	add	#36,r15
  30acf0:	4f 26       	lds.l	@r15+,pr
  30acf2:	6a f6       	mov.l	@r15+,r10
  30acf4:	69 f6       	mov.l	@r15+,r9
  30acf6:	00 0b       	rts	
  30acf8:	68 f6       	mov.l	@r15+,r8
  30acfa:	00 09       	nop	
  30acfc:	00 30       	.word 0x0030
  30acfe:	af 00       	bra	30ab02 <drect+0x352>
  30ad00:	00 30       	.word 0x0030
  30ad02:	b1 d0       	bsr	30b0a6 <alloc_dtors+0x1a>

0030ad04 <abort>:
  30ad04:	d0 03       	mov.l	30ad14 <abort+0x10>,r0	! 30b0ac <raise>
  30ad06:	4f 22       	sts.l	pr,@-r15
  30ad08:	40 0b       	jsr	@r0
  30ad0a:	e4 06       	mov	#6,r4
  30ad0c:	d1 02       	mov.l	30ad18 <abort+0x14>,r1	! 300fb0 <_Exit>
  30ad0e:	41 0b       	jsr	@r1
  30ad10:	e4 00       	mov	#0,r4
  30ad12:	00 09       	nop	
  30ad14:	00 30       	.word 0x0030
  30ad16:	b0 ac       	bsr	30ae72 <.aligned4_32>
  30ad18:	00 30       	.word 0x0030
  30ad1a:	0f b0       	.word 0x0fb0

0030ad1c <exit>:
  30ad1c:	d1 04       	mov.l	30ad30 <exit+0x14>,r1	! 30b02c <__cxa_finalize>
  30ad1e:	2f 86       	mov.l	r8,@-r15
  30ad20:	68 43       	mov	r4,r8
  30ad22:	4f 22       	sts.l	pr,@-r15
  30ad24:	41 0b       	jsr	@r1
  30ad26:	e4 00       	mov	#0,r4
  30ad28:	d1 02       	mov.l	30ad34 <exit+0x18>,r1	! 300fb0 <_Exit>
  30ad2a:	41 0b       	jsr	@r1
  30ad2c:	64 83       	mov	r8,r4
  30ad2e:	00 09       	nop	
  30ad30:	00 30       	.word 0x0030
  30ad32:	b0 2c       	bsr	30ad8e <context_switch+0x12>
  30ad34:	00 30       	.word 0x0030
  30ad36:	0f b0       	.word 0x0fb0

0030ad38 <strcmp>:
  30ad38:	60 44       	mov.b	@r4+,r0
  30ad3a:	20 08       	tst	r0,r0
  30ad3c:	8d 04       	bt.s	30ad48 <strcmp+0x10>
  30ad3e:	61 54       	mov.b	@r5+,r1
  30ad40:	30 10       	cmp/eq	r1,r0
  30ad42:	8f 01       	bf.s	30ad48 <strcmp+0x10>
  30ad44:	21 18       	tst	r1,r1
  30ad46:	8b f7       	bf	30ad38 <strcmp>
  30ad48:	61 1c       	extu.b	r1,r1
  30ad4a:	60 0c       	extu.b	r0,r0
  30ad4c:	00 0b       	rts	
  30ad4e:	30 18       	sub	r1,r0

0030ad50 <setjmp>:
  30ad50:	03 02       	stc	sr,r3
  30ad52:	74 34       	add	#52,r4
  30ad54:	44 22       	sts.l	pr,@-r4
  30ad56:	44 02       	sts.l	mach,@-r4
  30ad58:	44 12       	sts.l	macl,@-r4
  30ad5a:	44 13       	stc.l	gbr,@-r4
  30ad5c:	24 f6       	mov.l	r15,@-r4
  30ad5e:	24 e6       	mov.l	r14,@-r4
  30ad60:	24 d6       	mov.l	r13,@-r4
  30ad62:	24 c6       	mov.l	r12,@-r4
  30ad64:	24 b6       	mov.l	r11,@-r4
  30ad66:	24 a6       	mov.l	r10,@-r4
  30ad68:	24 96       	mov.l	r9,@-r4
  30ad6a:	24 86       	mov.l	r8,@-r4
  30ad6c:	24 36       	mov.l	r3,@-r4
  30ad6e:	00 0b       	rts	
  30ad70:	e0 00       	mov	#0,r0
  30ad72:	00 09       	nop	

0030ad74 <longjmp>:
  30ad74:	68 43       	mov	r4,r8
  30ad76:	25 58       	tst	r5,r5
  30ad78:	09 29       	movt	r9
  30ad7a:	39 5c       	add	r5,r9

0030ad7c <context_switch>:
  30ad7c:	48 07       	ldc.l	@r8+,sr
  30ad7e:	64 83       	mov	r8,r4
  30ad80:	60 93       	mov	r9,r0
  30ad82:	68 46       	mov.l	@r4+,r8
  30ad84:	69 46       	mov.l	@r4+,r9
  30ad86:	6a 46       	mov.l	@r4+,r10
  30ad88:	6b 46       	mov.l	@r4+,r11
  30ad8a:	6c 46       	mov.l	@r4+,r12
  30ad8c:	6d 46       	mov.l	@r4+,r13
  30ad8e:	6e 46       	mov.l	@r4+,r14
  30ad90:	6f 46       	mov.l	@r4+,r15
  30ad92:	44 17       	ldc.l	@r4+,gbr
  30ad94:	44 16       	lds.l	@r4+,macl
  30ad96:	44 06       	lds.l	@r4+,mach
  30ad98:	44 26       	lds.l	@r4+,pr
  30ad9a:	00 0b       	rts	
  30ad9c:	00 09       	nop	
  30ad9e:	00 09       	nop	

0030ada0 <memcmp>:
  30ada0:	26 68       	tst	r6,r6
  30ada2:	89 41       	bt	30ae28 <.zero>
  30ada4:	e0 40       	mov	#64,r0
  30ada6:	30 63       	cmp/ge	r6,r0
  30ada8:	89 34       	bt	30ae14 <naive_memcmp>
  30adaa:	e2 04       	mov	#4,r2
  30adac:	e3 03       	mov	#3,r3

0030adae <memcmp_align_rhs>:
  30adae:	60 44       	mov.b	@r4+,r0
  30adb0:	61 54       	mov.b	@r5+,r1
  30adb2:	31 00       	cmp/eq	r0,r1
  30adb4:	8f 34       	bf.s	30ae20 <.end>
  30adb6:	46 10       	dt	r6
  30adb8:	25 38       	tst	r3,r5
  30adba:	8b f8       	bf	30adae <memcmp_align_rhs>
  30adbc:	24 38       	tst	r3,r4
  30adbe:	89 08       	bt	30add2 <.aligned4>
  30adc0:	d0 1b       	mov.l	30ae30 <.___cpucap>,r0	! 81015c4 <__cpucap>
  30adc2:	60 02       	mov.l	@r0,r0
  30adc4:	c8 01       	tst	#1,r0
  30adc6:	8b 0d       	bf	30ade4 <.unaligned4>
  30adc8:	60 43       	mov	r4,r0
  30adca:	c8 01       	tst	#1,r0
  30adcc:	89 13       	bt	30adf6 <.aligned2>
  30adce:	a0 21       	bra	30ae14 <naive_memcmp>
  30add0:	00 09       	nop	

0030add2 <.aligned4>:
  30add2:	60 46       	mov.l	@r4+,r0
  30add4:	61 56       	mov.l	@r5+,r1
  30add6:	31 00       	cmp/eq	r0,r1
  30add8:	8f 19       	bf.s	30ae0e <fail>
  30adda:	76 fc       	add	#-4,r6
  30addc:	32 63       	cmp/ge	r6,r2
  30adde:	8b f8       	bf	30add2 <.aligned4>
  30ade0:	a0 18       	bra	30ae14 <naive_memcmp>
  30ade2:	00 09       	nop	

0030ade4 <.unaligned4>:
  30ade4:	44 e9       	movua.l	@r4+,r0
  30ade6:	61 56       	mov.l	@r5+,r1
  30ade8:	31 00       	cmp/eq	r0,r1
  30adea:	8f 10       	bf.s	30ae0e <fail>
  30adec:	76 fc       	add	#-4,r6
  30adee:	32 63       	cmp/ge	r6,r2
  30adf0:	8b f8       	bf	30ade4 <.unaligned4>
  30adf2:	a0 0f       	bra	30ae14 <naive_memcmp>
  30adf4:	00 09       	nop	

0030adf6 <.aligned2>:
  30adf6:	60 45       	mov.w	@r4+,r0
  30adf8:	61 56       	mov.l	@r5+,r1
  30adfa:	62 45       	mov.w	@r4+,r2
  30adfc:	40 28       	shll16	r0
  30adfe:	20 2b       	or	r2,r0
  30ae00:	31 00       	cmp/eq	r0,r1
  30ae02:	8f 04       	bf.s	30ae0e <fail>
  30ae04:	76 fc       	add	#-4,r6
  30ae06:	32 63       	cmp/ge	r6,r2
  30ae08:	8b f5       	bf	30adf6 <.aligned2>
  30ae0a:	a0 03       	bra	30ae14 <naive_memcmp>
  30ae0c:	00 09       	nop	

0030ae0e <fail>:
  30ae0e:	74 fc       	add	#-4,r4
  30ae10:	75 fc       	add	#-4,r5
  30ae12:	76 04       	add	#4,r6

0030ae14 <naive_memcmp>:
  30ae14:	60 44       	mov.b	@r4+,r0
  30ae16:	61 54       	mov.b	@r5+,r1
  30ae18:	31 00       	cmp/eq	r0,r1
  30ae1a:	8f 01       	bf.s	30ae20 <.end>
  30ae1c:	46 10       	dt	r6
  30ae1e:	8b f9       	bf	30ae14 <naive_memcmp>

0030ae20 <.end>:
  30ae20:	60 0c       	extu.b	r0,r0
  30ae22:	61 1c       	extu.b	r1,r1
  30ae24:	00 0b       	rts	
  30ae26:	30 18       	sub	r1,r0

0030ae28 <.zero>:
  30ae28:	00 0b       	rts	
  30ae2a:	e0 00       	mov	#0,r0
  30ae2c:	00 09       	nop	
  30ae2e:	00 09       	nop	

0030ae30 <.___cpucap>:
  30ae30:	08 10       	.word 0x0810
  30ae32:	15 c4       	mov.l	r12,@(16,r5)
  30ae34:	00 09       	nop	
  30ae36:	00 09       	nop	
  30ae38:	00 09       	nop	
  30ae3a:	00 09       	nop	
  30ae3c:	00 09       	nop	
  30ae3e:	00 09       	nop	

0030ae40 <memcpy>:
  30ae40:	26 68       	tst	r6,r6
  30ae42:	89 4d       	bt	30aee0 <.zero>
  30ae44:	63 43       	mov	r4,r3
  30ae46:	e2 03       	mov	#3,r2
  30ae48:	e0 40       	mov	#64,r0
  30ae4a:	30 63       	cmp/ge	r6,r0
  30ae4c:	89 41       	bt	30aed2 <naive_memcpy>

0030ae4e <memcpy_align_dst>:
  30ae4e:	60 54       	mov.b	@r5+,r0
  30ae50:	24 00       	mov.b	r0,@r4
  30ae52:	74 01       	add	#1,r4
  30ae54:	24 28       	tst	r2,r4
  30ae56:	8f fa       	bf.s	30ae4e <memcpy_align_dst>
  30ae58:	46 10       	dt	r6
  30ae5a:	25 28       	tst	r2,r5
  30ae5c:	8d 09       	bt.s	30ae72 <.aligned4_32>
  30ae5e:	e2 04       	mov	#4,r2
  30ae60:	d0 23       	mov.l	30aef0 <.___cpucap>,r0	! 81015c4 <__cpucap>
  30ae62:	60 02       	mov.l	@r0,r0
  30ae64:	c8 01       	tst	#1,r0
  30ae66:	8b 22       	bf	30aeae <.unaligned4>
  30ae68:	60 53       	mov	r5,r0
  30ae6a:	c8 01       	tst	#1,r0
  30ae6c:	89 27       	bt	30aebe <.aligned2>
  30ae6e:	a0 30       	bra	30aed2 <naive_memcpy>
  30ae70:	00 09       	nop	

0030ae72 <.aligned4_32>:
  30ae72:	e2 24       	mov	#36,r2
  30ae74:	60 56       	mov.l	@r5+,r0
  30ae76:	61 56       	mov.l	@r5+,r1
  30ae78:	67 56       	mov.l	@r5+,r7
  30ae7a:	24 02       	mov.l	r0,@r4
  30ae7c:	14 11       	mov.l	r1,@(4,r4)
  30ae7e:	14 72       	mov.l	r7,@(8,r4)
  30ae80:	60 56       	mov.l	@r5+,r0
  30ae82:	61 56       	mov.l	@r5+,r1
  30ae84:	67 56       	mov.l	@r5+,r7
  30ae86:	14 03       	mov.l	r0,@(12,r4)
  30ae88:	14 14       	mov.l	r1,@(16,r4)
  30ae8a:	14 75       	mov.l	r7,@(20,r4)
  30ae8c:	60 56       	mov.l	@r5+,r0
  30ae8e:	61 56       	mov.l	@r5+,r1
  30ae90:	76 e0       	add	#-32,r6
  30ae92:	14 06       	mov.l	r0,@(24,r4)
  30ae94:	14 17       	mov.l	r1,@(28,r4)
  30ae96:	32 63       	cmp/ge	r6,r2
  30ae98:	8f eb       	bf.s	30ae72 <.aligned4_32>
  30ae9a:	74 20       	add	#32,r4

0030ae9c <.aligned4_4>:
  30ae9c:	e2 04       	mov	#4,r2
  30ae9e:	60 56       	mov.l	@r5+,r0
  30aea0:	24 02       	mov.l	r0,@r4
  30aea2:	76 fc       	add	#-4,r6
  30aea4:	32 63       	cmp/ge	r6,r2
  30aea6:	8f f9       	bf.s	30ae9c <.aligned4_4>
  30aea8:	74 04       	add	#4,r4
  30aeaa:	a0 12       	bra	30aed2 <naive_memcpy>
  30aeac:	00 09       	nop	

0030aeae <.unaligned4>:
  30aeae:	45 e9       	movua.l	@r5+,r0
  30aeb0:	24 02       	mov.l	r0,@r4
  30aeb2:	76 fc       	add	#-4,r6
  30aeb4:	32 63       	cmp/ge	r6,r2
  30aeb6:	8f fa       	bf.s	30aeae <.unaligned4>
  30aeb8:	74 04       	add	#4,r4
  30aeba:	a0 0a       	bra	30aed2 <naive_memcpy>
  30aebc:	00 09       	nop	

0030aebe <.aligned2>:
  30aebe:	60 55       	mov.w	@r5+,r0
  30aec0:	24 01       	mov.w	r0,@r4
  30aec2:	60 55       	mov.w	@r5+,r0
  30aec4:	81 41       	mov.w	r0,@(2,r4)
  30aec6:	76 fc       	add	#-4,r6
  30aec8:	32 63       	cmp/ge	r6,r2
  30aeca:	8f f8       	bf.s	30aebe <.aligned2>
  30aecc:	74 04       	add	#4,r4
  30aece:	a0 00       	bra	30aed2 <naive_memcpy>
  30aed0:	00 09       	nop	

0030aed2 <naive_memcpy>:
  30aed2:	60 54       	mov.b	@r5+,r0
  30aed4:	46 10       	dt	r6
  30aed6:	24 00       	mov.b	r0,@r4
  30aed8:	8f fb       	bf.s	30aed2 <naive_memcpy>
  30aeda:	74 01       	add	#1,r4
  30aedc:	00 0b       	rts	
  30aede:	60 33       	mov	r3,r0

0030aee0 <.zero>:
  30aee0:	00 0b       	rts	
  30aee2:	60 43       	mov	r4,r0
  30aee4:	00 09       	nop	
  30aee6:	00 09       	nop	
  30aee8:	00 09       	nop	
  30aeea:	00 09       	nop	
  30aeec:	00 09       	nop	
  30aeee:	00 09       	nop	

0030aef0 <.___cpucap>:
  30aef0:	08 10       	.word 0x0810
  30aef2:	15 c4       	mov.l	r12,@(16,r5)
  30aef4:	00 09       	nop	
  30aef6:	00 09       	nop	
  30aef8:	00 09       	nop	
  30aefa:	00 09       	nop	
  30aefc:	00 09       	nop	
  30aefe:	00 09       	nop	

0030af00 <memset>:
  30af00:	26 68       	tst	r6,r6
  30af02:	89 26       	bt	30af52 <.zero>
  30af04:	63 43       	mov	r4,r3
  30af06:	34 6c       	add	r6,r4
  30af08:	e0 40       	mov	#64,r0
  30af0a:	30 63       	cmp/ge	r6,r0
  30af0c:	8d 1c       	bt.s	30af48 <naive_memset>
  30af0e:	60 53       	mov	r5,r0
  30af10:	e2 03       	mov	#3,r2
  30af12:	45 18       	shll8	r5
  30af14:	20 5b       	or	r5,r0
  30af16:	65 03       	mov	r0,r5
  30af18:	45 28       	shll16	r5
  30af1a:	20 5b       	or	r5,r0

0030af1c <memset_align>:
  30af1c:	24 04       	mov.b	r0,@-r4
  30af1e:	24 28       	tst	r2,r4
  30af20:	8f fc       	bf.s	30af1c <memset_align>
  30af22:	46 10       	dt	r6
  30af24:	e2 28       	mov	#40,r2

0030af26 <.aligned4_32>:
  30af26:	74 e0       	add	#-32,r4
  30af28:	76 e0       	add	#-32,r6
  30af2a:	14 07       	mov.l	r0,@(28,r4)
  30af2c:	14 06       	mov.l	r0,@(24,r4)
  30af2e:	14 05       	mov.l	r0,@(20,r4)
  30af30:	14 04       	mov.l	r0,@(16,r4)
  30af32:	14 03       	mov.l	r0,@(12,r4)
  30af34:	14 02       	mov.l	r0,@(8,r4)
  30af36:	14 01       	mov.l	r0,@(4,r4)
  30af38:	32 63       	cmp/ge	r6,r2
  30af3a:	8f f4       	bf.s	30af26 <.aligned4_32>
  30af3c:	24 02       	mov.l	r0,@r4
  30af3e:	e2 08       	mov	#8,r2

0030af40 <.aligned4_4>:
  30af40:	24 06       	mov.l	r0,@-r4
  30af42:	32 63       	cmp/ge	r6,r2
  30af44:	8f fc       	bf.s	30af40 <.aligned4_4>
  30af46:	76 fc       	add	#-4,r6

0030af48 <naive_memset>:
  30af48:	46 10       	dt	r6
  30af4a:	8f fd       	bf.s	30af48 <naive_memset>
  30af4c:	24 04       	mov.b	r0,@-r4

0030af4e <.end>:
  30af4e:	00 0b       	rts	
  30af50:	60 33       	mov	r3,r0

0030af52 <.zero>:
  30af52:	00 0b       	rts	
  30af54:	60 43       	mov	r4,r0
	...

0030af58 <free>:
  30af58:	d1 01       	mov.l	30af60 <free+0x8>,r1	! 304fc4 <kfree>
  30af5a:	41 2b       	jmp	@r1
  30af5c:	00 09       	nop	
  30af5e:	00 09       	nop	
  30af60:	00 30       	.word 0x0030
  30af62:	4f c4       	.word 0x4fc4

0030af64 <malloc>:
  30af64:	d0 05       	mov.l	30af7c <malloc+0x18>,r0	! 304cbc <kmalloc>
  30af66:	4f 22       	sts.l	pr,@-r15
  30af68:	40 0b       	jsr	@r0
  30af6a:	e5 00       	mov	#0,r5
  30af6c:	20 08       	tst	r0,r0
  30af6e:	8f 02       	bf.s	30af76 <malloc+0x12>
  30af70:	e2 09       	mov	#9,r2
  30af72:	d1 03       	mov.l	30af80 <malloc+0x1c>,r1	! 81015d0 <errno>
  30af74:	21 22       	mov.l	r2,@r1
  30af76:	4f 26       	lds.l	@r15+,pr
  30af78:	00 0b       	rts	
  30af7a:	00 09       	nop	
  30af7c:	00 30       	.word 0x0030
  30af7e:	4c bc       	shad	r11,r12
  30af80:	08 10       	.word 0x0810
  30af82:	15 d0       	mov.l	r13,@(0,r5)

0030af84 <call_dtors_in_interval>:
  30af84:	2f 86       	mov.l	r8,@-r15
  30af86:	68 63       	mov	r6,r8
  30af88:	2f 96       	mov.l	r9,@-r15
  30af8a:	78 ff       	add	#-1,r8
  30af8c:	2f a6       	mov.l	r10,@-r15
  30af8e:	69 43       	mov	r4,r9
  30af90:	2f b6       	mov.l	r11,@-r15
  30af92:	6a 53       	mov	r5,r10
  30af94:	2f c6       	mov.l	r12,@-r15
  30af96:	2f d6       	mov.l	r13,@-r15
  30af98:	2f e6       	mov.l	r14,@-r15
  30af9a:	de 13       	mov.l	30afe8 <call_dtors_in_interval+0x64>,r14	! 81015c8 <_dtor_count>
  30af9c:	db 13       	mov.l	30afec <call_dtors_in_interval+0x68>,r11	! 81015cc <_dtors>
  30af9e:	6d e2       	mov.l	@r14,r13
  30afa0:	dc 13       	mov.l	30aff0 <call_dtors_in_interval+0x6c>,r12	! 30af84 <call_dtors_in_interval>
  30afa2:	4f 22       	sts.l	pr,@-r15
  30afa4:	38 a3       	cmp/ge	r10,r8
  30afa6:	8d 09       	bt.s	30afbc <call_dtors_in_interval+0x38>
  30afa8:	e1 0c       	mov	#12,r1
  30afaa:	4f 26       	lds.l	@r15+,pr
  30afac:	6e f6       	mov.l	@r15+,r14
  30afae:	6d f6       	mov.l	@r15+,r13
  30afb0:	6c f6       	mov.l	@r15+,r12
  30afb2:	6b f6       	mov.l	@r15+,r11
  30afb4:	6a f6       	mov.l	@r15+,r10
  30afb6:	69 f6       	mov.l	@r15+,r9
  30afb8:	00 0b       	rts	
  30afba:	68 f6       	mov.l	@r15+,r8
  30afbc:	08 17       	mul.l	r1,r8
  30afbe:	61 b2       	mov.l	@r11,r1
  30afc0:	02 1a       	sts	macl,r2
  30afc2:	29 98       	tst	r9,r9
  30afc4:	8d 03       	bt.s	30afce <call_dtors_in_interval+0x4a>
  30afc6:	31 2c       	add	r2,r1
  30afc8:	52 12       	mov.l	@(8,r1),r2
  30afca:	32 90       	cmp/eq	r9,r2
  30afcc:	8b 02       	bf	30afd4 <call_dtors_in_interval+0x50>
  30afce:	62 12       	mov.l	@r1,r2
  30afd0:	42 0b       	jsr	@r2
  30afd2:	54 11       	mov.l	@(4,r1),r4
  30afd4:	66 e2       	mov.l	@r14,r6
  30afd6:	36 d7       	cmp/gt	r13,r6
  30afd8:	8f 03       	bf.s	30afe2 <call_dtors_in_interval+0x5e>
  30afda:	65 d3       	mov	r13,r5
  30afdc:	4c 0b       	jsr	@r12
  30afde:	64 93       	mov	r9,r4
  30afe0:	6d e2       	mov.l	@r14,r13
  30afe2:	af df       	bra	30afa4 <call_dtors_in_interval+0x20>
  30afe4:	78 ff       	add	#-1,r8
  30afe6:	00 09       	nop	
  30afe8:	08 10       	.word 0x0810
  30afea:	15 c8       	mov.l	r12,@(32,r5)
  30afec:	08 10       	.word 0x0810
  30afee:	15 cc       	mov.l	r12,@(48,r5)
  30aff0:	00 30       	.word 0x0030
  30aff2:	af 84       	bra	30aefe <.___cpucap+0xe>

0030aff4 <__cxa_atexit>:
  30aff4:	d1 0b       	mov.l	30b024 <__cxa_atexit+0x30>,r1	! 81015cc <_dtors>
  30aff6:	61 12       	mov.l	@r1,r1
  30aff8:	21 18       	tst	r1,r1
  30affa:	8d 10       	bt.s	30b01e <__cxa_atexit+0x2a>
  30affc:	e0 01       	mov	#1,r0
  30affe:	d3 0a       	mov.l	30b028 <__cxa_atexit+0x34>,r3	! 81015c8 <_dtor_count>
  30b000:	e7 1f       	mov	#31,r7
  30b002:	62 32       	mov.l	@r3,r2
  30b004:	32 77       	cmp/gt	r7,r2
  30b006:	8d 0a       	bt.s	30b01e <__cxa_atexit+0x2a>
  30b008:	67 23       	mov	r2,r7
  30b00a:	77 01       	add	#1,r7
  30b00c:	23 72       	mov.l	r7,@r3
  30b00e:	e3 0c       	mov	#12,r3
  30b010:	02 37       	mul.l	r3,r2
  30b012:	02 1a       	sts	macl,r2
  30b014:	31 2c       	add	r2,r1
  30b016:	21 42       	mov.l	r4,@r1
  30b018:	e0 00       	mov	#0,r0
  30b01a:	11 51       	mov.l	r5,@(4,r1)
  30b01c:	11 62       	mov.l	r6,@(8,r1)
  30b01e:	00 0b       	rts	
  30b020:	00 09       	nop	
  30b022:	00 09       	nop	
  30b024:	08 10       	.word 0x0810
  30b026:	15 cc       	mov.l	r12,@(48,r5)
  30b028:	08 10       	.word 0x0810
  30b02a:	15 c8       	mov.l	r12,@(32,r5)

0030b02c <__cxa_finalize>:
  30b02c:	2f 86       	mov.l	r8,@-r15
  30b02e:	e5 00       	mov	#0,r5
  30b030:	2f 96       	mov.l	r9,@-r15
  30b032:	d1 12       	mov.l	30b07c <__cxa_finalize+0x50>,r1	! 30af84 <call_dtors_in_interval>
  30b034:	d9 12       	mov.l	30b080 <__cxa_finalize+0x54>,r9	! 81015c8 <_dtor_count>
  30b036:	2f a6       	mov.l	r10,@-r15
  30b038:	66 92       	mov.l	@r9,r6
  30b03a:	4f 22       	sts.l	pr,@-r15
  30b03c:	41 0b       	jsr	@r1
  30b03e:	68 43       	mov	r4,r8
  30b040:	d6 10       	mov.l	30b084 <__cxa_finalize+0x58>,r6	! 81015cc <_dtors>
  30b042:	e2 00       	mov	#0,r2
  30b044:	da 10       	mov.l	30b088 <__cxa_finalize+0x5c>,r10	! 30c4ac <__movmemSI12>
  30b046:	e1 00       	mov	#0,r1
  30b048:	e3 0c       	mov	#12,r3
  30b04a:	67 92       	mov.l	@r9,r7
  30b04c:	37 27       	cmp/gt	r2,r7
  30b04e:	89 05       	bt	30b05c <__cxa_finalize+0x30>
  30b050:	29 12       	mov.l	r1,@r9
  30b052:	4f 26       	lds.l	@r15+,pr
  30b054:	6a f6       	mov.l	@r15+,r10
  30b056:	69 f6       	mov.l	@r15+,r9
  30b058:	00 0b       	rts	
  30b05a:	68 f6       	mov.l	@r15+,r8
  30b05c:	28 88       	tst	r8,r8
  30b05e:	8d 0b       	bt.s	30b078 <__cxa_finalize+0x4c>
  30b060:	02 37       	mul.l	r3,r2
  30b062:	67 62       	mov.l	@r6,r7
  30b064:	05 1a       	sts	macl,r5
  30b066:	35 7c       	add	r7,r5
  30b068:	54 52       	mov.l	@(8,r5),r4
  30b06a:	34 80       	cmp/eq	r8,r4
  30b06c:	8d 04       	bt.s	30b078 <__cxa_finalize+0x4c>
  30b06e:	01 37       	mul.l	r3,r1
  30b070:	04 1a       	sts	macl,r4
  30b072:	34 7c       	add	r7,r4
  30b074:	4a 0b       	jsr	@r10
  30b076:	71 01       	add	#1,r1
  30b078:	af e7       	bra	30b04a <__cxa_finalize+0x1e>
  30b07a:	72 01       	add	#1,r2
  30b07c:	00 30       	.word 0x0030
  30b07e:	af 84       	bra	30af8a <call_dtors_in_interval+0x6>
  30b080:	08 10       	.word 0x0810
  30b082:	15 c8       	mov.l	r12,@(32,r5)
  30b084:	08 10       	.word 0x0810
  30b086:	15 cc       	mov.l	r12,@(48,r5)
  30b088:	00 30       	.word 0x0030
  30b08a:	c4 ac       	mov.b	@(172,gbr),r0

0030b08c <alloc_dtors>:
  30b08c:	d0 05       	mov.l	30b0a4 <alloc_dtors+0x18>,r0	! 30af64 <malloc>
  30b08e:	4f 22       	sts.l	pr,@-r15
  30b090:	94 06       	mov.w	30b0a0 <alloc_dtors+0x14>,r4	! 180
  30b092:	40 0b       	jsr	@r0
  30b094:	00 09       	nop	
  30b096:	d1 04       	mov.l	30b0a8 <alloc_dtors+0x1c>,r1	! 81015cc <_dtors>
  30b098:	21 02       	mov.l	r0,@r1
  30b09a:	4f 26       	lds.l	@r15+,pr
  30b09c:	00 0b       	rts	
  30b09e:	00 09       	nop	
  30b0a0:	01 80       	.word 0x0180
  30b0a2:	00 09       	nop	
  30b0a4:	00 30       	.word 0x0030
  30b0a6:	af 64       	bra	30af72 <malloc+0xe>
  30b0a8:	08 10       	.word 0x0810
  30b0aa:	15 cc       	mov.l	r12,@(48,r5)

0030b0ac <raise>:
  30b0ac:	2f 86       	mov.l	r8,@-r15
  30b0ae:	e1 0f       	mov	#15,r1
  30b0b0:	2f 96       	mov.l	r9,@-r15
  30b0b2:	34 16       	cmp/hi	r1,r4
  30b0b4:	2f a6       	mov.l	r10,@-r15
  30b0b6:	68 43       	mov	r4,r8
  30b0b8:	2f b6       	mov.l	r11,@-r15
  30b0ba:	e9 01       	mov	#1,r9
  30b0bc:	8d 20       	bt.s	30b100 <raise+0x54>
  30b0be:	4f 22       	sts.l	pr,@-r15
  30b0c0:	db 14       	mov.l	30b114 <raise+0x68>,r11	! 30b4a4 <signal>
  30b0c2:	4b 0b       	jsr	@r11
  30b0c4:	e5 00       	mov	#0,r5
  30b0c6:	20 08       	tst	r0,r0
  30b0c8:	8f 11       	bf.s	30b0ee <raise+0x42>
  30b0ca:	6a 03       	mov	r0,r10
  30b0cc:	90 1f       	mov.w	30b10e <raise+0x62>,r0	! 950
  30b0ce:	49 8d       	shld	r8,r9
  30b0d0:	29 08       	tst	r0,r9
  30b0d2:	8b 08       	bf	30b0e6 <raise+0x3a>
  30b0d4:	d1 10       	mov.l	30b118 <raise+0x6c>,r1	! 8004
  30b0d6:	29 18       	tst	r1,r9
  30b0d8:	8d 0f       	bt.s	30b0fa <raise+0x4e>
  30b0da:	65 a3       	mov	r10,r5
  30b0dc:	94 18       	mov.w	30b110 <raise+0x64>,r4	! 80 <silram>
  30b0de:	d1 0f       	mov.l	30b11c <raise+0x70>,r1	! 30ad1c <exit>
  30b0e0:	34 8c       	add	r8,r4
  30b0e2:	41 0b       	jsr	@r1
  30b0e4:	00 09       	nop	
  30b0e6:	94 13       	mov.w	30b110 <raise+0x64>,r4	! 80 <silram>
  30b0e8:	d1 0d       	mov.l	30b120 <raise+0x74>,r1	! 300fb0 <_Exit>
  30b0ea:	af fa       	bra	30b0e2 <raise+0x36>
  30b0ec:	34 8c       	add	r8,r4
  30b0ee:	88 01       	cmp/eq	#1,r0
  30b0f0:	8d 03       	bt.s	30b0fa <raise+0x4e>
  30b0f2:	65 a3       	mov	r10,r5
  30b0f4:	40 0b       	jsr	@r0
  30b0f6:	64 83       	mov	r8,r4
  30b0f8:	65 a3       	mov	r10,r5
  30b0fa:	64 83       	mov	r8,r4
  30b0fc:	4b 0b       	jsr	@r11
  30b0fe:	e9 00       	mov	#0,r9
  30b100:	60 93       	mov	r9,r0
  30b102:	4f 26       	lds.l	@r15+,pr
  30b104:	6b f6       	mov.l	@r15+,r11
  30b106:	6a f6       	mov.l	@r15+,r10
  30b108:	69 f6       	mov.l	@r15+,r9
  30b10a:	00 0b       	rts	
  30b10c:	68 f6       	mov.l	@r15+,r8
  30b10e:	09 50       	.word 0x0950
  30b110:	00 80       	.word 0x0080
  30b112:	00 09       	nop	
  30b114:	00 30       	.word 0x0030
  30b116:	b4 a4       	bsr	30ba62 <__printf_format_p+0x36>
  30b118:	00 00       	.word 0x0000
  30b11a:	80 04       	mov.b	r0,@(4,r0)
  30b11c:	00 30       	.word 0x0030
  30b11e:	ad 1c       	bra	30ab5a <drect+0x3aa>
  30b120:	00 30       	.word 0x0030
  30b122:	0f b0       	.word 0x0fb0

0030b124 <__printf_register>:
  30b124:	62 43       	mov	r4,r2
  30b126:	72 bf       	add	#-65,r2
  30b128:	e1 19       	mov	#25,r1
  30b12a:	32 16       	cmp/hi	r1,r2
  30b12c:	89 0c       	bt	30b148 <__printf_register+0x24>
  30b12e:	64 23       	mov	r2,r4
  30b130:	d1 09       	mov.l	30b158 <__printf_register+0x34>,r1	! 81016f4 <__printf_formatters>
  30b132:	44 08       	shll2	r4
  30b134:	31 4c       	add	r4,r1
  30b136:	60 12       	mov.l	@r1,r0
  30b138:	88 01       	cmp/eq	#1,r0
  30b13a:	8d 03       	bt.s	30b144 <__printf_register+0x20>
  30b13c:	60 53       	mov	r5,r0
  30b13e:	88 01       	cmp/eq	#1,r0
  30b140:	89 00       	bt	30b144 <__printf_register+0x20>
  30b142:	21 52       	mov.l	r5,@r1
  30b144:	00 0b       	rts	
  30b146:	00 09       	nop	
  30b148:	62 43       	mov	r4,r2
  30b14a:	72 9f       	add	#-97,r2
  30b14c:	32 16       	cmp/hi	r1,r2
  30b14e:	8d f9       	bt.s	30b144 <__printf_register+0x20>
  30b150:	74 b9       	add	#-71,r4
  30b152:	af ed       	bra	30b130 <__printf_register+0xc>
  30b154:	00 09       	nop	
  30b156:	00 09       	nop	
  30b158:	08 10       	.word 0x0810
  30b15a:	16 f4       	mov.l	r15,@(16,r6)

0030b15c <__printf_flush>:
  30b15c:	2f 86       	mov.l	r8,@-r15
  30b15e:	2f 96       	mov.l	r9,@-r15
  30b160:	4f 22       	sts.l	pr,@-r15
  30b162:	52 45       	mov.l	@(20,r4),r2
  30b164:	51 44       	mov.l	@(16,r4),r1
  30b166:	66 23       	mov	r2,r6
  30b168:	53 47       	mov.l	@(28,r4),r3
  30b16a:	36 18       	sub	r1,r6
  30b16c:	d9 14       	mov.l	30b1c0 <__printf_flush+0x64>,r9	! 81015d4 <__printf_buffer>
  30b16e:	33 6c       	add	r6,r3
  30b170:	14 37       	mov.l	r3,@(28,r4)
  30b172:	63 42       	mov.l	@r4,r3
  30b174:	23 38       	tst	r3,r3
  30b176:	8d 11       	bt.s	30b19c <__printf_flush+0x40>
  30b178:	68 43       	mov	r4,r8
  30b17a:	33 90       	cmp/eq	r9,r3
  30b17c:	89 0e       	bt	30b19c <__printf_flush+0x40>
  30b17e:	51 46       	mov.l	@(24,r4),r1
  30b180:	71 ff       	add	#-1,r1
  30b182:	32 12       	cmp/hs	r1,r2
  30b184:	89 00       	bt	30b188 <__printf_flush+0x2c>
  30b186:	61 23       	mov	r2,r1
  30b188:	e2 00       	mov	#0,r2
  30b18a:	21 20       	mov.b	r2,@r1
  30b18c:	d1 0d       	mov.l	30b1c4 <__printf_flush+0x68>,r1	! 8101614 <__signal_handlers>
  30b18e:	18 94       	mov.l	r9,@(16,r8)
  30b190:	18 16       	mov.l	r1,@(24,r8)
  30b192:	18 95       	mov.l	r9,@(20,r8)
  30b194:	4f 26       	lds.l	@r15+,pr
  30b196:	69 f6       	mov.l	@r15+,r9
  30b198:	00 0b       	rts	
  30b19a:	68 f6       	mov.l	@r15+,r8
  30b19c:	57 81       	mov.l	@(4,r8),r7
  30b19e:	27 78       	tst	r7,r7
  30b1a0:	8d 05       	bt.s	30b1ae <__printf_flush+0x52>
  30b1a2:	e5 01       	mov	#1,r5
  30b1a4:	d0 08       	mov.l	30b1c8 <__printf_flush+0x6c>,r0	! 30b4c0 <fwrite>
  30b1a6:	40 0b       	jsr	@r0
  30b1a8:	64 13       	mov	r1,r4
  30b1aa:	af ef       	bra	30b18c <__printf_flush+0x30>
  30b1ac:	00 09       	nop	
  30b1ae:	54 82       	mov.l	@(8,r8),r4
  30b1b0:	24 48       	tst	r4,r4
  30b1b2:	89 eb       	bt	30b18c <__printf_flush+0x30>
  30b1b4:	d0 05       	mov.l	30b1cc <__printf_flush+0x70>,r0	! 30cea0 <write>
  30b1b6:	40 0b       	jsr	@r0
  30b1b8:	65 13       	mov	r1,r5
  30b1ba:	af e7       	bra	30b18c <__printf_flush+0x30>
  30b1bc:	00 09       	nop	
  30b1be:	00 09       	nop	
  30b1c0:	08 10       	.word 0x0810
  30b1c2:	15 d4       	mov.l	r13,@(16,r5)
  30b1c4:	08 10       	.word 0x0810
  30b1c6:	16 14       	mov.l	r1,@(16,r6)
  30b1c8:	00 30       	.word 0x0030
  30b1ca:	b4 c0       	bsr	30bb4e <__printf_compute_geometry+0x26>
  30b1cc:	00 30       	.word 0x0030
  30b1ce:	ce a0       	xor.b	#160,@(r0,gbr)

0030b1d0 <__printf>:
  30b1d0:	2f 86       	mov.l	r8,@-r15
  30b1d2:	68 53       	mov	r5,r8
  30b1d4:	2f 96       	mov.l	r9,@-r15
  30b1d6:	69 43       	mov	r4,r9
  30b1d8:	2f a6       	mov.l	r10,@-r15
  30b1da:	2f b6       	mov.l	r11,@-r15
  30b1dc:	2f c6       	mov.l	r12,@-r15
  30b1de:	2f d6       	mov.l	r13,@-r15
  30b1e0:	2f e6       	mov.l	r14,@-r15
  30b1e2:	4f 22       	sts.l	pr,@-r15
  30b1e4:	51 41       	mov.l	@(4,r4),r1
  30b1e6:	7f d0       	add	#-48,r15
  30b1e8:	21 18       	tst	r1,r1
  30b1ea:	8f 03       	bf.s	30b1f4 <__printf+0x24>
  30b1ec:	1f 65       	mov.l	r6,@(20,r15)
  30b1ee:	51 42       	mov.l	@(8,r4),r1
  30b1f0:	21 18       	tst	r1,r1
  30b1f2:	89 19       	bt	30b228 <__printf+0x58>
  30b1f4:	d1 9f       	mov.l	30b474 <__printf+0x2a4>,r1	! 81015d4 <__printf_buffer>
  30b1f6:	19 14       	mov.l	r1,@(16,r9)
  30b1f8:	71 40       	add	#64,r1
  30b1fa:	19 16       	mov.l	r1,@(24,r9)
  30b1fc:	51 94       	mov.l	@(16,r9),r1
  30b1fe:	19 15       	mov.l	r1,@(20,r9)
  30b200:	e1 00       	mov	#0,r1
  30b202:	19 17       	mov.l	r1,@(28,r9)
  30b204:	6a 83       	mov	r8,r10
  30b206:	6b a4       	mov.b	@r10+,r11
  30b208:	2b b8       	tst	r11,r11
  30b20a:	8b 12       	bf	30b232 <__printf+0x62>
  30b20c:	d1 9a       	mov.l	30b478 <__printf+0x2a8>,r1	! 30b15c <__printf_flush>
  30b20e:	41 0b       	jsr	@r1
  30b210:	64 93       	mov	r9,r4
  30b212:	50 97       	mov.l	@(28,r9),r0
  30b214:	7f 30       	add	#48,r15
  30b216:	4f 26       	lds.l	@r15+,pr
  30b218:	6e f6       	mov.l	@r15+,r14
  30b21a:	6d f6       	mov.l	@r15+,r13
  30b21c:	6c f6       	mov.l	@r15+,r12
  30b21e:	6b f6       	mov.l	@r15+,r11
  30b220:	6a f6       	mov.l	@r15+,r10
  30b222:	69 f6       	mov.l	@r15+,r9
  30b224:	00 0b       	rts	
  30b226:	68 f6       	mov.l	@r15+,r8
  30b228:	61 42       	mov.l	@r4,r1
  30b22a:	52 43       	mov.l	@(12,r4),r2
  30b22c:	14 14       	mov.l	r1,@(16,r4)
  30b22e:	af e4       	bra	30b1fa <__printf+0x2a>
  30b230:	31 2c       	add	r2,r1
  30b232:	60 b3       	mov	r11,r0
  30b234:	88 25       	cmp/eq	#37,r0
  30b236:	89 0d       	bt	30b254 <__printf+0x84>
  30b238:	52 95       	mov.l	@(20,r9),r2
  30b23a:	51 96       	mov.l	@(24,r9),r1
  30b23c:	32 12       	cmp/hs	r1,r2
  30b23e:	8b 02       	bf	30b246 <__printf+0x76>
  30b240:	d1 8d       	mov.l	30b478 <__printf+0x2a8>,r1	! 30b15c <__printf_flush>
  30b242:	41 0b       	jsr	@r1
  30b244:	64 93       	mov	r9,r4
  30b246:	51 95       	mov.l	@(20,r9),r1
  30b248:	62 13       	mov	r1,r2
  30b24a:	72 01       	add	#1,r2
  30b24c:	19 25       	mov.l	r2,@(20,r9)
  30b24e:	21 b0       	mov.b	r11,@r1
  30b250:	af d8       	bra	30b204 <__printf+0x34>
  30b252:	68 a3       	mov	r10,r8
  30b254:	84 81       	mov.b	@(1,r8),r0
  30b256:	20 08       	tst	r0,r0
  30b258:	8d d8       	bt.s	30b20c <__printf+0x3c>
  30b25a:	88 25       	cmp/eq	#37,r0
  30b25c:	8f 10       	bf.s	30b280 <__printf+0xb0>
  30b25e:	e1 00       	mov	#0,r1
  30b260:	52 95       	mov.l	@(20,r9),r2
  30b262:	51 96       	mov.l	@(24,r9),r1
  30b264:	32 12       	cmp/hs	r1,r2
  30b266:	8b 02       	bf	30b26e <__printf+0x9e>
  30b268:	d1 83       	mov.l	30b478 <__printf+0x2a8>,r1	! 30b15c <__printf_flush>
  30b26a:	41 0b       	jsr	@r1
  30b26c:	64 93       	mov	r9,r4
  30b26e:	51 95       	mov.l	@(20,r9),r1
  30b270:	6a 83       	mov	r8,r10
  30b272:	7a 02       	add	#2,r10
  30b274:	62 13       	mov	r1,r2
  30b276:	72 01       	add	#1,r2
  30b278:	19 25       	mov.l	r2,@(20,r9)
  30b27a:	e2 25       	mov	#37,r2
  30b27c:	af e8       	bra	30b250 <__printf+0x80>
  30b27e:	21 20       	mov.b	r2,@r1
  30b280:	e0 00       	mov	#0,r0
  30b282:	1f 18       	mov.l	r1,@(32,r15)
  30b284:	e3 00       	mov	#0,r3
  30b286:	1f 19       	mov.l	r1,@(36,r15)
  30b288:	e7 00       	mov	#0,r7
  30b28a:	1f 04       	mov.l	r0,@(16,r15)
  30b28c:	e6 00       	mov	#0,r6
  30b28e:	eb 00       	mov	#0,r11
  30b290:	ec ff       	mov	#-1,r12
  30b292:	ee 00       	mov	#0,r14
  30b294:	e2 00       	mov	#0,r2
  30b296:	68 a0       	mov.b	@r10,r8
  30b298:	28 88       	tst	r8,r8
  30b29a:	8f 41       	bf.s	30b320 <__printf+0x150>
  30b29c:	6d 83       	mov	r8,r13
  30b29e:	65 f3       	mov	r15,r5
  30b2a0:	75 20       	add	#32,r5
  30b2a2:	60 c3       	mov	r12,r0
  30b2a4:	81 51       	mov.w	r0,@(2,r5)
  30b2a6:	60 b3       	mov	r11,r0
  30b2a8:	80 54       	mov.b	r0,@(4,r5)
  30b2aa:	46 18       	shll8	r6
  30b2ac:	84 55       	mov.b	@(5,r5),r0
  30b2ae:	46 01       	shlr	r6
  30b2b0:	47 18       	shll8	r7
  30b2b2:	c9 3f       	and	#63,r0
  30b2b4:	47 09       	shlr2	r7
  30b2b6:	20 6b       	or	r6,r0
  30b2b8:	43 08       	shll2	r3
  30b2ba:	e1 df       	mov	#-33,r1
  30b2bc:	20 7b       	or	r7,r0
  30b2be:	33 3c       	add	r3,r3
  30b2c0:	20 19       	and	r1,r0
  30b2c2:	43 08       	shll2	r3
  30b2c4:	20 3b       	or	r3,r0
  30b2c6:	80 55       	mov.b	r0,@(5,r5)
  30b2c8:	64 f3       	mov	r15,r4
  30b2ca:	50 f4       	mov.l	@(16,r15),r0
  30b2cc:	61 f3       	mov	r15,r1
  30b2ce:	d2 6b       	mov.l	30b47c <__printf+0x2ac>,r2	! 30c4b0 <__movmemSI8>
  30b2d0:	74 28       	add	#40,r4
  30b2d2:	71 18       	add	#24,r1
  30b2d4:	80 56       	mov.b	r0,@(6,r5)
  30b2d6:	2b b8       	tst	r11,r11
  30b2d8:	42 0b       	jsr	@r2
  30b2da:	25 e1       	mov.w	r14,@r5
  30b2dc:	64 13       	mov	r1,r4
  30b2de:	42 0b       	jsr	@r2
  30b2e0:	75 08       	add	#8,r5
  30b2e2:	60 83       	mov	r8,r0
  30b2e4:	80 17       	mov.b	r0,@(7,r1)
  30b2e6:	8f 06       	bf.s	30b2f6 <__printf+0x126>
  30b2e8:	7a 01       	add	#1,r10
  30b2ea:	60 83       	mov	r8,r0
  30b2ec:	88 63       	cmp/eq	#99,r0
  30b2ee:	8d 01       	bt.s	30b2f4 <__printf+0x124>
  30b2f0:	e0 01       	mov	#1,r0
  30b2f2:	e0 04       	mov	#4,r0
  30b2f4:	80 14       	mov.b	r0,@(4,r1)
  30b2f6:	63 83       	mov	r8,r3
  30b2f8:	73 bf       	add	#-65,r3
  30b2fa:	e2 19       	mov	#25,r2
  30b2fc:	33 26       	cmp/hi	r2,r3
  30b2fe:	8b 01       	bf	30b304 <__printf+0x134>
  30b300:	a0 b1       	bra	30b466 <__printf+0x296>
  30b302:	63 83       	mov	r8,r3
  30b304:	68 33       	mov	r3,r8
  30b306:	d2 5e       	mov.l	30b480 <__printf+0x2b0>,r2	! 81016f4 <__printf_formatters>
  30b308:	48 08       	shll2	r8
  30b30a:	60 83       	mov	r8,r0
  30b30c:	02 2e       	mov.l	@(r0,r2),r2
  30b30e:	e3 01       	mov	#1,r3
  30b310:	32 36       	cmp/hi	r3,r2
  30b312:	8f 9d       	bf.s	30b250 <__printf+0x80>
  30b314:	65 13       	mov	r1,r5
  30b316:	56 f5       	mov.l	@(20,r15),r6
  30b318:	42 0b       	jsr	@r2
  30b31a:	64 93       	mov	r9,r4
  30b31c:	af 98       	bra	30b250 <__printf+0x80>
  30b31e:	00 09       	nop	
  30b320:	60 83       	mov	r8,r0
  30b322:	70 bf       	add	#-65,r0
  30b324:	e5 19       	mov	#25,r5
  30b326:	30 56       	cmp/hi	r5,r0
  30b328:	8f 07       	bf.s	30b33a <__printf+0x16a>
  30b32a:	40 11       	cmp/pz	r0
  30b32c:	64 83       	mov	r8,r4
  30b32e:	74 9f       	add	#-97,r4
  30b330:	34 56       	cmp/hi	r5,r4
  30b332:	8d 09       	bt.s	30b348 <__printf+0x178>
  30b334:	60 83       	mov	r8,r0
  30b336:	70 b9       	add	#-71,r0
  30b338:	40 11       	cmp/pz	r0
  30b33a:	8f 05       	bf.s	30b348 <__printf+0x178>
  30b33c:	40 08       	shll2	r0
  30b33e:	d5 50       	mov.l	30b480 <__printf+0x2b0>,r5	! 81016f4 <__printf_formatters>
  30b340:	00 5e       	mov.l	@(r0,r5),r0
  30b342:	88 01       	cmp/eq	#1,r0
  30b344:	8f ac       	bf.s	30b2a0 <__printf+0xd0>
  30b346:	65 f3       	mov	r15,r5
  30b348:	60 83       	mov	r8,r0
  30b34a:	88 2e       	cmp/eq	#46,r0
  30b34c:	8f 02       	bf.s	30b354 <__printf+0x184>
  30b34e:	60 13       	mov	r1,r0
  30b350:	a0 23       	bra	30b39a <__printf+0x1ca>
  30b352:	ec 00       	mov	#0,r12
  30b354:	88 01       	cmp/eq	#1,r0
  30b356:	8f 10       	bf.s	30b37a <__printf+0x1aa>
  30b358:	64 8c       	extu.b	r8,r4
  30b35a:	e5 2f       	mov	#47,r5
  30b35c:	38 57       	cmp/gt	r5,r8
  30b35e:	8b 0c       	bf	30b37a <__printf+0x1aa>
  30b360:	e1 39       	mov	#57,r1
  30b362:	38 17       	cmp/gt	r1,r8
  30b364:	8d 21       	bt.s	30b3aa <__printf+0x1da>
  30b366:	60 83       	mov	r8,r0
  30b368:	e1 0a       	mov	#10,r1
  30b36a:	2e 1e       	mulu.w	r1,r14
  30b36c:	0e 1a       	sts	macl,r14
  30b36e:	7e d0       	add	#-48,r14
  30b370:	3e 8c       	add	r8,r14
  30b372:	6e ed       	extu.w	r14,r14
  30b374:	e1 01       	mov	#1,r1
  30b376:	af 8e       	bra	30b296 <__printf+0xc6>
  30b378:	7a 01       	add	#1,r10
  30b37a:	65 43       	mov	r4,r5
  30b37c:	75 d0       	add	#-48,r5
  30b37e:	65 5c       	extu.b	r5,r5
  30b380:	e0 09       	mov	#9,r0
  30b382:	35 06       	cmp/hi	r0,r5
  30b384:	8d 0b       	bt.s	30b39e <__printf+0x1ce>
  30b386:	60 13       	mov	r1,r0
  30b388:	88 02       	cmp/eq	#2,r0
  30b38a:	8f 09       	bf.s	30b3a0 <__printf+0x1d0>
  30b38c:	60 83       	mov	r8,r0
  30b38e:	e1 0a       	mov	#10,r1
  30b390:	2c 1e       	mulu.w	r1,r12
  30b392:	0c 1a       	sts	macl,r12
  30b394:	3c 8c       	add	r8,r12
  30b396:	7c d0       	add	#-48,r12
  30b398:	6c cf       	exts.w	r12,r12
  30b39a:	af ec       	bra	30b376 <__printf+0x1a6>
  30b39c:	e1 02       	mov	#2,r1
  30b39e:	60 83       	mov	r8,r0
  30b3a0:	88 23       	cmp/eq	#35,r0
  30b3a2:	8d 37       	bt.s	30b414 <__printf+0x244>
  30b3a4:	88 20       	cmp/eq	#32,r0
  30b3a6:	8d 3c       	bt.s	30b422 <__printf+0x252>
  30b3a8:	60 83       	mov	r8,r0
  30b3aa:	88 2b       	cmp/eq	#43,r0
  30b3ac:	8d 3b       	bt.s	30b426 <__printf+0x256>
  30b3ae:	88 2d       	cmp/eq	#45,r0
  30b3b0:	8d 32       	bt.s	30b418 <__printf+0x248>
  30b3b2:	88 30       	cmp/eq	#48,r0
  30b3b4:	8d 31       	bt.s	30b41a <__printf+0x24a>
  30b3b6:	50 f4       	mov.l	@(16,r15),r0
  30b3b8:	d1 32       	mov.l	30b484 <__printf+0x2b4>,r1	! 30b48c <strchr>
  30b3ba:	65 83       	mov	r8,r5
  30b3bc:	1f 23       	mov.l	r2,@(12,r15)
  30b3be:	2f 32       	mov.l	r3,@r15
  30b3c0:	1f 62       	mov.l	r6,@(8,r15)
  30b3c2:	d4 31       	mov.l	30b488 <__printf+0x2b8>,r4	! 30f340
  30b3c4:	41 0b       	jsr	@r1
  30b3c6:	1f 71       	mov.l	r7,@(4,r15)
  30b3c8:	20 08       	tst	r0,r0
  30b3ca:	52 f3       	mov.l	@(12,r15),r2
  30b3cc:	63 f2       	mov.l	@r15,r3
  30b3ce:	56 f2       	mov.l	@(8,r15),r6
  30b3d0:	8d 31       	bt.s	30b436 <__printf+0x266>
  30b3d2:	57 f1       	mov.l	@(4,r15),r7
  30b3d4:	60 83       	mov	r8,r0
  30b3d6:	88 68       	cmp/eq	#104,r0
  30b3d8:	8f 02       	bf.s	30b3e0 <__printf+0x210>
  30b3da:	60 23       	mov	r2,r0
  30b3dc:	88 68       	cmp/eq	#104,r0
  30b3de:	89 2c       	bt	30b43a <__printf+0x26a>
  30b3e0:	60 83       	mov	r8,r0
  30b3e2:	88 68       	cmp/eq	#104,r0
  30b3e4:	8d 2c       	bt.s	30b440 <__printf+0x270>
  30b3e6:	88 6c       	cmp/eq	#108,r0
  30b3e8:	8f 02       	bf.s	30b3f0 <__printf+0x220>
  30b3ea:	60 23       	mov	r2,r0
  30b3ec:	88 6c       	cmp/eq	#108,r0
  30b3ee:	89 29       	bt	30b444 <__printf+0x274>
  30b3f0:	60 83       	mov	r8,r0
  30b3f2:	88 6c       	cmp/eq	#108,r0
  30b3f4:	8d 29       	bt.s	30b44a <__printf+0x27a>
  30b3f6:	e1 6c       	mov	#108,r1
  30b3f8:	38 17       	cmp/gt	r1,r8
  30b3fa:	8d 16       	bt.s	30b42a <__printf+0x25a>
  30b3fc:	88 74       	cmp/eq	#116,r0
  30b3fe:	88 4c       	cmp/eq	#76,r0
  30b400:	8d 25       	bt.s	30b44e <__printf+0x27e>
  30b402:	88 6a       	cmp/eq	#106,r0
  30b404:	89 26       	bt	30b454 <__printf+0x284>
  30b406:	78 cf       	add	#-49,r8
  30b408:	e1 08       	mov	#8,r1
  30b40a:	38 16       	cmp/hi	r1,r8
  30b40c:	89 28       	bt	30b460 <__printf+0x290>
  30b40e:	7a ff       	add	#-1,r10
  30b410:	af b0       	bra	30b374 <__printf+0x1a4>
  30b412:	62 d3       	mov	r13,r2
  30b414:	af d0       	bra	30b3b8 <__printf+0x1e8>
  30b416:	e6 01       	mov	#1,r6
  30b418:	50 f4       	mov.l	@(16,r15),r0
  30b41a:	88 30       	cmp/eq	#48,r0
  30b41c:	89 cc       	bt	30b3b8 <__printf+0x1e8>
  30b41e:	af cb       	bra	30b3b8 <__printf+0x1e8>
  30b420:	1f 44       	mov.l	r4,@(16,r15)
  30b422:	af c9       	bra	30b3b8 <__printf+0x1e8>
  30b424:	e7 01       	mov	#1,r7
  30b426:	af c7       	bra	30b3b8 <__printf+0x1e8>
  30b428:	e3 01       	mov	#1,r3
  30b42a:	8d 16       	bt.s	30b45a <__printf+0x28a>
  30b42c:	88 7a       	cmp/eq	#122,r0
  30b42e:	8b ea       	bf	30b406 <__printf+0x236>
  30b430:	eb 04       	mov	#4,r11
  30b432:	af e8       	bra	30b406 <__printf+0x236>
  30b434:	ed 7a       	mov	#122,r13
  30b436:	af e6       	bra	30b406 <__printf+0x236>
  30b438:	6d 23       	mov	r2,r13
  30b43a:	eb 01       	mov	#1,r11
  30b43c:	af e3       	bra	30b406 <__printf+0x236>
  30b43e:	ed 68       	mov	#104,r13
  30b440:	af e1       	bra	30b406 <__printf+0x236>
  30b442:	eb 02       	mov	#2,r11
  30b444:	eb 08       	mov	#8,r11
  30b446:	af de       	bra	30b406 <__printf+0x236>
  30b448:	ed 6c       	mov	#108,r13
  30b44a:	af fc       	bra	30b446 <__printf+0x276>
  30b44c:	eb 04       	mov	#4,r11
  30b44e:	eb 08       	mov	#8,r11
  30b450:	af d9       	bra	30b406 <__printf+0x236>
  30b452:	ed 4c       	mov	#76,r13
  30b454:	eb 08       	mov	#8,r11
  30b456:	af d6       	bra	30b406 <__printf+0x236>
  30b458:	ed 6a       	mov	#106,r13
  30b45a:	eb 04       	mov	#4,r11
  30b45c:	af d3       	bra	30b406 <__printf+0x236>
  30b45e:	ed 74       	mov	#116,r13
  30b460:	62 d3       	mov	r13,r2
  30b462:	af 88       	bra	30b376 <__printf+0x1a6>
  30b464:	e1 00       	mov	#0,r1
  30b466:	73 9f       	add	#-97,r3
  30b468:	33 26       	cmp/hi	r2,r3
  30b46a:	8b 01       	bf	30b470 <__printf+0x2a0>
  30b46c:	ae f0       	bra	30b250 <__printf+0x80>
  30b46e:	00 09       	nop	
  30b470:	af 49       	bra	30b306 <__printf+0x136>
  30b472:	78 b9       	add	#-71,r8
  30b474:	08 10       	.word 0x0810
  30b476:	15 d4       	mov.l	r13,@(16,r5)
  30b478:	00 30       	.word 0x0030
  30b47a:	b1 5c       	bsr	30b736 <__printf_format_c+0xf2>
  30b47c:	00 30       	.word 0x0030
  30b47e:	c4 b0       	mov.b	@(176,gbr),r0
  30b480:	08 10       	.word 0x0810
  30b482:	16 f4       	mov.l	r15,@(16,r6)
  30b484:	00 30       	.word 0x0030
  30b486:	b4 8c       	bsr	30bda2 <.end+0x2>
  30b488:	00 30       	.word 0x0030
  30b48a:	f3 40       	.word 0xf340

0030b48c <strchr>:
  30b48c:	61 40       	mov.b	@r4,r1
  30b48e:	60 43       	mov	r4,r0
  30b490:	21 18       	tst	r1,r1
  30b492:	8f 02       	bf.s	30b49a <strchr+0xe>
  30b494:	74 01       	add	#1,r4
  30b496:	a0 02       	bra	30b49e <strchr+0x12>
  30b498:	e0 00       	mov	#0,r0
  30b49a:	31 50       	cmp/eq	r5,r1
  30b49c:	8b f6       	bf	30b48c <strchr>
  30b49e:	00 0b       	rts	
  30b4a0:	00 09       	nop	
	...

0030b4a4 <signal>:
  30b4a4:	e1 0f       	mov	#15,r1
  30b4a6:	34 16       	cmp/hi	r1,r4
  30b4a8:	8d 05       	bt.s	30b4b6 <signal+0x12>
  30b4aa:	e0 ff       	mov	#-1,r0
  30b4ac:	d1 03       	mov.l	30b4bc <signal+0x18>,r1	! 8101614 <__signal_handlers>
  30b4ae:	44 08       	shll2	r4
  30b4b0:	31 4c       	add	r4,r1
  30b4b2:	60 12       	mov.l	@r1,r0
  30b4b4:	21 52       	mov.l	r5,@r1
  30b4b6:	00 0b       	rts	
  30b4b8:	00 09       	nop	
  30b4ba:	00 09       	nop	
  30b4bc:	08 10       	.word 0x0810
  30b4be:	16 14       	mov.l	r1,@(16,r6)

0030b4c0 <fwrite>:
  30b4c0:	2f 86       	mov.l	r8,@-r15
  30b4c2:	68 73       	mov	r7,r8
  30b4c4:	2f 96       	mov.l	r9,@-r15
  30b4c6:	2f a6       	mov.l	r10,@-r15
  30b4c8:	2f b6       	mov.l	r11,@-r15
  30b4ca:	6b 43       	mov	r4,r11
  30b4cc:	2f c6       	mov.l	r12,@-r15
  30b4ce:	2f d6       	mov.l	r13,@-r15
  30b4d0:	85 7e       	mov.w	@(28,r7),r0
  30b4d2:	2f e6       	mov.l	r14,@-r15
  30b4d4:	61 0d       	extu.w	r0,r1
  30b4d6:	4f 22       	sts.l	pr,@-r15
  30b4d8:	60 08       	swap.b	r0,r0
  30b4da:	c8 04       	tst	#4,r0
  30b4dc:	8f 0f       	bf.s	30b4fe <fwrite+0x3e>
  30b4de:	7f fc       	add	#-4,r15
  30b4e0:	85 8e       	mov.w	@(28,r8),r0
  30b4e2:	e9 00       	mov	#0,r9
  30b4e4:	cb 40       	or	#64,r0
  30b4e6:	81 8e       	mov.w	r0,@(28,r8)
  30b4e8:	60 93       	mov	r9,r0
  30b4ea:	7f 04       	add	#4,r15
  30b4ec:	4f 26       	lds.l	@r15+,pr
  30b4ee:	6e f6       	mov.l	@r15+,r14
  30b4f0:	6d f6       	mov.l	@r15+,r13
  30b4f2:	6c f6       	mov.l	@r15+,r12
  30b4f4:	6b f6       	mov.l	@r15+,r11
  30b4f6:	6a f6       	mov.l	@r15+,r10
  30b4f8:	69 f6       	mov.l	@r15+,r9
  30b4fa:	00 0b       	rts	
  30b4fc:	68 f6       	mov.l	@r15+,r8
  30b4fe:	35 65       	dmulu.l	r6,r5
  30b500:	02 0a       	sts	mach,r2
  30b502:	22 28       	tst	r2,r2
  30b504:	00 29       	movt	r0
  30b506:	ca 01       	xor	#1,r0
  30b508:	0a 1a       	sts	macl,r10
  30b50a:	8f e9       	bf.s	30b4e0 <fwrite+0x20>
  30b50c:	69 03       	mov	r0,r9
  30b50e:	60 18       	swap.b	r1,r0
  30b510:	c8 02       	tst	#2,r0
  30b512:	8d 06       	bt.s	30b522 <fwrite+0x62>
  30b514:	e6 02       	mov	#2,r6
  30b516:	d0 2d       	mov.l	30b5cc <fwrite+0x10c>,r0	! 30c230 <fseek>
  30b518:	e5 00       	mov	#0,r5
  30b51a:	40 0b       	jsr	@r0
  30b51c:	64 73       	mov	r7,r4
  30b51e:	88 ff       	cmp/eq	#-1,r0
  30b520:	89 de       	bt	30b4e0 <fwrite+0x20>
  30b522:	51 82       	mov.l	@(8,r8),r1
  30b524:	21 18       	tst	r1,r1
  30b526:	8f 0a       	bf.s	30b53e <fwrite+0x7e>
  30b528:	6c a3       	mov	r10,r12
  30b52a:	d0 29       	mov.l	30b5d0 <fwrite+0x110>,r0	! 30c138 <__fp_write>
  30b52c:	66 a3       	mov	r10,r6
  30b52e:	65 b3       	mov	r11,r5
  30b530:	40 0b       	jsr	@r0
  30b532:	64 83       	mov	r8,r4
  30b534:	88 ff       	cmp/eq	#-1,r0
  30b536:	8b 00       	bf	30b53a <fwrite+0x7a>
  30b538:	e0 00       	mov	#0,r0
  30b53a:	af d5       	bra	30b4e8 <fwrite+0x28>
  30b53c:	69 03       	mov	r0,r9
  30b53e:	d1 25       	mov.l	30b5d4 <fwrite+0x114>,r1	! 30bedc <__fp_buffer_mode_write>
  30b540:	9d 42       	mov.w	30b5c8 <fwrite+0x108>,r13	! c000
  30b542:	41 0b       	jsr	@r1
  30b544:	64 83       	mov	r8,r4
  30b546:	9e 40       	mov.w	30b5ca <fwrite+0x10a>,r14	! 4000
  30b548:	3c 96       	cmp/hi	r9,r12
  30b54a:	8f ce       	bf.s	30b4ea <fwrite+0x2a>
  30b54c:	60 93       	mov	r9,r0
  30b54e:	52 83       	mov.l	@(12,r8),r2
  30b550:	6a c3       	mov	r12,r10
  30b552:	51 85       	mov.l	@(20,r8),r1
  30b554:	3a 98       	sub	r9,r10
  30b556:	31 28       	sub	r2,r1
  30b558:	3a 16       	cmp/hi	r1,r10
  30b55a:	62 b3       	mov	r11,r2
  30b55c:	8d 31       	bt.s	30b5c2 <fwrite+0x102>
  30b55e:	32 9c       	add	r9,r2
  30b560:	85 8e       	mov.w	@(28,r8),r0
  30b562:	20 d9       	and	r13,r0
  30b564:	60 0d       	extu.w	r0,r0
  30b566:	30 e0       	cmp/eq	r14,r0
  30b568:	8f 0d       	bf.s	30b586 <fwrite+0xc6>
  30b56a:	e1 00       	mov	#0,r1
  30b56c:	d0 1a       	mov.l	30b5d8 <fwrite+0x118>,r0	! 30bd34 <memrchr>
  30b56e:	64 23       	mov	r2,r4
  30b570:	2f 22       	mov.l	r2,@r15
  30b572:	66 a3       	mov	r10,r6
  30b574:	40 0b       	jsr	@r0
  30b576:	e5 0a       	mov	#10,r5
  30b578:	20 08       	tst	r0,r0
  30b57a:	62 f2       	mov.l	@r15,r2
  30b57c:	8d 03       	bt.s	30b586 <fwrite+0xc6>
  30b57e:	61 03       	mov	r0,r1
  30b580:	6a 03       	mov	r0,r10
  30b582:	3a 28       	sub	r2,r10
  30b584:	7a 01       	add	#1,r10
  30b586:	54 82       	mov.l	@(8,r8),r4
  30b588:	66 a3       	mov	r10,r6
  30b58a:	53 83       	mov.l	@(12,r8),r3
  30b58c:	65 23       	mov	r2,r5
  30b58e:	d0 13       	mov.l	30b5dc <fwrite+0x11c>,r0	! 30ae40 <memcpy>
  30b590:	34 3c       	add	r3,r4
  30b592:	40 0b       	jsr	@r0
  30b594:	2f 12       	mov.l	r1,@r15
  30b596:	52 83       	mov.l	@(12,r8),r2
  30b598:	66 a3       	mov	r10,r6
  30b59a:	61 f2       	mov.l	@r15,r1
  30b59c:	36 2c       	add	r2,r6
  30b59e:	52 85       	mov.l	@(20,r8),r2
  30b5a0:	39 ac       	add	r10,r9
  30b5a2:	36 22       	cmp/hs	r2,r6
  30b5a4:	8d 03       	bt.s	30b5ae <fwrite+0xee>
  30b5a6:	18 63       	mov.l	r6,@(12,r8)
  30b5a8:	21 18       	tst	r1,r1
  30b5aa:	8d ce       	bt.s	30b54a <fwrite+0x8a>
  30b5ac:	3c 96       	cmp/hi	r9,r12
  30b5ae:	d0 08       	mov.l	30b5d0 <fwrite+0x110>,r0	! 30c138 <__fp_write>
  30b5b0:	64 83       	mov	r8,r4
  30b5b2:	40 0b       	jsr	@r0
  30b5b4:	55 82       	mov.l	@(8,r8),r5
  30b5b6:	40 15       	cmp/pl	r0
  30b5b8:	8f 97       	bf.s	30b4ea <fwrite+0x2a>
  30b5ba:	60 93       	mov	r9,r0
  30b5bc:	e1 00       	mov	#0,r1
  30b5be:	af c3       	bra	30b548 <fwrite+0x88>
  30b5c0:	18 13       	mov.l	r1,@(12,r8)
  30b5c2:	6a 13       	mov	r1,r10
  30b5c4:	af df       	bra	30b586 <fwrite+0xc6>
  30b5c6:	e1 00       	mov	#0,r1
  30b5c8:	c0 00       	mov.b	r0,@(0,gbr)
  30b5ca:	40 00       	shll	r0
  30b5cc:	00 30       	.word 0x0030
  30b5ce:	c2 30       	mov.l	r0,@(192,gbr)
  30b5d0:	00 30       	.word 0x0030
  30b5d2:	c1 38       	mov.w	r0,@(112,gbr)
  30b5d4:	00 30       	.word 0x0030
  30b5d6:	be dc       	bsr	30b392 <__printf+0x1c2>
  30b5d8:	00 30       	.word 0x0030
  30b5da:	bd 34       	bsr	30b046 <__cxa_finalize+0x1a>
  30b5dc:	00 30       	.word 0x0030
  30b5de:	ae 40       	bra	30b262 <__printf+0x92>

0030b5e0 <__printf_out>:
  30b5e0:	2f 86       	mov.l	r8,@-r15
  30b5e2:	68 43       	mov	r4,r8
  30b5e4:	52 45       	mov.l	@(20,r4),r2
  30b5e6:	51 46       	mov.l	@(24,r4),r1
  30b5e8:	2f 96       	mov.l	r9,@-r15
  30b5ea:	32 12       	cmp/hs	r1,r2
  30b5ec:	4f 22       	sts.l	pr,@-r15
  30b5ee:	8f 03       	bf.s	30b5f8 <__printf_out+0x18>
  30b5f0:	69 53       	mov	r5,r9
  30b5f2:	d1 06       	mov.l	30b60c <__printf_out+0x2c>,r1	! 30b15c <__printf_flush>
  30b5f4:	41 0b       	jsr	@r1
  30b5f6:	00 09       	nop	
  30b5f8:	51 85       	mov.l	@(20,r8),r1
  30b5fa:	62 13       	mov	r1,r2
  30b5fc:	72 01       	add	#1,r2
  30b5fe:	18 25       	mov.l	r2,@(20,r8)
  30b600:	21 90       	mov.b	r9,@r1
  30b602:	4f 26       	lds.l	@r15+,pr
  30b604:	69 f6       	mov.l	@r15+,r9
  30b606:	00 0b       	rts	
  30b608:	68 f6       	mov.l	@r15+,r8
  30b60a:	00 09       	nop	
  30b60c:	00 30       	.word 0x0030
  30b60e:	b1 5c       	bsr	30b8ca <__printf_format_di+0xf6>

0030b610 <__printf_outn>:
  30b610:	2f 86       	mov.l	r8,@-r15
  30b612:	68 63       	mov	r6,r8
  30b614:	2f 96       	mov.l	r9,@-r15
  30b616:	69 43       	mov	r4,r9
  30b618:	2f a6       	mov.l	r10,@-r15
  30b61a:	6a 53       	mov	r5,r10
  30b61c:	2f b6       	mov.l	r11,@-r15
  30b61e:	db 08       	mov.l	30b640 <__printf_outn+0x30>,r11	! 30b5e0 <__printf_out>
  30b620:	4f 22       	sts.l	pr,@-r15
  30b622:	48 15       	cmp/pl	r8
  30b624:	8d 06       	bt.s	30b634 <__printf_outn+0x24>
  30b626:	65 a3       	mov	r10,r5
  30b628:	4f 26       	lds.l	@r15+,pr
  30b62a:	6b f6       	mov.l	@r15+,r11
  30b62c:	6a f6       	mov.l	@r15+,r10
  30b62e:	69 f6       	mov.l	@r15+,r9
  30b630:	00 0b       	rts	
  30b632:	68 f6       	mov.l	@r15+,r8
  30b634:	64 93       	mov	r9,r4
  30b636:	4b 0b       	jsr	@r11
  30b638:	78 ff       	add	#-1,r8
  30b63a:	af f3       	bra	30b624 <__printf_outn+0x14>
  30b63c:	48 15       	cmp/pl	r8
  30b63e:	00 09       	nop	
  30b640:	00 30       	.word 0x0030
  30b642:	b5 e0       	bsr	30c206 <__fp_parse_mode+0x76>

0030b644 <__printf_format_c>:
  30b644:	2f 86       	mov.l	r8,@-r15
  30b646:	68 43       	mov	r4,r8
  30b648:	2f 96       	mov.l	r9,@-r15
  30b64a:	69 53       	mov	r5,r9
  30b64c:	2f a6       	mov.l	r10,@-r15
  30b64e:	e5 00       	mov	#0,r5
  30b650:	2f b6       	mov.l	r11,@-r15
  30b652:	2f c6       	mov.l	r12,@-r15
  30b654:	2f d6       	mov.l	r13,@-r15
  30b656:	2f e6       	mov.l	r14,@-r15
  30b658:	4f 22       	sts.l	pr,@-r15
  30b65a:	61 62       	mov.l	@r6,r1
  30b65c:	7f ec       	add	#-20,r15
  30b65e:	d0 31       	mov.l	30b724 <__printf_format_c+0xe0>,r0	! 30af00 <memset>
  30b660:	62 13       	mov	r1,r2
  30b662:	6b f3       	mov	r15,r11
  30b664:	72 04       	add	#4,r2
  30b666:	7b 04       	add	#4,r11
  30b668:	26 22       	mov.l	r2,@r6
  30b66a:	64 b3       	mov	r11,r4
  30b66c:	e6 10       	mov	#16,r6
  30b66e:	40 0b       	jsr	@r0
  30b670:	6a 12       	mov.l	@r1,r10
  30b672:	d1 2d       	mov.l	30b728 <__printf_format_c+0xe4>,r1	! 30bb28 <__printf_compute_geometry>
  30b674:	e0 01       	mov	#1,r0
  30b676:	81 b3       	mov.w	r0,@(6,r11)
  30b678:	64 93       	mov	r9,r4
  30b67a:	de 2c       	mov.l	30b72c <__printf_format_c+0xe8>,r14	! 30b610 <__printf_outn>
  30b67c:	41 0b       	jsr	@r1
  30b67e:	65 b3       	mov	r11,r5
  30b680:	66 b1       	mov.w	@r11,r6
  30b682:	e5 20       	mov	#32,r5
  30b684:	66 6d       	extu.w	r6,r6
  30b686:	4e 0b       	jsr	@r14
  30b688:	64 83       	mov	r8,r4
  30b68a:	84 94       	mov.b	@(4,r9),r0
  30b68c:	88 04       	cmp/eq	#4,r0
  30b68e:	d9 28       	mov.l	30b730 <__printf_format_c+0xec>,r9	! 30b5e0 <__printf_out>
  30b690:	8f 03       	bf.s	30b69a <__printf_format_c+0x56>
  30b692:	e1 7f       	mov	#127,r1
  30b694:	3a 17       	cmp/gt	r1,r10
  30b696:	8d 12       	bt.s	30b6be <__printf_format_c+0x7a>
  30b698:	e1 fa       	mov	#-6,r1
  30b69a:	65 a3       	mov	r10,r5
  30b69c:	49 0b       	jsr	@r9
  30b69e:	64 83       	mov	r8,r4
  30b6a0:	85 b4       	mov.w	@(8,r11),r0
  30b6a2:	e5 20       	mov	#32,r5
  30b6a4:	66 0d       	extu.w	r0,r6
  30b6a6:	4e 0b       	jsr	@r14
  30b6a8:	64 83       	mov	r8,r4
  30b6aa:	7f 14       	add	#20,r15
  30b6ac:	4f 26       	lds.l	@r15+,pr
  30b6ae:	6e f6       	mov.l	@r15+,r14
  30b6b0:	6d f6       	mov.l	@r15+,r13
  30b6b2:	6c f6       	mov.l	@r15+,r12
  30b6b4:	6b f6       	mov.l	@r15+,r11
  30b6b6:	6a f6       	mov.l	@r15+,r10
  30b6b8:	69 f6       	mov.l	@r15+,r9
  30b6ba:	00 0b       	rts	
  30b6bc:	68 f6       	mov.l	@r15+,r8
  30b6be:	65 a3       	mov	r10,r5
  30b6c0:	45 1c       	shad	r1,r5
  30b6c2:	91 29       	mov.w	30b718 <__printf_format_c+0xd4>,r1	! 7ff
  30b6c4:	60 a3       	mov	r10,r0
  30b6c6:	9d 28       	mov.w	30b71a <__printf_format_c+0xd6>,r13	! 80 <silram>
  30b6c8:	c9 3f       	and	#63,r0
  30b6ca:	3a 17       	cmp/gt	r1,r10
  30b6cc:	8d 06       	bt.s	30b6dc <__printf_format_c+0x98>
  30b6ce:	2d 0b       	or	r0,r13
  30b6d0:	91 24       	mov.w	30b71c <__printf_format_c+0xd8>,r1	! c0
  30b6d2:	25 1b       	or	r1,r5
  30b6d4:	49 0b       	jsr	@r9
  30b6d6:	64 83       	mov	r8,r4
  30b6d8:	af e0       	bra	30b69c <__printf_format_c+0x58>
  30b6da:	65 d3       	mov	r13,r5
  30b6dc:	e2 f4       	mov	#-12,r2
  30b6de:	61 a3       	mov	r10,r1
  30b6e0:	41 2c       	shad	r2,r1
  30b6e2:	d2 14       	mov.l	30b734 <__printf_format_c+0xf0>,r2	! ffff
  30b6e4:	60 53       	mov	r5,r0
  30b6e6:	9c 18       	mov.w	30b71a <__printf_format_c+0xd6>,r12	! 80 <silram>
  30b6e8:	c9 3f       	and	#63,r0
  30b6ea:	3a 27       	cmp/gt	r2,r10
  30b6ec:	8d 06       	bt.s	30b6fc <__printf_format_c+0xb8>
  30b6ee:	2c 0b       	or	r0,r12
  30b6f0:	95 15       	mov.w	30b71e <__printf_format_c+0xda>,r5	! e0
  30b6f2:	25 1b       	or	r1,r5
  30b6f4:	49 0b       	jsr	@r9
  30b6f6:	64 83       	mov	r8,r4
  30b6f8:	af ec       	bra	30b6d4 <__printf_format_c+0x90>
  30b6fa:	65 c3       	mov	r12,r5
  30b6fc:	e2 ee       	mov	#-18,r2
  30b6fe:	65 a3       	mov	r10,r5
  30b700:	45 2c       	shad	r2,r5
  30b702:	92 0d       	mov.w	30b720 <__printf_format_c+0xdc>,r2	! f0
  30b704:	64 83       	mov	r8,r4
  30b706:	2f 12       	mov.l	r1,@r15
  30b708:	49 0b       	jsr	@r9
  30b70a:	25 2b       	or	r2,r5
  30b70c:	61 f2       	mov.l	@r15,r1
  30b70e:	e5 3f       	mov	#63,r5
  30b710:	25 19       	and	r1,r5
  30b712:	91 02       	mov.w	30b71a <__printf_format_c+0xd6>,r1	! 80 <silram>
  30b714:	af ee       	bra	30b6f4 <__printf_format_c+0xb0>
  30b716:	25 1b       	or	r1,r5
  30b718:	07 ff       	mac.l	@r15+,@r7+
  30b71a:	00 80       	.word 0x0080
  30b71c:	00 c0       	.word 0x00c0
  30b71e:	00 e0       	.word 0x00e0
  30b720:	00 f0       	.word 0x00f0
  30b722:	00 09       	nop	
  30b724:	00 30       	.word 0x0030
  30b726:	af 00       	bra	30b52a <fwrite+0x6a>
  30b728:	00 30       	.word 0x0030
  30b72a:	bb 28       	bsr	30ad7e <context_switch+0x2>
  30b72c:	00 30       	.word 0x0030
  30b72e:	b6 10       	bsr	30c352 <.sh3+0x26>
  30b730:	00 30       	.word 0x0030
  30b732:	b5 e0       	bsr	30c2f6 <setvbuf+0x7e>
  30b734:	00 00       	.word 0x0000
  30b736:	ff ff       	.word 0xffff

0030b738 <__printf_format_s>:
  30b738:	2f 86       	mov.l	r8,@-r15
  30b73a:	2f 96       	mov.l	r9,@-r15
  30b73c:	2f a6       	mov.l	r10,@-r15
  30b73e:	2f b6       	mov.l	r11,@-r15
  30b740:	6b 43       	mov	r4,r11
  30b742:	2f c6       	mov.l	r12,@-r15
  30b744:	6c 53       	mov	r5,r12
  30b746:	2f d6       	mov.l	r13,@-r15
  30b748:	4f 22       	sts.l	pr,@-r15
  30b74a:	61 62       	mov.l	@r6,r1
  30b74c:	7f f0       	add	#-16,r15
  30b74e:	85 51       	mov.w	@(2,r5),r0
  30b750:	62 13       	mov	r1,r2
  30b752:	72 04       	add	#4,r2
  30b754:	26 22       	mov.l	r2,@r6
  30b756:	20 08       	tst	r0,r0
  30b758:	6a 12       	mov.l	@r1,r10
  30b75a:	8d 01       	bt.s	30b760 <__printf_format_s+0x28>
  30b75c:	e2 ff       	mov	#-1,r2
  30b75e:	62 03       	mov	r0,r2
  30b760:	e8 00       	mov	#0,r8
  30b762:	60 83       	mov	r8,r0
  30b764:	01 ac       	mov.b	@(r0,r10),r1
  30b766:	21 18       	tst	r1,r1
  30b768:	8d 01       	bt.s	30b76e <__printf_format_s+0x36>
  30b76a:	32 86       	cmp/hi	r8,r2
  30b76c:	89 23       	bt	30b7b6 <__printf_format_s+0x7e>
  30b76e:	d0 15       	mov.l	30b7c4 <__printf_format_s+0x8c>,r0	! 30af00 <memset>
  30b770:	e6 10       	mov	#16,r6
  30b772:	e5 00       	mov	#0,r5
  30b774:	40 0b       	jsr	@r0
  30b776:	64 f3       	mov	r15,r4
  30b778:	d1 13       	mov.l	30b7c8 <__printf_format_s+0x90>,r1	! 30bb28 <__printf_compute_geometry>
  30b77a:	60 83       	mov	r8,r0
  30b77c:	69 f3       	mov	r15,r9
  30b77e:	64 c3       	mov	r12,r4
  30b780:	81 93       	mov.w	r0,@(6,r9)
  30b782:	dc 12       	mov.l	30b7cc <__printf_format_s+0x94>,r12	! 30b610 <__printf_outn>
  30b784:	41 0b       	jsr	@r1
  30b786:	65 f3       	mov	r15,r5
  30b788:	66 91       	mov.w	@r9,r6
  30b78a:	e5 20       	mov	#32,r5
  30b78c:	dd 10       	mov.l	30b7d0 <__printf_format_s+0x98>,r13	! 30b5e0 <__printf_out>
  30b78e:	66 6d       	extu.w	r6,r6
  30b790:	64 b3       	mov	r11,r4
  30b792:	4c 0b       	jsr	@r12
  30b794:	38 ac       	add	r10,r8
  30b796:	38 a0       	cmp/eq	r10,r8
  30b798:	8f 0f       	bf.s	30b7ba <__printf_format_s+0x82>
  30b79a:	e5 20       	mov	#32,r5
  30b79c:	85 94       	mov.w	@(8,r9),r0
  30b79e:	66 0d       	extu.w	r0,r6
  30b7a0:	4c 0b       	jsr	@r12
  30b7a2:	64 b3       	mov	r11,r4
  30b7a4:	7f 10       	add	#16,r15
  30b7a6:	4f 26       	lds.l	@r15+,pr
  30b7a8:	6d f6       	mov.l	@r15+,r13
  30b7aa:	6c f6       	mov.l	@r15+,r12
  30b7ac:	6b f6       	mov.l	@r15+,r11
  30b7ae:	6a f6       	mov.l	@r15+,r10
  30b7b0:	69 f6       	mov.l	@r15+,r9
  30b7b2:	00 0b       	rts	
  30b7b4:	68 f6       	mov.l	@r15+,r8
  30b7b6:	af d4       	bra	30b762 <__printf_format_s+0x2a>
  30b7b8:	78 01       	add	#1,r8
  30b7ba:	65 a4       	mov.b	@r10+,r5
  30b7bc:	4d 0b       	jsr	@r13
  30b7be:	64 b3       	mov	r11,r4
  30b7c0:	af ea       	bra	30b798 <__printf_format_s+0x60>
  30b7c2:	38 a0       	cmp/eq	r10,r8
  30b7c4:	00 30       	.word 0x0030
  30b7c6:	af 00       	bra	30b5ca <fwrite+0x10a>
  30b7c8:	00 30       	.word 0x0030
  30b7ca:	bb 28       	bsr	30ae1e <naive_memcmp+0xa>
  30b7cc:	00 30       	.word 0x0030
  30b7ce:	b6 10       	bsr	30c3f2 <fflush+0x42>
  30b7d0:	00 30       	.word 0x0030
  30b7d2:	b5 e0       	bsr	30c396 <.end>

0030b7d4 <__printf_format_di>:
  30b7d4:	2f 86       	mov.l	r8,@-r15
  30b7d6:	2f 96       	mov.l	r9,@-r15
  30b7d8:	2f a6       	mov.l	r10,@-r15
  30b7da:	2f b6       	mov.l	r11,@-r15
  30b7dc:	6b 43       	mov	r4,r11
  30b7de:	2f c6       	mov.l	r12,@-r15
  30b7e0:	6c 53       	mov	r5,r12
  30b7e2:	2f d6       	mov.l	r13,@-r15
  30b7e4:	2f e6       	mov.l	r14,@-r15
  30b7e6:	4f 22       	sts.l	pr,@-r15
  30b7e8:	84 54       	mov.b	@(4,r5),r0
  30b7ea:	7f d0       	add	#-48,r15
  30b7ec:	64 0c       	extu.b	r0,r4
  30b7ee:	d0 31       	mov.l	30b8b4 <__printf_format_di+0xe0>,r0	! 30bbd8 <__printf_load_i>
  30b7f0:	65 63       	mov	r6,r5
  30b7f2:	40 0b       	jsr	@r0
  30b7f4:	6a f3       	mov	r15,r10
  30b7f6:	69 03       	mov	r0,r9
  30b7f8:	d0 2f       	mov.l	30b8b8 <__printf_format_di+0xe4>,r0	! 30af00 <memset>
  30b7fa:	6e 13       	mov	r1,r14
  30b7fc:	e6 0c       	mov	#12,r6
  30b7fe:	e5 00       	mov	#0,r5
  30b800:	40 0b       	jsr	@r0
  30b802:	64 f3       	mov	r15,r4
  30b804:	49 11       	cmp/pz	r9
  30b806:	8f 01       	bf.s	30b80c <__printf_format_di+0x38>
  30b808:	e0 2d       	mov	#45,r0
  30b80a:	e0 2b       	mov	#43,r0
  30b80c:	e1 01       	mov	#1,r1
  30b80e:	80 a2       	mov.b	r0,@(2,r10)
  30b810:	49 11       	cmp/pz	r9
  30b812:	1a 13       	mov.l	r1,@(12,r10)
  30b814:	65 93       	mov	r9,r5
  30b816:	8d 02       	bt.s	30b81e <__printf_format_di+0x4a>
  30b818:	66 e3       	mov	r14,r6
  30b81a:	66 ea       	negc	r14,r6
  30b81c:	65 9a       	negc	r9,r5
  30b81e:	d0 27       	mov.l	30b8bc <__printf_format_di+0xe8>,r0	! 30bc4e <__printf_digits10>
  30b820:	64 f3       	mov	r15,r4
  30b822:	40 0b       	jsr	@r0
  30b824:	74 10       	add	#16,r4
  30b826:	68 03       	mov	r0,r8
  30b828:	85 c1       	mov.w	@(2,r12),r0
  30b82a:	20 08       	tst	r0,r0
  30b82c:	8f 04       	bf.s	30b838 <__printf_format_di+0x64>
  30b82e:	29 eb       	or	r14,r9
  30b830:	29 98       	tst	r9,r9
  30b832:	8f 02       	bf.s	30b83a <__printf_format_di+0x66>
  30b834:	30 83       	cmp/ge	r8,r0
  30b836:	e8 00       	mov	#0,r8
  30b838:	30 83       	cmp/ge	r8,r0
  30b83a:	8d 01       	bt.s	30b840 <__printf_format_di+0x6c>
  30b83c:	6d 03       	mov	r0,r13
  30b83e:	6d 83       	mov	r8,r13
  30b840:	d1 1f       	mov.l	30b8c0 <__printf_format_di+0xec>,r1	! 30bb28 <__printf_compute_geometry>
  30b842:	60 d3       	mov	r13,r0
  30b844:	81 a3       	mov.w	r0,@(6,r10)
  30b846:	65 f3       	mov	r15,r5
  30b848:	d9 1e       	mov.l	30b8c4 <__printf_format_di+0xf0>,r9	! 30b610 <__printf_outn>
  30b84a:	41 0b       	jsr	@r1
  30b84c:	64 c3       	mov	r12,r4
  30b84e:	66 a1       	mov.w	@r10,r6
  30b850:	e5 20       	mov	#32,r5
  30b852:	66 6d       	extu.w	r6,r6
  30b854:	49 0b       	jsr	@r9
  30b856:	64 b3       	mov	r11,r4
  30b858:	84 a2       	mov.b	@(2,r10),r0
  30b85a:	20 08       	tst	r0,r0
  30b85c:	8d 03       	bt.s	30b866 <__printf_format_di+0x92>
  30b85e:	65 0c       	extu.b	r0,r5
  30b860:	d1 19       	mov.l	30b8c8 <__printf_format_di+0xf4>,r1	! 30b5e0 <__printf_out>
  30b862:	41 0b       	jsr	@r1
  30b864:	64 b3       	mov	r11,r4
  30b866:	85 a2       	mov.w	@(4,r10),r0
  30b868:	e5 30       	mov	#48,r5
  30b86a:	66 0d       	extu.w	r0,r6
  30b86c:	49 0b       	jsr	@r9
  30b86e:	64 b3       	mov	r11,r4
  30b870:	66 d3       	mov	r13,r6
  30b872:	dd 15       	mov.l	30b8c8 <__printf_format_di+0xf4>,r13	! 30b5e0 <__printf_out>
  30b874:	36 88       	sub	r8,r6
  30b876:	e5 30       	mov	#48,r5
  30b878:	64 b3       	mov	r11,r4
  30b87a:	49 0b       	jsr	@r9
  30b87c:	78 ff       	add	#-1,r8
  30b87e:	48 11       	cmp/pz	r8
  30b880:	8d 0f       	bt.s	30b8a2 <__printf_format_di+0xce>
  30b882:	e1 10       	mov	#16,r1
  30b884:	85 a4       	mov.w	@(8,r10),r0
  30b886:	e5 20       	mov	#32,r5
  30b888:	66 0d       	extu.w	r0,r6
  30b88a:	49 0b       	jsr	@r9
  30b88c:	64 b3       	mov	r11,r4
  30b88e:	7f 30       	add	#48,r15
  30b890:	4f 26       	lds.l	@r15+,pr
  30b892:	6e f6       	mov.l	@r15+,r14
  30b894:	6d f6       	mov.l	@r15+,r13
  30b896:	6c f6       	mov.l	@r15+,r12
  30b898:	6b f6       	mov.l	@r15+,r11
  30b89a:	6a f6       	mov.l	@r15+,r10
  30b89c:	69 f6       	mov.l	@r15+,r9
  30b89e:	00 0b       	rts	
  30b8a0:	68 f6       	mov.l	@r15+,r8
  30b8a2:	60 83       	mov	r8,r0
  30b8a4:	31 fc       	add	r15,r1
  30b8a6:	05 1c       	mov.b	@(r0,r1),r5
  30b8a8:	64 b3       	mov	r11,r4
  30b8aa:	4d 0b       	jsr	@r13
  30b8ac:	78 ff       	add	#-1,r8
  30b8ae:	af e7       	bra	30b880 <__printf_format_di+0xac>
  30b8b0:	48 11       	cmp/pz	r8
  30b8b2:	00 09       	nop	
  30b8b4:	00 30       	.word 0x0030
  30b8b6:	bb d8       	bsr	30b06a <__cxa_finalize+0x3e>
  30b8b8:	00 30       	.word 0x0030
  30b8ba:	af 00       	bra	30b6be <__printf_format_c+0x7a>
  30b8bc:	00 30       	.word 0x0030
  30b8be:	bc 4e       	bsr	30b15e <__printf_flush+0x2>
  30b8c0:	00 30       	.word 0x0030
  30b8c2:	bb 28       	bsr	30af16 <memset+0x16>
  30b8c4:	00 30       	.word 0x0030
  30b8c6:	b6 10       	bsr	30c4ea <__udivdi3+0x2e>
  30b8c8:	00 30       	.word 0x0030
  30b8ca:	b5 e0       	bsr	30c48e <__movmemSI44+0x2>

0030b8cc <__printf_format_ouxX>:
  30b8cc:	2f 86       	mov.l	r8,@-r15
  30b8ce:	2f 96       	mov.l	r9,@-r15
  30b8d0:	2f a6       	mov.l	r10,@-r15
  30b8d2:	6a 43       	mov	r4,r10
  30b8d4:	2f b6       	mov.l	r11,@-r15
  30b8d6:	6b 53       	mov	r5,r11
  30b8d8:	2f c6       	mov.l	r12,@-r15
  30b8da:	2f d6       	mov.l	r13,@-r15
  30b8dc:	ed 20       	mov	#32,r13
  30b8de:	2f e6       	mov.l	r14,@-r15
  30b8e0:	4f 22       	sts.l	pr,@-r15
  30b8e2:	84 54       	mov.b	@(4,r5),r0
  30b8e4:	7f bc       	add	#-68,r15
  30b8e6:	64 0c       	extu.b	r0,r4
  30b8e8:	d0 48       	mov.l	30ba0c <__printf_format_ouxX+0x140>,r0	! 30bc14 <__printf_load_u>
  30b8ea:	40 0b       	jsr	@r0
  30b8ec:	65 63       	mov	r6,r5
  30b8ee:	69 03       	mov	r0,r9
  30b8f0:	84 b7       	mov.b	@(7,r11),r0
  30b8f2:	6c 13       	mov	r1,r12
  30b8f4:	2d 0b       	or	r0,r13
  30b8f6:	61 03       	mov	r0,r1
  30b8f8:	60 d3       	mov	r13,r0
  30b8fa:	88 75       	cmp/eq	#117,r0
  30b8fc:	8f 6a       	bf.s	30b9d4 <__printf_format_ouxX+0x108>
  30b8fe:	88 6f       	cmp/eq	#111,r0
  30b900:	d0 43       	mov.l	30ba10 <__printf_format_ouxX+0x144>,r0	! 30bc4e <__printf_digits10>
  30b902:	64 f3       	mov	r15,r4
  30b904:	65 93       	mov	r9,r5
  30b906:	66 c3       	mov	r12,r6
  30b908:	74 14       	add	#20,r4
  30b90a:	40 0b       	jsr	@r0
  30b90c:	00 09       	nop	
  30b90e:	68 03       	mov	r0,r8
  30b910:	29 cb       	or	r12,r9
  30b912:	29 98       	tst	r9,r9
  30b914:	8f 04       	bf.s	30b920 <__printf_format_ouxX+0x54>
  30b916:	85 b1       	mov.w	@(2,r11),r0
  30b918:	20 08       	tst	r0,r0
  30b91a:	8f 02       	bf.s	30b922 <__printf_format_ouxX+0x56>
  30b91c:	30 83       	cmp/ge	r8,r0
  30b91e:	e8 00       	mov	#0,r8
  30b920:	30 83       	cmp/ge	r8,r0
  30b922:	8d 01       	bt.s	30b928 <__printf_format_ouxX+0x5c>
  30b924:	6e 03       	mov	r0,r14
  30b926:	6e 83       	mov	r8,r14
  30b928:	60 d3       	mov	r13,r0
  30b92a:	88 75       	cmp/eq	#117,r0
  30b92c:	e1 ff       	mov	#-1,r1
  30b92e:	84 b5       	mov.b	@(5,r11),r0
  30b930:	61 1a       	negc	r1,r1
  30b932:	40 11       	cmp/pz	r0
  30b934:	8d 03       	bt.s	30b93e <__printf_format_ouxX+0x72>
  30b936:	ec 00       	mov	#0,r12
  30b938:	60 d3       	mov	r13,r0
  30b93a:	88 78       	cmp/eq	#120,r0
  30b93c:	3c 1e       	addc	r1,r12
  30b93e:	d0 35       	mov.l	30ba14 <__printf_format_ouxX+0x148>,r0	! 30af00 <memset>
  30b940:	69 f3       	mov	r15,r9
  30b942:	79 04       	add	#4,r9
  30b944:	2f 12       	mov.l	r1,@r15
  30b946:	e6 0c       	mov	#12,r6
  30b948:	e5 00       	mov	#0,r5
  30b94a:	40 0b       	jsr	@r0
  30b94c:	64 93       	mov	r9,r4
  30b94e:	e2 01       	mov	#1,r2
  30b950:	19 23       	mov.l	r2,@(12,r9)
  30b952:	60 c3       	mov	r12,r0
  30b954:	d2 30       	mov.l	30ba18 <__printf_format_ouxX+0x14c>,r2	! 30bb28 <__printf_compute_geometry>
  30b956:	65 93       	mov	r9,r5
  30b958:	80 93       	mov.b	r0,@(3,r9)
  30b95a:	60 e3       	mov	r14,r0
  30b95c:	81 93       	mov.w	r0,@(6,r9)
  30b95e:	dc 2f       	mov.l	30ba1c <__printf_format_ouxX+0x150>,r12	! 30b610 <__printf_outn>
  30b960:	42 0b       	jsr	@r2
  30b962:	64 b3       	mov	r11,r4
  30b964:	66 91       	mov.w	@r9,r6
  30b966:	e5 20       	mov	#32,r5
  30b968:	66 6d       	extu.w	r6,r6
  30b96a:	4c 0b       	jsr	@r12
  30b96c:	64 a3       	mov	r10,r4
  30b96e:	84 b5       	mov.b	@(5,r11),r0
  30b970:	40 11       	cmp/pz	r0
  30b972:	8d 0f       	bt.s	30b994 <__printf_format_ouxX+0xc8>
  30b974:	61 f2       	mov.l	@r15,r1
  30b976:	21 18       	tst	r1,r1
  30b978:	8d 0c       	bt.s	30b994 <__printf_format_ouxX+0xc8>
  30b97a:	e5 30       	mov	#48,r5
  30b97c:	d1 28       	mov.l	30ba20 <__printf_format_ouxX+0x154>,r1	! 30b5e0 <__printf_out>
  30b97e:	64 a3       	mov	r10,r4
  30b980:	41 0b       	jsr	@r1
  30b982:	2f 12       	mov.l	r1,@r15
  30b984:	60 d3       	mov	r13,r0
  30b986:	88 78       	cmp/eq	#120,r0
  30b988:	8f 04       	bf.s	30b994 <__printf_format_ouxX+0xc8>
  30b98a:	61 f2       	mov.l	@r15,r1
  30b98c:	84 b7       	mov.b	@(7,r11),r0
  30b98e:	64 a3       	mov	r10,r4
  30b990:	41 0b       	jsr	@r1
  30b992:	65 03       	mov	r0,r5
  30b994:	85 92       	mov.w	@(4,r9),r0
  30b996:	e5 30       	mov	#48,r5
  30b998:	66 0d       	extu.w	r0,r6
  30b99a:	dd 21       	mov.l	30ba20 <__printf_format_ouxX+0x154>,r13	! 30b5e0 <__printf_out>
  30b99c:	4c 0b       	jsr	@r12
  30b99e:	64 a3       	mov	r10,r4
  30b9a0:	66 e3       	mov	r14,r6
  30b9a2:	6b f3       	mov	r15,r11
  30b9a4:	36 88       	sub	r8,r6
  30b9a6:	e5 30       	mov	#48,r5
  30b9a8:	64 a3       	mov	r10,r4
  30b9aa:	4c 0b       	jsr	@r12
  30b9ac:	78 ff       	add	#-1,r8
  30b9ae:	7b 14       	add	#20,r11
  30b9b0:	48 11       	cmp/pz	r8
  30b9b2:	8d 24       	bt.s	30b9fe <__printf_format_ouxX+0x132>
  30b9b4:	60 83       	mov	r8,r0
  30b9b6:	85 94       	mov.w	@(8,r9),r0
  30b9b8:	e5 20       	mov	#32,r5
  30b9ba:	66 0d       	extu.w	r0,r6
  30b9bc:	4c 0b       	jsr	@r12
  30b9be:	64 a3       	mov	r10,r4
  30b9c0:	7f 44       	add	#68,r15
  30b9c2:	4f 26       	lds.l	@r15+,pr
  30b9c4:	6e f6       	mov.l	@r15+,r14
  30b9c6:	6d f6       	mov.l	@r15+,r13
  30b9c8:	6c f6       	mov.l	@r15+,r12
  30b9ca:	6b f6       	mov.l	@r15+,r11
  30b9cc:	6a f6       	mov.l	@r15+,r10
  30b9ce:	69 f6       	mov.l	@r15+,r9
  30b9d0:	00 0b       	rts	
  30b9d2:	68 f6       	mov.l	@r15+,r8
  30b9d4:	8d 0d       	bt.s	30b9f2 <__printf_format_ouxX+0x126>
  30b9d6:	88 78       	cmp/eq	#120,r0
  30b9d8:	8f 9a       	bf.s	30b910 <__printf_format_ouxX+0x44>
  30b9da:	e8 00       	mov	#0,r8
  30b9dc:	60 13       	mov	r1,r0
  30b9de:	88 58       	cmp/eq	#88,r0
  30b9e0:	d0 10       	mov.l	30ba24 <__printf_format_ouxX+0x158>,r0	! 30bcc4 <__printf_digits16>
  30b9e2:	64 f3       	mov	r15,r4
  30b9e4:	66 93       	mov	r9,r6
  30b9e6:	67 c3       	mov	r12,r7
  30b9e8:	05 29       	movt	r5
  30b9ea:	40 0b       	jsr	@r0
  30b9ec:	74 14       	add	#20,r4
  30b9ee:	af 8f       	bra	30b910 <__printf_format_ouxX+0x44>
  30b9f0:	68 03       	mov	r0,r8
  30b9f2:	64 f3       	mov	r15,r4
  30b9f4:	d0 0c       	mov.l	30ba28 <__printf_format_ouxX+0x15c>,r0	! 30bd04 <__printf_digits8>
  30b9f6:	65 93       	mov	r9,r5
  30b9f8:	66 c3       	mov	r12,r6
  30b9fa:	af 86       	bra	30b90a <__printf_format_ouxX+0x3e>
  30b9fc:	74 14       	add	#20,r4
  30b9fe:	05 bc       	mov.b	@(r0,r11),r5
  30ba00:	64 a3       	mov	r10,r4
  30ba02:	4d 0b       	jsr	@r13
  30ba04:	78 ff       	add	#-1,r8
  30ba06:	af d4       	bra	30b9b2 <__printf_format_ouxX+0xe6>
  30ba08:	48 11       	cmp/pz	r8
  30ba0a:	00 09       	nop	
  30ba0c:	00 30       	.word 0x0030
  30ba0e:	bc 14       	bsr	30b23a <__printf+0x6a>
  30ba10:	00 30       	.word 0x0030
  30ba12:	bc 4e       	bsr	30b2b2 <__printf+0xe2>
  30ba14:	00 30       	.word 0x0030
  30ba16:	af 00       	bra	30b81a <__printf_format_di+0x46>
  30ba18:	00 30       	.word 0x0030
  30ba1a:	bb 28       	bsr	30b06e <__cxa_finalize+0x42>
  30ba1c:	00 30       	.word 0x0030
  30ba1e:	b6 10       	bsr	30c642 <__udivdi3+0x186>
  30ba20:	00 30       	.word 0x0030
  30ba22:	b5 e0       	bsr	30c5e6 <__udivdi3+0x12a>
  30ba24:	00 30       	.word 0x0030
  30ba26:	bc c4       	bsr	30b3b2 <__printf+0x1e2>
  30ba28:	00 30       	.word 0x0030
  30ba2a:	bd 04       	bsr	30b436 <__printf+0x266>

0030ba2c <__printf_format_p>:
  30ba2c:	2f 86       	mov.l	r8,@-r15
  30ba2e:	2f 96       	mov.l	r9,@-r15
  30ba30:	69 43       	mov	r4,r9
  30ba32:	2f a6       	mov.l	r10,@-r15
  30ba34:	ea 07       	mov	#7,r10
  30ba36:	4f 22       	sts.l	pr,@-r15
  30ba38:	61 62       	mov.l	@r6,r1
  30ba3a:	7f f4       	add	#-12,r15
  30ba3c:	d0 11       	mov.l	30ba84 <__printf_format_p+0x58>,r0	! 30ae40 <memcpy>
  30ba3e:	62 13       	mov	r1,r2
  30ba40:	72 04       	add	#4,r2
  30ba42:	26 22       	mov.l	r2,@r6
  30ba44:	64 f3       	mov	r15,r4
  30ba46:	68 12       	mov.l	@r1,r8
  30ba48:	d5 0f       	mov.l	30ba88 <__printf_format_p+0x5c>,r5	! 30f348
  30ba4a:	40 0b       	jsr	@r0
  30ba4c:	e6 09       	mov	#9,r6
  30ba4e:	d0 0f       	mov.l	30ba8c <__printf_format_p+0x60>,r0	! 30bcc4 <__printf_digits16>
  30ba50:	67 83       	mov	r8,r7
  30ba52:	d8 0f       	mov.l	30ba90 <__printf_format_p+0x64>,r8	! 30b5e0 <__printf_out>
  30ba54:	e6 00       	mov	#0,r6
  30ba56:	e5 00       	mov	#0,r5
  30ba58:	40 0b       	jsr	@r0
  30ba5a:	64 f3       	mov	r15,r4
  30ba5c:	e5 30       	mov	#48,r5
  30ba5e:	48 0b       	jsr	@r8
  30ba60:	64 93       	mov	r9,r4
  30ba62:	e5 78       	mov	#120,r5
  30ba64:	48 0b       	jsr	@r8
  30ba66:	64 93       	mov	r9,r4
  30ba68:	60 a3       	mov	r10,r0
  30ba6a:	05 fc       	mov.b	@(r0,r15),r5
  30ba6c:	64 93       	mov	r9,r4
  30ba6e:	48 0b       	jsr	@r8
  30ba70:	7a ff       	add	#-1,r10
  30ba72:	60 a3       	mov	r10,r0
  30ba74:	88 ff       	cmp/eq	#-1,r0
  30ba76:	8b f8       	bf	30ba6a <__printf_format_p+0x3e>
  30ba78:	7f 0c       	add	#12,r15
  30ba7a:	4f 26       	lds.l	@r15+,pr
  30ba7c:	6a f6       	mov.l	@r15+,r10
  30ba7e:	69 f6       	mov.l	@r15+,r9
  30ba80:	00 0b       	rts	
  30ba82:	68 f6       	mov.l	@r15+,r8
  30ba84:	00 30       	.word 0x0030
  30ba86:	ae 40       	bra	30b70a <__printf_format_c+0xc6>
  30ba88:	00 30       	.word 0x0030
  30ba8a:	f3 48       	movx.w	@r1+,y0
  30ba8c:	00 30       	.word 0x0030
  30ba8e:	bc c4       	bsr	30b41a <__printf+0x24a>
  30ba90:	00 30       	.word 0x0030
  30ba92:	b5 e0       	bsr	30c656 <__udivdi3+0x19a>

0030ba94 <__printf_format_m>:
  30ba94:	2f 86       	mov.l	r8,@-r15
  30ba96:	2f 96       	mov.l	r9,@-r15
  30ba98:	2f a6       	mov.l	r10,@-r15
  30ba9a:	2f b6       	mov.l	r11,@-r15
  30ba9c:	6b 43       	mov	r4,r11
  30ba9e:	2f c6       	mov.l	r12,@-r15
  30baa0:	d1 0d       	mov.l	30bad8 <__printf_format_m+0x44>,r1	! 81015d0 <errno>
  30baa2:	4f 22       	sts.l	pr,@-r15
  30baa4:	d0 0d       	mov.l	30badc <__printf_format_m+0x48>,r0	! 30bd5c <strerror>
  30baa6:	40 0b       	jsr	@r0
  30baa8:	64 12       	mov.l	@r1,r4
  30baaa:	68 03       	mov	r0,r8
  30baac:	64 03       	mov	r0,r4
  30baae:	d0 0c       	mov.l	30bae0 <__printf_format_m+0x4c>,r0	! 30bd78 <strlen>
  30bab0:	dc 0c       	mov.l	30bae4 <__printf_format_m+0x50>,r12	! 30b5e0 <__printf_out>
  30bab2:	40 0b       	jsr	@r0
  30bab4:	6a 83       	mov	r8,r10
  30bab6:	69 03       	mov	r0,r9
  30bab8:	61 a3       	mov	r10,r1
  30baba:	31 88       	sub	r8,r1
  30babc:	39 17       	cmp/gt	r1,r9
  30babe:	89 06       	bt	30bace <__printf_format_m+0x3a>
  30bac0:	4f 26       	lds.l	@r15+,pr
  30bac2:	6c f6       	mov.l	@r15+,r12
  30bac4:	6b f6       	mov.l	@r15+,r11
  30bac6:	6a f6       	mov.l	@r15+,r10
  30bac8:	69 f6       	mov.l	@r15+,r9
  30baca:	00 0b       	rts	
  30bacc:	68 f6       	mov.l	@r15+,r8
  30bace:	65 a4       	mov.b	@r10+,r5
  30bad0:	4c 0b       	jsr	@r12
  30bad2:	64 b3       	mov	r11,r4
  30bad4:	af f1       	bra	30baba <__printf_format_m+0x26>
  30bad6:	61 a3       	mov	r10,r1
  30bad8:	08 10       	.word 0x0810
  30bada:	15 d0       	mov.l	r13,@(0,r5)
  30badc:	00 30       	.word 0x0030
  30bade:	bd 5c       	bsr	30b59a <fwrite+0xda>
  30bae0:	00 30       	.word 0x0030
  30bae2:	bd 78       	bsr	30b5d6 <fwrite+0x116>
  30bae4:	00 30       	.word 0x0030
  30bae6:	b5 e0       	bsr	30c6aa <__udivdi3+0x1ee>

0030bae8 <__printf_format_n>:
  30bae8:	61 62       	mov.l	@r6,r1
  30baea:	62 13       	mov	r1,r2
  30baec:	72 04       	add	#4,r2
  30baee:	26 22       	mov.l	r2,@r6
  30baf0:	84 54       	mov.b	@(4,r5),r0
  30baf2:	20 08       	tst	r0,r0
  30baf4:	8f 02       	bf.s	30bafc <__printf_format_n+0x14>
  30baf6:	61 12       	mov.l	@r1,r1
  30baf8:	52 47       	mov.l	@(28,r4),r2
  30bafa:	21 20       	mov.b	r2,@r1
  30bafc:	84 54       	mov.b	@(4,r5),r0
  30bafe:	60 0c       	extu.b	r0,r0
  30bb00:	88 01       	cmp/eq	#1,r0
  30bb02:	8b 02       	bf	30bb0a <__printf_format_n+0x22>
  30bb04:	52 47       	mov.l	@(28,r4),r2
  30bb06:	00 0b       	rts	
  30bb08:	21 21       	mov.w	r2,@r1
  30bb0a:	88 02       	cmp/eq	#2,r0
  30bb0c:	8d 05       	bt.s	30bb1a <__printf_format_n+0x32>
  30bb0e:	88 03       	cmp/eq	#3,r0
  30bb10:	8d 03       	bt.s	30bb1a <__printf_format_n+0x32>
  30bb12:	88 04       	cmp/eq	#4,r0
  30bb14:	89 04       	bt	30bb20 <__printf_format_n+0x38>
  30bb16:	00 0b       	rts	
  30bb18:	00 09       	nop	
  30bb1a:	52 47       	mov.l	@(28,r4),r2
  30bb1c:	00 0b       	rts	
  30bb1e:	21 22       	mov.l	r2,@r1
  30bb20:	52 47       	mov.l	@(28,r4),r2
  30bb22:	11 21       	mov.l	r2,@(4,r1)
  30bb24:	af fa       	bra	30bb1c <__printf_format_n+0x34>
  30bb26:	e2 00       	mov	#0,r2

0030bb28 <__printf_compute_geometry>:
  30bb28:	2f 86       	mov.l	r8,@-r15
  30bb2a:	e1 01       	mov	#1,r1
  30bb2c:	58 53       	mov.l	@(12,r5),r8
  30bb2e:	e7 00       	mov	#0,r7
  30bb30:	62 83       	mov	r8,r2
  30bb32:	72 ff       	add	#-1,r2
  30bb34:	32 16       	cmp/hi	r1,r2
  30bb36:	8d 05       	bt.s	30bb44 <__printf_compute_geometry+0x1c>
  30bb38:	2f 96       	mov.l	r9,@-r15
  30bb3a:	84 52       	mov.b	@(2,r5),r0
  30bb3c:	88 2b       	cmp/eq	#43,r0
  30bb3e:	8d 37       	bt.s	30bbb0 <__printf_compute_geometry+0x88>
  30bb40:	e7 01       	mov	#1,r7
  30bb42:	e7 01       	mov	#1,r7
  30bb44:	e0 00       	mov	#0,r0
  30bb46:	81 52       	mov.w	r0,@(4,r5)
  30bb48:	85 41       	mov.w	@(2,r4),r0
  30bb4a:	62 03       	mov	r0,r2
  30bb4c:	85 53       	mov.w	@(6,r5),r0
  30bb4e:	66 0d       	extu.w	r0,r6
  30bb50:	84 52       	mov.b	@(2,r5),r0
  30bb52:	69 03       	mov	r0,r9
  30bb54:	84 53       	mov.b	@(3,r5),r0
  30bb56:	29 98       	tst	r9,r9
  30bb58:	61 41       	mov.w	@r4,r1
  30bb5a:	63 0c       	extu.b	r0,r3
  30bb5c:	63 37       	not	r3,r3
  30bb5e:	61 1d       	extu.w	r1,r1
  30bb60:	31 3e       	addc	r3,r1
  30bb62:	32 63       	cmp/ge	r6,r2
  30bb64:	8d 01       	bt.s	30bb6a <__printf_compute_geometry+0x42>
  30bb66:	63 23       	mov	r2,r3
  30bb68:	63 63       	mov	r6,r3
  30bb6a:	31 38       	sub	r3,r1
  30bb6c:	41 11       	cmp/pz	r1
  30bb6e:	89 00       	bt	30bb72 <__printf_compute_geometry+0x4a>
  30bb70:	e1 00       	mov	#0,r1
  30bb72:	84 46       	mov.b	@(6,r4),r0
  30bb74:	63 0c       	extu.b	r0,r3
  30bb76:	60 83       	mov	r8,r0
  30bb78:	88 01       	cmp/eq	#1,r0
  30bb7a:	8f 0d       	bf.s	30bb98 <__printf_compute_geometry+0x70>
  30bb7c:	60 23       	mov	r2,r0
  30bb7e:	40 00       	shll	r0
  30bb80:	8d 0a       	bt.s	30bb98 <__printf_compute_geometry+0x70>
  30bb82:	60 33       	mov	r3,r0
  30bb84:	88 30       	cmp/eq	#48,r0
  30bb86:	8f 03       	bf.s	30bb90 <__printf_compute_geometry+0x68>
  30bb88:	60 23       	mov	r2,r0
  30bb8a:	e0 00       	mov	#0,r0
  30bb8c:	80 46       	mov.b	r0,@(6,r4)
  30bb8e:	60 23       	mov	r2,r0
  30bb90:	30 68       	sub	r6,r0
  30bb92:	40 15       	cmp/pl	r0
  30bb94:	8b 00       	bf	30bb98 <__printf_compute_geometry+0x70>
  30bb96:	81 52       	mov.w	r0,@(4,r5)
  30bb98:	84 46       	mov.b	@(6,r4),r0
  30bb9a:	60 0c       	extu.b	r0,r0
  30bb9c:	88 30       	cmp/eq	#48,r0
  30bb9e:	8f 14       	bf.s	30bbca <__printf_compute_geometry+0xa2>
  30bba0:	61 1d       	extu.w	r1,r1
  30bba2:	27 78       	tst	r7,r7
  30bba4:	8d 16       	bt.s	30bbd4 <__printf_compute_geometry+0xac>
  30bba6:	60 13       	mov	r1,r0
  30bba8:	81 52       	mov.w	r0,@(4,r5)
  30bbaa:	69 f6       	mov.l	@r15+,r9
  30bbac:	00 0b       	rts	
  30bbae:	68 f6       	mov.l	@r15+,r8
  30bbb0:	84 45       	mov.b	@(5,r4),r0
  30bbb2:	c8 20       	tst	#32,r0
  30bbb4:	8f c6       	bf.s	30bb44 <__printf_compute_geometry+0x1c>
  30bbb6:	61 03       	mov	r0,r1
  30bbb8:	60 13       	mov	r1,r0
  30bbba:	c8 40       	tst	#64,r0
  30bbbc:	e0 ff       	mov	#-1,r0
  30bbbe:	60 0a       	negc	r0,r0
  30bbc0:	40 08       	shll2	r0
  30bbc2:	30 0c       	add	r0,r0
  30bbc4:	40 08       	shll2	r0
  30bbc6:	af bc       	bra	30bb42 <__printf_compute_geometry+0x1a>
  30bbc8:	80 52       	mov.b	r0,@(2,r5)
  30bbca:	88 2d       	cmp/eq	#45,r0
  30bbcc:	8f 02       	bf.s	30bbd4 <__printf_compute_geometry+0xac>
  30bbce:	60 13       	mov	r1,r0
  30bbd0:	af eb       	bra	30bbaa <__printf_compute_geometry+0x82>
  30bbd2:	81 54       	mov.w	r0,@(8,r5)
  30bbd4:	af e9       	bra	30bbaa <__printf_compute_geometry+0x82>
  30bbd6:	25 11       	mov.w	r1,@r5

0030bbd8 <__printf_load_i>:
  30bbd8:	61 52       	mov.l	@r5,r1
  30bbda:	60 43       	mov	r4,r0
  30bbdc:	88 01       	cmp/eq	#1,r0
  30bbde:	8f 07       	bf.s	30bbf0 <__printf_load_i+0x18>
  30bbe0:	62 13       	mov	r1,r2
  30bbe2:	72 04       	add	#4,r2
  30bbe4:	25 22       	mov.l	r2,@r5
  30bbe6:	84 13       	mov.b	@(3,r1),r0
  30bbe8:	61 03       	mov	r0,r1
  30bbea:	40 00       	shll	r0
  30bbec:	00 0b       	rts	
  30bbee:	30 0a       	subc	r0,r0
  30bbf0:	88 02       	cmp/eq	#2,r0
  30bbf2:	8f 04       	bf.s	30bbfe <__printf_load_i+0x26>
  30bbf4:	88 08       	cmp/eq	#8,r0
  30bbf6:	72 04       	add	#4,r2
  30bbf8:	25 22       	mov.l	r2,@r5
  30bbfa:	af f5       	bra	30bbe8 <__printf_load_i+0x10>
  30bbfc:	85 11       	mov.w	@(2,r1),r0
  30bbfe:	8b 04       	bf	30bc0a <__printf_load_i+0x32>
  30bc00:	72 08       	add	#8,r2
  30bc02:	60 12       	mov.l	@r1,r0
  30bc04:	25 22       	mov.l	r2,@r5
  30bc06:	00 0b       	rts	
  30bc08:	51 11       	mov.l	@(4,r1),r1
  30bc0a:	61 12       	mov.l	@r1,r1
  30bc0c:	72 04       	add	#4,r2
  30bc0e:	25 22       	mov.l	r2,@r5
  30bc10:	af eb       	bra	30bbea <__printf_load_i+0x12>
  30bc12:	60 13       	mov	r1,r0

0030bc14 <__printf_load_u>:
  30bc14:	61 52       	mov.l	@r5,r1
  30bc16:	60 43       	mov	r4,r0
  30bc18:	88 01       	cmp/eq	#1,r0
  30bc1a:	8f 06       	bf.s	30bc2a <__printf_load_u+0x16>
  30bc1c:	62 13       	mov	r1,r2
  30bc1e:	61 12       	mov.l	@r1,r1
  30bc20:	72 04       	add	#4,r2
  30bc22:	25 22       	mov.l	r2,@r5
  30bc24:	61 1c       	extu.b	r1,r1
  30bc26:	00 0b       	rts	
  30bc28:	e0 00       	mov	#0,r0
  30bc2a:	88 02       	cmp/eq	#2,r0
  30bc2c:	8f 05       	bf.s	30bc3a <__printf_load_u+0x26>
  30bc2e:	88 08       	cmp/eq	#8,r0
  30bc30:	61 12       	mov.l	@r1,r1
  30bc32:	72 04       	add	#4,r2
  30bc34:	25 22       	mov.l	r2,@r5
  30bc36:	af f6       	bra	30bc26 <__printf_load_u+0x12>
  30bc38:	61 1d       	extu.w	r1,r1
  30bc3a:	8b 04       	bf	30bc46 <__printf_load_u+0x32>
  30bc3c:	72 08       	add	#8,r2
  30bc3e:	60 12       	mov.l	@r1,r0
  30bc40:	25 22       	mov.l	r2,@r5
  30bc42:	00 0b       	rts	
  30bc44:	51 11       	mov.l	@(4,r1),r1
  30bc46:	72 04       	add	#4,r2
  30bc48:	61 12       	mov.l	@r1,r1
  30bc4a:	af ec       	bra	30bc26 <__printf_load_u+0x12>
  30bc4c:	25 22       	mov.l	r2,@r5

0030bc4e <__printf_digits10>:
  30bc4e:	2f 86       	mov.l	r8,@-r15
  30bc50:	68 53       	mov	r5,r8
  30bc52:	2f 96       	mov.l	r9,@-r15
  30bc54:	69 63       	mov	r6,r9
  30bc56:	2f a6       	mov.l	r10,@-r15
  30bc58:	6a 43       	mov	r4,r10
  30bc5a:	2f b6       	mov.l	r11,@-r15
  30bc5c:	6b 43       	mov	r4,r11
  30bc5e:	2f c6       	mov.l	r12,@-r15
  30bc60:	2f d6       	mov.l	r13,@-r15
  30bc62:	2f e6       	mov.l	r14,@-r15
  30bc64:	d2 15       	mov.l	30bcbc <__printf_digits10+0x6e>,r2	! 30c6c8 <__umoddi3>
  30bc66:	4f 22       	sts.l	pr,@-r15
  30bc68:	de 15       	mov.l	30bcc0 <__printf_digits10+0x72>,r14	! 30c4bc <__udivdi3>
  30bc6a:	7f f8       	add	#-8,r15
  30bc6c:	2f 22       	mov.l	r2,@r15
  30bc6e:	64 83       	mov	r8,r4
  30bc70:	65 93       	mov	r9,r5
  30bc72:	e6 00       	mov	#0,r6
  30bc74:	42 0b       	jsr	@r2
  30bc76:	e7 0a       	mov	#10,r7
  30bc78:	71 30       	add	#48,r1
  30bc7a:	2a 10       	mov.b	r1,@r10
  30bc7c:	64 83       	mov	r8,r4
  30bc7e:	1f 81       	mov.l	r8,@(4,r15)
  30bc80:	65 93       	mov	r9,r5
  30bc82:	e6 00       	mov	#0,r6
  30bc84:	4e 0b       	jsr	@r14
  30bc86:	e7 0a       	mov	#10,r7
  30bc88:	53 f1       	mov.l	@(4,r15),r3
  30bc8a:	6c a3       	mov	r10,r12
  30bc8c:	3c b8       	sub	r11,r12
  30bc8e:	23 38       	tst	r3,r3
  30bc90:	6d 93       	mov	r9,r13
  30bc92:	62 f2       	mov.l	@r15,r2
  30bc94:	7c 01       	add	#1,r12
  30bc96:	7a 01       	add	#1,r10
  30bc98:	68 03       	mov	r0,r8
  30bc9a:	8f e7       	bf.s	30bc6c <__printf_digits10+0x1e>
  30bc9c:	69 13       	mov	r1,r9
  30bc9e:	e1 09       	mov	#9,r1
  30bca0:	3d 16       	cmp/hi	r1,r13
  30bca2:	8d e3       	bt.s	30bc6c <__printf_digits10+0x1e>
  30bca4:	60 c3       	mov	r12,r0
  30bca6:	7f 08       	add	#8,r15
  30bca8:	4f 26       	lds.l	@r15+,pr
  30bcaa:	6e f6       	mov.l	@r15+,r14
  30bcac:	6d f6       	mov.l	@r15+,r13
  30bcae:	6c f6       	mov.l	@r15+,r12
  30bcb0:	6b f6       	mov.l	@r15+,r11
  30bcb2:	6a f6       	mov.l	@r15+,r10
  30bcb4:	69 f6       	mov.l	@r15+,r9
  30bcb6:	00 0b       	rts	
  30bcb8:	68 f6       	mov.l	@r15+,r8
  30bcba:	00 09       	nop	
  30bcbc:	00 30       	.word 0x0030
  30bcbe:	c6 c8       	mov.l	@(800,gbr),r0
  30bcc0:	00 30       	.word 0x0030
  30bcc2:	c4 bc       	mov.b	@(188,gbr),r0

0030bcc4 <__printf_digits16>:
  30bcc4:	25 58       	tst	r5,r5
  30bcc6:	d3 0d       	mov.l	30bcfc <__printf_digits16+0x38>,r3	! 30f354
  30bcc8:	8f 01       	bf.s	30bcce <__printf_digits16+0xa>
  30bcca:	61 43       	mov	r4,r1
  30bccc:	d3 0c       	mov.l	30bd00 <__printf_digits16+0x3c>,r3	! 30f368
  30bcce:	60 73       	mov	r7,r0
  30bcd0:	c9 0f       	and	#15,r0
  30bcd2:	05 3c       	mov.b	@(r0,r3),r5
  30bcd4:	e0 1c       	mov	#28,r0
  30bcd6:	21 50       	mov.b	r5,@r1
  30bcd8:	65 63       	mov	r6,r5
  30bcda:	46 09       	shlr2	r6
  30bcdc:	62 13       	mov	r1,r2
  30bcde:	45 0d       	shld	r0,r5
  30bce0:	47 09       	shlr2	r7
  30bce2:	46 09       	shlr2	r6
  30bce4:	32 48       	sub	r4,r2
  30bce6:	47 09       	shlr2	r7
  30bce8:	26 68       	tst	r6,r6
  30bcea:	72 01       	add	#1,r2
  30bcec:	71 01       	add	#1,r1
  30bcee:	8f ee       	bf.s	30bcce <__printf_digits16+0xa>
  30bcf0:	27 5b       	or	r5,r7
  30bcf2:	27 78       	tst	r7,r7
  30bcf4:	8f eb       	bf.s	30bcce <__printf_digits16+0xa>
  30bcf6:	60 23       	mov	r2,r0
  30bcf8:	00 0b       	rts	
  30bcfa:	00 09       	nop	
  30bcfc:	00 30       	.word 0x0030
  30bcfe:	f3 54       	movx.l	@r1,y0
  30bd00:	00 30       	.word 0x0030
  30bd02:	f3 68       	movx.w	x0,@r1+

0030bd04 <__printf_digits8>:
  30bd04:	61 43       	mov	r4,r1
  30bd06:	60 63       	mov	r6,r0
  30bd08:	46 09       	shlr2	r6
  30bd0a:	63 53       	mov	r5,r3
  30bd0c:	46 01       	shlr	r6
  30bd0e:	c9 07       	and	#7,r0
  30bd10:	e7 1d       	mov	#29,r7
  30bd12:	45 09       	shlr2	r5
  30bd14:	62 13       	mov	r1,r2
  30bd16:	43 7d       	shld	r7,r3
  30bd18:	70 30       	add	#48,r0
  30bd1a:	45 01       	shlr	r5
  30bd1c:	21 00       	mov.b	r0,@r1
  30bd1e:	32 48       	sub	r4,r2
  30bd20:	25 58       	tst	r5,r5
  30bd22:	72 01       	add	#1,r2
  30bd24:	71 01       	add	#1,r1
  30bd26:	8f ee       	bf.s	30bd06 <__printf_digits8+0x2>
  30bd28:	26 3b       	or	r3,r6
  30bd2a:	26 68       	tst	r6,r6
  30bd2c:	8f eb       	bf.s	30bd06 <__printf_digits8+0x2>
  30bd2e:	60 23       	mov	r2,r0
  30bd30:	00 0b       	rts	
  30bd32:	00 09       	nop	

0030bd34 <memrchr>:
  30bd34:	60 63       	mov	r6,r0
  30bd36:	70 ff       	add	#-1,r0
  30bd38:	e1 ff       	mov	#-1,r1
  30bd3a:	30 13       	cmp/ge	r1,r0
  30bd3c:	8d 01       	bt.s	30bd42 <memrchr+0xe>
  30bd3e:	76 01       	add	#1,r6
  30bd40:	e6 01       	mov	#1,r6
  30bd42:	46 10       	dt	r6
  30bd44:	8f 03       	bf.s	30bd4e <memrchr+0x1a>
  30bd46:	61 43       	mov	r4,r1
  30bd48:	e1 00       	mov	#0,r1
  30bd4a:	00 0b       	rts	
  30bd4c:	60 13       	mov	r1,r0
  30bd4e:	02 4c       	mov.b	@(r0,r4),r2
  30bd50:	32 50       	cmp/eq	r5,r2
  30bd52:	8d fa       	bt.s	30bd4a <memrchr+0x16>
  30bd54:	31 0c       	add	r0,r1
  30bd56:	af f4       	bra	30bd42 <memrchr+0xe>
  30bd58:	70 ff       	add	#-1,r0
	...

0030bd5c <strerror>:
  30bd5c:	e1 17       	mov	#23,r1
  30bd5e:	34 16       	cmp/hi	r1,r4
  30bd60:	d1 03       	mov.l	30bd70 <strerror+0x14>,r1	! 30f37c
  30bd62:	8d 03       	bt.s	30bd6c <strerror+0x10>
  30bd64:	44 08       	shll2	r4
  30bd66:	d1 03       	mov.l	30bd74 <strerror+0x18>,r1	! 30f5a4 <errno_strings>
  30bd68:	60 43       	mov	r4,r0
  30bd6a:	01 1e       	mov.l	@(r0,r1),r1
  30bd6c:	00 0b       	rts	
  30bd6e:	60 13       	mov	r1,r0
  30bd70:	00 30       	.word 0x0030
  30bd72:	f3 7c       	movx.l	x0,@r1+r8
  30bd74:	00 30       	.word 0x0030
  30bd76:	f5 a4       	movs.w	@r5,y0

0030bd78 <strlen>:
  30bd78:	60 43       	mov	r4,r0
  30bd7a:	e2 00       	mov	#0,r2
  30bd7c:	61 04       	mov.b	@r0+,r1
  30bd7e:	21 18       	tst	r1,r1
  30bd80:	89 0e       	bt	30bda0 <.end>
  30bd82:	61 04       	mov.b	@r0+,r1
  30bd84:	21 18       	tst	r1,r1
  30bd86:	89 0b       	bt	30bda0 <.end>
  30bd88:	61 04       	mov.b	@r0+,r1
  30bd8a:	21 18       	tst	r1,r1
  30bd8c:	89 08       	bt	30bda0 <.end>
  30bd8e:	cb 03       	or	#3,r0
  30bd90:	ca 03       	xor	#3,r0
  30bd92:	61 06       	mov.l	@r0+,r1
  30bd94:	22 1c       	cmp/str	r1,r2
  30bd96:	8b fc       	bf	30bd92 <strlen+0x1a>
  30bd98:	70 fc       	add	#-4,r0
  30bd9a:	61 04       	mov.b	@r0+,r1
  30bd9c:	21 18       	tst	r1,r1
  30bd9e:	8b fc       	bf	30bd9a <strlen+0x22>

0030bda0 <.end>:
  30bda0:	70 ff       	add	#-1,r0
  30bda2:	00 0b       	rts	
  30bda4:	30 48       	sub	r4,r0
	...

0030bda8 <__fp_open>:
  30bda8:	66 6c       	extu.b	r6,r6
  30bdaa:	e1 00       	mov	#0,r1
  30bdac:	4f 22       	sts.l	pr,@-r15
  30bdae:	26 68       	tst	r6,r6
  30bdb0:	24 52       	mov.l	r5,@r4
  30bdb2:	e0 00       	mov	#0,r0
  30bdb4:	8d 08       	bt.s	30bdc8 <__fp_open+0x20>
  30bdb6:	14 11       	mov.l	r1,@(4,r4)
  30bdb8:	d0 05       	mov.l	30bdd0 <__fp_open+0x28>,r0	! 30c278 <setvbuf>
  30bdba:	e6 00       	mov	#0,r6
  30bdbc:	97 07       	mov.w	30bdce <__fp_open+0x26>,r7	! 200
  30bdbe:	40 0b       	jsr	@r0
  30bdc0:	e5 00       	mov	#0,r5
  30bdc2:	20 08       	tst	r0,r0
  30bdc4:	30 0a       	subc	r0,r0
  30bdc6:	60 07       	not	r0,r0
  30bdc8:	4f 26       	lds.l	@r15+,pr
  30bdca:	00 0b       	rts	
  30bdcc:	00 09       	nop	
  30bdce:	02 00       	.word 0x0200
  30bdd0:	00 30       	.word 0x0030
  30bdd2:	c2 78       	mov.l	r0,@(480,gbr)

0030bdd4 <__fp_close>:
  30bdd4:	2f 86       	mov.l	r8,@-r15
  30bdd6:	24 48       	tst	r4,r4
  30bdd8:	2f 96       	mov.l	r9,@-r15
  30bdda:	68 43       	mov	r4,r8
  30bddc:	4f 22       	sts.l	pr,@-r15
  30bdde:	8d 19       	bt.s	30be14 <__fp_close+0x40>
  30bde0:	69 5c       	extu.b	r5,r9
  30bde2:	61 42       	mov.l	@r4,r1
  30bde4:	41 11       	cmp/pz	r1
  30bde6:	8b 05       	bf	30bdf4 <__fp_close+0x20>
  30bde8:	d0 0c       	mov.l	30be1c <__fp_close+0x48>,r0	! 30c3b0 <fflush>
  30bdea:	40 0b       	jsr	@r0
  30bdec:	00 09       	nop	
  30bdee:	d0 0c       	mov.l	30be20 <__fp_close+0x4c>,r0	! 30c9e0 <close>
  30bdf0:	40 0b       	jsr	@r0
  30bdf2:	64 82       	mov.l	@r8,r4
  30bdf4:	85 8e       	mov.w	@(28,r8),r0
  30bdf6:	60 08       	swap.b	r0,r0
  30bdf8:	c8 20       	tst	#32,r0
  30bdfa:	8d 04       	bt.s	30be06 <__fp_close+0x32>
  30bdfc:	29 98       	tst	r9,r9
  30bdfe:	d1 09       	mov.l	30be24 <__fp_close+0x50>,r1	! 30af58 <free>
  30be00:	41 0b       	jsr	@r1
  30be02:	54 82       	mov.l	@(8,r8),r4
  30be04:	29 98       	tst	r9,r9
  30be06:	8d 05       	bt.s	30be14 <__fp_close+0x40>
  30be08:	64 83       	mov	r8,r4
  30be0a:	d1 06       	mov.l	30be24 <__fp_close+0x50>,r1	! 30af58 <free>
  30be0c:	4f 26       	lds.l	@r15+,pr
  30be0e:	69 f6       	mov.l	@r15+,r9
  30be10:	41 2b       	jmp	@r1
  30be12:	68 f6       	mov.l	@r15+,r8
  30be14:	4f 26       	lds.l	@r15+,pr
  30be16:	69 f6       	mov.l	@r15+,r9
  30be18:	00 0b       	rts	
  30be1a:	68 f6       	mov.l	@r15+,r8
  30be1c:	00 30       	.word 0x0030
  30be1e:	c3 b0       	trapa	#176
  30be20:	00 30       	.word 0x0030
  30be22:	c9 e0       	and	#224,r0
  30be24:	00 30       	.word 0x0030
  30be26:	af 58       	bra	30bcda <__printf_digits16+0x16>

0030be28 <__fp_remove_buffer>:
  30be28:	2f 86       	mov.l	r8,@-r15
  30be2a:	4f 22       	sts.l	pr,@-r15
  30be2c:	85 4e       	mov.w	@(28,r4),r0
  30be2e:	60 08       	swap.b	r0,r0
  30be30:	c8 20       	tst	#32,r0
  30be32:	8d 03       	bt.s	30be3c <__fp_remove_buffer+0x14>
  30be34:	68 43       	mov	r4,r8
  30be36:	d1 07       	mov.l	30be54 <__fp_remove_buffer+0x2c>,r1	! 30af58 <free>
  30be38:	41 0b       	jsr	@r1
  30be3a:	54 42       	mov.l	@(8,r4),r4
  30be3c:	92 08       	mov.w	30be50 <__fp_remove_buffer+0x28>,r2	! dfff
  30be3e:	e1 00       	mov	#0,r1
  30be40:	85 8e       	mov.w	@(28,r8),r0
  30be42:	20 29       	and	r2,r0
  30be44:	18 12       	mov.l	r1,@(8,r8)
  30be46:	81 8e       	mov.w	r0,@(28,r8)
  30be48:	18 15       	mov.l	r1,@(20,r8)
  30be4a:	4f 26       	lds.l	@r15+,pr
  30be4c:	00 0b       	rts	
  30be4e:	68 f6       	mov.l	@r15+,r8
  30be50:	df ff       	mov.l	30c250 <fseek+0x20>,r15	! b68f6
  30be52:	00 09       	nop	
  30be54:	00 30       	.word 0x0030
  30be56:	af 58       	bra	30bd0a <__printf_digits8+0x6>

0030be58 <__fp_set_buffer>:
  30be58:	2f 86       	mov.l	r8,@-r15
  30be5a:	25 58       	tst	r5,r5
  30be5c:	2f 96       	mov.l	r9,@-r15
  30be5e:	68 43       	mov	r4,r8
  30be60:	4f 22       	sts.l	pr,@-r15
  30be62:	69 63       	mov	r6,r9
  30be64:	8f 08       	bf.s	30be78 <__fp_set_buffer+0x20>
  30be66:	e1 00       	mov	#0,r1
  30be68:	d0 0b       	mov.l	30be98 <__fp_set_buffer+0x40>,r0	! 30af64 <malloc>
  30be6a:	40 0b       	jsr	@r0
  30be6c:	64 63       	mov	r6,r4
  30be6e:	20 08       	tst	r0,r0
  30be70:	65 03       	mov	r0,r5
  30be72:	8d 0c       	bt.s	30be8e <__fp_set_buffer+0x36>
  30be74:	e0 00       	mov	#0,r0
  30be76:	e1 01       	mov	#1,r1
  30be78:	92 0d       	mov.w	30be96 <__fp_set_buffer+0x3e>,r2	! dfff
  30be7a:	41 28       	shll16	r1
  30be7c:	85 8e       	mov.w	@(28,r8),r0
  30be7e:	41 09       	shlr2	r1
  30be80:	41 01       	shlr	r1
  30be82:	20 29       	and	r2,r0
  30be84:	20 1b       	or	r1,r0
  30be86:	18 52       	mov.l	r5,@(8,r8)
  30be88:	18 95       	mov.l	r9,@(20,r8)
  30be8a:	81 8e       	mov.w	r0,@(28,r8)
  30be8c:	e0 01       	mov	#1,r0
  30be8e:	4f 26       	lds.l	@r15+,pr
  30be90:	69 f6       	mov.l	@r15+,r9
  30be92:	00 0b       	rts	
  30be94:	68 f6       	mov.l	@r15+,r8
  30be96:	df ff       	mov.l	30c294 <setvbuf+0x1c>,r15	! 8f036b73
  30be98:	00 30       	.word 0x0030
  30be9a:	af 64       	bra	30bd66 <strerror+0xa>

0030be9c <__fp_buffer_mode_read>:
  30be9c:	51 42       	mov.l	@(8,r4),r1
  30be9e:	2f 86       	mov.l	r8,@-r15
  30bea0:	21 18       	tst	r1,r1
  30bea2:	4f 22       	sts.l	pr,@-r15
  30bea4:	8d 08       	bt.s	30beb8 <__fp_buffer_mode_read+0x1c>
  30bea6:	68 43       	mov	r4,r8
  30bea8:	85 4e       	mov.w	@(28,r4),r0
  30beaa:	60 08       	swap.b	r0,r0
  30beac:	c8 10       	tst	#16,r0
  30beae:	8b 06       	bf	30bebe <__fp_buffer_mode_read+0x22>
  30beb0:	91 10       	mov.w	30bed4 <__fp_buffer_mode_read+0x38>,r1	! efff
  30beb2:	85 8e       	mov.w	@(28,r8),r0
  30beb4:	20 19       	and	r1,r0
  30beb6:	81 8e       	mov.w	r0,@(28,r8)
  30beb8:	4f 26       	lds.l	@r15+,pr
  30beba:	00 0b       	rts	
  30bebc:	68 f6       	mov.l	@r15+,r8
  30bebe:	51 43       	mov.l	@(12,r4),r1
  30bec0:	21 18       	tst	r1,r1
  30bec2:	89 f5       	bt	30beb0 <__fp_buffer_mode_read+0x14>
  30bec4:	d0 04       	mov.l	30bed8 <__fp_buffer_mode_read+0x3c>,r0	! 30c3b0 <fflush>
  30bec6:	40 0b       	jsr	@r0
  30bec8:	00 09       	nop	
  30beca:	51 82       	mov.l	@(8,r8),r1
  30becc:	21 18       	tst	r1,r1
  30bece:	8b ef       	bf	30beb0 <__fp_buffer_mode_read+0x14>
  30bed0:	af f2       	bra	30beb8 <__fp_buffer_mode_read+0x1c>
  30bed2:	00 09       	nop	
  30bed4:	ef ff       	mov	#-1,r15
  30bed6:	00 09       	nop	
  30bed8:	00 30       	.word 0x0030
  30beda:	c3 b0       	trapa	#176

0030bedc <__fp_buffer_mode_write>:
  30bedc:	2f 86       	mov.l	r8,@-r15
  30bede:	68 43       	mov	r4,r8
  30bee0:	51 42       	mov.l	@(8,r4),r1
  30bee2:	2f 96       	mov.l	r9,@-r15
  30bee4:	21 18       	tst	r1,r1
  30bee6:	8d 07       	bt.s	30bef8 <__fp_buffer_mode_write+0x1c>
  30bee8:	4f 22       	sts.l	pr,@-r15
  30beea:	99 15       	mov.w	30bf18 <__fp_buffer_mode_write+0x3c>,r9	! 1000
  30beec:	85 4e       	mov.w	@(28,r4),r0
  30beee:	29 08       	tst	r0,r9
  30bef0:	89 06       	bt	30bf00 <__fp_buffer_mode_write+0x24>
  30bef2:	85 8e       	mov.w	@(28,r8),r0
  30bef4:	20 9b       	or	r9,r0
  30bef6:	81 8e       	mov.w	r0,@(28,r8)
  30bef8:	4f 26       	lds.l	@r15+,pr
  30befa:	69 f6       	mov.l	@r15+,r9
  30befc:	00 0b       	rts	
  30befe:	68 f6       	mov.l	@r15+,r8
  30bf00:	52 43       	mov.l	@(12,r4),r2
  30bf02:	51 44       	mov.l	@(16,r4),r1
  30bf04:	32 12       	cmp/hs	r1,r2
  30bf06:	89 f4       	bt	30bef2 <__fp_buffer_mode_write+0x16>
  30bf08:	d0 04       	mov.l	30bf1c <__fp_buffer_mode_write+0x40>,r0	! 30c3b0 <fflush>
  30bf0a:	40 0b       	jsr	@r0
  30bf0c:	00 09       	nop	
  30bf0e:	51 82       	mov.l	@(8,r8),r1
  30bf10:	21 18       	tst	r1,r1
  30bf12:	8b ee       	bf	30bef2 <__fp_buffer_mode_write+0x16>
  30bf14:	af f0       	bra	30bef8 <__fp_buffer_mode_write+0x1c>
  30bf16:	00 09       	nop	
  30bf18:	10 00       	mov.l	r0,@(0,r0)
  30bf1a:	00 09       	nop	
  30bf1c:	00 30       	.word 0x0030
  30bf1e:	c3 b0       	trapa	#176

0030bf20 <__fp_buffered_read>:
  30bf20:	2f 86       	mov.l	r8,@-r15
  30bf22:	68 43       	mov	r4,r8
  30bf24:	2f 96       	mov.l	r9,@-r15
  30bf26:	e9 ff       	mov	#-1,r9
  30bf28:	2f a6       	mov.l	r10,@-r15
  30bf2a:	6a 53       	mov	r5,r10
  30bf2c:	4f 22       	sts.l	pr,@-r15
  30bf2e:	54 42       	mov.l	@(8,r4),r4
  30bf30:	24 48       	tst	r4,r4
  30bf32:	8d 3e       	bt.s	30bfb2 <__fp_buffered_read+0x92>
  30bf34:	65 73       	mov	r7,r5
  30bf36:	85 8e       	mov.w	@(28,r8),r0
  30bf38:	60 08       	swap.b	r0,r0
  30bf3a:	c8 10       	tst	#16,r0
  30bf3c:	8d 03       	bt.s	30bf46 <__fp_buffered_read+0x26>
  30bf3e:	51 83       	mov.l	@(12,r8),r1
  30bf40:	21 18       	tst	r1,r1
  30bf42:	8f 37       	bf.s	30bfb4 <__fp_buffered_read+0x94>
  30bf44:	60 93       	mov	r9,r0
  30bf46:	59 84       	mov.l	@(16,r8),r9
  30bf48:	39 18       	sub	r1,r9
  30bf4a:	39 67       	cmp/gt	r6,r9
  30bf4c:	8f 02       	bf.s	30bf54 <__fp_buffered_read+0x34>
  30bf4e:	49 15       	cmp/pl	r9
  30bf50:	69 63       	mov	r6,r9
  30bf52:	49 15       	cmp/pl	r9
  30bf54:	8f 33       	bf.s	30bfbe <__fp_buffered_read+0x9e>
  30bf56:	45 11       	cmp/pz	r5
  30bf58:	8f 0b       	bf.s	30bf72 <__fp_buffered_read+0x52>
  30bf5a:	66 93       	mov	r9,r6
  30bf5c:	d0 19       	mov.l	30bfc4 <__fp_buffered_read+0xa4>,r0	! 30c310 <memchr>
  30bf5e:	40 0b       	jsr	@r0
  30bf60:	34 1c       	add	r1,r4
  30bf62:	20 08       	tst	r0,r0
  30bf64:	89 05       	bt	30bf72 <__fp_buffered_read+0x52>
  30bf66:	51 82       	mov.l	@(8,r8),r1
  30bf68:	69 03       	mov	r0,r9
  30bf6a:	52 83       	mov.l	@(12,r8),r2
  30bf6c:	31 2c       	add	r2,r1
  30bf6e:	39 18       	sub	r1,r9
  30bf70:	79 01       	add	#1,r9
  30bf72:	51 83       	mov.l	@(12,r8),r1
  30bf74:	66 93       	mov	r9,r6
  30bf76:	55 82       	mov.l	@(8,r8),r5
  30bf78:	64 a3       	mov	r10,r4
  30bf7a:	d0 13       	mov.l	30bfc8 <__fp_buffered_read+0xa8>,r0	! 30ae40 <memcpy>
  30bf7c:	40 0b       	jsr	@r0
  30bf7e:	35 1c       	add	r1,r5
  30bf80:	52 83       	mov.l	@(12,r8),r2
  30bf82:	51 86       	mov.l	@(24,r8),r1
  30bf84:	32 9c       	add	r9,r2
  30bf86:	31 98       	sub	r9,r1
  30bf88:	41 11       	cmp/pz	r1
  30bf8a:	8d 01       	bt.s	30bf90 <__fp_buffered_read+0x70>
  30bf8c:	18 23       	mov.l	r2,@(12,r8)
  30bf8e:	e1 00       	mov	#0,r1
  30bf90:	18 16       	mov.l	r1,@(24,r8)
  30bf92:	51 84       	mov.l	@(16,r8),r1
  30bf94:	32 12       	cmp/hs	r1,r2
  30bf96:	8f 0d       	bf.s	30bfb4 <__fp_buffered_read+0x94>
  30bf98:	60 93       	mov	r9,r0
  30bf9a:	e1 00       	mov	#0,r1
  30bf9c:	18 14       	mov.l	r1,@(16,r8)
  30bf9e:	18 13       	mov.l	r1,@(12,r8)
  30bfa0:	d1 0a       	mov.l	30bfcc <__fp_buffered_read+0xac>,r1	! c000
  30bfa2:	85 8e       	mov.w	@(28,r8),r0
  30bfa4:	20 19       	and	r1,r0
  30bfa6:	d1 0a       	mov.l	30bfd0 <__fp_buffered_read+0xb0>,r1	! 8000
  30bfa8:	30 10       	cmp/eq	r1,r0
  30bfaa:	8b 02       	bf	30bfb2 <__fp_buffered_read+0x92>
  30bfac:	d1 09       	mov.l	30bfd4 <__fp_buffered_read+0xb4>,r1	! 30be28 <__fp_remove_buffer>
  30bfae:	41 0b       	jsr	@r1
  30bfb0:	64 83       	mov	r8,r4
  30bfb2:	60 93       	mov	r9,r0
  30bfb4:	4f 26       	lds.l	@r15+,pr
  30bfb6:	6a f6       	mov.l	@r15+,r10
  30bfb8:	69 f6       	mov.l	@r15+,r9
  30bfba:	00 0b       	rts	
  30bfbc:	68 f6       	mov.l	@r15+,r8
  30bfbe:	af f8       	bra	30bfb2 <__fp_buffered_read+0x92>
  30bfc0:	e9 00       	mov	#0,r9
  30bfc2:	00 09       	nop	
  30bfc4:	00 30       	.word 0x0030
  30bfc6:	c3 10       	trapa	#16
  30bfc8:	00 30       	.word 0x0030
  30bfca:	ae 40       	bra	30bc4e <__printf_digits10>
  30bfcc:	00 00       	.word 0x0000
  30bfce:	c0 00       	mov.b	r0,@(0,gbr)
  30bfd0:	00 00       	.word 0x0000
  30bfd2:	80 00       	mov.b	r0,@(0,r0)
  30bfd4:	00 30       	.word 0x0030
  30bfd6:	be 28       	bsr	30bc2a <__printf_load_u+0x16>

0030bfd8 <__fp_read>:
  30bfd8:	2f 86       	mov.l	r8,@-r15
  30bfda:	e8 00       	mov	#0,r8
  30bfdc:	2f 96       	mov.l	r9,@-r15
  30bfde:	69 43       	mov	r4,r9
  30bfe0:	2f a6       	mov.l	r10,@-r15
  30bfe2:	6a 63       	mov	r6,r10
  30bfe4:	2f b6       	mov.l	r11,@-r15
  30bfe6:	6b 53       	mov	r5,r11
  30bfe8:	2f c6       	mov.l	r12,@-r15
  30bfea:	dc 11       	mov.l	30c030 <__fp_read+0x58>,r12	! 30ce08 <read>
  30bfec:	4f 22       	sts.l	pr,@-r15
  30bfee:	38 a2       	cmp/hs	r10,r8
  30bff0:	8d 17       	bt.s	30c022 <__fp_read+0x4a>
  30bff2:	66 a3       	mov	r10,r6
  30bff4:	65 b3       	mov	r11,r5
  30bff6:	64 92       	mov.l	@r9,r4
  30bff8:	36 88       	sub	r8,r6
  30bffa:	4c 0b       	jsr	@r12
  30bffc:	35 8c       	add	r8,r5
  30bffe:	40 11       	cmp/pz	r0
  30c000:	8d 0b       	bt.s	30c01a <__fp_read+0x42>
  30c002:	20 08       	tst	r0,r0
  30c004:	85 9e       	mov.w	@(28,r9),r0
  30c006:	cb 40       	or	#64,r0
  30c008:	81 9e       	mov.w	r0,@(28,r9)
  30c00a:	e0 ff       	mov	#-1,r0
  30c00c:	4f 26       	lds.l	@r15+,pr
  30c00e:	6c f6       	mov.l	@r15+,r12
  30c010:	6b f6       	mov.l	@r15+,r11
  30c012:	6a f6       	mov.l	@r15+,r10
  30c014:	69 f6       	mov.l	@r15+,r9
  30c016:	00 0b       	rts	
  30c018:	68 f6       	mov.l	@r15+,r8
  30c01a:	8b 04       	bf	30c026 <__fp_read+0x4e>
  30c01c:	85 9e       	mov.w	@(28,r9),r0
  30c01e:	cb 80       	or	#128,r0
  30c020:	81 9e       	mov.w	r0,@(28,r9)
  30c022:	af f3       	bra	30c00c <__fp_read+0x34>
  30c024:	60 83       	mov	r8,r0
  30c026:	51 91       	mov.l	@(4,r9),r1
  30c028:	38 0c       	add	r0,r8
  30c02a:	31 0c       	add	r0,r1
  30c02c:	af df       	bra	30bfee <__fp_read+0x16>
  30c02e:	19 11       	mov.l	r1,@(4,r9)
  30c030:	00 30       	.word 0x0030
  30c032:	ce 08       	xor.b	#8,@(r0,gbr)

0030c034 <__fp_fread2>:
  30c034:	2f 86       	mov.l	r8,@-r15
  30c036:	2f 96       	mov.l	r9,@-r15
  30c038:	69 43       	mov	r4,r9
  30c03a:	2f a6       	mov.l	r10,@-r15
  30c03c:	6a 73       	mov	r7,r10
  30c03e:	2f b6       	mov.l	r11,@-r15
  30c040:	6b 63       	mov	r6,r11
  30c042:	2f c6       	mov.l	r12,@-r15
  30c044:	6c 53       	mov	r5,r12
  30c046:	2f d6       	mov.l	r13,@-r15
  30c048:	2f e6       	mov.l	r14,@-r15
  30c04a:	4f 22       	sts.l	pr,@-r15
  30c04c:	85 4e       	mov.w	@(28,r4),r0
  30c04e:	61 03       	mov	r0,r1
  30c050:	60 08       	swap.b	r0,r0
  30c052:	c8 08       	tst	#8,r0
  30c054:	8f 0e       	bf.s	30c074 <__fp_fread2+0x40>
  30c056:	7f f4       	add	#-12,r15
  30c058:	e0 40       	mov	#64,r0
  30c05a:	20 1b       	or	r1,r0
  30c05c:	81 4e       	mov.w	r0,@(28,r4)
  30c05e:	e0 ff       	mov	#-1,r0
  30c060:	7f 0c       	add	#12,r15
  30c062:	4f 26       	lds.l	@r15+,pr
  30c064:	6e f6       	mov.l	@r15+,r14
  30c066:	6d f6       	mov.l	@r15+,r13
  30c068:	6c f6       	mov.l	@r15+,r12
  30c06a:	6b f6       	mov.l	@r15+,r11
  30c06c:	6a f6       	mov.l	@r15+,r10
  30c06e:	69 f6       	mov.l	@r15+,r9
  30c070:	00 0b       	rts	
  30c072:	68 f6       	mov.l	@r15+,r8
  30c074:	d1 2d       	mov.l	30c12c <__fp_fread2+0xf8>,r1	! 30be9c <__fp_buffer_mode_read>
  30c076:	e8 00       	mov	#0,r8
  30c078:	41 0b       	jsr	@r1
  30c07a:	6d a7       	not	r10,r13
  30c07c:	4a 11       	cmp/pz	r10
  30c07e:	01 29       	movt	r1
  30c080:	1f 11       	mov.l	r1,@(4,r15)
  30c082:	38 b2       	cmp/hs	r11,r8
  30c084:	8f 02       	bf.s	30c08c <__fp_fread2+0x58>
  30c086:	61 c3       	mov	r12,r1
  30c088:	af ea       	bra	30c060 <__fp_fread2+0x2c>
  30c08a:	60 83       	mov	r8,r0
  30c08c:	d0 28       	mov.l	30c130 <__fp_fread2+0xfc>,r0	! 30bf20 <__fp_buffered_read>
  30c08e:	6e b3       	mov	r11,r14
  30c090:	31 8c       	add	r8,r1
  30c092:	3e 88       	sub	r8,r14
  30c094:	2f 12       	mov.l	r1,@r15
  30c096:	67 a3       	mov	r10,r7
  30c098:	65 13       	mov	r1,r5
  30c09a:	66 e3       	mov	r14,r6
  30c09c:	40 0b       	jsr	@r0
  30c09e:	64 93       	mov	r9,r4
  30c0a0:	52 f1       	mov.l	@(4,r15),r2
  30c0a2:	67 d3       	mov	r13,r7
  30c0a4:	27 09       	and	r0,r7
  30c0a6:	47 11       	cmp/pz	r7
  30c0a8:	61 f2       	mov.l	@r15,r1
  30c0aa:	8d 1a       	bt.s	30c0e2 <__fp_fread2+0xae>
  30c0ac:	63 2c       	extu.b	r2,r3
  30c0ae:	dd 21       	mov.l	30c134 <__fp_fread2+0x100>,r13	! 30bfd8 <__fp_read>
  30c0b0:	6c 13       	mov	r1,r12
  30c0b2:	6b 83       	mov	r8,r11
  30c0b4:	61 b3       	mov	r11,r1
  30c0b6:	31 88       	sub	r8,r1
  30c0b8:	3e 17       	cmp/gt	r1,r14
  30c0ba:	8f 10       	bf.s	30c0de <__fp_fread2+0xaa>
  30c0bc:	65 f3       	mov	r15,r5
  30c0be:	e6 01       	mov	#1,r6
  30c0c0:	75 0b       	add	#11,r5
  30c0c2:	4d 0b       	jsr	@r13
  30c0c4:	64 93       	mov	r9,r4
  30c0c6:	88 01       	cmp/eq	#1,r0
  30c0c8:	8f ca       	bf.s	30c060 <__fp_fread2+0x2c>
  30c0ca:	60 b3       	mov	r11,r0
  30c0cc:	60 f3       	mov	r15,r0
  30c0ce:	70 fc       	add	#-4,r0
  30c0d0:	84 0f       	mov.b	@(15,r0),r0
  30c0d2:	7b 01       	add	#1,r11
  30c0d4:	61 0c       	extu.b	r0,r1
  30c0d6:	2c 00       	mov.b	r0,@r12
  30c0d8:	31 a0       	cmp/eq	r10,r1
  30c0da:	8f eb       	bf.s	30c0b4 <__fp_fread2+0x80>
  30c0dc:	7c 01       	add	#1,r12
  30c0de:	af bf       	bra	30c060 <__fp_fread2+0x2c>
  30c0e0:	60 b3       	mov	r11,r0
  30c0e2:	40 11       	cmp/pz	r0
  30c0e4:	8d 0b       	bt.s	30c0fe <__fp_fread2+0xca>
  30c0e6:	38 0c       	add	r0,r8
  30c0e8:	38 08       	sub	r0,r8
  30c0ea:	d0 12       	mov.l	30c134 <__fp_fread2+0x100>,r0	! 30bfd8 <__fp_read>
  30c0ec:	66 e3       	mov	r14,r6
  30c0ee:	65 13       	mov	r1,r5
  30c0f0:	40 0b       	jsr	@r0
  30c0f2:	64 93       	mov	r9,r4
  30c0f4:	88 ff       	cmp/eq	#-1,r0
  30c0f6:	8b 00       	bf	30c0fa <__fp_fread2+0xc6>
  30c0f8:	e0 00       	mov	#0,r0
  30c0fa:	af b1       	bra	30c060 <__fp_fread2+0x2c>
  30c0fc:	30 8c       	add	r8,r0
  30c0fe:	3b 86       	cmp/hi	r8,r11
  30c100:	8f c2       	bf.s	30c088 <__fp_fread2+0x54>
  30c102:	28 88       	tst	r8,r8
  30c104:	8d 07       	bt.s	30c116 <__fp_fread2+0xe2>
  30c106:	23 38       	tst	r3,r3
  30c108:	8d 05       	bt.s	30c116 <__fp_fread2+0xe2>
  30c10a:	61 c3       	mov	r12,r1
  30c10c:	31 8c       	add	r8,r1
  30c10e:	71 ff       	add	#-1,r1
  30c110:	61 10       	mov.b	@r1,r1
  30c112:	31 a0       	cmp/eq	r10,r1
  30c114:	89 b8       	bt	30c088 <__fp_fread2+0x54>
  30c116:	55 92       	mov.l	@(8,r9),r5
  30c118:	25 58       	tst	r5,r5
  30c11a:	8d b2       	bt.s	30c082 <__fp_fread2+0x4e>
  30c11c:	64 93       	mov	r9,r4
  30c11e:	d0 05       	mov.l	30c134 <__fp_fread2+0x100>,r0	! 30bfd8 <__fp_read>
  30c120:	40 0b       	jsr	@r0
  30c122:	56 95       	mov.l	@(20,r9),r6
  30c124:	40 15       	cmp/pl	r0
  30c126:	8b af       	bf	30c088 <__fp_fread2+0x54>
  30c128:	af ab       	bra	30c082 <__fp_fread2+0x4e>
  30c12a:	19 04       	mov.l	r0,@(16,r9)
  30c12c:	00 30       	.word 0x0030
  30c12e:	be 9c       	bsr	30be6a <__fp_set_buffer+0x12>
  30c130:	00 30       	.word 0x0030
  30c132:	bf 20       	bsr	30bf76 <__fp_buffered_read+0x56>
  30c134:	00 30       	.word 0x0030
  30c136:	bf d8       	bsr	30c0ea <__fp_fread2+0xb6>

0030c138 <__fp_write>:
  30c138:	2f 86       	mov.l	r8,@-r15
  30c13a:	e8 00       	mov	#0,r8
  30c13c:	2f 96       	mov.l	r9,@-r15
  30c13e:	69 43       	mov	r4,r9
  30c140:	2f a6       	mov.l	r10,@-r15
  30c142:	6a 63       	mov	r6,r10
  30c144:	2f b6       	mov.l	r11,@-r15
  30c146:	6b 53       	mov	r5,r11
  30c148:	2f c6       	mov.l	r12,@-r15
  30c14a:	dc 10       	mov.l	30c18c <__fp_write+0x54>,r12	! 30cea0 <write>
  30c14c:	4f 22       	sts.l	pr,@-r15
  30c14e:	38 a2       	cmp/hs	r10,r8
  30c150:	8d 14       	bt.s	30c17c <__fp_write+0x44>
  30c152:	66 a3       	mov	r10,r6
  30c154:	65 b3       	mov	r11,r5
  30c156:	64 92       	mov.l	@r9,r4
  30c158:	36 88       	sub	r8,r6
  30c15a:	4c 0b       	jsr	@r12
  30c15c:	35 8c       	add	r8,r5
  30c15e:	40 11       	cmp/pz	r0
  30c160:	8d 0b       	bt.s	30c17a <__fp_write+0x42>
  30c162:	20 08       	tst	r0,r0
  30c164:	85 9e       	mov.w	@(28,r9),r0
  30c166:	cb 40       	or	#64,r0
  30c168:	81 9e       	mov.w	r0,@(28,r9)
  30c16a:	e0 ff       	mov	#-1,r0
  30c16c:	4f 26       	lds.l	@r15+,pr
  30c16e:	6c f6       	mov.l	@r15+,r12
  30c170:	6b f6       	mov.l	@r15+,r11
  30c172:	6a f6       	mov.l	@r15+,r10
  30c174:	69 f6       	mov.l	@r15+,r9
  30c176:	00 0b       	rts	
  30c178:	68 f6       	mov.l	@r15+,r8
  30c17a:	8b 01       	bf	30c180 <__fp_write+0x48>
  30c17c:	af f6       	bra	30c16c <__fp_write+0x34>
  30c17e:	60 83       	mov	r8,r0
  30c180:	51 91       	mov.l	@(4,r9),r1
  30c182:	38 0c       	add	r0,r8
  30c184:	31 0c       	add	r0,r1
  30c186:	af e2       	bra	30c14e <__fp_write+0x16>
  30c188:	19 11       	mov.l	r1,@(4,r9)
  30c18a:	00 09       	nop	
  30c18c:	00 30       	.word 0x0030
  30c18e:	ce a0       	xor.b	#160,@(r0,gbr)

0030c190 <__fp_parse_mode>:
  30c190:	e2 00       	mov	#0,r2
  30c192:	e6 00       	mov	#0,r6
  30c194:	e3 00       	mov	#0,r3
  30c196:	e1 62       	mov	#98,r1
  30c198:	60 44       	mov.b	@r4+,r0
  30c19a:	20 08       	tst	r0,r0
  30c19c:	8f 26       	bf.s	30c1ec <__fp_parse_mode+0x5c>
  30c19e:	88 62       	cmp/eq	#98,r0
  30c1a0:	23 38       	tst	r3,r3
  30c1a2:	8d 3e       	bt.s	30c222 <__fp_parse_mode+0x92>
  30c1a4:	25 58       	tst	r5,r5
  30c1a6:	8d 1a       	bt.s	30c1de <__fp_parse_mode+0x4e>
  30c1a8:	60 33       	mov	r3,r0
  30c1aa:	88 61       	cmp/eq	#97,r0
  30c1ac:	04 29       	movt	r4
  30c1ae:	88 77       	cmp/eq	#119,r0
  30c1b0:	01 29       	movt	r1
  30c1b2:	88 72       	cmp/eq	#114,r0
  30c1b4:	07 29       	movt	r7
  30c1b6:	21 4b       	or	r4,r1
  30c1b8:	27 2b       	or	r2,r7
  30c1ba:	21 2b       	or	r2,r1
  30c1bc:	47 08       	shll2	r7
  30c1be:	37 7c       	add	r7,r7
  30c1c0:	41 08       	shll2	r1
  30c1c2:	21 7b       	or	r7,r1
  30c1c4:	34 4c       	add	r4,r4
  30c1c6:	60 63       	mov	r6,r0
  30c1c8:	75 10       	add	#16,r5
  30c1ca:	ca 01       	xor	#1,r0
  30c1cc:	21 4b       	or	r4,r1
  30c1ce:	21 0b       	or	r0,r1
  30c1d0:	e7 0f       	mov	#15,r7
  30c1d2:	84 5c       	mov.b	@(12,r5),r0
  30c1d4:	21 79       	and	r7,r1
  30c1d6:	e7 f0       	mov	#-16,r7
  30c1d8:	20 79       	and	r7,r0
  30c1da:	20 1b       	or	r1,r0
  30c1dc:	80 5c       	mov.b	r0,@(12,r5)
  30c1de:	60 33       	mov	r3,r0
  30c1e0:	88 72       	cmp/eq	#114,r0
  30c1e2:	8f 18       	bf.s	30c216 <__fp_parse_mode+0x86>
  30c1e4:	88 77       	cmp/eq	#119,r0
  30c1e6:	32 2c       	add	r2,r2
  30c1e8:	00 0b       	rts	
  30c1ea:	60 23       	mov	r2,r0
  30c1ec:	8d 0f       	bt.s	30c20e <__fp_parse_mode+0x7e>
  30c1ee:	30 17       	cmp/gt	r1,r0
  30c1f0:	8d 08       	bt.s	30c204 <__fp_parse_mode+0x74>
  30c1f2:	88 2b       	cmp/eq	#43,r0
  30c1f4:	8d 0d       	bt.s	30c212 <__fp_parse_mode+0x82>
  30c1f6:	88 61       	cmp/eq	#97,r0
  30c1f8:	8b ce       	bf	30c198 <__fp_parse_mode+0x8>
  30c1fa:	23 38       	tst	r3,r3
  30c1fc:	8f 11       	bf.s	30c222 <__fp_parse_mode+0x92>
  30c1fe:	63 03       	mov	r0,r3
  30c200:	af cb       	bra	30c19a <__fp_parse_mode+0xa>
  30c202:	60 44       	mov.b	@r4+,r0
  30c204:	88 72       	cmp/eq	#114,r0
  30c206:	8d f8       	bt.s	30c1fa <__fp_parse_mode+0x6a>
  30c208:	88 77       	cmp/eq	#119,r0
  30c20a:	af f5       	bra	30c1f8 <__fp_parse_mode+0x68>
  30c20c:	00 09       	nop	
  30c20e:	af c3       	bra	30c198 <__fp_parse_mode+0x8>
  30c210:	e6 01       	mov	#1,r6
  30c212:	af c1       	bra	30c198 <__fp_parse_mode+0x8>
  30c214:	e2 01       	mov	#1,r2
  30c216:	8f 02       	bf.s	30c21e <__fp_parse_mode+0x8e>
  30c218:	88 61       	cmp/eq	#97,r0
  30c21a:	af e5       	bra	30c1e8 <__fp_parse_mode+0x58>
  30c21c:	72 25       	add	#37,r2
  30c21e:	8d e3       	bt.s	30c1e8 <__fp_parse_mode+0x58>
  30c220:	72 05       	add	#5,r2
  30c222:	d1 02       	mov.l	30c22c <__fp_parse_mode+0x9c>,r1	! 81015d0 <errno>
  30c224:	e2 06       	mov	#6,r2
  30c226:	21 22       	mov.l	r2,@r1
  30c228:	af de       	bra	30c1e8 <__fp_parse_mode+0x58>
  30c22a:	e2 ff       	mov	#-1,r2
  30c22c:	08 10       	.word 0x0810
  30c22e:	15 d0       	mov.l	r13,@(0,r5)

0030c230 <fseek>:
  30c230:	2f 86       	mov.l	r8,@-r15
  30c232:	68 43       	mov	r4,r8
  30c234:	2f 96       	mov.l	r9,@-r15
  30c236:	69 53       	mov	r5,r9
  30c238:	d0 0d       	mov.l	30c270 <fseek+0x40>,r0	! 30c3b0 <fflush>
  30c23a:	2f a6       	mov.l	r10,@-r15
  30c23c:	4f 22       	sts.l	pr,@-r15
  30c23e:	40 0b       	jsr	@r0
  30c240:	6a 63       	mov	r6,r10
  30c242:	88 ff       	cmp/eq	#-1,r0
  30c244:	8f 06       	bf.s	30c254 <fseek+0x24>
  30c246:	66 a3       	mov	r10,r6
  30c248:	e0 ff       	mov	#-1,r0
  30c24a:	4f 26       	lds.l	@r15+,pr
  30c24c:	6a f6       	mov.l	@r15+,r10
  30c24e:	69 f6       	mov.l	@r15+,r9
  30c250:	00 0b       	rts	
  30c252:	68 f6       	mov.l	@r15+,r8
  30c254:	d0 07       	mov.l	30c274 <fseek+0x44>,r0	! 30cd40 <lseek>
  30c256:	64 82       	mov.l	@r8,r4
  30c258:	40 0b       	jsr	@r0
  30c25a:	65 93       	mov	r9,r5
  30c25c:	40 11       	cmp/pz	r0
  30c25e:	8b f3       	bf	30c248 <fseek+0x18>
  30c260:	91 05       	mov.w	30c26e <fseek+0x3e>,r1	! ff7f
  30c262:	18 01       	mov.l	r0,@(4,r8)
  30c264:	85 8e       	mov.w	@(28,r8),r0
  30c266:	20 19       	and	r1,r0
  30c268:	81 8e       	mov.w	r0,@(28,r8)
  30c26a:	af ee       	bra	30c24a <fseek+0x1a>
  30c26c:	e0 00       	mov	#0,r0
  30c26e:	ff 7f       	.word 0xff7f
  30c270:	00 30       	.word 0x0030
  30c272:	c3 b0       	trapa	#176
  30c274:	00 30       	.word 0x0030
  30c276:	cd 40       	and.b	#64,@(r0,gbr)

0030c278 <setvbuf>:
  30c278:	2f 86       	mov.l	r8,@-r15
  30c27a:	68 43       	mov	r4,r8
  30c27c:	2f 96       	mov.l	r9,@-r15
  30c27e:	69 63       	mov	r6,r9
  30c280:	2f a6       	mov.l	r10,@-r15
  30c282:	6a 53       	mov	r5,r10
  30c284:	2f b6       	mov.l	r11,@-r15
  30c286:	2f c6       	mov.l	r12,@-r15
  30c288:	4f 22       	sts.l	pr,@-r15
  30c28a:	d1 19       	mov.l	30c2f0 <setvbuf+0x78>,r1	! c000
  30c28c:	85 4e       	mov.w	@(28,r4),r0
  30c28e:	20 19       	and	r1,r0
  30c290:	d1 18       	mov.l	30c2f4 <setvbuf+0x7c>,r1	! 8000
  30c292:	30 10       	cmp/eq	r1,r0
  30c294:	8f 03       	bf.s	30c29e <setvbuf+0x26>
  30c296:	6b 73       	mov	r7,r11
  30c298:	51 42       	mov.l	@(8,r4),r1
  30c29a:	21 18       	tst	r1,r1
  30c29c:	89 02       	bt	30c2a4 <setvbuf+0x2c>
  30c29e:	d0 16       	mov.l	30c2f8 <setvbuf+0x80>,r0	! 30c3b0 <fflush>
  30c2a0:	40 0b       	jsr	@r0
  30c2a2:	64 83       	mov	r8,r4
  30c2a4:	d1 15       	mov.l	30c2fc <setvbuf+0x84>,r1	! 30be28 <__fp_remove_buffer>
  30c2a6:	9c 20       	mov.w	30c2ea <setvbuf+0x72>,r12	! 3fff
  30c2a8:	41 0b       	jsr	@r1
  30c2aa:	64 83       	mov	r8,r4
  30c2ac:	85 8e       	mov.w	@(28,r8),r0
  30c2ae:	91 1d       	mov.w	30c2ec <setvbuf+0x74>,r1	! 8000
  30c2b0:	20 c9       	and	r12,r0
  30c2b2:	20 1b       	or	r1,r0
  30c2b4:	81 8e       	mov.w	r0,@(28,r8)
  30c2b6:	60 93       	mov	r9,r0
  30c2b8:	88 02       	cmp/eq	#2,r0
  30c2ba:	8d 0f       	bt.s	30c2dc <setvbuf+0x64>
  30c2bc:	e0 00       	mov	#0,r0
  30c2be:	d0 10       	mov.l	30c300 <setvbuf+0x88>,r0	! 30be58 <__fp_set_buffer>
  30c2c0:	66 b3       	mov	r11,r6
  30c2c2:	65 a3       	mov	r10,r5
  30c2c4:	40 0b       	jsr	@r0
  30c2c6:	64 83       	mov	r8,r4
  30c2c8:	20 08       	tst	r0,r0
  30c2ca:	8d 07       	bt.s	30c2dc <setvbuf+0x64>
  30c2cc:	e0 ff       	mov	#-1,r0
  30c2ce:	85 8e       	mov.w	@(28,r8),r0
  30c2d0:	49 28       	shll16	r9
  30c2d2:	49 09       	shlr2	r9
  30c2d4:	20 c9       	and	r12,r0
  30c2d6:	20 9b       	or	r9,r0
  30c2d8:	81 8e       	mov.w	r0,@(28,r8)
  30c2da:	e0 00       	mov	#0,r0
  30c2dc:	4f 26       	lds.l	@r15+,pr
  30c2de:	6c f6       	mov.l	@r15+,r12
  30c2e0:	6b f6       	mov.l	@r15+,r11
  30c2e2:	6a f6       	mov.l	@r15+,r10
  30c2e4:	69 f6       	mov.l	@r15+,r9
  30c2e6:	00 0b       	rts	
  30c2e8:	68 f6       	mov.l	@r15+,r8
  30c2ea:	3f ff       	addv	r15,r15
  30c2ec:	80 00       	mov.b	r0,@(0,r0)
  30c2ee:	00 09       	nop	
  30c2f0:	00 00       	.word 0x0000
  30c2f2:	c0 00       	mov.b	r0,@(0,gbr)
  30c2f4:	00 00       	.word 0x0000
  30c2f6:	80 00       	mov.b	r0,@(0,r0)
  30c2f8:	00 30       	.word 0x0030
  30c2fa:	c3 b0       	trapa	#176
  30c2fc:	00 30       	.word 0x0030
  30c2fe:	be 28       	bsr	30bf52 <__fp_buffered_read+0x32>
  30c300:	00 30       	.word 0x0030
  30c302:	be 58       	bsr	30bfb6 <__fp_buffered_read+0x96>
	...

0030c310 <memchr>:
  30c310:	61 43       	mov	r4,r1
  30c312:	65 5e       	exts.b	r5,r5
  30c314:	e2 40       	mov	#64,r2
  30c316:	32 66       	cmp/hi	r6,r2
  30c318:	89 31       	bt	30c37e <.naive>
  30c31a:	63 5c       	extu.b	r5,r3
  30c31c:	62 38       	swap.b	r3,r2
  30c31e:	22 3b       	or	r3,r2
  30c320:	63 29       	swap.w	r2,r3
  30c322:	22 3b       	or	r3,r2
  30c324:	d0 1e       	mov.l	30c3a0 <.___cpucap>,r0	! 81015c4 <__cpucap>
  30c326:	60 02       	mov.l	@r0,r0
  30c328:	c8 01       	tst	#1,r0
  30c32a:	8b 17       	bf	30c35c <.sh4aldsp>

0030c32c <.sh3>:
  30c32c:	60 14       	mov.b	@r1+,r0
  30c32e:	35 00       	cmp/eq	r0,r5
  30c330:	89 31       	bt	30c396 <.end>
  30c332:	60 14       	mov.b	@r1+,r0
  30c334:	35 00       	cmp/eq	r0,r5
  30c336:	89 2e       	bt	30c396 <.end>
  30c338:	60 14       	mov.b	@r1+,r0
  30c33a:	35 00       	cmp/eq	r0,r5
  30c33c:	89 2b       	bt	30c396 <.end>
  30c33e:	41 09       	shlr2	r1
  30c340:	41 08       	shll2	r1
  30c342:	36 4c       	add	r4,r6
  30c344:	36 18       	sub	r1,r6
  30c346:	67 63       	mov	r6,r7
  30c348:	47 09       	shlr2	r7
  30c34a:	e3 03       	mov	#3,r3
  30c34c:	26 39       	and	r3,r6
  30c34e:	60 16       	mov.l	@r1+,r0
  30c350:	22 0c       	cmp/str	r0,r2
  30c352:	89 1d       	bt	30c390 <.found>
  30c354:	47 10       	dt	r7
  30c356:	8b fa       	bf	30c34e <.sh3+0x22>
  30c358:	a0 11       	bra	30c37e <.naive>
  30c35a:	00 09       	nop	

0030c35c <.sh4aldsp>:
  30c35c:	41 e9       	movua.l	@r1+,r0
  30c35e:	22 0c       	cmp/str	r0,r2
  30c360:	89 16       	bt	30c390 <.found>
  30c362:	41 09       	shlr2	r1
  30c364:	41 08       	shll2	r1
  30c366:	36 4c       	add	r4,r6
  30c368:	36 18       	sub	r1,r6
  30c36a:	67 63       	mov	r6,r7
  30c36c:	47 09       	shlr2	r7
  30c36e:	8c 03       	ldrs	30c378 <.sh4aldsp+0x1c>	! 6016
  30c370:	8e 04       	ldre	30c37c <.sh4aldsp+0x20>	! 8908
  30c372:	47 34       	ldrc	r7
  30c374:	e3 03       	mov	#3,r3
  30c376:	26 39       	and	r3,r6
  30c378:	60 16       	mov.l	@r1+,r0
  30c37a:	22 0c       	cmp/str	r0,r2
  30c37c:	89 08       	bt	30c390 <.found>

0030c37e <.naive>:
  30c37e:	26 68       	tst	r6,r6
  30c380:	89 04       	bt	30c38c <.none>
  30c382:	60 14       	mov.b	@r1+,r0
  30c384:	35 00       	cmp/eq	r0,r5
  30c386:	89 06       	bt	30c396 <.end>
  30c388:	46 10       	dt	r6
  30c38a:	8b fa       	bf	30c382 <.naive+0x4>

0030c38c <.none>:
  30c38c:	00 0b       	rts	
  30c38e:	e0 00       	mov	#0,r0

0030c390 <.found>:
  30c390:	71 fc       	add	#-4,r1
  30c392:	af f6       	bra	30c382 <.naive+0x4>
  30c394:	e6 04       	mov	#4,r6

0030c396 <.end>:
  30c396:	60 13       	mov	r1,r0
  30c398:	00 0b       	rts	
  30c39a:	70 ff       	add	#-1,r0
  30c39c:	00 09       	nop	
  30c39e:	00 09       	nop	

0030c3a0 <.___cpucap>:
  30c3a0:	08 10       	.word 0x0810
  30c3a2:	15 c4       	mov.l	r12,@(16,r5)
  30c3a4:	00 09       	nop	
  30c3a6:	00 09       	nop	
  30c3a8:	00 09       	nop	
  30c3aa:	00 09       	nop	
  30c3ac:	00 09       	nop	
  30c3ae:	00 09       	nop	

0030c3b0 <fflush>:
  30c3b0:	2f 86       	mov.l	r8,@-r15
  30c3b2:	24 48       	tst	r4,r4
  30c3b4:	2f 96       	mov.l	r9,@-r15
  30c3b6:	68 43       	mov	r4,r8
  30c3b8:	8f 09       	bf.s	30c3ce <fflush+0x1e>
  30c3ba:	4f 22       	sts.l	pr,@-r15
  30c3bc:	d1 1b       	mov.l	30c42c <fflush+0x7c>,r1	! 81015d0 <errno>
  30c3be:	e2 06       	mov	#6,r2
  30c3c0:	e9 ff       	mov	#-1,r9
  30c3c2:	21 22       	mov.l	r2,@r1
  30c3c4:	60 93       	mov	r9,r0
  30c3c6:	4f 26       	lds.l	@r15+,pr
  30c3c8:	69 f6       	mov.l	@r15+,r9
  30c3ca:	00 0b       	rts	
  30c3cc:	68 f6       	mov.l	@r15+,r8
  30c3ce:	55 42       	mov.l	@(8,r4),r5
  30c3d0:	25 58       	tst	r5,r5
  30c3d2:	8d f7       	bt.s	30c3c4 <fflush+0x14>
  30c3d4:	e9 00       	mov	#0,r9
  30c3d6:	85 4e       	mov.w	@(28,r4),r0
  30c3d8:	60 08       	swap.b	r0,r0
  30c3da:	c8 10       	tst	#16,r0
  30c3dc:	8f 1b       	bf.s	30c416 <fflush+0x66>
  30c3de:	56 43       	mov.l	@(12,r4),r6
  30c3e0:	51 44       	mov.l	@(16,r4),r1
  30c3e2:	31 66       	cmp/hi	r6,r1
  30c3e4:	8b 08       	bf	30c3f8 <fflush+0x48>
  30c3e6:	52 41       	mov.l	@(4,r4),r2
  30c3e8:	d0 11       	mov.l	30c430 <fflush+0x80>,r0	! 30cd40 <lseek>
  30c3ea:	36 2c       	add	r2,r6
  30c3ec:	65 63       	mov	r6,r5
  30c3ee:	35 18       	sub	r1,r5
  30c3f0:	14 51       	mov.l	r5,@(4,r4)
  30c3f2:	e6 03       	mov	#3,r6
  30c3f4:	40 0b       	jsr	@r0
  30c3f6:	64 42       	mov.l	@r4,r4
  30c3f8:	e1 00       	mov	#0,r1
  30c3fa:	18 13       	mov.l	r1,@(12,r8)
  30c3fc:	18 14       	mov.l	r1,@(16,r8)
  30c3fe:	18 16       	mov.l	r1,@(24,r8)
  30c400:	d1 0c       	mov.l	30c434 <fflush+0x84>,r1	! c000
  30c402:	85 8e       	mov.w	@(28,r8),r0
  30c404:	20 19       	and	r1,r0
  30c406:	d1 0c       	mov.l	30c438 <fflush+0x88>,r1	! 8000
  30c408:	30 10       	cmp/eq	r1,r0
  30c40a:	8b db       	bf	30c3c4 <fflush+0x14>
  30c40c:	d1 0b       	mov.l	30c43c <fflush+0x8c>,r1	! 30be28 <__fp_remove_buffer>
  30c40e:	41 0b       	jsr	@r1
  30c410:	64 83       	mov	r8,r4
  30c412:	af d8       	bra	30c3c6 <fflush+0x16>
  30c414:	60 93       	mov	r9,r0
  30c416:	26 68       	tst	r6,r6
  30c418:	8d ee       	bt.s	30c3f8 <fflush+0x48>
  30c41a:	e9 00       	mov	#0,r9
  30c41c:	d0 08       	mov.l	30c440 <fflush+0x90>,r0	! 30c138 <__fp_write>
  30c41e:	40 0b       	jsr	@r0
  30c420:	00 09       	nop	
  30c422:	51 83       	mov.l	@(12,r8),r1
  30c424:	31 00       	cmp/eq	r0,r1
  30c426:	39 9a       	subc	r9,r9
  30c428:	af e6       	bra	30c3f8 <fflush+0x48>
  30c42a:	69 97       	not	r9,r9
  30c42c:	08 10       	.word 0x0810
  30c42e:	15 d0       	mov.l	r13,@(0,r5)
  30c430:	00 30       	.word 0x0030
  30c432:	cd 40       	and.b	#64,@(r0,gbr)
  30c434:	00 00       	.word 0x0000
  30c436:	c0 00       	mov.b	r0,@(0,gbr)
  30c438:	00 00       	.word 0x0000
  30c43a:	80 00       	mov.b	r0,@(0,r0)
  30c43c:	00 30       	.word 0x0030
  30c43e:	be 28       	bsr	30c092 <__fp_fread2+0x5e>
  30c440:	00 30       	.word 0x0030
  30c442:	c1 38       	mov.w	r0,@(112,gbr)

0030c444 <__movmem>:
  30c444:	4f 22       	sts.l	pr,@-r15
  30c446:	46 08       	shll2	r6
  30c448:	b0 1d       	bsr	30c486 <__movmemSI52+0x2>
  30c44a:	50 5c       	mov.l	@(48,r5),r0
  30c44c:	50 5f       	mov.l	@(60,r5),r0
  30c44e:	76 c0       	add	#-64,r6
  30c450:	14 0f       	mov.l	r0,@(60,r4)
  30c452:	26 68       	tst	r6,r6
  30c454:	50 5e       	mov.l	@(56,r5),r0
  30c456:	89 09       	bt	30c46c <__movmem+0x28>
  30c458:	14 0e       	mov.l	r0,@(56,r4)
  30c45a:	46 15       	cmp/pl	r6
  30c45c:	50 5d       	mov.l	@(52,r5),r0
  30c45e:	75 40       	add	#64,r5
  30c460:	14 0d       	mov.l	r0,@(52,r4)
  30c462:	74 40       	add	#64,r4
  30c464:	89 0e       	bt	30c484 <__movmemSI52>
  30c466:	c7 14       	mova	30c4b8 <__movmemSI4+0x4>,r0
  30c468:	30 6c       	add	r6,r0
  30c46a:	40 2b       	jmp	@r0
  30c46c:	4f 26       	lds.l	@r15+,pr
  30c46e:	14 0e       	mov.l	r0,@(56,r4)
  30c470:	50 5d       	mov.l	@(52,r5),r0
  30c472:	00 0b       	rts	
  30c474:	14 0d       	mov.l	r0,@(52,r4)
  30c476:	00 09       	nop	

0030c478 <__movmemSI64>:
  30c478:	50 5f       	mov.l	@(60,r5),r0
  30c47a:	14 0f       	mov.l	r0,@(60,r4)

0030c47c <__movmemSI60>:
  30c47c:	50 5e       	mov.l	@(56,r5),r0
  30c47e:	14 0e       	mov.l	r0,@(56,r4)

0030c480 <__movmemSI56>:
  30c480:	50 5d       	mov.l	@(52,r5),r0
  30c482:	14 0d       	mov.l	r0,@(52,r4)

0030c484 <__movmemSI52>:
  30c484:	50 5c       	mov.l	@(48,r5),r0
  30c486:	14 0c       	mov.l	r0,@(48,r4)

0030c488 <__movmemSI48>:
  30c488:	50 5b       	mov.l	@(44,r5),r0
  30c48a:	14 0b       	mov.l	r0,@(44,r4)

0030c48c <__movmemSI44>:
  30c48c:	50 5a       	mov.l	@(40,r5),r0
  30c48e:	14 0a       	mov.l	r0,@(40,r4)

0030c490 <__movmemSI40>:
  30c490:	50 59       	mov.l	@(36,r5),r0
  30c492:	14 09       	mov.l	r0,@(36,r4)

0030c494 <__movmemSI36>:
  30c494:	50 58       	mov.l	@(32,r5),r0
  30c496:	14 08       	mov.l	r0,@(32,r4)

0030c498 <__movmemSI32>:
  30c498:	50 57       	mov.l	@(28,r5),r0
  30c49a:	14 07       	mov.l	r0,@(28,r4)

0030c49c <__movmemSI28>:
  30c49c:	50 56       	mov.l	@(24,r5),r0
  30c49e:	14 06       	mov.l	r0,@(24,r4)

0030c4a0 <__movmemSI24>:
  30c4a0:	50 55       	mov.l	@(20,r5),r0
  30c4a2:	14 05       	mov.l	r0,@(20,r4)

0030c4a4 <__movmemSI20>:
  30c4a4:	50 54       	mov.l	@(16,r5),r0
  30c4a6:	14 04       	mov.l	r0,@(16,r4)

0030c4a8 <__movmemSI16>:
  30c4a8:	50 53       	mov.l	@(12,r5),r0
  30c4aa:	14 03       	mov.l	r0,@(12,r4)

0030c4ac <__movmemSI12>:
  30c4ac:	50 52       	mov.l	@(8,r5),r0
  30c4ae:	14 02       	mov.l	r0,@(8,r4)

0030c4b0 <__movmemSI8>:
  30c4b0:	50 51       	mov.l	@(4,r5),r0
  30c4b2:	14 01       	mov.l	r0,@(4,r4)

0030c4b4 <__movmemSI4>:
  30c4b4:	50 50       	mov.l	@(0,r5),r0
  30c4b6:	00 0b       	rts	
  30c4b8:	14 00       	mov.l	r0,@(0,r4)
  30c4ba:	00 09       	nop	

0030c4bc <__udivdi3>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  30c4bc:	2f 86       	mov.l	r8,@-r15
  30c4be:	2f 96       	mov.l	r9,@-r15
  30c4c0:	2f a6       	mov.l	r10,@-r15
  30c4c2:	2f b6       	mov.l	r11,@-r15
  30c4c4:	4f 22       	sts.l	pr,@-r15
  if (d1 == 0)
  30c4c6:	26 68       	tst	r6,r6
{
  30c4c8:	62 43       	mov	r4,r2
  if (d1 == 0)
  30c4ca:	8f 35       	bf.s	30c538 <__udivdi3+0x7c>
  30c4cc:	68 53       	mov	r5,r8
      if (d0 > n1)
  30c4ce:	37 46       	cmp/hi	r4,r7
  30c4d0:	8f 3d       	bf.s	30c54e <__udivdi3+0x92>
  30c4d2:	63 53       	mov	r5,r3
	  count_leading_zeros (bm, d0);
  30c4d4:	d1 77       	mov.l	30c6b4 <__udivdi3+0x1f8>,r1	! ffff
  30c4d6:	37 16       	cmp/hi	r1,r7
  30c4d8:	8d 02       	bt.s	30c4e0 <__udivdi3+0x24>
  30c4da:	65 43       	mov	r4,r5
  30c4dc:	a0 df       	bra	30c69e <__udivdi3+0x1e2>
  30c4de:	00 09       	nop	
  30c4e0:	d1 75       	mov.l	30c6b8 <__udivdi3+0x1fc>,r1	! ffffff
  30c4e2:	37 16       	cmp/hi	r1,r7
  30c4e4:	8f 01       	bf.s	30c4ea <__udivdi3+0x2e>
  30c4e6:	e1 10       	mov	#16,r1
  30c4e8:	e1 18       	mov	#24,r1
  30c4ea:	66 1b       	neg	r1,r6
  30c4ec:	60 73       	mov	r7,r0
  30c4ee:	40 6d       	shld	r6,r0
  30c4f0:	d6 72       	mov.l	30c6bc <__udivdi3+0x200>,r6	! 30e8dc <__clz_tab>
  30c4f2:	00 6c       	mov.b	@(r0,r6),r0
  30c4f4:	60 0c       	extu.b	r0,r0
  30c4f6:	30 1c       	add	r1,r0
  30c4f8:	60 0b       	neg	r0,r0
  30c4fa:	61 03       	mov	r0,r1
	  if (bm != 0)
  30c4fc:	88 e0       	cmp/eq	#-32,r0
  30c4fe:	8d 07       	bt.s	30c510 <__udivdi3+0x54>
  30c500:	71 20       	add	#32,r1
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
  30c502:	65 83       	mov	r8,r5
  30c504:	42 1d       	shld	r1,r2
  30c506:	45 0d       	shld	r0,r5
	      n0 = n0 << bm;
  30c508:	63 83       	mov	r8,r3
	      d0 = d0 << bm;
  30c50a:	47 1d       	shld	r1,r7
	      n0 = n0 << bm;
  30c50c:	43 1d       	shld	r1,r3
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
  30c50e:	25 2b       	or	r2,r5
	  udiv_qrnnd (q0, n0, n1, n0, d0);
  30c510:	d8 6b       	mov.l	30c6c0 <__udivdi3+0x204>,r8	! 30c980 <__udiv_qrnnd_16>
  30c512:	60 53       	mov	r5,r0
  30c514:	65 73       	mov	r7,r5
  30c516:	64 39       	swap.w	r3,r4
  30c518:	66 59       	swap.w	r5,r6
  30c51a:	48 0b       	jsr	@r8
  30c51c:	46 28       	shll16	r6
  30c51e:	64 49       	swap.w	r4,r4
  30c520:	48 0b       	jsr	@r8
  30c522:	63 19       	swap.w	r1,r3
  30c524:	23 1b       	or	r1,r3
	  q1 = 0;
  30c526:	e8 00       	mov	#0,r8
  const DWunion ww = {{.low = q0, .high = q1}};
  30c528:	61 33       	mov	r3,r1
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
  30c52a:	60 83       	mov	r8,r0
  30c52c:	4f 26       	lds.l	@r15+,pr
  30c52e:	6b f6       	mov.l	@r15+,r11
  30c530:	6a f6       	mov.l	@r15+,r10
  30c532:	69 f6       	mov.l	@r15+,r9
  30c534:	00 0b       	rts	
  30c536:	68 f6       	mov.l	@r15+,r8
      if (d1 > n1)
  30c538:	36 46       	cmp/hi	r4,r6
  30c53a:	8b 3a       	bf	30c5b2 <__udivdi3+0xf6>
  30c53c:	e1 00       	mov	#0,r1
  30c53e:	e8 00       	mov	#0,r8
}
  30c540:	60 83       	mov	r8,r0
  30c542:	4f 26       	lds.l	@r15+,pr
  30c544:	6b f6       	mov.l	@r15+,r11
  30c546:	6a f6       	mov.l	@r15+,r10
  30c548:	69 f6       	mov.l	@r15+,r9
  30c54a:	00 0b       	rts	
  30c54c:	68 f6       	mov.l	@r15+,r8
	  if (d0 == 0)
  30c54e:	27 78       	tst	r7,r7
  30c550:	8f 04       	bf.s	30c55c <__udivdi3+0xa0>
  30c552:	e4 01       	mov	#1,r4
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
  30c554:	d7 5b       	mov.l	30c6c4 <__udivdi3+0x208>,r7	! 30c936 <__udivsi3>
  30c556:	47 0b       	jsr	@r7
  30c558:	e5 00       	mov	#0,r5
  30c55a:	67 03       	mov	r0,r7
	  count_leading_zeros (bm, d0);
  30c55c:	d1 55       	mov.l	30c6b4 <__udivdi3+0x1f8>,r1	! ffff
  30c55e:	37 16       	cmp/hi	r1,r7
  30c560:	8f 43       	bf.s	30c5ea <__udivdi3+0x12e>
  30c562:	60 73       	mov	r7,r0
  30c564:	d1 54       	mov.l	30c6b8 <__udivdi3+0x1fc>,r1	! ffffff
  30c566:	37 16       	cmp/hi	r1,r7
  30c568:	8f 01       	bf.s	30c56e <__udivdi3+0xb2>
  30c56a:	e1 10       	mov	#16,r1
  30c56c:	e1 18       	mov	#24,r1
  30c56e:	66 1b       	neg	r1,r6
  30c570:	60 73       	mov	r7,r0
  30c572:	40 6d       	shld	r6,r0
  30c574:	d6 51       	mov.l	30c6bc <__udivdi3+0x200>,r6	! 30e8dc <__clz_tab>
  30c576:	00 6c       	mov.b	@(r0,r6),r0
  30c578:	60 0c       	extu.b	r0,r0
  30c57a:	30 1c       	add	r1,r0
  30c57c:	60 0b       	neg	r0,r0
  30c57e:	66 03       	mov	r0,r6
	  if (bm == 0)
  30c580:	88 e0       	cmp/eq	#-32,r0
  30c582:	8f 42       	bf.s	30c60a <__udivdi3+0x14e>
  30c584:	76 20       	add	#32,r6
	      n1 -= d0;
  30c586:	da 4e       	mov.l	30c6c0 <__udivdi3+0x204>,r10	! 30c980 <__udiv_qrnnd_16>
  30c588:	61 23       	mov	r2,r1
  30c58a:	31 78       	sub	r7,r1
	      q1 = 1;
  30c58c:	e8 01       	mov	#1,r8
	  udiv_qrnnd (q0, n0, n1, n0, d0);
  30c58e:	60 13       	mov	r1,r0
  30c590:	65 73       	mov	r7,r5
  30c592:	64 39       	swap.w	r3,r4
  30c594:	66 59       	swap.w	r5,r6
  30c596:	4a 0b       	jsr	@r10
  30c598:	46 28       	shll16	r6
  30c59a:	64 49       	swap.w	r4,r4
  30c59c:	4a 0b       	jsr	@r10
  30c59e:	63 19       	swap.w	r1,r3
  30c5a0:	23 1b       	or	r1,r3
}
  30c5a2:	60 83       	mov	r8,r0
  const DWunion ww = {{.low = q0, .high = q1}};
  30c5a4:	61 33       	mov	r3,r1
}
  30c5a6:	4f 26       	lds.l	@r15+,pr
  30c5a8:	6b f6       	mov.l	@r15+,r11
  30c5aa:	6a f6       	mov.l	@r15+,r10
  30c5ac:	69 f6       	mov.l	@r15+,r9
  30c5ae:	00 0b       	rts	
  30c5b0:	68 f6       	mov.l	@r15+,r8
	  count_leading_zeros (bm, d1);
  30c5b2:	d1 40       	mov.l	30c6b4 <__udivdi3+0x1f8>,r1	! ffff
  30c5b4:	36 16       	cmp/hi	r1,r6
  30c5b6:	8f 3e       	bf.s	30c636 <__udivdi3+0x17a>
  30c5b8:	60 63       	mov	r6,r0
  30c5ba:	d1 3f       	mov.l	30c6b8 <__udivdi3+0x1fc>,r1	! ffffff
  30c5bc:	36 16       	cmp/hi	r1,r6
  30c5be:	8f 01       	bf.s	30c5c4 <__udivdi3+0x108>
  30c5c0:	e1 10       	mov	#16,r1
  30c5c2:	e1 18       	mov	#24,r1
  30c5c4:	63 1b       	neg	r1,r3
  30c5c6:	60 63       	mov	r6,r0
  30c5c8:	40 3d       	shld	r3,r0
  30c5ca:	d3 3c       	mov.l	30c6bc <__udivdi3+0x200>,r3	! 30e8dc <__clz_tab>
  30c5cc:	00 3c       	mov.b	@(r0,r3),r0
  30c5ce:	60 0c       	extu.b	r0,r0
  30c5d0:	30 1c       	add	r1,r0
  30c5d2:	60 0b       	neg	r0,r0
  30c5d4:	69 03       	mov	r0,r9
	  if (bm == 0)
  30c5d6:	88 e0       	cmp/eq	#-32,r0
  30c5d8:	8f 3d       	bf.s	30c656 <__udivdi3+0x19a>
  30c5da:	79 20       	add	#32,r9
	      if (n1 > d1 || n0 >= d0)
  30c5dc:	32 66       	cmp/hi	r6,r2
  30c5de:	8d 01       	bt.s	30c5e4 <__udivdi3+0x128>
  30c5e0:	38 72       	cmp/hs	r7,r8
  30c5e2:	8b ab       	bf	30c53c <__udivdi3+0x80>
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
  30c5e4:	e1 01       	mov	#1,r1
  30c5e6:	af ab       	bra	30c540 <__udivdi3+0x84>
  30c5e8:	e8 00       	mov	#0,r8
	  count_leading_zeros (bm, d0);
  30c5ea:	91 61       	mov.w	30c6b0 <__udivdi3+0x1f4>,r1	! ff
  30c5ec:	37 16       	cmp/hi	r1,r7
  30c5ee:	01 29       	movt	r1
  30c5f0:	41 08       	shll2	r1
  30c5f2:	31 1c       	add	r1,r1
  30c5f4:	66 1b       	neg	r1,r6
  30c5f6:	40 6d       	shld	r6,r0
  30c5f8:	d6 30       	mov.l	30c6bc <__udivdi3+0x200>,r6	! 30e8dc <__clz_tab>
  30c5fa:	00 6c       	mov.b	@(r0,r6),r0
  30c5fc:	60 0c       	extu.b	r0,r0
  30c5fe:	30 1c       	add	r1,r0
  30c600:	60 0b       	neg	r0,r0
  30c602:	66 03       	mov	r0,r6
	  if (bm == 0)
  30c604:	88 e0       	cmp/eq	#-32,r0
  30c606:	8d be       	bt.s	30c586 <__udivdi3+0xca>
  30c608:	76 20       	add	#32,r6
	      n2 = n1 >> b;
  30c60a:	61 23       	mov	r2,r1
	      n1 = (n1 << bm) | (n0 >> b);
  30c60c:	69 83       	mov	r8,r9
	      n2 = n1 >> b;
  30c60e:	41 0d       	shld	r0,r1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
  30c610:	da 2b       	mov.l	30c6c0 <__udivdi3+0x204>,r10	! 30c980 <__udiv_qrnnd_16>
	      n1 = (n1 << bm) | (n0 >> b);
  30c612:	42 6d       	shld	r6,r2
  30c614:	49 0d       	shld	r0,r9
	      n0 = n0 << bm;
  30c616:	63 83       	mov	r8,r3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
  30c618:	60 13       	mov	r1,r0
	      d0 = d0 << bm;
  30c61a:	47 6d       	shld	r6,r7
	      n0 = n0 << bm;
  30c61c:	43 6d       	shld	r6,r3
	      n1 = (n1 << bm) | (n0 >> b);
  30c61e:	29 2b       	or	r2,r9
	      udiv_qrnnd (q1, n1, n2, n1, d0);
  30c620:	65 73       	mov	r7,r5
  30c622:	64 99       	swap.w	r9,r4
  30c624:	66 59       	swap.w	r5,r6
  30c626:	4a 0b       	jsr	@r10
  30c628:	46 28       	shll16	r6
  30c62a:	64 49       	swap.w	r4,r4
  30c62c:	4a 0b       	jsr	@r10
  30c62e:	68 19       	swap.w	r1,r8
  30c630:	28 1b       	or	r1,r8
  30c632:	af ac       	bra	30c58e <__udivdi3+0xd2>
  30c634:	61 03       	mov	r0,r1
	  count_leading_zeros (bm, d1);
  30c636:	91 3b       	mov.w	30c6b0 <__udivdi3+0x1f4>,r1	! ff
  30c638:	36 16       	cmp/hi	r1,r6
  30c63a:	01 29       	movt	r1
  30c63c:	41 08       	shll2	r1
  30c63e:	31 1c       	add	r1,r1
  30c640:	63 1b       	neg	r1,r3
  30c642:	40 3d       	shld	r3,r0
  30c644:	d3 1d       	mov.l	30c6bc <__udivdi3+0x200>,r3	! 30e8dc <__clz_tab>
  30c646:	00 3c       	mov.b	@(r0,r3),r0
  30c648:	60 0c       	extu.b	r0,r0
  30c64a:	30 1c       	add	r1,r0
  30c64c:	60 0b       	neg	r0,r0
  30c64e:	69 03       	mov	r0,r9
	  if (bm == 0)
  30c650:	88 e0       	cmp/eq	#-32,r0
  30c652:	8d c3       	bt.s	30c5dc <__udivdi3+0x120>
  30c654:	79 20       	add	#32,r9
	      d1 = (d1 << bm) | (d0 >> b);
  30c656:	6a 73       	mov	r7,r10
	      n2 = n1 >> b;
  30c658:	61 23       	mov	r2,r1
	      n1 = (n1 << bm) | (n0 >> b);
  30c65a:	63 83       	mov	r8,r3
	      n2 = n1 >> b;
  30c65c:	41 0d       	shld	r0,r1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
  30c65e:	db 18       	mov.l	30c6c0 <__udivdi3+0x204>,r11	! 30c980 <__udiv_qrnnd_16>
	      d1 = (d1 << bm) | (d0 >> b);
  30c660:	46 9d       	shld	r9,r6
  30c662:	4a 0d       	shld	r0,r10
	      n1 = (n1 << bm) | (n0 >> b);
  30c664:	42 9d       	shld	r9,r2
  30c666:	43 0d       	shld	r0,r3
	      d0 = d0 << bm;
  30c668:	47 9d       	shld	r9,r7
	      udiv_qrnnd (q0, n1, n2, n1, d1);
  30c66a:	60 13       	mov	r1,r0
	      d1 = (d1 << bm) | (d0 >> b);
  30c66c:	2a 6b       	or	r6,r10
	      n1 = (n1 << bm) | (n0 >> b);
  30c66e:	23 2b       	or	r2,r3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
  30c670:	65 a3       	mov	r10,r5
  30c672:	64 39       	swap.w	r3,r4
  30c674:	66 59       	swap.w	r5,r6
  30c676:	4b 0b       	jsr	@r11
  30c678:	46 28       	shll16	r6
  30c67a:	64 49       	swap.w	r4,r4
  30c67c:	4b 0b       	jsr	@r11
  30c67e:	63 19       	swap.w	r1,r3
  30c680:	23 1b       	or	r1,r3
	      umul_ppmm (m1, m0, q0, d0);
  30c682:	37 35       	dmulu.l	r3,r7
  30c684:	01 1a       	sts	macl,r1
  30c686:	07 0a       	sts	mach,r7
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
  30c688:	30 72       	cmp/hs	r7,r0
  30c68a:	8b 04       	bf	30c696 <__udivdi3+0x1da>
  30c68c:	48 9d       	shld	r9,r8
  30c68e:	38 12       	cmp/hs	r1,r8
  30c690:	8d 0b       	bt.s	30c6aa <__udivdi3+0x1ee>
  30c692:	30 70       	cmp/eq	r7,r0
  30c694:	8b 09       	bf	30c6aa <__udivdi3+0x1ee>
		  q0--;
  30c696:	61 33       	mov	r3,r1
  30c698:	71 ff       	add	#-1,r1
  const DWunion ww = {{.low = q0, .high = q1}};
  30c69a:	af 51       	bra	30c540 <__udivdi3+0x84>
  30c69c:	e8 00       	mov	#0,r8
	  count_leading_zeros (bm, d0);
  30c69e:	91 07       	mov.w	30c6b0 <__udivdi3+0x1f4>,r1	! ff
  30c6a0:	37 16       	cmp/hi	r1,r7
  30c6a2:	01 29       	movt	r1
  30c6a4:	41 08       	shll2	r1
  30c6a6:	af 20       	bra	30c4ea <__udivdi3+0x2e>
  30c6a8:	31 1c       	add	r1,r1
  const DWunion ww = {{.low = q0, .high = q1}};
  30c6aa:	61 33       	mov	r3,r1
  30c6ac:	af 48       	bra	30c540 <__udivdi3+0x84>
  30c6ae:	e8 00       	mov	#0,r8
  30c6b0:	00 ff       	mac.l	@r15+,@r0+
  30c6b2:	00 09       	nop	
  30c6b4:	00 00       	.word 0x0000
  30c6b6:	ff ff       	.word 0xffff
  30c6b8:	00 ff       	mac.l	@r15+,@r0+
  30c6ba:	ff ff       	.word 0xffff
  30c6bc:	00 30       	.word 0x0030
  30c6be:	e8 dc       	mov	#-36,r8
  30c6c0:	00 30       	.word 0x0030
  30c6c2:	c9 80       	and	#128,r0
  30c6c4:	00 30       	.word 0x0030
  30c6c6:	c9 36       	and	#54,r0

0030c6c8 <__umoddi3>:
{
  30c6c8:	2f 86       	mov.l	r8,@-r15
  30c6ca:	2f 96       	mov.l	r9,@-r15
  30c6cc:	2f a6       	mov.l	r10,@-r15
  30c6ce:	2f b6       	mov.l	r11,@-r15
  30c6d0:	2f c6       	mov.l	r12,@-r15
  30c6d2:	4f 22       	sts.l	pr,@-r15
  if (d1 == 0)
  30c6d4:	26 68       	tst	r6,r6
{
  30c6d6:	62 43       	mov	r4,r2
  if (d1 == 0)
  30c6d8:	8f 2e       	bf.s	30c738 <__umoddi3+0x70>
  30c6da:	69 53       	mov	r5,r9
      if (d0 > n1)
  30c6dc:	37 46       	cmp/hi	r4,r7
  30c6de:	8f 5d       	bf.s	30c79c <__umoddi3+0xd4>
  30c6e0:	63 53       	mov	r5,r3
	  count_leading_zeros (bm, d0);
  30c6e2:	d6 87       	mov.l	30c900 <__umoddi3+0x238>,r6	! ffff
  30c6e4:	37 66       	cmp/hi	r6,r7
  30c6e6:	8d 02       	bt.s	30c6ee <__umoddi3+0x26>
  30c6e8:	61 43       	mov	r4,r1
  30c6ea:	a0 b1       	bra	30c850 <__umoddi3+0x188>
  30c6ec:	00 09       	nop	
  30c6ee:	d6 85       	mov.l	30c904 <__umoddi3+0x23c>,r6	! ffffff
  30c6f0:	37 66       	cmp/hi	r6,r7
  30c6f2:	8f 01       	bf.s	30c6f8 <__umoddi3+0x30>
  30c6f4:	e6 10       	mov	#16,r6
  30c6f6:	e6 18       	mov	#24,r6
  30c6f8:	65 6b       	neg	r6,r5
  30c6fa:	60 73       	mov	r7,r0
  30c6fc:	40 5d       	shld	r5,r0
  30c6fe:	d5 82       	mov.l	30c908 <__umoddi3+0x240>,r5	! 30e8dc <__clz_tab>
  30c700:	00 5c       	mov.b	@(r0,r5),r0
  30c702:	60 0c       	extu.b	r0,r0
  30c704:	30 6c       	add	r6,r0
  30c706:	60 0b       	neg	r0,r0
  30c708:	68 03       	mov	r0,r8
	  if (bm != 0)
  30c70a:	88 e0       	cmp/eq	#-32,r0
  30c70c:	8d 07       	bt.s	30c71e <__umoddi3+0x56>
  30c70e:	78 20       	add	#32,r8
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
  30c710:	61 93       	mov	r9,r1
  30c712:	42 8d       	shld	r8,r2
  30c714:	41 0d       	shld	r0,r1
	      n0 = n0 << bm;
  30c716:	63 93       	mov	r9,r3
	      d0 = d0 << bm;
  30c718:	47 8d       	shld	r8,r7
	      n0 = n0 << bm;
  30c71a:	43 8d       	shld	r8,r3
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
  30c71c:	21 2b       	or	r2,r1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
  30c71e:	60 13       	mov	r1,r0
  30c720:	d9 7a       	mov.l	30c90c <__umoddi3+0x244>,r9	! 30c980 <__udiv_qrnnd_16>
  30c722:	65 73       	mov	r7,r5
  30c724:	64 39       	swap.w	r3,r4
  30c726:	66 59       	swap.w	r5,r6
  30c728:	49 0b       	jsr	@r9
  30c72a:	46 28       	shll16	r6
  30c72c:	64 49       	swap.w	r4,r4
  30c72e:	49 0b       	jsr	@r9
  30c730:	69 19       	swap.w	r1,r9
  30c732:	29 1b       	or	r1,r9
	  q1 = 0;
  30c734:	a0 5c       	bra	30c7f0 <__umoddi3+0x128>
  30c736:	61 03       	mov	r0,r1
      if (d1 > n1)
  30c738:	36 46       	cmp/hi	r4,r6
  30c73a:	8f 08       	bf.s	30c74e <__umoddi3+0x86>
  30c73c:	60 43       	mov	r4,r0
	      *rp = rr.ll;
  30c73e:	61 53       	mov	r5,r1
}
  30c740:	4f 26       	lds.l	@r15+,pr
  30c742:	6c f6       	mov.l	@r15+,r12
  30c744:	6b f6       	mov.l	@r15+,r11
  30c746:	6a f6       	mov.l	@r15+,r10
  30c748:	69 f6       	mov.l	@r15+,r9
  30c74a:	00 0b       	rts	
  30c74c:	68 f6       	mov.l	@r15+,r8
	  count_leading_zeros (bm, d1);
  30c74e:	d1 6c       	mov.l	30c900 <__umoddi3+0x238>,r1	! ffff
  30c750:	36 16       	cmp/hi	r1,r6
  30c752:	89 01       	bt	30c758 <__umoddi3+0x90>
  30c754:	a0 82       	bra	30c85c <__umoddi3+0x194>
  30c756:	60 63       	mov	r6,r0
  30c758:	d1 6a       	mov.l	30c904 <__umoddi3+0x23c>,r1	! ffffff
  30c75a:	36 16       	cmp/hi	r1,r6
  30c75c:	8f 01       	bf.s	30c762 <__umoddi3+0x9a>
  30c75e:	e1 10       	mov	#16,r1
  30c760:	e1 18       	mov	#24,r1
  30c762:	63 1b       	neg	r1,r3
  30c764:	60 63       	mov	r6,r0
  30c766:	40 3d       	shld	r3,r0
  30c768:	d3 67       	mov.l	30c908 <__umoddi3+0x240>,r3	! 30e8dc <__clz_tab>
  30c76a:	03 3c       	mov.b	@(r0,r3),r3
  30c76c:	63 3c       	extu.b	r3,r3
  30c76e:	33 1c       	add	r1,r3
  30c770:	60 3b       	neg	r3,r0
  30c772:	68 03       	mov	r0,r8
	  if (bm == 0)
  30c774:	88 e0       	cmp/eq	#-32,r0
  30c776:	8d 02       	bt.s	30c77e <__umoddi3+0xb6>
  30c778:	78 20       	add	#32,r8
  30c77a:	a0 82       	bra	30c882 <__umoddi3+0x1ba>
  30c77c:	6a 73       	mov	r7,r10
	      if (n1 > d1 || n0 >= d0)
  30c77e:	32 66       	cmp/hi	r6,r2
  30c780:	89 01       	bt	30c786 <__umoddi3+0xbe>
  30c782:	39 72       	cmp/hs	r7,r9
  30c784:	8b 01       	bf	30c78a <__umoddi3+0xc2>
  30c786:	a0 b2       	bra	30c8ee <__umoddi3+0x226>
  30c788:	64 23       	mov	r2,r4
		  *rp = rr.ll;
  30c78a:	60 43       	mov	r4,r0
  30c78c:	61 53       	mov	r5,r1
}
  30c78e:	4f 26       	lds.l	@r15+,pr
  30c790:	6c f6       	mov.l	@r15+,r12
  30c792:	6b f6       	mov.l	@r15+,r11
  30c794:	6a f6       	mov.l	@r15+,r10
  30c796:	69 f6       	mov.l	@r15+,r9
  30c798:	00 0b       	rts	
  30c79a:	68 f6       	mov.l	@r15+,r8
	  if (d0 == 0)
  30c79c:	27 78       	tst	r7,r7
  30c79e:	8f 04       	bf.s	30c7aa <__umoddi3+0xe2>
  30c7a0:	e4 01       	mov	#1,r4
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
  30c7a2:	d7 5b       	mov.l	30c910 <__umoddi3+0x248>,r7	! 30c936 <__udivsi3>
  30c7a4:	47 0b       	jsr	@r7
  30c7a6:	e5 00       	mov	#0,r5
  30c7a8:	67 03       	mov	r0,r7
	  count_leading_zeros (bm, d0);
  30c7aa:	d1 55       	mov.l	30c900 <__umoddi3+0x238>,r1	! ffff
  30c7ac:	37 16       	cmp/hi	r1,r7
  30c7ae:	8f 29       	bf.s	30c804 <__umoddi3+0x13c>
  30c7b0:	60 73       	mov	r7,r0
  30c7b2:	d1 54       	mov.l	30c904 <__umoddi3+0x23c>,r1	! ffffff
  30c7b4:	37 16       	cmp/hi	r1,r7
  30c7b6:	8f 01       	bf.s	30c7bc <__umoddi3+0xf4>
  30c7b8:	e1 10       	mov	#16,r1
  30c7ba:	e1 18       	mov	#24,r1
  30c7bc:	66 1b       	neg	r1,r6
  30c7be:	60 73       	mov	r7,r0
  30c7c0:	40 6d       	shld	r6,r0
  30c7c2:	d6 51       	mov.l	30c908 <__umoddi3+0x240>,r6	! 30e8dc <__clz_tab>
  30c7c4:	00 6c       	mov.b	@(r0,r6),r0
  30c7c6:	60 0c       	extu.b	r0,r0
  30c7c8:	30 1c       	add	r1,r0
  30c7ca:	60 0b       	neg	r0,r0
  30c7cc:	68 03       	mov	r0,r8
	  if (bm == 0)
  30c7ce:	88 e0       	cmp/eq	#-32,r0
  30c7d0:	8f 28       	bf.s	30c824 <__umoddi3+0x15c>
  30c7d2:	78 20       	add	#32,r8
	      n1 -= d0;
  30c7d4:	d9 4d       	mov.l	30c90c <__umoddi3+0x244>,r9	! 30c980 <__udiv_qrnnd_16>
  30c7d6:	61 23       	mov	r2,r1
  30c7d8:	31 78       	sub	r7,r1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
  30c7da:	60 13       	mov	r1,r0
  30c7dc:	65 73       	mov	r7,r5
  30c7de:	64 39       	swap.w	r3,r4
  30c7e0:	66 59       	swap.w	r5,r6
  30c7e2:	49 0b       	jsr	@r9
  30c7e4:	46 28       	shll16	r6
  30c7e6:	64 49       	swap.w	r4,r4
  30c7e8:	49 0b       	jsr	@r9
  30c7ea:	63 19       	swap.w	r1,r3
  30c7ec:	23 1b       	or	r1,r3
  30c7ee:	61 03       	mov	r0,r1
	  rr.s.low = n0 >> bm;
  30c7f0:	62 8b       	neg	r8,r2
	  *rp = rr.ll;
  30c7f2:	41 2d       	shld	r2,r1
  30c7f4:	e0 00       	mov	#0,r0
}
  30c7f6:	4f 26       	lds.l	@r15+,pr
  30c7f8:	6c f6       	mov.l	@r15+,r12
  30c7fa:	6b f6       	mov.l	@r15+,r11
  30c7fc:	6a f6       	mov.l	@r15+,r10
  30c7fe:	69 f6       	mov.l	@r15+,r9
  30c800:	00 0b       	rts	
  30c802:	68 f6       	mov.l	@r15+,r8
	  count_leading_zeros (bm, d0);
  30c804:	91 7a       	mov.w	30c8fc <__umoddi3+0x234>,r1	! ff
  30c806:	37 16       	cmp/hi	r1,r7
  30c808:	01 29       	movt	r1
  30c80a:	41 08       	shll2	r1
  30c80c:	31 1c       	add	r1,r1
  30c80e:	66 1b       	neg	r1,r6
  30c810:	40 6d       	shld	r6,r0
  30c812:	d6 3d       	mov.l	30c908 <__umoddi3+0x240>,r6	! 30e8dc <__clz_tab>
  30c814:	00 6c       	mov.b	@(r0,r6),r0
  30c816:	60 0c       	extu.b	r0,r0
  30c818:	30 1c       	add	r1,r0
  30c81a:	60 0b       	neg	r0,r0
  30c81c:	68 03       	mov	r0,r8
	  if (bm == 0)
  30c81e:	88 e0       	cmp/eq	#-32,r0
  30c820:	8d d8       	bt.s	30c7d4 <__umoddi3+0x10c>
  30c822:	78 20       	add	#32,r8
	      n2 = n1 >> b;
  30c824:	61 23       	mov	r2,r1
	      n1 = (n1 << bm) | (n0 >> b);
  30c826:	6a 93       	mov	r9,r10
	      n2 = n1 >> b;
  30c828:	41 0d       	shld	r0,r1
	      n1 = (n1 << bm) | (n0 >> b);
  30c82a:	42 8d       	shld	r8,r2
  30c82c:	4a 0d       	shld	r0,r10
	      n0 = n0 << bm;
  30c82e:	63 93       	mov	r9,r3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
  30c830:	60 13       	mov	r1,r0
  30c832:	d9 36       	mov.l	30c90c <__umoddi3+0x244>,r9	! 30c980 <__udiv_qrnnd_16>
	      d0 = d0 << bm;
  30c834:	47 8d       	shld	r8,r7
	      n1 = (n1 << bm) | (n0 >> b);
  30c836:	2a 2b       	or	r2,r10
	      n0 = n0 << bm;
  30c838:	43 8d       	shld	r8,r3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
  30c83a:	65 73       	mov	r7,r5
  30c83c:	64 a9       	swap.w	r10,r4
  30c83e:	66 59       	swap.w	r5,r6
  30c840:	49 0b       	jsr	@r9
  30c842:	46 28       	shll16	r6
  30c844:	64 49       	swap.w	r4,r4
  30c846:	49 0b       	jsr	@r9
  30c848:	6a 19       	swap.w	r1,r10
  30c84a:	2a 1b       	or	r1,r10
  30c84c:	af c5       	bra	30c7da <__umoddi3+0x112>
  30c84e:	61 03       	mov	r0,r1
	  count_leading_zeros (bm, d0);
  30c850:	96 54       	mov.w	30c8fc <__umoddi3+0x234>,r6	! ff
  30c852:	37 66       	cmp/hi	r6,r7
  30c854:	06 29       	movt	r6
  30c856:	46 08       	shll2	r6
  30c858:	af 4e       	bra	30c6f8 <__umoddi3+0x30>
  30c85a:	36 6c       	add	r6,r6
	  count_leading_zeros (bm, d1);
  30c85c:	91 4e       	mov.w	30c8fc <__umoddi3+0x234>,r1	! ff
  30c85e:	36 16       	cmp/hi	r1,r6
  30c860:	01 29       	movt	r1
  30c862:	41 08       	shll2	r1
  30c864:	31 1c       	add	r1,r1
  30c866:	63 1b       	neg	r1,r3
  30c868:	40 3d       	shld	r3,r0
  30c86a:	d3 27       	mov.l	30c908 <__umoddi3+0x240>,r3	! 30e8dc <__clz_tab>
  30c86c:	03 3c       	mov.b	@(r0,r3),r3
  30c86e:	63 3c       	extu.b	r3,r3
  30c870:	33 1c       	add	r1,r3
  30c872:	60 3b       	neg	r3,r0
  30c874:	68 03       	mov	r0,r8
	  if (bm == 0)
  30c876:	88 e0       	cmp/eq	#-32,r0
  30c878:	8f 02       	bf.s	30c880 <__umoddi3+0x1b8>
  30c87a:	78 20       	add	#32,r8
  30c87c:	af 80       	bra	30c780 <__umoddi3+0xb8>
  30c87e:	32 66       	cmp/hi	r6,r2
	      d1 = (d1 << bm) | (d0 >> b);
  30c880:	6a 73       	mov	r7,r10
  30c882:	46 8d       	shld	r8,r6
	      udiv_qrnnd (q0, n1, n2, n1, d1);
  30c884:	dc 21       	mov.l	30c90c <__umoddi3+0x244>,r12	! 30c980 <__udiv_qrnnd_16>
	      d1 = (d1 << bm) | (d0 >> b);
  30c886:	4a 0d       	shld	r0,r10
	      n1 = (n1 << bm) | (n0 >> b);
  30c888:	6b 93       	mov	r9,r11
	      d1 = (d1 << bm) | (d0 >> b);
  30c88a:	2a 6b       	or	r6,r10
	      n2 = n1 >> b;
  30c88c:	66 23       	mov	r2,r6
  30c88e:	46 0d       	shld	r0,r6
	      n1 = (n1 << bm) | (n0 >> b);
  30c890:	42 8d       	shld	r8,r2
  30c892:	4b 0d       	shld	r0,r11
	      d0 = d0 << bm;
  30c894:	47 8d       	shld	r8,r7
	      n1 = (n1 << bm) | (n0 >> b);
  30c896:	2b 2b       	or	r2,r11
	      udiv_qrnnd (q0, n1, n2, n1, d1);
  30c898:	60 63       	mov	r6,r0
  30c89a:	65 a3       	mov	r10,r5
  30c89c:	64 b9       	swap.w	r11,r4
  30c89e:	66 59       	swap.w	r5,r6
  30c8a0:	4c 0b       	jsr	@r12
  30c8a2:	46 28       	shll16	r6
  30c8a4:	64 49       	swap.w	r4,r4
  30c8a6:	4c 0b       	jsr	@r12
  30c8a8:	6b 19       	swap.w	r1,r11
  30c8aa:	2b 1b       	or	r1,r11
	      umul_ppmm (m1, m0, q0, d0);
  30c8ac:	37 b5       	dmulu.l	r11,r7
  30c8ae:	02 1a       	sts	macl,r2
  30c8b0:	01 0a       	sts	mach,r1
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
  30c8b2:	30 12       	cmp/hs	r1,r0
	      n0 = n0 << bm;
  30c8b4:	49 8d       	shld	r8,r9
	      umul_ppmm (m1, m0, q0, d0);
  30c8b6:	66 13       	mov	r1,r6
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
  30c8b8:	8f 04       	bf.s	30c8c4 <__umoddi3+0x1fc>
  30c8ba:	65 23       	mov	r2,r5
  30c8bc:	30 10       	cmp/eq	r1,r0
  30c8be:	8f 06       	bf.s	30c8ce <__umoddi3+0x206>
  30c8c0:	32 96       	cmp/hi	r9,r2
  30c8c2:	8b 04       	bf	30c8ce <__umoddi3+0x206>
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
  30c8c4:	00 08       	clrt	
  30c8c6:	32 7a       	subc	r7,r2
  30c8c8:	31 aa       	subc	r10,r1
  30c8ca:	66 13       	mov	r1,r6
  30c8cc:	65 23       	mov	r2,r5
		  sub_ddmmss (n1, n0, n1, n0, m1, m0);
  30c8ce:	00 08       	clrt	
  30c8d0:	39 5a       	subc	r5,r9
  30c8d2:	30 6a       	subc	r6,r0
		  rr.s.low = (n1 << b) | (n0 >> bm);
  30c8d4:	68 8b       	neg	r8,r8
  30c8d6:	61 03       	mov	r0,r1
  30c8d8:	41 3d       	shld	r3,r1
  30c8da:	49 8d       	shld	r8,r9
		  rr.s.high = n1 >> bm;
  30c8dc:	40 8d       	shld	r8,r0
		  *rp = rr.ll;
  30c8de:	21 9b       	or	r9,r1
}
  30c8e0:	4f 26       	lds.l	@r15+,pr
  30c8e2:	6c f6       	mov.l	@r15+,r12
  30c8e4:	6b f6       	mov.l	@r15+,r11
  30c8e6:	6a f6       	mov.l	@r15+,r10
  30c8e8:	69 f6       	mov.l	@r15+,r9
  30c8ea:	00 0b       	rts	
  30c8ec:	68 f6       	mov.l	@r15+,r8
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
  30c8ee:	65 93       	mov	r9,r5
  30c8f0:	00 08       	clrt	
  30c8f2:	35 7a       	subc	r7,r5
  30c8f4:	34 6a       	subc	r6,r4
		  *rp = rr.ll;
  30c8f6:	60 43       	mov	r4,r0
  30c8f8:	af 49       	bra	30c78e <__umoddi3+0xc6>
  30c8fa:	61 53       	mov	r5,r1
  30c8fc:	00 ff       	mac.l	@r15+,@r0+
  30c8fe:	00 09       	nop	
  30c900:	00 00       	.word 0x0000
  30c902:	ff ff       	.word 0xffff
  30c904:	00 ff       	mac.l	@r15+,@r0+
  30c906:	ff ff       	.word 0xffff
  30c908:	00 30       	.word 0x0030
  30c90a:	e8 dc       	mov	#-36,r8
  30c90c:	00 30       	.word 0x0030
  30c90e:	c9 80       	and	#128,r0
  30c910:	00 30       	.word 0x0030
  30c912:	c9 36       	and	#54,r0
  30c914:	34 54       	div1	r5,r4
  30c916:	34 54       	div1	r5,r4
  30c918:	34 54       	div1	r5,r4
  30c91a:	34 54       	div1	r5,r4
  30c91c:	34 54       	div1	r5,r4
  30c91e:	34 54       	div1	r5,r4
  30c920:	34 54       	div1	r5,r4
  30c922:	00 0b       	rts	
  30c924:	34 54       	div1	r5,r4
  30c926:	34 54       	div1	r5,r4
  30c928:	40 24       	rotcl	r0
  30c92a:	34 54       	div1	r5,r4
  30c92c:	40 24       	rotcl	r0
  30c92e:	34 54       	div1	r5,r4
  30c930:	40 24       	rotcl	r0
  30c932:	00 0b       	rts	
  30c934:	34 54       	div1	r5,r4

0030c936 <__udivsi3>:
  30c936:	4f 22       	sts.l	pr,@-r15
  30c938:	60 5d       	extu.w	r5,r0
  30c93a:	30 50       	cmp/eq	r5,r0
  30c93c:	8f 12       	bf.s	30c964 <__udivsi3+0x2e>
  30c93e:	00 19       	div0u	
  30c940:	60 49       	swap.w	r4,r0
  30c942:	44 29       	shlr16	r4
  30c944:	bf e6       	bsr	30c914 <__umoddi3+0x24c>
  30c946:	45 28       	shll16	r5
  30c948:	bf e5       	bsr	30c916 <__umoddi3+0x24e>
  30c94a:	34 54       	div1	r5,r4
  30c94c:	20 4d       	xtrct	r4,r0
  30c94e:	24 0d       	xtrct	r0,r4
  30c950:	bf e0       	bsr	30c914 <__umoddi3+0x24c>
  30c952:	64 49       	swap.w	r4,r4
  30c954:	bf df       	bsr	30c916 <__umoddi3+0x24e>
  30c956:	34 54       	div1	r5,r4
  30c958:	4f 26       	lds.l	@r15+,pr
  30c95a:	20 4d       	xtrct	r4,r0
  30c95c:	60 09       	swap.w	r0,r0
  30c95e:	40 24       	rotcl	r0
  30c960:	00 0b       	rts	
  30c962:	45 29       	shlr16	r5
  30c964:	e0 00       	mov	#0,r0
  30c966:	20 4d       	xtrct	r4,r0
  30c968:	24 0d       	xtrct	r0,r4
  30c96a:	bf dc       	bsr	30c926 <__umoddi3+0x25e>
  30c96c:	40 24       	rotcl	r0
  30c96e:	bf da       	bsr	30c926 <__umoddi3+0x25e>
  30c970:	40 24       	rotcl	r0
  30c972:	bf d8       	bsr	30c926 <__umoddi3+0x25e>
  30c974:	40 24       	rotcl	r0
  30c976:	bf d6       	bsr	30c926 <__umoddi3+0x25e>
  30c978:	40 24       	rotcl	r0
  30c97a:	4f 26       	lds.l	@r15+,pr
  30c97c:	00 0b       	rts	
  30c97e:	40 24       	rotcl	r0

0030c980 <__udiv_qrnnd_16>:
  30c980:	00 19       	div0u	
  30c982:	30 66       	cmp/hi	r6,r0
  30c984:	89 20       	bt	30c9c8 <__udiv_qrnnd_16+0x48>
  30c986:	30 64       	div1	r6,r0
  30c988:	30 64       	div1	r6,r0
  30c98a:	30 64       	div1	r6,r0
  30c98c:	30 64       	div1	r6,r0
  30c98e:	30 64       	div1	r6,r0
  30c990:	30 64       	div1	r6,r0
  30c992:	30 64       	div1	r6,r0
  30c994:	30 64       	div1	r6,r0
  30c996:	30 64       	div1	r6,r0
  30c998:	30 64       	div1	r6,r0
  30c99a:	30 64       	div1	r6,r0
  30c99c:	30 64       	div1	r6,r0
  30c99e:	30 64       	div1	r6,r0
  30c9a0:	30 64       	div1	r6,r0
  30c9a2:	30 64       	div1	r6,r0
  30c9a4:	30 64       	div1	r6,r0
  30c9a6:	61 0d       	extu.w	r0,r1
  30c9a8:	89 00       	bt	30c9ac <__udiv_qrnnd_16+0x2c>
  30c9aa:	30 6c       	add	r6,r0
  30c9ac:	41 24       	rotcl	r1
  30c9ae:	25 1e       	mulu.w	r1,r5
  30c9b0:	20 4d       	xtrct	r4,r0
  30c9b2:	60 09       	swap.w	r0,r0
  30c9b4:	02 1a       	sts	macl,r2
  30c9b6:	30 22       	cmp/hs	r2,r0
  30c9b8:	30 28       	sub	r2,r0
  30c9ba:	89 0e       	bt	30c9da <__udiv_qrnnd_16+0x5a>
  30c9bc:	30 5e       	addc	r5,r0
  30c9be:	71 ff       	add	#-1,r1
  30c9c0:	89 0b       	bt	30c9da <__udiv_qrnnd_16+0x5a>
  30c9c2:	71 ff       	add	#-1,r1
  30c9c4:	00 0b       	rts	
  30c9c6:	30 5c       	add	r5,r0
  30c9c8:	30 58       	sub	r5,r0
  30c9ca:	61 49       	swap.w	r4,r1
  30c9cc:	21 0d       	xtrct	r0,r1
  30c9ce:	00 08       	clrt	
  30c9d0:	60 13       	mov	r1,r0
  30c9d2:	30 5e       	addc	r5,r0
  30c9d4:	e1 ff       	mov	#-1,r1
  30c9d6:	8f f4       	bf.s	30c9c2 <__udiv_qrnnd_16+0x42>
  30c9d8:	41 29       	shlr16	r1
  30c9da:	00 0b       	rts	
  30c9dc:	00 09       	nop	
  30c9de:	00 09       	nop	

0030c9e0 <close>:
#include <unistd.h>
#include <gint/fs.h>
#include <errno.h>

int close(int fd)
{
  30c9e0:	2f 86       	mov.l	r8,@-r15
  30c9e2:	2f e6       	mov.l	r14,@-r15
  30c9e4:	4f 22       	sts.l	pr,@-r15
  30c9e6:	7f f4       	add	#-12,r15
  30c9e8:	6e f3       	mov	r15,r14
  30c9ea:	61 e3       	mov	r14,r1
  30c9ec:	71 cc       	add	#-52,r1
  30c9ee:	11 4d       	mov.l	r4,@(52,r1)
	fs_descriptor_t const *d = fs_get_descriptor(fd);
  30c9f0:	68 e3       	mov	r14,r8
  30c9f2:	78 cc       	add	#-52,r8
  30c9f4:	61 e3       	mov	r14,r1
  30c9f6:	71 cc       	add	#-52,r1
  30c9f8:	54 1d       	mov.l	@(52,r1),r4
  30c9fa:	d1 1e       	mov.l	30ca74 <close+0x94>,r1	! 30ca80 <fs_get_descriptor>
  30c9fc:	41 0b       	jsr	@r1
  30c9fe:	00 09       	nop	
  30ca00:	61 03       	mov	r0,r1
  30ca02:	18 1e       	mov.l	r1,@(56,r8)
	if(!d) {
  30ca04:	61 e3       	mov	r14,r1
  30ca06:	71 cc       	add	#-52,r1
  30ca08:	51 1e       	mov.l	@(56,r1),r1
  30ca0a:	21 18       	tst	r1,r1
  30ca0c:	8b 05       	bf	30ca1a <close+0x3a>
		errno = EBADF;
  30ca0e:	d1 1a       	mov.l	30ca78 <close+0x98>,r1	! 81015d0 <errno>
  30ca10:	e2 0d       	mov	#13,r2
  30ca12:	21 22       	mov.l	r2,@r1
		return (ssize_t)-1;
  30ca14:	e1 ff       	mov	#-1,r1
  30ca16:	a0 24       	bra	30ca62 <close+0x82>
  30ca18:	00 09       	nop	
	}

	int rc = 0;
  30ca1a:	61 e3       	mov	r14,r1
  30ca1c:	71 cc       	add	#-52,r1
  30ca1e:	e2 00       	mov	#0,r2
  30ca20:	11 2f       	mov.l	r2,@(60,r1)
	if(d->type->close)
  30ca22:	61 e3       	mov	r14,r1
  30ca24:	71 cc       	add	#-52,r1
  30ca26:	51 1e       	mov.l	@(56,r1),r1
  30ca28:	61 12       	mov.l	@r1,r1
  30ca2a:	51 13       	mov.l	@(12,r1),r1
  30ca2c:	21 18       	tst	r1,r1
  30ca2e:	89 0f       	bt	30ca50 <close+0x70>
		rc = d->type->close(d->data);
  30ca30:	61 e3       	mov	r14,r1
  30ca32:	71 cc       	add	#-52,r1
  30ca34:	51 1e       	mov.l	@(56,r1),r1
  30ca36:	61 12       	mov.l	@r1,r1
  30ca38:	51 13       	mov.l	@(12,r1),r1
  30ca3a:	62 e3       	mov	r14,r2
  30ca3c:	72 cc       	add	#-52,r2
  30ca3e:	52 2e       	mov.l	@(56,r2),r2
  30ca40:	52 21       	mov.l	@(4,r2),r2
  30ca42:	68 e3       	mov	r14,r8
  30ca44:	78 cc       	add	#-52,r8
  30ca46:	64 23       	mov	r2,r4
  30ca48:	41 0b       	jsr	@r1
  30ca4a:	00 09       	nop	
  30ca4c:	61 03       	mov	r0,r1
  30ca4e:	18 1f       	mov.l	r1,@(60,r8)

	fs_free_descriptor(fd);
  30ca50:	61 e3       	mov	r14,r1
  30ca52:	71 cc       	add	#-52,r1
  30ca54:	54 1d       	mov.l	@(52,r1),r4
  30ca56:	d1 09       	mov.l	30ca7c <close+0x9c>,r1	! 30cb80 <fs_free_descriptor>
  30ca58:	41 0b       	jsr	@r1
  30ca5a:	00 09       	nop	
	return rc;
  30ca5c:	61 e3       	mov	r14,r1
  30ca5e:	71 cc       	add	#-52,r1
  30ca60:	51 1f       	mov.l	@(60,r1),r1
}
  30ca62:	60 13       	mov	r1,r0
  30ca64:	7e 0c       	add	#12,r14
  30ca66:	6f e3       	mov	r14,r15
  30ca68:	4f 26       	lds.l	@r15+,pr
  30ca6a:	6e f6       	mov.l	@r15+,r14
  30ca6c:	68 f6       	mov.l	@r15+,r8
  30ca6e:	00 0b       	rts	
  30ca70:	00 09       	nop	
  30ca72:	00 09       	nop	
  30ca74:	00 30       	.word 0x0030
  30ca76:	ca 80       	xor	#128,r0
  30ca78:	08 10       	.word 0x0810
  30ca7a:	15 d0       	mov.l	r13,@(0,r5)
  30ca7c:	00 30       	.word 0x0030
  30ca7e:	cb 80       	or	#128,r0

0030ca80 <fs_get_descriptor>:

/* File descriptor table */
static fs_descriptor_t *fdtable;

fs_descriptor_t const *fs_get_descriptor(int fd)
{
  30ca80:	2f e6       	mov.l	r14,@-r15
  30ca82:	7f fc       	add	#-4,r15
  30ca84:	6e f3       	mov	r15,r14
  30ca86:	61 e3       	mov	r14,r1
  30ca88:	71 c4       	add	#-60,r1
  30ca8a:	11 4f       	mov.l	r4,@(60,r1)
	if(!fdtable || (unsigned)fd >= FS_FD_MAX)
  30ca8c:	d1 14       	mov.l	30cae0 <fs_get_descriptor+0x60>,r1	! 8101654 <fdtable>
  30ca8e:	61 12       	mov.l	@r1,r1
  30ca90:	21 18       	tst	r1,r1
  30ca92:	89 05       	bt	30caa0 <fs_get_descriptor+0x20>
  30ca94:	61 e3       	mov	r14,r1
  30ca96:	71 c4       	add	#-60,r1
  30ca98:	52 1f       	mov.l	@(60,r1),r2
  30ca9a:	e1 0f       	mov	#15,r1
  30ca9c:	32 16       	cmp/hi	r1,r2
  30ca9e:	8b 02       	bf	30caa6 <fs_get_descriptor+0x26>
		return NULL;
  30caa0:	e1 00       	mov	#0,r1
  30caa2:	a0 16       	bra	30cad2 <fs_get_descriptor+0x52>
  30caa4:	00 09       	nop	
	if(fdtable[fd].type == NULL)
  30caa6:	d1 0e       	mov.l	30cae0 <fs_get_descriptor+0x60>,r1	! 8101654 <fdtable>
  30caa8:	62 12       	mov.l	@r1,r2
  30caaa:	61 e3       	mov	r14,r1
  30caac:	71 c4       	add	#-60,r1
  30caae:	51 1f       	mov.l	@(60,r1),r1
  30cab0:	41 08       	shll2	r1
  30cab2:	31 1c       	add	r1,r1
  30cab4:	31 2c       	add	r2,r1
  30cab6:	61 12       	mov.l	@r1,r1
  30cab8:	21 18       	tst	r1,r1
  30caba:	8b 02       	bf	30cac2 <fs_get_descriptor+0x42>
		return NULL;
  30cabc:	e1 00       	mov	#0,r1
  30cabe:	a0 08       	bra	30cad2 <fs_get_descriptor+0x52>
  30cac0:	00 09       	nop	

	return &fdtable[fd];
  30cac2:	d1 07       	mov.l	30cae0 <fs_get_descriptor+0x60>,r1	! 8101654 <fdtable>
  30cac4:	62 12       	mov.l	@r1,r2
  30cac6:	61 e3       	mov	r14,r1
  30cac8:	71 c4       	add	#-60,r1
  30caca:	51 1f       	mov.l	@(60,r1),r1
  30cacc:	41 08       	shll2	r1
  30cace:	31 1c       	add	r1,r1
  30cad0:	31 2c       	add	r2,r1
}
  30cad2:	60 13       	mov	r1,r0
  30cad4:	7e 04       	add	#4,r14
  30cad6:	6f e3       	mov	r14,r15
  30cad8:	6e f6       	mov.l	@r15+,r14
  30cada:	00 0b       	rts	
  30cadc:	00 09       	nop	
  30cade:	00 09       	nop	
  30cae0:	08 10       	.word 0x0810
  30cae2:	16 54       	mov.l	r5,@(16,r6)

0030cae4 <fs_create_descriptor>:

int fs_create_descriptor(fs_descriptor_t const *data)
{
  30cae4:	2f e6       	mov.l	r14,@-r15
  30cae6:	7f f8       	add	#-8,r15
  30cae8:	6e f3       	mov	r15,r14
  30caea:	61 e3       	mov	r14,r1
  30caec:	71 c8       	add	#-56,r1
  30caee:	11 4e       	mov.l	r4,@(56,r1)
	if(!fdtable || data->type == NULL)
  30caf0:	d1 22       	mov.l	30cb7c <fs_create_descriptor+0x98>,r1	! 8101654 <fdtable>
  30caf2:	61 12       	mov.l	@r1,r1
  30caf4:	21 18       	tst	r1,r1
  30caf6:	89 05       	bt	30cb04 <fs_create_descriptor+0x20>
  30caf8:	61 e3       	mov	r14,r1
  30cafa:	71 c8       	add	#-56,r1
  30cafc:	51 1e       	mov.l	@(56,r1),r1
  30cafe:	61 12       	mov.l	@r1,r1
  30cb00:	21 18       	tst	r1,r1
  30cb02:	8b 02       	bf	30cb0a <fs_create_descriptor+0x26>
		return -1;
  30cb04:	e1 ff       	mov	#-1,r1
  30cb06:	a0 33       	bra	30cb70 <fs_create_descriptor+0x8c>
  30cb08:	00 09       	nop	

	/* Leave 0/1/2 for stdin, stdout and stderr */
	for(int i = 3; i < FS_FD_MAX; i++) {
  30cb0a:	61 e3       	mov	r14,r1
  30cb0c:	71 c8       	add	#-56,r1
  30cb0e:	e2 03       	mov	#3,r2
  30cb10:	11 2f       	mov.l	r2,@(60,r1)
  30cb12:	a0 26       	bra	30cb62 <fs_create_descriptor+0x7e>
  30cb14:	00 09       	nop	
		if(fdtable[i].type == NULL) {
  30cb16:	d1 19       	mov.l	30cb7c <fs_create_descriptor+0x98>,r1	! 8101654 <fdtable>
  30cb18:	62 12       	mov.l	@r1,r2
  30cb1a:	61 e3       	mov	r14,r1
  30cb1c:	71 c8       	add	#-56,r1
  30cb1e:	51 1f       	mov.l	@(60,r1),r1
  30cb20:	41 08       	shll2	r1
  30cb22:	31 1c       	add	r1,r1
  30cb24:	31 2c       	add	r2,r1
  30cb26:	61 12       	mov.l	@r1,r1
  30cb28:	21 18       	tst	r1,r1
  30cb2a:	8b 13       	bf	30cb54 <fs_create_descriptor+0x70>
			fdtable[i] = *data;
  30cb2c:	d1 13       	mov.l	30cb7c <fs_create_descriptor+0x98>,r1	! 8101654 <fdtable>
  30cb2e:	62 12       	mov.l	@r1,r2
  30cb30:	61 e3       	mov	r14,r1
  30cb32:	71 c8       	add	#-56,r1
  30cb34:	51 1f       	mov.l	@(60,r1),r1
  30cb36:	41 08       	shll2	r1
  30cb38:	31 1c       	add	r1,r1
  30cb3a:	31 2c       	add	r2,r1
  30cb3c:	62 e3       	mov	r14,r2
  30cb3e:	72 c8       	add	#-56,r2
  30cb40:	52 2e       	mov.l	@(56,r2),r2
  30cb42:	53 21       	mov.l	@(4,r2),r3
  30cb44:	62 22       	mov.l	@r2,r2
  30cb46:	21 22       	mov.l	r2,@r1
  30cb48:	11 31       	mov.l	r3,@(4,r1)
			return i;
  30cb4a:	61 e3       	mov	r14,r1
  30cb4c:	71 c8       	add	#-56,r1
  30cb4e:	51 1f       	mov.l	@(60,r1),r1
  30cb50:	a0 0e       	bra	30cb70 <fs_create_descriptor+0x8c>
  30cb52:	00 09       	nop	
	for(int i = 3; i < FS_FD_MAX; i++) {
  30cb54:	61 e3       	mov	r14,r1
  30cb56:	71 c8       	add	#-56,r1
  30cb58:	62 e3       	mov	r14,r2
  30cb5a:	72 c8       	add	#-56,r2
  30cb5c:	52 2f       	mov.l	@(60,r2),r2
  30cb5e:	72 01       	add	#1,r2
  30cb60:	11 2f       	mov.l	r2,@(60,r1)
  30cb62:	61 e3       	mov	r14,r1
  30cb64:	71 c8       	add	#-56,r1
  30cb66:	52 1f       	mov.l	@(60,r1),r2
  30cb68:	e1 0f       	mov	#15,r1
  30cb6a:	32 17       	cmp/gt	r1,r2
  30cb6c:	8b d3       	bf	30cb16 <fs_create_descriptor+0x32>
		}
	}

	return -1;
  30cb6e:	e1 ff       	mov	#-1,r1
}
  30cb70:	60 13       	mov	r1,r0
  30cb72:	7e 08       	add	#8,r14
  30cb74:	6f e3       	mov	r14,r15
  30cb76:	6e f6       	mov.l	@r15+,r14
  30cb78:	00 0b       	rts	
  30cb7a:	00 09       	nop	
  30cb7c:	08 10       	.word 0x0810
  30cb7e:	16 54       	mov.l	r5,@(16,r6)

0030cb80 <fs_free_descriptor>:

void fs_free_descriptor(int fd)
{
  30cb80:	2f e6       	mov.l	r14,@-r15
  30cb82:	7f fc       	add	#-4,r15
  30cb84:	6e f3       	mov	r15,r14
  30cb86:	61 e3       	mov	r14,r1
  30cb88:	71 c4       	add	#-60,r1
  30cb8a:	11 4f       	mov.l	r4,@(60,r1)
	if(!fdtable || (unsigned)fd >= FS_FD_MAX)
  30cb8c:	d1 12       	mov.l	30cbd8 <fs_free_descriptor+0x58>,r1	! 8101654 <fdtable>
  30cb8e:	61 12       	mov.l	@r1,r1
  30cb90:	21 18       	tst	r1,r1
  30cb92:	89 1b       	bt	30cbcc <fs_free_descriptor+0x4c>
  30cb94:	61 e3       	mov	r14,r1
  30cb96:	71 c4       	add	#-60,r1
  30cb98:	52 1f       	mov.l	@(60,r1),r2
  30cb9a:	e1 0f       	mov	#15,r1
  30cb9c:	32 16       	cmp/hi	r1,r2
  30cb9e:	89 15       	bt	30cbcc <fs_free_descriptor+0x4c>
		return;

	fdtable[fd].type = NULL;
  30cba0:	d1 0d       	mov.l	30cbd8 <fs_free_descriptor+0x58>,r1	! 8101654 <fdtable>
  30cba2:	62 12       	mov.l	@r1,r2
  30cba4:	61 e3       	mov	r14,r1
  30cba6:	71 c4       	add	#-60,r1
  30cba8:	51 1f       	mov.l	@(60,r1),r1
  30cbaa:	41 08       	shll2	r1
  30cbac:	31 1c       	add	r1,r1
  30cbae:	31 2c       	add	r2,r1
  30cbb0:	e2 00       	mov	#0,r2
  30cbb2:	21 22       	mov.l	r2,@r1
	fdtable[fd].data = NULL;
  30cbb4:	d1 08       	mov.l	30cbd8 <fs_free_descriptor+0x58>,r1	! 8101654 <fdtable>
  30cbb6:	62 12       	mov.l	@r1,r2
  30cbb8:	61 e3       	mov	r14,r1
  30cbba:	71 c4       	add	#-60,r1
  30cbbc:	51 1f       	mov.l	@(60,r1),r1
  30cbbe:	41 08       	shll2	r1
  30cbc0:	31 1c       	add	r1,r1
  30cbc2:	31 2c       	add	r2,r1
  30cbc4:	e2 00       	mov	#0,r2
  30cbc6:	11 21       	mov.l	r2,@(4,r1)
  30cbc8:	a0 01       	bra	30cbce <fs_free_descriptor+0x4e>
  30cbca:	00 09       	nop	
		return;
  30cbcc:	00 09       	nop	
}
  30cbce:	7e 04       	add	#4,r14
  30cbd0:	6f e3       	mov	r14,r15
  30cbd2:	6e f6       	mov.l	@r15+,r14
  30cbd4:	00 0b       	rts	
  30cbd6:	00 09       	nop	
  30cbd8:	08 10       	.word 0x0810
  30cbda:	16 54       	mov.l	r5,@(16,r6)

0030cbdc <open_generic>:

int open_generic(fs_descriptor_type_t *type, void *data, int fd)
{
  30cbdc:	2f e6       	mov.l	r14,@-r15
  30cbde:	4f 22       	sts.l	pr,@-r15
  30cbe0:	7f ec       	add	#-20,r15
  30cbe2:	6e f3       	mov	r15,r14
  30cbe4:	61 e3       	mov	r14,r1
  30cbe6:	71 d4       	add	#-44,r1
  30cbe8:	11 4d       	mov.l	r4,@(52,r1)
  30cbea:	61 e3       	mov	r14,r1
  30cbec:	71 d4       	add	#-44,r1
  30cbee:	11 5c       	mov.l	r5,@(48,r1)
  30cbf0:	61 e3       	mov	r14,r1
  30cbf2:	71 d4       	add	#-44,r1
  30cbf4:	11 6b       	mov.l	r6,@(44,r1)
	if(!fdtable) {
  30cbf6:	d1 32       	mov.l	30ccc0 <open_generic+0xe4>,r1	! 8101654 <fdtable>
  30cbf8:	61 12       	mov.l	@r1,r1
  30cbfa:	21 18       	tst	r1,r1
  30cbfc:	8b 05       	bf	30cc0a <open_generic+0x2e>
		errno = ENOMEM;
  30cbfe:	d1 31       	mov.l	30ccc4 <open_generic+0xe8>,r1	! 81015d0 <errno>
  30cc00:	e2 09       	mov	#9,r2
  30cc02:	21 22       	mov.l	r2,@r1
		return -1;
  30cc04:	e1 ff       	mov	#-1,r1
  30cc06:	a0 53       	bra	30ccb0 <open_generic+0xd4>
  30cc08:	00 09       	nop	
	}
	if(!type) {
  30cc0a:	61 e3       	mov	r14,r1
  30cc0c:	71 d4       	add	#-44,r1
  30cc0e:	51 1d       	mov.l	@(52,r1),r1
  30cc10:	21 18       	tst	r1,r1
  30cc12:	8b 05       	bf	30cc20 <open_generic+0x44>
		errno = EINVAL;
  30cc14:	d1 2b       	mov.l	30ccc4 <open_generic+0xe8>,r1	! 81015d0 <errno>
  30cc16:	e2 06       	mov	#6,r2
  30cc18:	21 22       	mov.l	r2,@r1
		return -1;
  30cc1a:	e1 ff       	mov	#-1,r1
  30cc1c:	a0 48       	bra	30ccb0 <open_generic+0xd4>
  30cc1e:	00 09       	nop	
	}
	fs_descriptor_t d = {
  30cc20:	61 e3       	mov	r14,r1
  30cc22:	71 0c       	add	#12,r1
  30cc24:	62 e3       	mov	r14,r2
  30cc26:	72 d4       	add	#-44,r2
  30cc28:	52 2d       	mov.l	@(52,r2),r2
  30cc2a:	21 22       	mov.l	r2,@r1
  30cc2c:	61 e3       	mov	r14,r1
  30cc2e:	71 0c       	add	#12,r1
  30cc30:	62 e3       	mov	r14,r2
  30cc32:	72 d4       	add	#-44,r2
  30cc34:	52 2c       	mov.l	@(48,r2),r2
  30cc36:	11 21       	mov.l	r2,@(4,r1)
		.type = type,
		.data = data
	};

	/* Re-use file descriptor mode */
	if(fd >= 0) {
  30cc38:	61 e3       	mov	r14,r1
  30cc3a:	71 d4       	add	#-44,r1
  30cc3c:	51 1b       	mov.l	@(44,r1),r1
  30cc3e:	41 11       	cmp/pz	r1
  30cc40:	8b 2f       	bf	30cca2 <open_generic+0xc6>
		if(fd >= FS_FD_MAX) {
  30cc42:	61 e3       	mov	r14,r1
  30cc44:	71 d4       	add	#-44,r1
  30cc46:	52 1b       	mov.l	@(44,r1),r2
  30cc48:	e1 0f       	mov	#15,r1
  30cc4a:	32 17       	cmp/gt	r1,r2
  30cc4c:	8b 05       	bf	30cc5a <open_generic+0x7e>
			errno = EBADF;
  30cc4e:	d1 1d       	mov.l	30ccc4 <open_generic+0xe8>,r1	! 81015d0 <errno>
  30cc50:	e2 0d       	mov	#13,r2
  30cc52:	21 22       	mov.l	r2,@r1
			return -1;
  30cc54:	e1 ff       	mov	#-1,r1
  30cc56:	a0 2b       	bra	30ccb0 <open_generic+0xd4>
  30cc58:	00 09       	nop	
		}
		if(fdtable[fd].type) {
  30cc5a:	d1 19       	mov.l	30ccc0 <open_generic+0xe4>,r1	! 8101654 <fdtable>
  30cc5c:	62 12       	mov.l	@r1,r2
  30cc5e:	61 e3       	mov	r14,r1
  30cc60:	71 d4       	add	#-44,r1
  30cc62:	51 1b       	mov.l	@(44,r1),r1
  30cc64:	41 08       	shll2	r1
  30cc66:	31 1c       	add	r1,r1
  30cc68:	31 2c       	add	r2,r1
  30cc6a:	61 12       	mov.l	@r1,r1
  30cc6c:	21 18       	tst	r1,r1
  30cc6e:	89 05       	bt	30cc7c <open_generic+0xa0>
			errno = ENFILE;
  30cc70:	d1 14       	mov.l	30ccc4 <open_generic+0xe8>,r1	! 81015d0 <errno>
  30cc72:	e2 07       	mov	#7,r2
  30cc74:	21 22       	mov.l	r2,@r1
			return -1;
  30cc76:	e1 ff       	mov	#-1,r1
  30cc78:	a0 1a       	bra	30ccb0 <open_generic+0xd4>
  30cc7a:	00 09       	nop	
		}

		fdtable[fd] = d;
  30cc7c:	d1 10       	mov.l	30ccc0 <open_generic+0xe4>,r1	! 8101654 <fdtable>
  30cc7e:	62 12       	mov.l	@r1,r2
  30cc80:	61 e3       	mov	r14,r1
  30cc82:	71 d4       	add	#-44,r1
  30cc84:	51 1b       	mov.l	@(44,r1),r1
  30cc86:	41 08       	shll2	r1
  30cc88:	31 1c       	add	r1,r1
  30cc8a:	31 2c       	add	r2,r1
  30cc8c:	62 e3       	mov	r14,r2
  30cc8e:	72 0c       	add	#12,r2
  30cc90:	53 21       	mov.l	@(4,r2),r3
  30cc92:	62 22       	mov.l	@r2,r2
  30cc94:	21 22       	mov.l	r2,@r1
  30cc96:	11 31       	mov.l	r3,@(4,r1)
		return fd;
  30cc98:	61 e3       	mov	r14,r1
  30cc9a:	71 d4       	add	#-44,r1
  30cc9c:	51 1b       	mov.l	@(44,r1),r1
  30cc9e:	a0 07       	bra	30ccb0 <open_generic+0xd4>
  30cca0:	00 09       	nop	
	}
	/* Normal allocation mode */
	else {
		return fs_create_descriptor(&d);
  30cca2:	61 e3       	mov	r14,r1
  30cca4:	71 0c       	add	#12,r1
  30cca6:	64 13       	mov	r1,r4
  30cca8:	d1 07       	mov.l	30ccc8 <open_generic+0xec>,r1	! 30cae4 <fs_create_descriptor>
  30ccaa:	41 0b       	jsr	@r1
  30ccac:	00 09       	nop	
  30ccae:	61 03       	mov	r0,r1
	}
}
  30ccb0:	60 13       	mov	r1,r0
  30ccb2:	7e 14       	add	#20,r14
  30ccb4:	6f e3       	mov	r14,r15
  30ccb6:	4f 26       	lds.l	@r15+,pr
  30ccb8:	6e f6       	mov.l	@r15+,r14
  30ccba:	00 0b       	rts	
  30ccbc:	00 09       	nop	
  30ccbe:	00 09       	nop	
  30ccc0:	08 10       	.word 0x0810
  30ccc2:	16 54       	mov.l	r5,@(16,r6)
  30ccc4:	08 10       	.word 0x0810
  30ccc6:	15 d0       	mov.l	r13,@(0,r5)
  30ccc8:	00 30       	.word 0x0030
  30ccca:	ca e4       	xor	#228,r0

0030cccc <init_fs>:
	.lseek  = NULL,
	.close  = NULL,
};

GCONSTRUCTOR static void init_fs(void)
{
  30cccc:	2f e6       	mov.l	r14,@-r15
  30ccce:	4f 22       	sts.l	pr,@-r15
  30ccd0:	6e f3       	mov	r15,r14
	fdtable = calloc(FS_FD_MAX, sizeof *fdtable);
  30ccd2:	e5 08       	mov	#8,r5
  30ccd4:	e4 10       	mov	#16,r4
  30ccd6:	d1 17       	mov.l	30cd34 <init_fs+0x68>,r1	! 30cf3c <calloc>
  30ccd8:	41 0b       	jsr	@r1
  30ccda:	00 09       	nop	
  30ccdc:	61 03       	mov	r0,r1
  30ccde:	d2 16       	mov.l	30cd38 <init_fs+0x6c>,r2	! 8101654 <fdtable>
  30cce0:	22 12       	mov.l	r1,@r2
	if(!fdtable)
  30cce2:	d1 15       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30cce4:	61 12       	mov.l	@r1,r1
  30cce6:	21 18       	tst	r1,r1
  30cce8:	89 1d       	bt	30cd26 <init_fs+0x5a>
		return;

	fdtable[STDIN_FILENO].type = &devnull;
  30ccea:	d1 13       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30ccec:	61 12       	mov.l	@r1,r1
  30ccee:	d2 13       	mov.l	30cd3c <init_fs+0x70>,r2	! 8101658 <devnull>
  30ccf0:	21 22       	mov.l	r2,@r1
	fdtable[STDIN_FILENO].data = NULL;
  30ccf2:	d1 11       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30ccf4:	61 12       	mov.l	@r1,r1
  30ccf6:	e2 00       	mov	#0,r2
  30ccf8:	11 21       	mov.l	r2,@(4,r1)

	fdtable[STDOUT_FILENO].type = &devnull;
  30ccfa:	d1 0f       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30ccfc:	61 12       	mov.l	@r1,r1
  30ccfe:	71 08       	add	#8,r1
  30cd00:	d2 0e       	mov.l	30cd3c <init_fs+0x70>,r2	! 8101658 <devnull>
  30cd02:	21 22       	mov.l	r2,@r1
	fdtable[STDOUT_FILENO].data = NULL;
  30cd04:	d1 0c       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30cd06:	61 12       	mov.l	@r1,r1
  30cd08:	71 08       	add	#8,r1
  30cd0a:	e2 00       	mov	#0,r2
  30cd0c:	11 21       	mov.l	r2,@(4,r1)

	fdtable[STDERR_FILENO].type = &devnull;
  30cd0e:	d1 0a       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30cd10:	61 12       	mov.l	@r1,r1
  30cd12:	71 10       	add	#16,r1
  30cd14:	d2 09       	mov.l	30cd3c <init_fs+0x70>,r2	! 8101658 <devnull>
  30cd16:	21 22       	mov.l	r2,@r1
	fdtable[STDERR_FILENO].data = NULL;
  30cd18:	d1 07       	mov.l	30cd38 <init_fs+0x6c>,r1	! 8101654 <fdtable>
  30cd1a:	61 12       	mov.l	@r1,r1
  30cd1c:	71 10       	add	#16,r1
  30cd1e:	e2 00       	mov	#0,r2
  30cd20:	11 21       	mov.l	r2,@(4,r1)
  30cd22:	a0 01       	bra	30cd28 <init_fs+0x5c>
  30cd24:	00 09       	nop	
		return;
  30cd26:	00 09       	nop	
}
  30cd28:	6f e3       	mov	r14,r15
  30cd2a:	4f 26       	lds.l	@r15+,pr
  30cd2c:	6e f6       	mov.l	@r15+,r14
  30cd2e:	00 0b       	rts	
  30cd30:	00 09       	nop	
  30cd32:	00 09       	nop	
  30cd34:	00 30       	.word 0x0030
  30cd36:	cf 3c       	or.b	#60,@(r0,gbr)
  30cd38:	08 10       	.word 0x0810
  30cd3a:	16 54       	mov.l	r5,@(16,r6)
  30cd3c:	08 10       	.word 0x0810
  30cd3e:	16 58       	mov.l	r5,@(32,r6)

0030cd40 <lseek>:
#include <unistd.h>
#include <gint/fs.h>
#include <errno.h>

off_t lseek(int fd, off_t offset, int whence)
{
  30cd40:	2f 86       	mov.l	r8,@-r15
  30cd42:	2f e6       	mov.l	r14,@-r15
  30cd44:	4f 22       	sts.l	pr,@-r15
  30cd46:	7f f0       	add	#-16,r15
  30cd48:	6e f3       	mov	r15,r14
  30cd4a:	61 e3       	mov	r14,r1
  30cd4c:	71 d0       	add	#-48,r1
  30cd4e:	11 4e       	mov.l	r4,@(56,r1)
  30cd50:	61 e3       	mov	r14,r1
  30cd52:	71 d0       	add	#-48,r1
  30cd54:	11 5d       	mov.l	r5,@(52,r1)
  30cd56:	61 e3       	mov	r14,r1
  30cd58:	71 d0       	add	#-48,r1
  30cd5a:	11 6c       	mov.l	r6,@(48,r1)
	if(whence != SEEK_SET && whence != SEEK_CUR && whence != SEEK_END) {
  30cd5c:	61 e3       	mov	r14,r1
  30cd5e:	71 d0       	add	#-48,r1
  30cd60:	52 1c       	mov.l	@(48,r1),r2
  30cd62:	e1 03       	mov	#3,r1
  30cd64:	32 10       	cmp/eq	r1,r2
  30cd66:	89 11       	bt	30cd8c <lseek+0x4c>
  30cd68:	61 e3       	mov	r14,r1
  30cd6a:	71 d0       	add	#-48,r1
  30cd6c:	52 1c       	mov.l	@(48,r1),r2
  30cd6e:	e1 01       	mov	#1,r1
  30cd70:	32 10       	cmp/eq	r1,r2
  30cd72:	89 0b       	bt	30cd8c <lseek+0x4c>
  30cd74:	61 e3       	mov	r14,r1
  30cd76:	71 d0       	add	#-48,r1
  30cd78:	52 1c       	mov.l	@(48,r1),r2
  30cd7a:	e1 02       	mov	#2,r1
  30cd7c:	32 10       	cmp/eq	r1,r2
  30cd7e:	89 05       	bt	30cd8c <lseek+0x4c>
		errno = EINVAL;
  30cd80:	d1 1f       	mov.l	30ce00 <lseek+0xc0>,r1	! 81015d0 <errno>
  30cd82:	e2 06       	mov	#6,r2
  30cd84:	21 22       	mov.l	r2,@r1
		return (off_t)-1;
  30cd86:	e1 ff       	mov	#-1,r1
  30cd88:	a0 32       	bra	30cdf0 <lseek+0xb0>
  30cd8a:	00 09       	nop	
	}

	fs_descriptor_t const *d = fs_get_descriptor(fd);
  30cd8c:	68 e3       	mov	r14,r8
  30cd8e:	78 d0       	add	#-48,r8
  30cd90:	61 e3       	mov	r14,r1
  30cd92:	71 d0       	add	#-48,r1
  30cd94:	54 1e       	mov.l	@(56,r1),r4
  30cd96:	d1 1b       	mov.l	30ce04 <lseek+0xc4>,r1	! 30ca80 <fs_get_descriptor>
  30cd98:	41 0b       	jsr	@r1
  30cd9a:	00 09       	nop	
  30cd9c:	61 03       	mov	r0,r1
  30cd9e:	18 1f       	mov.l	r1,@(60,r8)
	if(!d) {
  30cda0:	61 e3       	mov	r14,r1
  30cda2:	71 d0       	add	#-48,r1
  30cda4:	51 1f       	mov.l	@(60,r1),r1
  30cda6:	21 18       	tst	r1,r1
  30cda8:	8b 05       	bf	30cdb6 <lseek+0x76>
		errno = EBADF;
  30cdaa:	d1 15       	mov.l	30ce00 <lseek+0xc0>,r1	! 81015d0 <errno>
  30cdac:	e2 0d       	mov	#13,r2
  30cdae:	21 22       	mov.l	r2,@r1
		return (ssize_t)-1;
  30cdb0:	e1 ff       	mov	#-1,r1
  30cdb2:	a0 1d       	bra	30cdf0 <lseek+0xb0>
  30cdb4:	00 09       	nop	
	}

	if(d->type->lseek)
  30cdb6:	61 e3       	mov	r14,r1
  30cdb8:	71 d0       	add	#-48,r1
  30cdba:	51 1f       	mov.l	@(60,r1),r1
  30cdbc:	61 12       	mov.l	@r1,r1
  30cdbe:	51 12       	mov.l	@(8,r1),r1
  30cdc0:	21 18       	tst	r1,r1
  30cdc2:	89 14       	bt	30cdee <lseek+0xae>
		return d->type->lseek(d->data, offset, whence);
  30cdc4:	61 e3       	mov	r14,r1
  30cdc6:	71 d0       	add	#-48,r1
  30cdc8:	51 1f       	mov.l	@(60,r1),r1
  30cdca:	61 12       	mov.l	@r1,r1
  30cdcc:	51 12       	mov.l	@(8,r1),r1
  30cdce:	62 e3       	mov	r14,r2
  30cdd0:	72 d0       	add	#-48,r2
  30cdd2:	52 2f       	mov.l	@(60,r2),r2
  30cdd4:	57 21       	mov.l	@(4,r2),r7
  30cdd6:	63 e3       	mov	r14,r3
  30cdd8:	73 d0       	add	#-48,r3
  30cdda:	62 e3       	mov	r14,r2
  30cddc:	72 d0       	add	#-48,r2
  30cdde:	56 3c       	mov.l	@(48,r3),r6
  30cde0:	55 2d       	mov.l	@(52,r2),r5
  30cde2:	64 73       	mov	r7,r4
  30cde4:	41 0b       	jsr	@r1
  30cde6:	00 09       	nop	
  30cde8:	61 03       	mov	r0,r1
  30cdea:	a0 01       	bra	30cdf0 <lseek+0xb0>
  30cdec:	00 09       	nop	

	/* No seek function: cannot seek */
	return 0;
  30cdee:	e1 00       	mov	#0,r1
}
  30cdf0:	60 13       	mov	r1,r0
  30cdf2:	7e 10       	add	#16,r14
  30cdf4:	6f e3       	mov	r14,r15
  30cdf6:	4f 26       	lds.l	@r15+,pr
  30cdf8:	6e f6       	mov.l	@r15+,r14
  30cdfa:	68 f6       	mov.l	@r15+,r8
  30cdfc:	00 0b       	rts	
  30cdfe:	00 09       	nop	
  30ce00:	08 10       	.word 0x0810
  30ce02:	15 d0       	mov.l	r13,@(0,r5)
  30ce04:	00 30       	.word 0x0030
  30ce06:	ca 80       	xor	#128,r0

0030ce08 <read>:
#include <unistd.h>
#include <gint/fs.h>
#include <errno.h>

ssize_t read(int fd, void *buf, size_t size)
{
  30ce08:	2f 86       	mov.l	r8,@-r15
  30ce0a:	2f e6       	mov.l	r14,@-r15
  30ce0c:	4f 22       	sts.l	pr,@-r15
  30ce0e:	7f f0       	add	#-16,r15
  30ce10:	6e f3       	mov	r15,r14
  30ce12:	61 e3       	mov	r14,r1
  30ce14:	71 d0       	add	#-48,r1
  30ce16:	11 4e       	mov.l	r4,@(56,r1)
  30ce18:	61 e3       	mov	r14,r1
  30ce1a:	71 d0       	add	#-48,r1
  30ce1c:	11 5d       	mov.l	r5,@(52,r1)
  30ce1e:	61 e3       	mov	r14,r1
  30ce20:	71 d0       	add	#-48,r1
  30ce22:	11 6c       	mov.l	r6,@(48,r1)
	fs_descriptor_t const *d = fs_get_descriptor(fd);
  30ce24:	68 e3       	mov	r14,r8
  30ce26:	78 d0       	add	#-48,r8
  30ce28:	61 e3       	mov	r14,r1
  30ce2a:	71 d0       	add	#-48,r1
  30ce2c:	54 1e       	mov.l	@(56,r1),r4
  30ce2e:	d1 1a       	mov.l	30ce98 <read+0x90>,r1	! 30ca80 <fs_get_descriptor>
  30ce30:	41 0b       	jsr	@r1
  30ce32:	00 09       	nop	
  30ce34:	61 03       	mov	r0,r1
  30ce36:	18 1f       	mov.l	r1,@(60,r8)
	if(!d) {
  30ce38:	61 e3       	mov	r14,r1
  30ce3a:	71 d0       	add	#-48,r1
  30ce3c:	51 1f       	mov.l	@(60,r1),r1
  30ce3e:	21 18       	tst	r1,r1
  30ce40:	8b 05       	bf	30ce4e <read+0x46>
		errno = EBADF;
  30ce42:	d1 16       	mov.l	30ce9c <read+0x94>,r1	! 81015d0 <errno>
  30ce44:	e2 0d       	mov	#13,r2
  30ce46:	21 22       	mov.l	r2,@r1
		return (ssize_t)-1;
  30ce48:	e1 ff       	mov	#-1,r1
  30ce4a:	a0 1d       	bra	30ce88 <read+0x80>
  30ce4c:	00 09       	nop	
	}

	if(d->type->read)
  30ce4e:	61 e3       	mov	r14,r1
  30ce50:	71 d0       	add	#-48,r1
  30ce52:	51 1f       	mov.l	@(60,r1),r1
  30ce54:	61 12       	mov.l	@r1,r1
  30ce56:	61 12       	mov.l	@r1,r1
  30ce58:	21 18       	tst	r1,r1
  30ce5a:	89 14       	bt	30ce86 <read+0x7e>
		return d->type->read(d->data, buf, size);
  30ce5c:	61 e3       	mov	r14,r1
  30ce5e:	71 d0       	add	#-48,r1
  30ce60:	51 1f       	mov.l	@(60,r1),r1
  30ce62:	61 12       	mov.l	@r1,r1
  30ce64:	61 12       	mov.l	@r1,r1
  30ce66:	62 e3       	mov	r14,r2
  30ce68:	72 d0       	add	#-48,r2
  30ce6a:	52 2f       	mov.l	@(60,r2),r2
  30ce6c:	57 21       	mov.l	@(4,r2),r7
  30ce6e:	63 e3       	mov	r14,r3
  30ce70:	73 d0       	add	#-48,r3
  30ce72:	62 e3       	mov	r14,r2
  30ce74:	72 d0       	add	#-48,r2
  30ce76:	56 3c       	mov.l	@(48,r3),r6
  30ce78:	55 2d       	mov.l	@(52,r2),r5
  30ce7a:	64 73       	mov	r7,r4
  30ce7c:	41 0b       	jsr	@r1
  30ce7e:	00 09       	nop	
  30ce80:	61 03       	mov	r0,r1
  30ce82:	a0 01       	bra	30ce88 <read+0x80>
  30ce84:	00 09       	nop	

	/* No read function: we can't read anything */
	return 0;
  30ce86:	e1 00       	mov	#0,r1
}
  30ce88:	60 13       	mov	r1,r0
  30ce8a:	7e 10       	add	#16,r14
  30ce8c:	6f e3       	mov	r14,r15
  30ce8e:	4f 26       	lds.l	@r15+,pr
  30ce90:	6e f6       	mov.l	@r15+,r14
  30ce92:	68 f6       	mov.l	@r15+,r8
  30ce94:	00 0b       	rts	
  30ce96:	00 09       	nop	
  30ce98:	00 30       	.word 0x0030
  30ce9a:	ca 80       	xor	#128,r0
  30ce9c:	08 10       	.word 0x0810
  30ce9e:	15 d0       	mov.l	r13,@(0,r5)

0030cea0 <write>:
#include <unistd.h>
#include <gint/fs.h>
#include <errno.h>

ssize_t write(int fd, const void *buf, size_t size)
{
  30cea0:	2f 86       	mov.l	r8,@-r15
  30cea2:	2f e6       	mov.l	r14,@-r15
  30cea4:	4f 22       	sts.l	pr,@-r15
  30cea6:	7f f0       	add	#-16,r15
  30cea8:	6e f3       	mov	r15,r14
  30ceaa:	61 e3       	mov	r14,r1
  30ceac:	71 d0       	add	#-48,r1
  30ceae:	11 4e       	mov.l	r4,@(56,r1)
  30ceb0:	61 e3       	mov	r14,r1
  30ceb2:	71 d0       	add	#-48,r1
  30ceb4:	11 5d       	mov.l	r5,@(52,r1)
  30ceb6:	61 e3       	mov	r14,r1
  30ceb8:	71 d0       	add	#-48,r1
  30ceba:	11 6c       	mov.l	r6,@(48,r1)
	fs_descriptor_t const *d = fs_get_descriptor(fd);
  30cebc:	68 e3       	mov	r14,r8
  30cebe:	78 d0       	add	#-48,r8
  30cec0:	61 e3       	mov	r14,r1
  30cec2:	71 d0       	add	#-48,r1
  30cec4:	54 1e       	mov.l	@(56,r1),r4
  30cec6:	d1 1b       	mov.l	30cf34 <write+0x94>,r1	! 30ca80 <fs_get_descriptor>
  30cec8:	41 0b       	jsr	@r1
  30ceca:	00 09       	nop	
  30cecc:	61 03       	mov	r0,r1
  30cece:	18 1f       	mov.l	r1,@(60,r8)
	if(!d) {
  30ced0:	61 e3       	mov	r14,r1
  30ced2:	71 d0       	add	#-48,r1
  30ced4:	51 1f       	mov.l	@(60,r1),r1
  30ced6:	21 18       	tst	r1,r1
  30ced8:	8b 05       	bf	30cee6 <write+0x46>
		errno = EBADF;
  30ceda:	d1 17       	mov.l	30cf38 <write+0x98>,r1	! 81015d0 <errno>
  30cedc:	e2 0d       	mov	#13,r2
  30cede:	21 22       	mov.l	r2,@r1
		return (ssize_t)-1;
  30cee0:	e1 ff       	mov	#-1,r1
  30cee2:	a0 1f       	bra	30cf24 <write+0x84>
  30cee4:	00 09       	nop	
	}

	if(d->type->write)
  30cee6:	61 e3       	mov	r14,r1
  30cee8:	71 d0       	add	#-48,r1
  30ceea:	51 1f       	mov.l	@(60,r1),r1
  30ceec:	61 12       	mov.l	@r1,r1
  30ceee:	51 11       	mov.l	@(4,r1),r1
  30cef0:	21 18       	tst	r1,r1
  30cef2:	89 14       	bt	30cf1e <write+0x7e>
		return d->type->write(d->data, buf, size);
  30cef4:	61 e3       	mov	r14,r1
  30cef6:	71 d0       	add	#-48,r1
  30cef8:	51 1f       	mov.l	@(60,r1),r1
  30cefa:	61 12       	mov.l	@r1,r1
  30cefc:	51 11       	mov.l	@(4,r1),r1
  30cefe:	62 e3       	mov	r14,r2
  30cf00:	72 d0       	add	#-48,r2
  30cf02:	52 2f       	mov.l	@(60,r2),r2
  30cf04:	57 21       	mov.l	@(4,r2),r7
  30cf06:	63 e3       	mov	r14,r3
  30cf08:	73 d0       	add	#-48,r3
  30cf0a:	62 e3       	mov	r14,r2
  30cf0c:	72 d0       	add	#-48,r2
  30cf0e:	56 3c       	mov.l	@(48,r3),r6
  30cf10:	55 2d       	mov.l	@(52,r2),r5
  30cf12:	64 73       	mov	r7,r4
  30cf14:	41 0b       	jsr	@r1
  30cf16:	00 09       	nop	
  30cf18:	61 03       	mov	r0,r1
  30cf1a:	a0 03       	bra	30cf24 <write+0x84>
  30cf1c:	00 09       	nop	

	/* No write function: discard the contents but show no error */
	return size;
  30cf1e:	61 e3       	mov	r14,r1
  30cf20:	71 d0       	add	#-48,r1
  30cf22:	51 1c       	mov.l	@(48,r1),r1
}
  30cf24:	60 13       	mov	r1,r0
  30cf26:	7e 10       	add	#16,r14
  30cf28:	6f e3       	mov	r14,r15
  30cf2a:	4f 26       	lds.l	@r15+,pr
  30cf2c:	6e f6       	mov.l	@r15+,r14
  30cf2e:	68 f6       	mov.l	@r15+,r8
  30cf30:	00 0b       	rts	
  30cf32:	00 09       	nop	
  30cf34:	00 30       	.word 0x0030
  30cf36:	ca 80       	xor	#128,r0
  30cf38:	08 10       	.word 0x0810
  30cf3a:	15 d0       	mov.l	r13,@(0,r5)

0030cf3c <calloc>:
  30cf3c:	2f 86       	mov.l	r8,@-r15
  30cf3e:	34 55       	dmulu.l	r5,r4
  30cf40:	2f 96       	mov.l	r9,@-r15
  30cf42:	01 0a       	sts	mach,r1
  30cf44:	4f 22       	sts.l	pr,@-r15
  30cf46:	21 18       	tst	r1,r1
  30cf48:	09 1a       	sts	macl,r9
  30cf4a:	8f 06       	bf.s	30cf5a <calloc+0x1e>
  30cf4c:	e8 00       	mov	#0,r8
  30cf4e:	d0 09       	mov.l	30cf74 <calloc+0x38>,r0	! 30af64 <malloc>
  30cf50:	40 0b       	jsr	@r0
  30cf52:	04 1a       	sts	macl,r4
  30cf54:	20 08       	tst	r0,r0
  30cf56:	8f 05       	bf.s	30cf64 <calloc+0x28>
  30cf58:	68 03       	mov	r0,r8
  30cf5a:	60 83       	mov	r8,r0
  30cf5c:	4f 26       	lds.l	@r15+,pr
  30cf5e:	69 f6       	mov.l	@r15+,r9
  30cf60:	00 0b       	rts	
  30cf62:	68 f6       	mov.l	@r15+,r8
  30cf64:	64 03       	mov	r0,r4
  30cf66:	d0 04       	mov.l	30cf78 <calloc+0x3c>,r0	! 30af00 <memset>
  30cf68:	66 93       	mov	r9,r6
  30cf6a:	40 0b       	jsr	@r0
  30cf6c:	e5 00       	mov	#0,r5
  30cf6e:	af f5       	bra	30cf5c <calloc+0x20>
  30cf70:	60 83       	mov	r8,r0
  30cf72:	00 09       	nop	
  30cf74:	00 30       	.word 0x0030
  30cf76:	af 64       	bra	30ce42 <read+0x3a>
  30cf78:	00 30       	.word 0x0030
  30cf7a:	af 00       	bra	30cd7e <lseek+0x3e>

Disassembly of section .gint.blocks:

0030cf80 <inth_dma_ae>:
  30cf80:	d4 06       	mov.l	30cf9c <inth_dma_ae+0x1c>,r4	! 1020
  30cf82:	44 ce       	ldc	r4,r4_bank
  30cf84:	01 32       	stc	ssr,r1
  30cf86:	41 0e       	ldc	r1,sr
  30cf88:	d0 03       	mov.l	30cf98 <inth_dma_ae+0x18>,r0	! 3091d4 <gint_panic>
  30cf8a:	40 2b       	jmp	@r0
  30cf8c:	00 09       	nop	
	...
  30cf96:	00 00       	.word 0x0000
  30cf98:	00 30       	.word 0x0030
  30cf9a:	91 d4       	mov.w	30d146 <img_example+0x3e>,r1
  30cf9c:	00 00       	.word 0x0000
  30cf9e:	10 20       	mov.l	r2,@(0,r0)

0030cfa0 <intc_generic_handler>:
  30cfa0:	c7 01       	mova	30cfa8 <intc_generic_handler+0x8>,r0
  30cfa2:	d1 06       	mov.l	30cfbc <intc_generic_handler+0x1c>,r1	! 0 <sxyram>
  30cfa4:	41 2b       	jmp	@r1
  30cfa6:	64 03       	mov	r0,r4
	...

0030cfc0 <gint_inth_7305>:
  30cfc0:	4f 22       	sts.l	pr,@-r15
  30cfc2:	4f 13       	stc.l	gbr,@-r15
  30cfc4:	4f 02       	sts.l	mach,@-r15
  30cfc6:	4f 12       	sts.l	macl,@-r15
  30cfc8:	d0 0c       	mov.l	30cffc <.jump_over+0x24>,r0	! ff000028
  30cfca:	60 02       	mov.l	@r0,r0
  30cfcc:	e1 04       	mov	#4,r1
  30cfce:	41 18       	shll8	r1
  30cfd0:	30 18       	sub	r1,r0
  30cfd2:	70 28       	add	#40,r0
  30cfd4:	00 03       	bsrf	r0
  30cfd6:	00 09       	nop	

0030cfd8 <.jump_over>:
  30cfd8:	4f 16       	lds.l	@r15+,macl
  30cfda:	4f 06       	lds.l	@r15+,mach
  30cfdc:	4f 17       	ldc.l	@r15+,gbr
  30cfde:	4f 26       	lds.l	@r15+,pr
  30cfe0:	00 2b       	rte	
  30cfe2:	00 09       	nop	
	...
  30cffc:	ff 00       	.word 0xff00
  30cffe:	00 28       	clrmac	

Disassembly of section .ilram:

e5200000 <rilram>:
e5200000:	4f 83       	stc.l	r0_bank,@-r15
e5200002:	4f 93       	stc.l	r1_bank,@-r15
e5200004:	4f a3       	stc.l	r2_bank,@-r15
e5200006:	4f b3       	stc.l	r3_bank,@-r15
e5200008:	4f c3       	stc.l	r4_bank,@-r15
e520000a:	4f d3       	stc.l	r5_bank,@-r15
e520000c:	4f e3       	stc.l	r6_bank,@-r15
e520000e:	4f f3       	stc.l	r7_bank,@-r15
e5200010:	4f 43       	stc.l	spc,@-r15
e5200012:	4f 33       	stc.l	ssr,@-r15
e5200014:	4f 03       	stc.l	sr,@-r15
e5200016:	44 8e       	ldc	r4,r0_bank
e5200018:	01 02       	stc	sr,r1
e520001a:	d0 15       	mov.l	e5200070 <.SR_clear_RB_BL>,r0	! cfffffff
e520001c:	21 09       	and	r0,r1
e520001e:	d2 16       	mov.l	e5200078 <.gint>,r2	! 81017d0 <gint>
e5200020:	60 22       	mov.l	@r2,r0
e5200022:	c8 01       	tst	#1,r0
e5200024:	8b 04       	bf	e5200030 <.set_imask>
e5200026:	50 23       	mov.l	@(12,r2),r0
e5200028:	88 06       	cmp/eq	#6,r0
e520002a:	89 01       	bt	e5200030 <.set_imask>
e520002c:	a0 02       	bra	e5200034 <.load_sr>
e520002e:	00 09       	nop	

e5200030 <.set_imask>:
e5200030:	d0 10       	mov.l	e5200074 <.SR_set_IMASK>,r0	! f0
e5200032:	21 0b       	or	r0,r1

e5200034 <.load_sr>:
e5200034:	41 0e       	ldc	r1,sr
e5200036:	4f 22       	sts.l	pr,@-r15
e5200038:	54 01       	mov.l	@(4,r0),r4
e520003a:	55 02       	mov.l	@(8,r0),r5
e520003c:	56 03       	mov.l	@(12,r0),r6
e520003e:	57 04       	mov.l	@(16,r0),r7
e5200040:	60 02       	mov.l	@r0,r0
e5200042:	40 0b       	jsr	@r0
e5200044:	00 09       	nop	
e5200046:	4f 26       	lds.l	@r15+,pr
e5200048:	4f 07       	ldc.l	@r15+,sr
e520004a:	00 82       	stc	r0_bank,r0
e520004c:	4f 37       	ldc.l	@r15+,ssr
e520004e:	4f 47       	ldc.l	@r15+,spc
e5200050:	4f f7       	ldc.l	@r15+,r7_bank
e5200052:	4f e7       	ldc.l	@r15+,r6_bank
e5200054:	4f d7       	ldc.l	@r15+,r5_bank
e5200056:	4f c7       	ldc.l	@r15+,r4_bank
e5200058:	4f b7       	ldc.l	@r15+,r3_bank
e520005a:	4f a7       	ldc.l	@r15+,r2_bank
e520005c:	4f 97       	ldc.l	@r15+,r1_bank
e520005e:	00 0b       	rts	
e5200060:	4f 87       	ldc.l	@r15+,r0_bank
e5200062:	00 09       	nop	
e5200064:	00 09       	nop	
e5200066:	00 09       	nop	
e5200068:	00 09       	nop	
e520006a:	00 09       	nop	
e520006c:	00 09       	nop	
e520006e:	00 09       	nop	

e5200070 <.SR_clear_RB_BL>:
e5200070:	cf ff       	or.b	#255,@(r0,gbr)
e5200072:	ff ff       	.word 0xffff

e5200074 <.SR_set_IMASK>:
e5200074:	00 00       	.word 0x0000
e5200076:	00 f0       	.word 0x00f0

e5200078 <.gint>:
e5200078:	08 10       	.word 0x0810
e520007a:	17 d0       	mov.l	r13,@(0,r7)
e520007c:	00 09       	nop	
e520007e:	00 09       	nop	
